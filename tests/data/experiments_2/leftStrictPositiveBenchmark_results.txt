    |\^/|     Maple 2022 (APPLE ARM64 MACOS)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2022
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
> interface(echo=0);
                                       1

                                       8

                                [SemiAlgebraic]

bound_info1 := proc(x, ineq, eps)
local i1, i2, j1, j2;
    if nops(ineq) = 2 then
        i1 := simplify(op(ineq[1])[1]);
        i2 := simplify(op(ineq[1])[2]);
        j1 := simplify(op(ineq[2])[1]);
        j2 := simplify(op(ineq[2])[2]);
        if evalb(i1 = x) then
            if evalb(j1 = x) then
                return [min(i2, j2) + eps, max(i2, j2) - eps]
            else return [min(i2, j1) + eps, max(i2, j1) - eps]
            end if
        else
            if evalb(j1 = x) then
                return [min(i1, j2) + eps, max(i1, j2) - eps]
            else return [min(i1, j1) + eps, max(i1, j1) - eps]
            end if
        end if
    else
        i1 := simplify(op(ineq[1])[1]);
        j1 := simplify(op(ineq[1])[2]);
        if type(ineq[1], `=`) then
            if evalb(i1 = x) then return [j1, j1]
            else return [i1, i1]
            end if
        end if;
        if type(ineq[1], `<=`) then
            if evalb(i1 = x) then return [-infinity, j1 - eps]
            else return [i1 + eps, infinity]
            end if
        end if
    end if
end proc

gen_nat_gens := proc(basis, x)
local S, intervals, size, i, out;
    S := SolveTools:-SemiAlgebraic(map(f -> 0 <= f, basis), [x]);
    intervals := map(ineq -> bound_info1(x, ineq, 0), S);
    size := nops(intervals);
    out := [];
    if size = 0 then return out end if;
    out := [x - intervals[1][1]];
    for i to size - 1 do
        out := [op(out), (x - intervals[i][2])*(x - intervals[i + 1][1])]
    end do;
    out := [op(out), -x + intervals[size][2]];
    return out
end proc

                                   [Generate]

genRandomPoint := proc(lowerbound, upperbound, _denominator)
    return RandomTools:-Generate(rational(range = lowerbound .. upperbound,
        denominator = _denominator))
end proc

intervalsGenerator := proc(
x, num_isolated_points, lowerbound, upperbound, _denominator)
local i, _lowerbound, _uppperbound, a, b;
    _lowerbound := lowerbound;
    _uppperbound := upperbound;
    return [seq(
        if evalb(modp(rand(), 2) = 0) then
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            b := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := max(a, b);
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            if evalb(a = b) then [a] else [min(a, b), max(a, b)] end if
        else
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := a;
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            [a]
        end if, i = 1 .. num_isolated_points)]
end proc

getIsolatedPoints := proc(intervals)
local isolated_points, i;
    isolated_points := [];
    for i to nops(intervals) do
        isolated_points := [op(isolated_points), op(intervals[i])]
    end do;
    return isolated_points
end proc

uniformBasisGenerator := proc(x, intervals, k)
local i, g1, g2;
    g1 := 1;
    g2 := -1;
    for i to nops(intervals) do
        if nops(intervals[i]) = 1 then
            g2 := g2*(x - intervals[i][1])^(k + 1)
        else
            g1 := g1*(x - intervals[i][1])^k*(x - intervals[i][2])^k;
            g2 := g2*(x - intervals[i][1])^k*(x - intervals[i][2])^k
        end if
    end do;
    if evalb(g1 = 1) then return [x^2, g2] end if;
    return [g1, g2]
end proc

linearBasisGenerator :=

    proc(x, intervals) return uniformBasisGenerator(x, intervals, 1) end proc

                                   [Generate]

genRandomPoint := proc(lowerbound, upperbound, _denominator)
    return RandomTools:-Generate(rational(range = lowerbound .. upperbound,
        denominator = _denominator))
end proc

intervalsGenerator := proc(
x, num_isolated_points, lowerbound, upperbound, _denominator)
local i, _lowerbound, _uppperbound, a, b;
    _lowerbound := lowerbound;
    _uppperbound := upperbound;
    return [seq(
        if evalb(modp(rand(), 2) = 0) then
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            b := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := max(a, b);
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            if evalb(a = b) then [a] else [min(a, b), max(a, b)] end if
        else
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := a;
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            [a]
        end if, i = 1 .. num_isolated_points)]
end proc

getIsolatedPoints := proc(intervals)
local isolated_points, i;
    isolated_points := [];
    for i to nops(intervals) do
        isolated_points := [op(isolated_points), op(intervals[i])]
    end do;
    return isolated_points
end proc

basisNoBoundedPoly := proc(x, intervals, k)
local i, max_point, count_num_roots, g1, g2;
    count_num_roots := 0;
    g1 := 1;
    g2 := -1;
    for i to nops(intervals) do
        if nops(intervals[i]) = 1 then
            max_point := intervals[i][1];
            count_num_roots := count_num_roots + 1;
            g1 := g1*(x - intervals[i][1])^k;
            g2 := g2*(x - intervals[i][1])^k
        else
            max_point := intervals[i][2];
            count_num_roots := count_num_roots + 2;
            g1 := g1*(x - intervals[i][1])^k*(x - intervals[i][2])^k;
            g2 := g2*(x - intervals[i][1])^k*(x - intervals[i][2])^k
        end if
    end do;
    if evalb(count_num_roots mod 2 = 0) then
        g1 := g1*(x - max_point - 1)^k; g2 := g2*(x - max_point - 1)^k
    end if;
    return [g1, g2]
end proc

linearBasisNoBoundedPoly :=

    proc(x, intervals) return basisNoBoundedPoly(x, intervals, 1) end proc

                                   [Generate]

genRandomPoint := proc(lowerbound, upperbound, _denominator)
    return RandomTools:-Generate(rational(range = lowerbound .. upperbound,
        denominator = _denominator))
end proc

intervalsGenerator := proc(
x, num_isolated_points, lowerbound, upperbound, _denominator)
local i, _lowerbound, _uppperbound, a, b;
    _lowerbound := lowerbound;
    _uppperbound := upperbound;
    return [seq(
        if evalb(modp(rand(), 2) = 0) then
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            b := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := max(a, b);
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            if evalb(a = b) then [a] else [min(a, b), max(a, b)] end if
        else
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := a;
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            [a]
        end if, i = 1 .. num_isolated_points)]
end proc

getIsolatedPoints := proc(intervals)
local isolated_points, i;
    isolated_points := [];
    for i to nops(intervals) do
        isolated_points := [op(isolated_points), op(intervals[i])]
    end do;
    return isolated_points
end proc

strictlyLeftPolynomial := proc(x, isolated_points, _denominator)
local lowerbound, upperbound, rational_point;
    lowerbound := isolated_points[1];
    upperbound := isolated_points[nops(isolated_points)];
    rational_point := genRandomPoint(lowerbound, upperbound, _denominator);
    return x - lowerbound + rational_point
end proc

strictlyRightPolynomial := proc(x, isolated_points, _denominator)
local lowerbound, upperbound, rational_point;
    lowerbound := isolated_points[1];
    upperbound := isolated_points[nops(isolated_points)];
    rational_point := genRandomPoint(lowerbound, upperbound, _denominator);
    return -x + rational_point + upperbound
end proc

inbetweenPolynomial := proc(x, isolated_points, _denominator)
local num_isolated_points, choice, a, b;
    num_isolated_points := nops(isolated_points);
    choice := 1 + (rand() mod (num_isolated_points - 1));
    a := genRandomPoint(isolated_points[choice],
        isolated_points[choice + 1], _denominator);
    b := genRandomPoint(isolated_points[choice],
        isolated_points[choice + 1], _denominator);
    while evalb(a = b) do
        a := genRandomPoint(isolated_points[choice],
            isolated_points[choice + 1], _denominator);
        b := genRandomPoint(isolated_points[choice],
            isolated_points[choice + 1], _denominator)
    end do;
    return (x - a)*(x - b)
end proc

getArchimedeanPolynomial := proc(x, isolated_points, offset)
local max_point;
    max_point := max(abs(isolated_points[1]),
        abs(isolated_points[nops(isolated_points)])) + offset;
    return expand(-(x - max_point)*(x + max_point))
end proc

                                [SemiAlgebraic]

                    [SemiAlgebraicSetTools, PolynomialRing]

                              [Maximize, Minimize]

                                     [Text]

                           [Open, Close, WriteString]

_pwd := "/Users/typesarespaces/Documents/GithubProjects/phd-thesis/Documents\
    /Seminars/BeihangUniversity-Fall2021/Weifeng-Notes/Weifeng-Certificates/\
    tests"

  "/Users/typesarespaces/Documents/GithubProjects/phd-thesis/Documents/Seminars/BeihangUniversity-Fall2021/Weifeng-Notes/Weifeng-Certificates/tests"

                            "/Users/typesarespaces"

univsos1 := proc(f)
local s, X;
    X := op(indets(f));
    s := SOSDecomp(expand(f), X, 0);
    return HornerToList1(s)
end proc

Warning, (in SOSDecomp) `s` is implicitly declared local
|univsos/univsos1.mm:54|
SOSDecomp := proc(f, X, prec::integer := 64)
local g, h, S, SEVEN, SODD, newF, s;
    if degree(f) = 0 and f < 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if degree(f) = 0 and 0 <= f then return [[0, [0, 0, f]]] end if;
    if f = 0 then return [[0, [0, 0, 0]]] end if;
    if lcoeff(f, X) < 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if irem(degree(f), 2) = 1 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    else
        if degree(f, X) = 2 then return [[0, SOSDecompDegree2(f, X)]]
        end if;
        g := gcd(f, diff(f, X), 'newF');
        if degree(g) = 1 then
            newF := quo(newF, g, X);
            if degree(newF) = 2 then
                return [[g, [0, 0, 0]], [0, SOSDecompDegree2(newF, X)]]
            else return [[g, [0, 0, 0]], op(SOSDecompSQF(newF, X, prec))]
            end if
        end if;
        S := sqrfree(f);
        SEVEN := map(
            _e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
            ;
        SEVEN := [op(SEVEN), op(map(
            _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if,
            S[2]))];
        SEVEN := remove(member, SEVEN, [1]);
        SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
        if nops(SEVEN) = 0 then return SOSDecompSQF(f, X, prec)
        else
            g := mul(s, s in SEVEN);
            h := S[1]*mul(s, s in SODD);
            return [[g, [0, 0, 0]], op(SOSDecomp(h, X, prec))]
        end if
    end if
end proc

SOSDecompSQF := proc(f, X, prec::integer := 64)
local g, h, content_h, SOS_h, SOS_g;
    g := ConstructGPolynomial(f, X, 10);
    h := expand(f - g[1]*g[2]^2);
    if h <> 0 then
        SOS_g := g;
        SOS_h := SOSDecomp(h, X, prec);
        return [[1, SOS_g], op(SOS_h)]
    else SOS_g := g; return [[0, SOS_g]]
    end if
end proc

SOSDecompDegree2 := proc(f, X)
local a, b, c, mycouple;
    if f = 0 then return [f, 0, 0] end if;
    if degree(f) = 0 and 0 < f then return [0, 0, f] end if;
    if degree(f) = 1 or degree(f) = 0 and f < 0 or coeff(f, X, 2) < 0 or
    0 < coeff(f, X, 1)^2 - 4*coeff(f, X, 2)*coeff(f, X, 0) then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    c, b, a := seq(coeff(f, X, i), i = 0 .. 2);
    return [a, X + 1/2*b/a, c - 1/4*b^2/a]
end proc

ConstructGPolynomial := proc(f, X, myprec := 10)
local i, inv_roots1, smallest, sf, sdf, g, t, df, values, mymin, minimizer,
a, b, c, newt, _interval, count, mybound, boo;
    df := numer(diff(f, X));
    inv_roots1 := map(s -> rhs(s),
        RootFinding[Isolate](df, X, digits = myprec, output = interval));
    values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
    mymin := min(op(values));
    for i to nops(inv_roots1) do
        if subs(X = inv_roots1[i][1], f) = mymin then
            minimizer := inv_roots1[i]; _interval := inv_roots1[i]
        end if
    end do;
    if myprec = 0 then t := round(minimizer[1])
    else
        if minimizer[1] < 0 then t := ceil(minimizer[1])
        else t := floor(minimizer[1])
        end if
    end if;
    sf := subs(X = t, f);
    if sf = 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, diff(f, X));
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + 1/4*t^2*sdf^2/sf;
    b := sdf - 1/2*sdf^2*t/sf;
    boo := CheckTvalue(t, a, b, c, f, X);
    if boo then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
    if 0 < minimizer[1] - t then mybound := floor(log[2](minimizer[1] - t))
    else mybound := myprec
    end if;
    count := mybound;
    t := t + 2^mybound;
    sf := subs(X = t, f);
    sdf := subs(X = t, diff(f, X));
    while boo = false and 0 <= sf and t < minimizer[2] and sdf <= 0 do
        a := 1/4*sdf^2/sf;
        c := sf - sdf*t + 1/4*t^2*sdf^2/sf;
        b := sdf - 1/2*sdf^2*t/sf;
        boo := CheckTvalue(t, a, b, c, f, X);
        if boo = true then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
        newt := t + 2^count;
        sf := subs(X = newt, f);
        sdf := subs(X = newt, diff(f, X));
        while minimizer[2] <= newt or sf <= 0 do
            count := count - 1; newt := t + 2^count
        end do;
        t := newt
    end do;
    return ConstructGPolynomialRec(f, X, 2*myprec)
end proc

getcoeffs := proc(f, X)
local c, nc, dc, lcmf;
    c := PolynomialTools:-CoefficientVector(f, X);
    nc, dc := MTM[numden](c);
    lcmf := ilcm(op(convert(dc, list)));
    return Vector(lcmf*c)
end proc

ConstructGPolynomialRec := proc(f, X, myprec, useNewton::boolean := false,
aNewton::rational := 0, bNewton::rational := 0)
local mid, fcoeffs, newaNewton, newbNewton, dfa, dfb, i, inv_roots1,
smallest, sf, sdf, g, t, df, values, mymin, minimizer, a, b, c, _interval;
    df := convert(diff(f, X), horner);
    if useNewton then
        mid := 1/2*aNewton + 1/2*bNewton;
        fcoeffs := getcoeffs(diff(f, X), X);
        newaNewton, newbNewton :=
            MyUnivariateNewton(fcoeffs, aNewton, bNewton, mid);
        if 0 < newaNewton then t := newbNewton else t := newaNewton end if
    else
        inv_roots1 := fgbrs:-rs_isolate_uni(primpart(diff(f, X)), X,
            precision = myprec, verbose = 0);
        values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
        mymin := min(op(values));
        for i to nops(inv_roots1) do
            if subs(X = inv_roots1[i][1], f) = mymin then
                minimizer := inv_roots1[i]; _interval := inv_roots1[i]
            end if
        end do;
        newaNewton := minimizer[1];
        newbNewton := minimizer[2];
        t := minimizer[1]
    end if;
    sf := subs(X = t, f);
    if sf = 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, df);
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + t^2*a;
    b := sdf - 2*t*a;
    if CheckTvalue(t, a, b, c, f, X) then
        return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if;
    return ConstructGPolynomialRec(f, X, 2*myprec, false, newaNewton,
        newbNewton)
end proc

NaiveBolzano := proc(f, X)
local df, inv_roots1, values, mymin, i, minimizer, _interval, t1, t2;
    df := convert(diff(f, X), horner);
    inv_roots1 := fgbrs:-rs_isolate_uni(primpart(diff(f, X)), X,
        precision = 2, verbose = 0);
    values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
    mymin := min(op(values));
    for i to nops(inv_roots1) do
        if subs(X = inv_roots1[i][1], f) = mymin then
            minimizer := inv_roots1[i]; _interval := inv_roots1[i]
        end if
    end do;
    t1 := minimizer[1];
    t2 := minimizer[2];
    return BolzanoRec(f, df, X, t1, t2)
end proc

BolzanoRec := proc(f, df, X, t1, t2)
local t, sf, sdf, a, c, b;
    t := 1/2*t1 + 1/2*t2;
    sf := subs(X = t, f);
    if sf = 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, df);
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + t^2*a;
    b := sdf - 2*a*t;
    if sdf = 0 then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
    if 0 < sdf then
        if CheckTvalue(t, a, b, c, f, X) then
            return [1/sf, 1/2*sdf*(X - t) + sf, 0]
        end if;
        return BolzanoRec(f, df, X, t1, t)
    end if;
    if CheckTvalue(t, a, b, c, f, X) then
        return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if;
    return BolzanoRec(f, df, X, t, t2)
end proc

ConFrac := proc(t, f, df, X, sf, sdf, myprec)
local newt, newsf, newsdf, a, b, c;
    newt := confrac2rat(convert(t, confrac, myprec));
    lprint(newt);
    newsf := subs(X = t, f);
    newsdf := subs(X = t, df);
    a := 1/4*newsdf^2/newsf;
    c := newsf - newsdf*newt + newt^2*a;
    b := newsdf - 2*a*newt;
    if CheckTvalue(newt, a, b, c, f, X) then
        return [1/newsf, 1/2*newsdf*(X - newt) + newsf, 0]
    else return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if
end proc

SmallerApprox := proc(t, f, df, X, sf, sdf)
local newt, newsf, newsdf, a, b, c, myprec;
    myprec := floor(1/8*BitRat(t));
    if 0 < t then newt := BinaryApproximationDown(t, myprec)
    else newt := BinaryApproximationUp(t, myprec)
    end if;
    newsf := subs(X = t, f);
    newsdf := subs(X = t, df);
    a := 1/4*newsdf^2/newsf;
    c := newsf - newsdf*newt + newt^2*a;
    b := newsdf - 2*a*newt;
    if CheckTvalue(newt, a, b, c, f, X) then
        lprint("After rounding ", newt);
        return [1/newsf, 1/2*newsdf*(X - newt) + newsf, 0]
    else return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if
end proc

Warning, (in CheckTvalue) `s` is implicitly declared local
|univsos/univsos1.mm:370|
CheckTvalue := proc(t, a, b, c, f, X)
local F, S, SODD, newg, g, newF, s;
    if a = 0 and b <> 0 or a = 0 and b = 0 and c < 0 then return false
    end if;
    if a <> 0 and 0 < b^2 - 4*a*c then return false end if;
    F := f - a*X^2 - b*X - c;
    g := gcd(F, diff(F, X), 'newF');
    if degree(g) = 1 then
        newF := quo(newF, g, X);
        if 0 < nops(fgbrs:-rs_isolate_uni(numer(newF), X, precision = 1))
        then return false
        else return true
        end if
    else
        S := sqrfree(F);
        SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
        SODD := mul(s, s in SODD);
        if 0 < nops(fgbrs:-rs_isolate_uni(SODD, X, precision = 1)) then
            return false
        else return true
        end if
    end if
end proc

Warning, (in oldCheckTvalue) `s` is implicitly declared local
|univsos/univsos1.mm:402|
oldCheckTvalue := proc(t, g, f, X)
local a, b, c, F, S, SODD, newg, s;
    a, b, c := coeff(g, X, 2), coeff(g, X, 1), coeff(g, X, 0);
    if a = 0 and b <> 0 or a = 0 and b = 0 and c < 0 then return false
    end if;
    if a <> 0 and 0 < b^2 - 4*c*a then return false end if;
    F := normal(f - g);
    S := sqrfree(F);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    SODD := mul(s, s in SODD);
    if 0 < nops(fgbrs:-rs_isolate_uni(primpart(SODD), X, precision = 1))
    then return false
    else return true
    end if
end proc

MyNewtonIterator := proc(_interval, pol)
local a, b, c, X, newa;
    a := _interval[1];
    b := _interval[2];
    X := op(1, indets(pol));
    newa := a - subs({X = a}, pol)/subs({X = a}, diff(pol, X));
    return [newa, b]
end proc

BolzanoIterator := proc(_interval, pol)
local a, b, c, X, sc;
    a := _interval[1];
    b := _interval[2];
    c := 1/2*a + 1/2*b;
    X := op(1, indets(pol));
    sc := eval(pol, X = c);
    if sc = 0 then return [a, c] end if;
    if sign(sc) = sign(eval(pol, X = a)) then return [c, b]
    else return [a, c]
    end if
end proc

Warning, (in UnivariateSumOfSquaresDecItv) `i` is implicitly declared local
|univsos/univsos1.mm:468|
Warning, (in UnivariateSumOfSquaresDecItv) `c` is implicitly declared local
|univsos/univsos1.mm:476|
Warning, (in UnivariateSumOfSquaresDecItv) `si` is implicitly declared local
|univsos/univsos1.mm:479|
Warning, (in UnivariateSumOfSquaresDecItv) `r` is implicitly declared local
|univsos/univsos1.mm:484|
Warning, (in UnivariateSumOfSquaresDecItv) `j` is implicitly declared local
|univsos/univsos1.mm:484|
Warning, (in UnivariateSumOfSquaresDecItv) `t` is implicitly declared local
|univsos/univsos1.mm:485|
UnivariateSumOfSquaresDecItv := proc(f, a, b)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time();
    sosq := SOSDecomp(q, y, 2);
    tcmp := time() - ti;
    lprint(tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

HornerToList := proc(sos)
local hd, tl, p, c, q, d;
    if nops(sos) = 0 then return [] end if;
    if nops(sos) = 1 then
        p, c, q, d := sos[1][1], op(sos[1][2]);
        if c = 0 and d = 0 then return [[1, p]] end if;
        if c = 0 then return [[1, p], [d, 1]] end if;
        if d = 0 then return [[1, p], [c, q]] end if;
        return [[1, p], [c, q], [d, 1]]
    end if;
    hd, tl := HdTailList(sos);
    p, c, q, d := hd[1], op(hd[2]);
    if c = 0 and d = 0 then return [op(MulPolList2(p, HornerToList(tl)))]
    end if;
    if c = 0 then return [op(MulPolList2(p, HornerToList(tl))), [d, 1]]
    end if;
    if d = 0 then return [op(MulPolList2(p, HornerToList(tl))), [c, q]]
    end if;
    return [op(MulPolList2(p, HornerToList(tl))), [c, q], [d, 1]]
end proc

Warning, (in HdTailList) `i` is implicitly declared local
|univsos/univsos1.mm:507|
HdTailList :=

    proc(l) local i; return l[1], [seq(l[i], i = 2 .. nops(l))] end proc

       MulPolList2 := proc(p, l) map(el -> [el[1], p*el[2]], l) end proc

              MulPolList := proc(p, l) map(el -> p*el, l) end proc

HornerToList1 := proc(l)
local l1;
    l1 := HornerToList(l);
    return foldr((a, b) -> [op(a), op(b)], [], op(l1))
end proc

memory used=4.0MB, alloc=40.3MB, time=0.05
SOSCHECK := proc(f, sos)
local res;
    res := expand(f - foldr(
        (_e, a) -> _e[1]^2*a + _e[2][1]*_e[2][2]^2 + _e[2][3], 1, op(sos)))
        ;
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

SOSCHECK2 := proc(f, sos)
local s, i, res;
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    res := expand(f - s);
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

          soscheck1 := proc(f, sos) return SOSCHECK2(f, sos) end proc

Warning, (in univsos2) `se` is implicitly declared local
|univsos/univsos2.mm:23|
Warning, (in univsos2) `so` is implicitly declared local
|univsos/univsos2.mm:24|
univsos2 := proc(p, id::integer := 2, iter::boolean := false)
local x, S, s, c, SEVEN, SODD, q, n, m, t, e, r, k, ok, l, a, p_can, p_cnj,
s1, s2, u, v, i, j, sqs, cfs, sos, rfloat, gp, gproots, se, so;
    x := op(indets(p));
    S := sqrfree(p);
    c := lcoeff(p);
    if c < 0 then
        lprint(p);
        lprint(c);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    n := degree(q, x);
    m := floor(1/2*n);
    if 2*m <> n then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if n = 0 then lprint(q, " * (", s, ")^2") end if;
    t := q;
    if id = 2 then t := sum(x^(2*i), i = 0 .. m)
    else if id = 1 then t := sum(x^j, j = 0 .. n) end if
    end if;
    e := max(1, c);
    printf("Perturbation loop\n");
    while q - e*t <> 0 and 0 < nops(realroot(q - e*t)) do e := 1/2*e end do
    ;
    printf("  epsilon = ");
    lprint(e);
    e := 1/2*e;
    r := q - e*t;
    k := 1;
    ok := false;
    printf("Root isolation loop\n");
    while not ok do
        k := 2*k;
        l := lcoeff(r, x);
        printf("  precision of root isolation = %d\n", k);
        gproots := true;
        gp := true;
        if gp then s1, s2 := gpsquares(r, x, k, iter)
        else
            a := polroots(r, x, gproots, iter);
            p_can := mul(x - a[2*i - 1], i = 1 .. 1/2*degree(r));
            p_cnj := mul(x - a[2*i], i = 1 .. 1/2*degree(r));
            s1 := convert(evalc(Re(1/2*p_can + 1/2*p_cnj)), rational, k);
            s2 := convert(evalc(Re(-1/2*I*(p_can - p_cnj))), rational, k)
        end if;
        u := r - l*(s1^2 + s2^2);
        v := expand(e*t + u);
        ok := true;
        for i from 0 to m do
            ok := ok and
                1/4*abs(coeff(v, x, 2*i + 1)) + abs(coeff(v, x, 2*i - 1))
                 <= coeff(v, x, 2*i)
        end do
    end do;
    sqs := [s1, s2];
    cfs := [l, l];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    for i to 2*m + 3 do sos := [op(sos), cfs[i], s*sqs[i]] end do;
    return sos
end proc

Warning, (in UnivariateSumOfSquaresDecItv2) `i` is implicitly declared local
|univsos/univsos2.mm:129|
Warning, (in UnivariateSumOfSquaresDecItv2) `c` is implicitly declared local
|univsos/univsos2.mm:137|
Warning, (in UnivariateSumOfSquaresDecItv2) `si` is implicitly declared local
|univsos/univsos2.mm:140|
Warning, (in UnivariateSumOfSquaresDecItv2) `r` is implicitly declared local
|univsos/univsos2.mm:145|
Warning, (in UnivariateSumOfSquaresDecItv2) `j` is implicitly declared local
|univsos/univsos2.mm:145|
Warning, (in UnivariateSumOfSquaresDecItv2) `t` is implicitly declared local
|univsos/univsos2.mm:146|
UnivariateSumOfSquaresDecItv2 := proc(f, a, b)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time[real]();
    sosq := univsos2(expand(q), y, 2);
    tcmp := time[real]() - ti;
    printf("%fms\n", 1000*tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

gpsquares := proc(r, x, k, iter)
local fd, ok, prec, cmd, status;
    fd := fopen("univsos/in.gp", WRITE, TEXT);
    writeline(fd, "r =", StringTools:-SubstituteAll(
        StringTools:-SubstituteAll(convert(r, string), "\n", ""), "\\", ""))
        ;
    writeline(fd, "x =", convert(x, string));
    writeline(fd, "k =", convert(k, string));
    fclose(fd);
    ok := true;
    if iter then
        prec := 1000000000;
        while ok do
            if FileTools:-Exists("univsos/out.mm") then
                FileTools:-Remove("univsos/out.mm")
            end if;
            cmd := sprintf("gp -q -s %d univsos/gpsquares.gp", prec);
            ssystem(cmd);
            try read "univsos/out.mm"
            catch:
                prec := 10*prec;
                printf("   Issue with PARI/GP root isolation: trying wit\
                    h stack precision = %d\n", prec)
            finally ok := false
            end try
        end do
    else
        if FileTools:-Exists("univsos/out.mm") then
            FileTools:-Remove("univsos/out.mm")
        end if;
        ssystem("gp -q univsos/gpsquares.gp");
        read "univsos/out.mm"
    end if;
    return s1gp, s2gp
end proc

polroots := proc(r, x, gproots)
local fd, a, rfloat;
    rfloat := r;
    if gproots then
        fd := fopen("univsos/in.gp", WRITE, TEXT);
        writeline(fd, "r =", convert(rfloat, string));
        fclose(fd);
        if FileTools:-Exists("univsos/out.mm") then
            FileTools:-Remove("univsos/out.mm")
        end if;
        ssystem("gp -q  univsos/mypolroots.gp");
        ssystem("sed -i 's/0\\.E/0\\.0E/g' univsos/out.mm");
        ssystem("sed -i 's/ E/E/g' univsos/out.mm");
        read "univsos/out.mm";
        return agp
    else
        a := [fsolve([r = 0], x, complex, fulldigits)];
        return map(sol -> rhs(sol[1]), a)
    end if
end proc

SOSCHECK2 := proc(f, sos)
local s, i, res;
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    res := expand(f - s);
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

          soscheck2 := proc(f, sos) return SOSCHECK2(f, sos) end proc

Warning, (in univsos3) `se` is implicitly declared local
|univsos/univsos3.mm:21|
Warning, (in univsos3) `so` is implicitly declared local
|univsos/univsos3.mm:22|
univsos3 := proc(p, prec::integer := 10)
local S, s, c, SEVEN, SODD, q, n, m, t, e, r, ok, l, a, p_can, p_cnj, s1,
s2, u, v, i, j, sqs, cfs, sos, rfloat, gp, eigs, eigs2, soslist, soslist2,
sumsos, cnd, maxq, k, obj_plus_r0, id, x, se, so;
    x := op(indets(p));
    id := 2;
    S := sqrfree(p);
    c := lcoeff(p);
    if c < 0 then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    maxq := 1;
    q := q/maxq;
    n := degree(q, x);
    m := floor(1/2*n);
    if 2*m <> n then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if n = 0 then lprint(q, " * (", s, ")^2") end if;
    t := q;
    if id = 2 then t := sum(x^(2*i), i = 0 .. m)
    else if id = 1 then t := sum(x^j, j = 0 .. n) end if
    end if;
    e := min(1, c);
    while
    degree(q - e*t, x) <= 0 or q - e*t <> 0 and 0 < nops(realroot(q - e*t))
    do e := 1/2*e
    end do;
    e := 1/2*e;
    r := q - e*t;
    ok := false;
    k := prec;
    while not ok do
        k := k + 1;
        eigs, soslist, eigs2, soslist2, obj_plus_r0 := sossdp(r, x, k);
        sumsos :=
            obj_plus_r0 + sum(eigs[j]*soslist[j]^2, j = 1 .. nops(soslist))
            ;
        u := r - sumsos;
        v := expand(e*t + u + obj_plus_r0);
        ok := true;
        for i from 0 to m do
            cnd := coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
                 - abs(coeff(v, x, 2*i - 1));
            if not (0 <= cnd) then
                printf("prec = %d\t idx = %d\t err = %8.3e\t", k, i,
                    evalf(cnd));
                lprint(cnd);
                ok := true;
                error "not enough precision";
                break
            end if
        end do
    end do;
    sqs := [op(soslist)];
    cfs := [op(eigs)];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    for i to nops(sqs) do sos := [op(sos), maxq*cfs[i], s*sqs[i]] end do;
    return sos
end proc

Warning, (in UnivariateSumOfSquaresDecItv3) `i` is implicitly declared local
|univsos/univsos3.mm:111|
Warning, (in UnivariateSumOfSquaresDecItv3) `c` is implicitly declared local
|univsos/univsos3.mm:120|
Warning, (in UnivariateSumOfSquaresDecItv3) `si` is implicitly declared local
|univsos/univsos3.mm:123|
Warning, (in UnivariateSumOfSquaresDecItv3) `r` is implicitly declared local
|univsos/univsos3.mm:128|
Warning, (in UnivariateSumOfSquaresDecItv3) `j` is implicitly declared local
|univsos/univsos3.mm:128|
Warning, (in UnivariateSumOfSquaresDecItv3) `t` is implicitly declared local
|univsos/univsos3.mm:129|
UnivariateSumOfSquaresDecItv3 := proc(f, a, b, k::integer := 1)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time[real]();
    sosq := univsos3(q, y, 2, k);
    tcmp := time[real]() - ti;
    printf("%fms\n", 1000*tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

sossdp := proc(r, x, precSVD::integer := 10, precSDP::integer := 200,
epsStar::integer := 3, epsDash::integer := 3, a::rational := 0,
b::rational := 1, itv::boolean := false)
local fd, n, nsdp, nblock, nloc, i, j, Y, Y2, v, e, mons, rfloat, eigs,
eivs, eigs2, eivs2, gmp, normeig, gpround, SVD, af, bf, lowerbnd;
    n := degree(r);
    nsdp := 1 + ceil(1/2*n);
    if itv then nblock := 2 else nblock := 1 end if;
    fd := fopen("univsos/in.dat-s", WRITE, TEXT);
    writeline(fd, convert(2*ceil(1/2*n), string));
    writeline(fd, convert(nblock, string));
    if not itv then writeline(fd, convert(nsdp, string))
    else nloc := ceil(1/2*n); fprintf(fd, "%d %d\n", nsdp, nloc)
    end if;
    rfloat := convert(r, float, 100);
    af := convert(a, float);
    bf := convert(b, float);
    for i to 2*ceil(1/2*n) do fprintf(fd, "%.100f ", coeff(rfloat, x, i))
    end do;
    fprintf(fd, "\n");
    writeline(fd, "0 1 1 1 -1");
    for j from 2 to nsdp do fprintf(fd, "%d 1 %d %d 1\n", j - 1, 1, j)
    end do;
    for i from 2 to nsdp do
        for j from i to nsdp do
            fprintf(fd, "%d 1 %d %d 1\n", i + j - 2, i, j)
        end do
    end do;
    if itv then
        for i to nloc do
            for j from i to nloc do
                fprintf(fd, "%d 2 %d %d %f\n", i + j - 2, i, j,
                    -sign(i + j - 3)*bf*af);
                fprintf(fd, "%d 2 %d %d %f\n", i + j - 1, i, j,
                    sign(i + j - 2)*(bf + af));
                fprintf(fd, "%d 2 %d %d %f\n", i + j, i, j,
                    -sign(i + j - 1))
            end do
        end do
    end if;
    fclose(fd);
    if FileTools:-Exists("univsos/out.dat-s") then
        FileTools:-Remove("univsos/out.dat-s")
    end if;
    if FileTools:-Exists("univsos/out.mm") then
        FileTools:-Remove("univsos/out.mm")
    end if;
    gmp := true;
    if not gmp then
        system("sdpa -ds univsos/in.dat-s -o univsos/out.dat-s -p univso\
            s/param.sdpa > /dev/null")
    else
        write_param(precSDP, epsStar, epsDash);
        system("sdpa_gmp -ds univsos/in.dat-s -o univsos/out.dat-s -p un\
            ivsos/param_gmp.sdpa > /dev/null")
    end if;
    system("echo $(grep objValPrimal univsos/out.dat-s) ';' 'yMat:=' $(s\
        ed -n '/yMat/,/main/{//!p}' univsos/out.dat-s) ';' >> univsos/ou\
        t.mm");
    system("sed -i 's/ =/ :=/g' univsos/out.mm");
    system("sed -i 's/{/[/g' univsos/out.mm");
    system("sed -i 's/}/]/g' univsos/out.mm");
    system("sed -i 's/] \\[/], \\[/g' univsos/out.mm");
    read "univsos/out.mm";
    lowerbnd := coeff(r, x, 0) + convert(objValPrimal, rational, exact);
    SVD := true;
    Y := Matrix(yMat[1]);
    eigs, eivs := eigseivs_(Y, x, nsdp, precSVD, SVD);
    if itv then
        Y2 := Matrix(yMat[2]);
        eigs2, eivs2 := eigseivs_(Y2, x, nloc, precSVD, SVD)
    else eigs2 := Vector(1, 0); eivs2 := Vector(1, 0)
    end if;
    return convert(eigs, list), convert(eivs, list), convert(eigs2, list),
        convert(eivs2, list), lowerbnd
end proc

checkrational_ := proc(U)
local v;
    for v in U do
        if not type(convert(v, rational), realcons) then
            lprint(v);
            error "Non Rational Cholesky factor, retry with gmp = true"
        end if
    end do;
    return
end proc

eigseivs_ := proc(Y, x, nmat, precSVD, SVD)
local ti, tf, v, e, mons, eigs, eivs, gpround, normeig, U, S, V, Ysvd,
Yexact, tcmp;
    mons := Vector(nmat, j -> x^(j - 1));
    normeig := false;
    gpround := false;
    Yexact := convert(Y, rational, exact);
    if not SVD then
        ti := time[real]();
        lprint("starting Cholesky");
        U := LUDecomposition(Yexact, method = 'Cholesky');
        checkrational_(U);
        tcmp := time[real]() - ti;
        lprint(tcmp);
        lprint("ending Cholesky");
        S := IdentityMatrix(nmat)
    else
        Digits := precSVD;
        ti := time[real]();
        U, S, V := MTM[svd](Yexact);
        tcmp := time[real]() - ti;
        lprint(tcmp);
        Digits := 10
    end if;
    eigs := Diagonal(S);
    eivs := Transpose((Transpose(mons)) . U);
    return eigs, eivs
end proc

write_param := proc(precSDP, epsStar, epsDash)
local fd;
    fd := fopen("univsos/my_param_gmp.sdpa", WRITE, TEXT);
    fprintf(fd, "300\tunsigned int maxIteration;\n");
    fprintf(fd, "1.0E-%d\tdouble 0.0 < epsilonStar;\n", epsStar);
    fprintf(fd, "1.0E5   double 0.0 < lambdaStar;\n");
    fprintf(fd, "2.0   \tdouble 1.0 < omegaStar;\n");
    fprintf(fd, "-1.0E5  double lowerBound;\n");
    fprintf(fd, "1.0E5   double upperBound;\n");
    fprintf(fd, "0.1     double 0.0 <= betaStar <  1.0;\n");
    fprintf(fd,
        "0.3     double 0.0 <= betaBar  <  1.0, betaStar <= betaBar;\n");
    fprintf(fd, "0.9     double 0.0 < gammaStar  <  1.0;\n");
    fprintf(fd, "1.0E-%d\tdouble 0.0 < epsilonDash;\n", epsDash);
    fprintf(fd, "%d     precision\n", precSDP);
    fclose(fd)
end proc

      printpol := proc(p) lprint(sort(evalf(expand(p)), x, plex)) end proc

Warning, (in sositv3) `se` is implicitly declared local
|univsos/univsos3.mm:324|
Warning, (in sositv3) `so` is implicitly declared local
|univsos/univsos3.mm:325|
sositv3 := proc(f, a, b, prec::integer := 10, precSVD::integer := 10,
precSDP::integer := 200, epsStar::integer := 3, epsDash::integer := 3)
local bitsos, n, cf, q, sosq, clist, soslist, soslist2, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, sos2, h, S, c, SEVEN, SODD, s, ds,
dq, p1, p2, m, t, e, r, k, ok, eigs, eigs2, sumsos, sumsos2, u, v, i, sqs,
cfs, id, cnd, maxp1, obj_plus_r0, x, se, so;
    x := op(indets(p));
    n := degree(f);
    id := 2;
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    h := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    S := sqrfree(h);
    c := lcoeff(f);
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    ds := degree(s, y);
    dq := 1/2*degree(q, y);
    p1 := add(coeff(q, y, 2*i)*(b - x)^(dq - i)*(x - a)^i, i = 0 .. dq)/
        (b - a)^dq;
    p2 := add(coeff(s, y, 2*i)*(b - x)^(ds - i)*(x - a)^i, i = 0 .. ds)/
        (b - a)^ds;
    p1 := expand(p1);
    maxp1 := 1;
    p1 := p1/maxp1;
    n := degree(p1, x);
    m := ceil(1/2*n);
    if n = 0 then lprint(p1, " * (", p2, ")^2") end if;
    t := p1;
    if id = 3 then t := sum(abs(coeff(p1, x, i))*x^i, i = 0 .. n)
    else
        if id = 2 then t := sum(x^(2*i), i = 0 .. m)
        else if id = 1 then t := sum(x^j, j = 0 .. n) end if
        end if
    end if;
    e := 1/2^prec;
    r := p1 - e*t;
    k := prec;
    ok := false;
    while not ok do
        eigs, soslist, eigs2, soslist2, obj_plus_r0 :=
            sossdp(r, x, precSVD, precSDP, epsStar, epsDash, a, b, true);
        sumsos :=
            obj_plus_r0 + sum(eigs[j]*soslist[j]^2, j = 1 .. nops(soslist))
            ;
        sumsos2 := (b - x)*(x - a)*
            sum(eigs2[j]*soslist2[j]^2, j = 1 .. nops(soslist2));
        u := r - sumsos - sumsos2;
        v := expand(e*t + u + obj_plus_r0);
        ok := true;
        for i from 0 to m do
            cnd := coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
                 - abs(coeff(v, x, 2*i - 1));
            if not (0 <= cnd) then
                printf("prec = %d\t idx = %d\t err = %8.3e\t", k, i,
                    evalf(cnd));
                ok := true;
                error "not enough precision";
                break
            end if
        end do;
        break
    end do;
    sqs := [op(soslist)];
    cfs := [op(eigs)];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    sos2 := [];
    for i to nops(sqs) do sos := [op(sos), maxp1*cfs[i], p2*sqs[i]] end do;
    for i to nops(eigs2) do
        sos2 := [op(sos2), maxp1*eigs2[i], p2*soslist2[i]]
    end do;
    return sos, sos2
end proc

          "/Users/typesarespaces/Documents/GithubProjects/RealCertify"

                               stack_level := -1

getSOSPoly := proc(poly, x)
local fd, _log_time, s, i, sos;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "getSOSPoly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    sos := univsos1(poly, x);
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "getSOSPoly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return s
end proc

Ord := proc(f, t, point)
local fd, _log_time, g, T;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Ord", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    g := subs(t = T + point, f);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Ord", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return ldegree(expand(g), T)
end proc

Eps := proc(f, t, point)
local fd, _log_time, g;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Eps", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    g := subs(t = y + point, f);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Eps", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return tcoeff(expand(g), y)
end proc

Warning, (in Type_of_poly) `output` is implicitly declared local
|../weifeng_certificates.mpl:78|
Type_of_poly := proc(p, t, point)
local fd, _log_time, O, E, output;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    O := Ord(p, t, point);
    E := Eps(p, t, point);
    if type(O, even) and 0 < E then output := 0
    elif type(O, even) and E < 0 then output := 1
    elif type(O, odd) and 0 < E then output := 2
    elif type(O, odd) and E < 0 then output := 3
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return output
end proc

Type_of_P := proc(G, t, point)
local fd, _log_time, O_1, O_2, E_1, E_2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_P", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    O_1 := Ord(G[1], t, point);
    O_2 := Ord(G[2], t, point);
    E_1 := Eps(G[1], t, point);
    E_2 := Eps(G[2], t, point);
    if type(O_1, even) and E_1 < 0 then
        if O_1 <= O_2 or Type_of_poly(G[2], t, point) = 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 1
        elif O_2 < O_1 and Type_of_poly(G[2], t, point) <> 0 then
            if E_2 < 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 2
            elif 0 < E_2 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 3
            end if
        end if
    elif type(O_2, even) and E_2 < 0 then
        if O_2 <= O_1 or Type_of_poly(G[1], t, point) = 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 1
        elif O_1 < O_2 and Type_of_poly(G[1], t, point) <> 0 then
            if E_1 < 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 2
            elif 0 < E_1 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 3
            end if
        end if
    elif E_1*E_2 < 0 and O_1*O_2 <> 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return 4
    elif O_1 = 0 then
        if 0 < E_2 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 5
        elif E_2 < 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 6
        end if
    elif O_2 = 0 then
        if 0 < E_1 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 5
        elif E_1 < 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 6
        end if
    elif 0 < E_1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return 5
    elif E_1 < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return 6
    end if
end proc

Warning, (in Type_of_Point) `output` is implicitly declared local
|../weifeng_certificates.mpl:189|
Type_of_Point := proc(G, f, t, point)
local fd, _log_time, T_1, T_2, output;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_Point", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    T_1 := Type_of_poly(f, t, point);
    T_2 := Type_of_P(G, t, point);
    if T_1 = 1 and 1 <= T_2 and T_2 <= 3 then output := 1
    elif T_1 = 1 and T_2 = 4 then output := 2
    elif T_1 = 2 and 1 <= T_2 and T_2 <= 2 then output := 3
    elif T_1 = 2 and 3 <= T_2 and T_2 <= 5 then output := 4
    elif T_1 = 3 and (T_2 = 1 or T_2 = 3) then output := 5
    elif T_1 = 3 and (T_2 = 2 or T_2 = 4 or T_2 = 6) then output := 6
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_Point", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return output
end proc

Pre_poly := proc(g, f, t, S, point)
local fd, _log_time, h, i, d;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Pre_poly", " ", convert(stack_level, string), "\n"))
        ;
    FileTools:-Text:-Close(fd);
    h := 1;
    for i in S do
        if i <> point then
            if Ord(g, t, i) <= Ord(f, t, i) then
                d := 2*floor(1/2*Ord(f, t, i) - 1/2*Ord(g, t, i)) + 2;
                h := (t - i)^d*h
            end if
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Pre_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_case_1 := proc(g, f, t, point)
local fd, _log_time, m, n, c_1, c_2, h, a;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_1", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    c_2 := Eps(g, t, point);
    a := (abs(c_1) + 1)/abs(c_2);
    h := a*(t - point)^(m - n);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_1", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_case_2 := proc(g_1, g_2, f, t, point)
local fd, _log_time, m, n_1, n_2, c_1, c_2, h_1, h_2, a, g, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_2", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    h := 1;
    n_1 := Ord(g_1, t, point);
    n_2 := Ord(g_2, t, point);
    c_1 := Eps(g_1, t, point);
    c_2 := Eps(g_2, t, point);
    h_1 := (t - point)^(2*floor(1/2*m - 1/2*n_1))/abs(c_1);
    h_2 := (t - point)^(2*floor(1/2*m - 1/2*n_2))/abs(c_2);
    if 0 < c_1 then
        h_1 := 1/4*h_1*(t - point - 1)^2; h_2 := 1/4*h_2*(t - point + 1)^2
    elif c_1 < 0 then
        h_1 := 1/4*h_1*(t - point + 1)^2; h_2 := 1/4*h_2*(t - point - 1)^2
    end if;
    g := h_1*g_1 + h_2*g_2;
    h := Fixing_case_1(expand(g), f, t, point);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_2", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return [h*h_1, h*h_2]
end proc

Fixing_case_3 := proc(g, f, t, point)
local fd, _log_time, m, n, c, h_1, g_1, h_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_3", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c := Eps(g, t, point);
    h_1 := 1/4*(t - point - 1)^2/abs(c);
    g_1 := h_1*g + 1/4*(t - point)^n*(t - point + 1)^2;
    h_2 := Fixing_case_4(g_1, f, t, point);
    h := h_1*h_2;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_3", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_case_4 := proc(g, f, t, point)
local fd, _log_time, m, n, b_1, b_2, d, c_1, c_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_4", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    b_1 := Eps(g, t, point);
    c_2 := Eps(f - c_1*(t - point)^m, t, point);
    b_2 := Eps(g - b_1*(t - point)^n, t, point);
    if 0 < c_2/c_1 - b_2/b_1 then d := 0; h := c_1*(t - point)^(m - n)/b_1
    else
        d := 2/(c_2/c_1 - b_2/b_1 - 1);
        h := c_1*(t - point)^(m - n)*(x - point + d)^2/(b_1*d^2)
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_4", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_case_5 := proc(g, f, t, point)
local fd, _log_time, m, n, c, h_1, g_1, h_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_5", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c := Eps(g, t, point);
    h_1 := 1/4*(t - point + 1)^2/abs(c);
    g_1 := h_1*g + 1/4*(t - point)^n*(t - point - 1)^2;
    h_2 := Fixing_case_6(g_1, f, t, point);
    h := h_1*h_2;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_5", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_case_6 := proc(g, f, t, point)
local fd, _log_time, m, n, a, d, b_1, b_2, c_1, c_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_6", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    b_1 := Eps(g, t, point);
    c_2 := Eps(f - c_1*(t - point)^m, t, point);
    b_2 := Eps(g - b_1*(t - point)^n, t, point);
    if c_2/c_1 - b_2/b_1 < 0 then d := 0; h := c_1*(t - point)^(m - n)/b_1
    else
        d := 2/(c_2/c_1 - b_2/b_1 + 1);
        h := c_1*(t - point)^(m - n)*(x - point + d)^2/(b_1*d^2)
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_6", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_points := proc(f, g_1, g_2, t)
local
fd, _log_time, fixing, S, interval, flag, point, H_1, H_2, h_1, h_2, h, g;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_points", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    S := map(proc(ineq)
            interval := bound_info(t, ineq, 0);
            ASSERT(evalb(interval[1] = interval[2]));
            return interval[1]
        end proc, SolveTools:-SemiAlgebraic([0 <= g_1, 0 <= g_2], [t]));
    H_1 := 0;
    H_2 := 0;
    for point in S do
        flag := Type_of_Point([g_1, g_2], f, t, point);
        if flag = 1 then
            if type(Ord(g_1, t, point), even) and Eps(g_1, t, point) < 0
             and Ord(g_1, t, point) <= Ord(g_2, t, point) then
                h := Pre_poly(g_1, f, t, S, point);
                H_1 := H_1 + h*Fixing_case_1(h*g_1, f, t, point)
            elif type(Ord(g_2, t, point), even) and Eps(g_2, t, point) < 0
             and Ord(g_2, t, point) <= Ord(g_1, t, point) then
                h := Pre_poly(g_2, f, t, S, point);
                H_2 := H_2 + h*Fixing_case_1(h*g_2, f, t, point)
            end if
        elif flag = 2 then
            h_1 := Pre_poly(g_1, f, t, S, point);
            h_2 := Pre_poly(g_2, f, t, S, point);
            fixing := Fixing_case_2(h_1*g_1, h_2*g_2, f, t, point);
            H_1 := H_1 + h_1*fixing[1];
            H_2 := H_2 + h_2*fixing[2]
        elif flag = 3 then
            if Type_of_poly(g_1, t, point) = 1 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_3(h_1*g, f, t, point)
            elif Type_of_poly(g_2, t, point) = 1 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_3(h_2*g, f, t, point)
            end if
        elif flag = 4 then
            if Type_of_poly(g_1, t, point) = 2 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_4(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 2 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_4(h_2*g, f, t, point)
            end if
        elif flag = 5 then
            if Type_of_poly(g_1, t, point) = 1 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_5(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 1 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_5(h_2*g, f, t, point)
            end if
        elif flag = 6 then
            if Type_of_poly(g_1, t, point) = 3 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_6(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 3 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_6(h_2*g, f, t, point)
            end if
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_points", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return [H_1, H_2]
end proc

bound_poly := proc(g_1, g_2, x)
local fd, _log_time, d, c, c_1, g, h1, h2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "bound_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    d := [degree(g_1, x), degree(g_2, x)];
    c := [coeff(g_1, x^d[1]), coeff(g_2, x^d[2])];
    c_1 := [
        if d[1] = 1 then subs(x = 0, g_1)/abs(c[1])
        else coeff(g_1/abs(c[1]), x^(d[1] - 1))
        end if,
        if d[2] = 1 then subs(x = 0, g_2)/abs(c[2])
        else coeff(g_2/abs(c[2]), x^(d[2] - 1))
        end if];
    if type(d[1], even) and c[1] < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return [g_1, 1, 0]
    elif type(d[2], even) and c[2] < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return [g_2, 0, 1]
    else
        if d[1] = d[2] then
            h1 := x^2/abs(c[1]);
            h2 :=
                (x + sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[2]);
            g := h1*g_1 + h2*g_2
        elif d[2] < d[1] then
            h1 := 1/abs(c[1]);
            h2 := x^(d[1] - d[2] - 2)*
                (x + sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[2])
        else
            h1 := x^(d[2] - d[1] - 2)*
                (x - sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[1]);
            h2 := 1/abs(c[2])
        end if
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return [expand(h1*g_1 + h2*g_2), h1, h2]
end proc

dot_product := proc(v1, v2)
local fd, _log_time, out, i;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "dot_product", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    out := 0;
    for i to min(nops(v1), nops(v2)) do out := out + v1[i]*v2[i] end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "dot_product", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return out
end proc

bound_info := proc(x, ineq, eps)
local fd, _log_time, i1, i2, j1, j2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "bound_info", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    if nops(ineq) = 2 then
        i1 := simplify(op(ineq[1])[1]);
        i2 := simplify(op(ineq[1])[2]);
        j1 := simplify(op(ineq[2])[1]);
        j2 := simplify(op(ineq[2])[2]);
        if evalb(i1 = x) then
            if evalb(j1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [min(i2, j2) + eps, max(i2, j2) - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [min(i2, j1) + eps, max(i2, j1) - eps]
            end if
        else
            if evalb(j1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [min(i1, j2) + eps, max(i1, j2) - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [min(i1, j1) + eps, max(i1, j1) - eps]
            end if
        end if
    else
        i1 := simplify(op(ineq[1])[1]);
        j1 := simplify(op(ineq[1])[2]);
        if type(ineq[1], `=`) then
            if evalb(i1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [j1, j1]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [i1, i1]
            end if
        end if;
        if type(ineq[1], `<=`) then
            if evalb(i1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [-infinity, j1 - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [i1 + eps, infinity]
            end if
        end if
    end if
end proc

averkov_lemma_7 := proc(x, f, basis, B_poly)
local fd, _log_time, _gamma, interval, lowerbound, upperbound, eps,
tobe_disjoint_set, N, g, term, semialgebraic_of_B, R, T;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "averkov_lemma_7", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    R := RegularChains:-PolynomialRing([x]);
    semialgebraic_of_B := SolveTools:-SemiAlgebraic([0 <= B_poly], [x]);
    _gamma := 1/2*max(map(proc(g_i)
            map(proc(ineq)
                    interval := bound_info(x, ineq, 0);
                    lowerbound := convert(evalf(interval[1]), rational);
                    upperbound := convert(evalf(interval[2]), rational);
                    simplify(maximize(g_i, x = lowerbound .. upperbound))
                end proc, semialgebraic_of_B)
        end proc, basis));
    _gamma := ceil(evalf(_gamma));
    T := SolveTools:-SemiAlgebraic([0 <= B_poly, f <= 0], [x]);
    eps := -1/2*min(map(proc(g_i)
            map(proc(ineq)
                    interval := bound_info(x, ineq, 0);
                    lowerbound := convert(evalf(interval[1]), rational);
                    upperbound := convert(evalf(interval[2]), rational);
                    simplify(maximize(g_i, x = lowerbound .. upperbound))
                end proc, T)
        end proc, basis));
    N := -1;
    g := 0;
    tobe_disjoint_set := RegularChains:-SemiAlgebraicSetTools:-IsEmpty([],
        [B_poly, g - f], [], [], R);
    while tobe_disjoint_set = false do
        N := N + 1;
        g := add(term, term in
            map(g_i -> g_i*((g_i - _gamma)/(_gamma + eps))^(2*N), basis));
        tobe_disjoint_set := RegularChains:-SemiAlgebraicSetTools:-IsEmpty(
            [], [B_poly, g - f], [], [], R)
    end do;
    if N = -1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "averkov_lemma_7",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return map(g_i -> 0, basis)
    else
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "averkov_lemma_7",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return map(g_i -> ((g_i - _gamma)/(_gamma + eps))^(2*N), basis)
    end if
end proc

Lower_bound_poly := proc(x, poly, g)
local fd, _log_time, i, d_poly, c_poly, d_g, h, S, _point, G, C, eps;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Lower_bound_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    eps := 1/1000;
    d_poly := degree(expand(poly), x);
    c_poly := coeff(poly, x^d_poly);
    if type(d_poly, even) and evalb(0 < evala(c_poly)) then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Lower_bound_poly",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return [poly, 0, 0]
    end if;
    S := map(ineq -> bound_info(x, ineq, eps),
        SolveTools:-SemiAlgebraic([0 <= g], [x]));
    d_g := degree(expand(g), x);
    _point := S[1][1];
    if d_g <= d_poly then
        if type(d_poly - d_g, even) then
            h := (x - _point)^(d_poly - d_g + 2)
        else h := (x - _point)^(d_poly - d_g + 1)
        end if
    else h := 1
    end if;
    G := h*g;
    C := 1/2*min(seq(
        if evalb(S[i][1] = S[i][2]) then 1
        else minimize(poly/G, x = S[i][1] .. S[i][2])
        end if, i = 1 .. numelems(S)));
    C := evalf(C);
    C := convert(C, rational);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Lower_bound_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return [poly - C*G, C*h]
end proc

findPositiveConstantAvoidExponent := proc(f, g)
local fd, _log_time, i, _args, curr_condition, conditions, pos_coeff, sol;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ",
        "findPositiveConstantAvoidExponent", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    sol := solve({0 <= c*f - g, 0 < c}, {x}, 'parametric', 'real',
        'parameters' = {c});
    _args := op(sol);
    conditions := [];
    for i to 1/2*nops(sol) do
        if evalb(_args[2*i] = [[x = x]]) then
            conditions := [evalf(_args[2*i - 1]), op(conditions)];
            pos_coeff :=
                Optimization:-Minimize(c, map(`<=`@op, conditions))[1];
            if pos_coeff = 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ",
                    "findPositiveConstantAvoidExponent", " ",
                    convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 1
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ",
                    "findPositiveConstantAvoidExponent", " ",
                    convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 1/convert(pos_coeff, rational, exact)
            end if
        end if;
        curr_condition := _args[2*i - 1];
        conditions := [op(0, curr_condition)(
            seq(map(v -> -evalf(v + 1/100), [op(curr_condition)]))),
            op(conditions)]
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ",
        "findPositiveConstantAvoidExponent", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return 0
end proc

Last_step := proc(x, _poly, g)
local fd, _log_time, A, i, j, Ga, Ep, tobe_disjoint_set, N, N1, N2, poly,
_g, pos_coeff, semialgebraic_Ep_lifted, m, mu, interval, lowerbound,
upperbound, R;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Last_step", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    poly := _poly;
    pos_coeff := 1;
    R := RegularChains:-PolynomialRing([x]);
    A := RegularChains:-SemiAlgebraicSetTools:-IsEmpty([], [-poly], [], [],
        R);
    if evalb(A) then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return 0
    end if;
    pos_coeff := findPositiveConstantAvoidExponent(poly, g);
    if 0 < pos_coeff then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return pos_coeff
    end if;
    Ga := convert(1/2*evalf(1.001*maximize(g)), rational);
    Ep := -1/2*
        convert(Optimization:-Maximize(g, {poly <= 0})[1], rational, exact)
        ;
    semialgebraic_Ep_lifted :=
        SolveTools:-SemiAlgebraic([0 <= g + 2*Ep], [x]);
    mu := min(map(proc(ineq)
            interval := bound_info(x, ineq, 0);
            lowerbound := convert(evalf(interval[1]), rational);
            upperbound := convert(evalf(interval[2]), rational);
            simplify(minimize(poly, x = lowerbound .. upperbound))
        end proc, semialgebraic_Ep_lifted));
    if mu < 0 then
        N1 := ceil(1/2*(log(mu) - log(2*Ga))/(log(Ga) - log(Ga + Ep)));
        pos_coeff := convert(evalf(exp(1/2*max(N1, N2) - 1/2*min(N1, N2))),
            rational, exact)
    else
        m := evalf(minimize(poly));
        N1 := ceil(1/2*(log(mu) - log(2*Ga))/(log(Ga) - log(Ga + Ep)));
        N2 :=
            ceil(1/2*(log(-m) - log(2*Ep))/(log(Ga + 2*Ep) - log(Ga + Ep)))
            ;
        pos_coeff := convert(evalf(exp(1/2*max(N1, N2) - 1/2*min(N1, N2))),
            rational, exact)
    end if;
    poly := pos_coeff*poly;
    N := -1;
    tobe_disjoint_set := RegularChains:-SemiAlgebraicSetTools:-IsEmpty([],
        [], [-poly], [], R);
    while tobe_disjoint_set = false do
        N := N + 1;
        _g := g*((g - Ga)/(Ga + Ep))^(2*N);
        tobe_disjoint_set := RegularChains:-SemiAlgebraicSetTools:-IsEmpty(
            [], [], [_g - poly], [], R)
    end do;
    if N = -1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return 0
    else
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return ((g - Ga)/(Ga + Ep))^(2*N)/pos_coeff
    end if
end proc

Sqf := proc(x, poly)
local fd, _log_time, L, h, f_u, i;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Sqf", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    L := sqrfree(poly);
    h := 1;
    f_u := L[1];
    for i to numelems(L[2]) do
        if type(L[2][i][2], even) then h := h*L[2][i][1]^L[2][i][2]
        else h := h*L[2][i][1]^(L[2][i][2] - 1); f_u := f_u*L[2][i][1]
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Sqf", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return [f_u, h]
end proc

find_certificate := proc(poly, QM_list, x)
local fd, _log_time, Sqm, Hs, f1, g, A, B, H2, f2, H3, f3, H4, F, s1, s2,
certificates, R;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "find_certificate", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    R := RegularChains:-PolynomialRing([x]);
    Hs := Fixing_points(poly, QM_list[1], QM_list[2], x);
    f1 := poly - QM_list[1]*Hs[1] - QM_list[2]*Hs[2];
    F := Sqf(x, f1);
    f1 := simplify(F[1]);
    if evalb(
    RegularChains:-SemiAlgebraicSetTools:-IsEmpty([], [-f1], [], [], R))
    then
        s1 := Hs[1];
        s2 := Hs[2];
        certificates := [poly - s1*QM_list[1] - s2*QM_list[2], s1, s2];
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "find_certificate",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return certificates
    end if;
    g := bound_poly(QM_list[1], QM_list[2], x);
    H2 := averkov_lemma_7(x, f1, QM_list, g[1]);
    f2 := f1 - QM_list[1]*H2[1] - QM_list[2]*H2[2];
    H3 := Lower_bound_poly(x, f2, g[1]);
    f3 := f2 - g[1]*H3[2];
    H4 := Last_step(x, f3, g[1]);
    s1 := Hs[1] + (H2[1] + (H3[2] + H4)*g[2])*F[2];
    s2 := Hs[2] + (H2[2] + (H3[2] + H4)*g[3])*F[2];
    certificates := [poly - s1*QM_list[1] - s2*QM_list[2], s1, s2];
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "find_certificate", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return certificates
end proc

bitsizeI := proc(integer)
    if integer = 0 then return 1 end if;
    return ceil(evalf(log(abs(integer), 2))) + 1
end proc

bitsizeR := proc(rat)
local d;
    d := denom(rat);
    if d = 1 then return bitsizeI(numer(rat))
    else return bitsizeI(numer(rat)) + bitsizeI(denom(rat))
    end if
end proc

bitsizeP := proc(poly, x)
local _sum;
    return add(_sum, _sum in map(bitsizeR, [coeffs(collect(poly, x))]))
end proc

_quickdegree := proc(f, x)
local _f, _exp;
    if type(f, `+`) then
        return max(map(_f -> _quickdegree(_f, x), convert(f, list, `+`)))
    end if;
    if type(f, `*`) then
        return foldl((x1, x2) -> x1 + x2, 0,
            op(map(_f -> _quickdegree(_f, x), convert(f, list, `*`))))
    end if;
    if type(f, `^`) then _f, _exp := op(f); return _exp*_quickdegree(_f, x)
    end if;
    if f = x then return 1 else return 0 end if
end proc

quickdegree := proc(f, x)
local output;
    output := _quickdegree(f, x); return output
end proc

checkWeifeng := proc(f, basis, x, test_name)
local st, H;
    printf("\n>> Test\n%s\n", test_name);
    printf(">> input polynomial\n%s\n", convert(f, string));
    printf(">> basis\n%s\n", convert(basis, string));
    st := time();
    H := find_certificate(f, basis, x);
    printf(">> Time taken\n%f\n", time() - st);
    lprint(">> Sums of squares multipliers", H);
    printf(">> Degree size\n%s\n", convert(foldl((_x, _y) -> max(_x, _y), 0,
        op(map(h -> quickdegree(h, x), H))), string));
    return
end proc

                                [SemiAlgebraic]

                    [SemiAlgebraicSetTools, PolynomialRing]

                              [Maximize, Minimize]

                                     [Text]

                           [Open, Close, WriteString]

_pwd := "/Users/typesarespaces/Documents/GithubProjects/phd-thesis/Documents\
    /Seminars/BeihangUniversity-Fall2021/Weifeng-Notes/Weifeng-Certificates/\
    tests"

  "/Users/typesarespaces/Documents/GithubProjects/phd-thesis/Documents/Seminars/BeihangUniversity-Fall2021/Weifeng-Notes/Weifeng-Certificates/tests"

                            "/Users/typesarespaces"

univsos1 := proc(f)
local s, X;
    X := op(indets(f));
    s := SOSDecomp(expand(f), X, 0);
    return HornerToList1(s)
end proc

Warning, (in SOSDecomp) `s` is implicitly declared local
|univsos/univsos1.mm:54|
SOSDecomp := proc(f, X, prec::integer := 64)
local g, h, S, SEVEN, SODD, newF, s;
    if degree(f) = 0 and f < 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if degree(f) = 0 and 0 <= f then return [[0, [0, 0, f]]] end if;
    if f = 0 then return [[0, [0, 0, 0]]] end if;
    if lcoeff(f, X) < 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if irem(degree(f), 2) = 1 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    else
        if degree(f, X) = 2 then return [[0, SOSDecompDegree2(f, X)]]
        end if;
        g := gcd(f, diff(f, X), 'newF');
        if degree(g) = 1 then
            newF := quo(newF, g, X);
            if degree(newF) = 2 then
                return [[g, [0, 0, 0]], [0, SOSDecompDegree2(newF, X)]]
            else return [[g, [0, 0, 0]], op(SOSDecompSQF(newF, X, prec))]
            end if
        end if;
        S := sqrfree(f);
        SEVEN := map(
            _e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
            ;
        SEVEN := [op(SEVEN), op(map(
            _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if,
            S[2]))];
        SEVEN := remove(member, SEVEN, [1]);
        SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
        if nops(SEVEN) = 0 then return SOSDecompSQF(f, X, prec)
        else
            g := mul(s, s in SEVEN);
            h := S[1]*mul(s, s in SODD);
            return [[g, [0, 0, 0]], op(SOSDecomp(h, X, prec))]
        end if
    end if
end proc

SOSDecompSQF := proc(f, X, prec::integer := 64)
local g, h, content_h, SOS_h, SOS_g;
    g := ConstructGPolynomial(f, X, 10);
    h := expand(f - g[1]*g[2]^2);
    if h <> 0 then
        SOS_g := g;
        SOS_h := SOSDecomp(h, X, prec);
        return [[1, SOS_g], op(SOS_h)]
    else SOS_g := g; return [[0, SOS_g]]
    end if
end proc

SOSDecompDegree2 := proc(f, X)
local a, b, c, mycouple;
    if f = 0 then return [f, 0, 0] end if;
    if degree(f) = 0 and 0 < f then return [0, 0, f] end if;
    if degree(f) = 1 or degree(f) = 0 and f < 0 or coeff(f, X, 2) < 0 or
    0 < coeff(f, X, 1)^2 - 4*coeff(f, X, 2)*coeff(f, X, 0) then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    c, b, a := seq(coeff(f, X, i), i = 0 .. 2);
    return [a, X + 1/2*b/a, c - 1/4*b^2/a]
end proc

ConstructGPolynomial := proc(f, X, myprec := 10)
local i, inv_roots1, smallest, sf, sdf, g, t, df, values, mymin, minimizer,
a, b, c, newt, _interval, count, mybound, boo;
    df := numer(diff(f, X));
    inv_roots1 := map(s -> rhs(s),
        RootFinding[Isolate](df, X, digits = myprec, output = interval));
    values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
    mymin := min(op(values));
    for i to nops(inv_roots1) do
        if subs(X = inv_roots1[i][1], f) = mymin then
            minimizer := inv_roots1[i]; _interval := inv_roots1[i]
        end if
    end do;
    if myprec = 0 then t := round(minimizer[1])
    else
        if minimizer[1] < 0 then t := ceil(minimizer[1])
        else t := floor(minimizer[1])
        end if
    end if;
    sf := subs(X = t, f);
    if sf = 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, diff(f, X));
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + 1/4*t^2*sdf^2/sf;
    b := sdf - 1/2*sdf^2*t/sf;
    boo := CheckTvalue(t, a, b, c, f, X);
    if boo then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
    if 0 < minimizer[1] - t then mybound := floor(log[2](minimizer[1] - t))
    else mybound := myprec
    end if;
    count := mybound;
    t := t + 2^mybound;
    sf := subs(X = t, f);
    sdf := subs(X = t, diff(f, X));
    while boo = false and 0 <= sf and t < minimizer[2] and sdf <= 0 do
        a := 1/4*sdf^2/sf;
        c := sf - sdf*t + 1/4*t^2*sdf^2/sf;
        b := sdf - 1/2*sdf^2*t/sf;
        boo := CheckTvalue(t, a, b, c, f, X);
        if boo = true then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
        newt := t + 2^count;
        sf := subs(X = newt, f);
        sdf := subs(X = newt, diff(f, X));
        while minimizer[2] <= newt or sf <= 0 do
            count := count - 1; newt := t + 2^count
        end do;
        t := newt
    end do;
    return ConstructGPolynomialRec(f, X, 2*myprec)
end proc

getcoeffs := proc(f, X)
local c, nc, dc, lcmf;
    c := PolynomialTools:-CoefficientVector(f, X);
    nc, dc := MTM[numden](c);
    lcmf := ilcm(op(convert(dc, list)));
    return Vector(lcmf*c)
end proc

ConstructGPolynomialRec := proc(f, X, myprec, useNewton::boolean := false,
aNewton::rational := 0, bNewton::rational := 0)
local mid, fcoeffs, newaNewton, newbNewton, dfa, dfb, i, inv_roots1,
smallest, sf, sdf, g, t, df, values, mymin, minimizer, a, b, c, _interval;
    df := convert(diff(f, X), horner);
    if useNewton then
        mid := 1/2*aNewton + 1/2*bNewton;
        fcoeffs := getcoeffs(diff(f, X), X);
        newaNewton, newbNewton :=
            MyUnivariateNewton(fcoeffs, aNewton, bNewton, mid);
        if 0 < newaNewton then t := newbNewton else t := newaNewton end if
    else
        inv_roots1 := fgbrs:-rs_isolate_uni(primpart(diff(f, X)), X,
            precision = myprec, verbose = 0);
        values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
        mymin := min(op(values));
        for i to nops(inv_roots1) do
            if subs(X = inv_roots1[i][1], f) = mymin then
                minimizer := inv_roots1[i]; _interval := inv_roots1[i]
            end if
        end do;
        newaNewton := minimizer[1];
        newbNewton := minimizer[2];
        t := minimizer[1]
    end if;
    sf := subs(X = t, f);
    if sf = 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, df);
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + t^2*a;
    b := sdf - 2*t*a;
    if CheckTvalue(t, a, b, c, f, X) then
        return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if;
    return ConstructGPolynomialRec(f, X, 2*myprec, false, newaNewton,
        newbNewton)
end proc

NaiveBolzano := proc(f, X)
local df, inv_roots1, values, mymin, i, minimizer, _interval, t1, t2;
    df := convert(diff(f, X), horner);
    inv_roots1 := fgbrs:-rs_isolate_uni(primpart(diff(f, X)), X,
        precision = 2, verbose = 0);
    values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
    mymin := min(op(values));
    for i to nops(inv_roots1) do
        if subs(X = inv_roots1[i][1], f) = mymin then
            minimizer := inv_roots1[i]; _interval := inv_roots1[i]
        end if
    end do;
    t1 := minimizer[1];
    t2 := minimizer[2];
    return BolzanoRec(f, df, X, t1, t2)
end proc

BolzanoRec := proc(f, df, X, t1, t2)
local t, sf, sdf, a, c, b;
    t := 1/2*t1 + 1/2*t2;
    sf := subs(X = t, f);
    if sf = 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, df);
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + t^2*a;
    b := sdf - 2*a*t;
    if sdf = 0 then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
    if 0 < sdf then
        if CheckTvalue(t, a, b, c, f, X) then
            return [1/sf, 1/2*sdf*(X - t) + sf, 0]
        end if;
        return BolzanoRec(f, df, X, t1, t)
    end if;
    if CheckTvalue(t, a, b, c, f, X) then
        return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if;
    return BolzanoRec(f, df, X, t, t2)
end proc

ConFrac := proc(t, f, df, X, sf, sdf, myprec)
local newt, newsf, newsdf, a, b, c;
    newt := confrac2rat(convert(t, confrac, myprec));
    lprint(newt);
    newsf := subs(X = t, f);
    newsdf := subs(X = t, df);
    a := 1/4*newsdf^2/newsf;
    c := newsf - newsdf*newt + newt^2*a;
    b := newsdf - 2*a*newt;
    if CheckTvalue(newt, a, b, c, f, X) then
        return [1/newsf, 1/2*newsdf*(X - newt) + newsf, 0]
    else return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if
end proc

SmallerApprox := proc(t, f, df, X, sf, sdf)
local newt, newsf, newsdf, a, b, c, myprec;
    myprec := floor(1/8*BitRat(t));
    if 0 < t then newt := BinaryApproximationDown(t, myprec)
    else newt := BinaryApproximationUp(t, myprec)
    end if;
    newsf := subs(X = t, f);
    newsdf := subs(X = t, df);
    a := 1/4*newsdf^2/newsf;
    c := newsf - newsdf*newt + newt^2*a;
    b := newsdf - 2*a*newt;
    if CheckTvalue(newt, a, b, c, f, X) then
        lprint("After rounding ", newt);
        return [1/newsf, 1/2*newsdf*(X - newt) + newsf, 0]
    else return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if
end proc

Warning, (in CheckTvalue) `s` is implicitly declared local
|univsos/univsos1.mm:370|
CheckTvalue := proc(t, a, b, c, f, X)
local F, S, SODD, newg, g, newF, s;
    if a = 0 and b <> 0 or a = 0 and b = 0 and c < 0 then return false
    end if;
    if a <> 0 and 0 < b^2 - 4*a*c then return false end if;
    F := f - a*X^2 - b*X - c;
    g := gcd(F, diff(F, X), 'newF');
    if degree(g) = 1 then
        newF := quo(newF, g, X);
        if 0 < nops(fgbrs:-rs_isolate_uni(numer(newF), X, precision = 1))
        then return false
        else return true
        end if
    else
        S := sqrfree(F);
        SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
        SODD := mul(s, s in SODD);
        if 0 < nops(fgbrs:-rs_isolate_uni(SODD, X, precision = 1)) then
            return false
        else return true
        end if
    end if
end proc

Warning, (in oldCheckTvalue) `s` is implicitly declared local
|univsos/univsos1.mm:402|
oldCheckTvalue := proc(t, g, f, X)
local a, b, c, F, S, SODD, newg, s;
    a, b, c := coeff(g, X, 2), coeff(g, X, 1), coeff(g, X, 0);
    if a = 0 and b <> 0 or a = 0 and b = 0 and c < 0 then return false
    end if;
    if a <> 0 and 0 < b^2 - 4*c*a then return false end if;
    F := normal(f - g);
    S := sqrfree(F);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    SODD := mul(s, s in SODD);
    if 0 < nops(fgbrs:-rs_isolate_uni(primpart(SODD), X, precision = 1))
    then return false
    else return true
    end if
end proc

MyNewtonIterator := proc(_interval, pol)
local a, b, c, X, newa;
    a := _interval[1];
    b := _interval[2];
    X := op(1, indets(pol));
    newa := a - subs({X = a}, pol)/subs({X = a}, diff(pol, X));
    return [newa, b]
end proc

BolzanoIterator := proc(_interval, pol)
local a, b, c, X, sc;
    a := _interval[1];
    b := _interval[2];
    c := 1/2*a + 1/2*b;
    X := op(1, indets(pol));
    sc := eval(pol, X = c);
    if sc = 0 then return [a, c] end if;
    if sign(sc) = sign(eval(pol, X = a)) then return [c, b]
    else return [a, c]
    end if
end proc

Warning, (in UnivariateSumOfSquaresDecItv) `i` is implicitly declared local
|univsos/univsos1.mm:468|
Warning, (in UnivariateSumOfSquaresDecItv) `c` is implicitly declared local
|univsos/univsos1.mm:476|
Warning, (in UnivariateSumOfSquaresDecItv) `si` is implicitly declared local
|univsos/univsos1.mm:479|
Warning, (in UnivariateSumOfSquaresDecItv) `r` is implicitly declared local
|univsos/univsos1.mm:484|
Warning, (in UnivariateSumOfSquaresDecItv) `j` is implicitly declared local
|univsos/univsos1.mm:484|
Warning, (in UnivariateSumOfSquaresDecItv) `t` is implicitly declared local
|univsos/univsos1.mm:485|
UnivariateSumOfSquaresDecItv := proc(f, a, b)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time();
    sosq := SOSDecomp(q, y, 2);
    tcmp := time() - ti;
    lprint(tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

HornerToList := proc(sos)
local hd, tl, p, c, q, d;
    if nops(sos) = 0 then return [] end if;
    if nops(sos) = 1 then
        p, c, q, d := sos[1][1], op(sos[1][2]);
        if c = 0 and d = 0 then return [[1, p]] end if;
        if c = 0 then return [[1, p], [d, 1]] end if;
        if d = 0 then return [[1, p], [c, q]] end if;
        return [[1, p], [c, q], [d, 1]]
    end if;
    hd, tl := HdTailList(sos);
    p, c, q, d := hd[1], op(hd[2]);
    if c = 0 and d = 0 then return [op(MulPolList2(p, HornerToList(tl)))]
    end if;
    if c = 0 then return [op(MulPolList2(p, HornerToList(tl))), [d, 1]]
    end if;
    if d = 0 then return [op(MulPolList2(p, HornerToList(tl))), [c, q]]
    end if;
    return [op(MulPolList2(p, HornerToList(tl))), [c, q], [d, 1]]
end proc

Warning, (in HdTailList) `i` is implicitly declared local
|univsos/univsos1.mm:507|
HdTailList :=

    proc(l) local i; return l[1], [seq(l[i], i = 2 .. nops(l))] end proc

       MulPolList2 := proc(p, l) map(el -> [el[1], p*el[2]], l) end proc

              MulPolList := proc(p, l) map(el -> p*el, l) end proc

HornerToList1 := proc(l)
local l1;
    l1 := HornerToList(l);
    return foldr((a, b) -> [op(a), op(b)], [], op(l1))
end proc

SOSCHECK := proc(f, sos)
local res;
    res := expand(f - foldr(
        (_e, a) -> _e[1]^2*a + _e[2][1]*_e[2][2]^2 + _e[2][3], 1, op(sos)))
        ;
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

SOSCHECK2 := proc(f, sos)
local s, i, res;
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    res := expand(f - s);
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

          soscheck1 := proc(f, sos) return SOSCHECK2(f, sos) end proc

Warning, (in univsos2) `se` is implicitly declared local
|univsos/univsos2.mm:23|
Warning, (in univsos2) `so` is implicitly declared local
|univsos/univsos2.mm:24|
univsos2 := proc(p, id::integer := 2, iter::boolean := false)
local x, S, s, c, SEVEN, SODD, q, n, m, t, e, r, k, ok, l, a, p_can, p_cnj,
s1, s2, u, v, i, j, sqs, cfs, sos, rfloat, gp, gproots, se, so;
    x := op(indets(p));
    S := sqrfree(p);
    c := lcoeff(p);
    if c < 0 then
        lprint(p);
        lprint(c);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    n := degree(q, x);
    m := floor(1/2*n);
    if 2*m <> n then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if n = 0 then lprint(q, " * (", s, ")^2") end if;
    t := q;
    if id = 2 then t := sum(x^(2*i), i = 0 .. m)
    else if id = 1 then t := sum(x^j, j = 0 .. n) end if
    end if;
    e := max(1, c);
    printf("Perturbation loop\n");
    while q - e*t <> 0 and 0 < nops(realroot(q - e*t)) do e := 1/2*e end do
    ;
    printf("  epsilon = ");
    lprint(e);
    e := 1/2*e;
    r := q - e*t;
    k := 1;
    ok := false;
    printf("Root isolation loop\n");
    while not ok do
        k := 2*k;
        l := lcoeff(r, x);
        printf("  precision of root isolation = %d\n", k);
        gproots := true;
        gp := true;
        if gp then s1, s2 := gpsquares(r, x, k, iter)
        else
            a := polroots(r, x, gproots, iter);
            p_can := mul(x - a[2*i - 1], i = 1 .. 1/2*degree(r));
            p_cnj := mul(x - a[2*i], i = 1 .. 1/2*degree(r));
            s1 := convert(evalc(Re(1/2*p_can + 1/2*p_cnj)), rational, k);
            s2 := convert(evalc(Re(-1/2*I*(p_can - p_cnj))), rational, k)
        end if;
        u := r - l*(s1^2 + s2^2);
        v := expand(e*t + u);
        ok := true;
        for i from 0 to m do
            ok := ok and
                1/4*abs(coeff(v, x, 2*i + 1)) + abs(coeff(v, x, 2*i - 1))
                 <= coeff(v, x, 2*i)
        end do
    end do;
    sqs := [s1, s2];
    cfs := [l, l];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    for i to 2*m + 3 do sos := [op(sos), cfs[i], s*sqs[i]] end do;
    return sos
end proc

Warning, (in UnivariateSumOfSquaresDecItv2) `i` is implicitly declared local
|univsos/univsos2.mm:129|
Warning, (in UnivariateSumOfSquaresDecItv2) `c` is implicitly declared local
|univsos/univsos2.mm:137|
Warning, (in UnivariateSumOfSquaresDecItv2) `si` is implicitly declared local
|univsos/univsos2.mm:140|
Warning, (in UnivariateSumOfSquaresDecItv2) `r` is implicitly declared local
|univsos/univsos2.mm:145|
Warning, (in UnivariateSumOfSquaresDecItv2) `j` is implicitly declared local
|univsos/univsos2.mm:145|
Warning, (in UnivariateSumOfSquaresDecItv2) `t` is implicitly declared local
|univsos/univsos2.mm:146|
UnivariateSumOfSquaresDecItv2 := proc(f, a, b)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time[real]();
    sosq := univsos2(expand(q), y, 2);
    tcmp := time[real]() - ti;
    printf("%fms\n", 1000*tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

gpsquares := proc(r, x, k, iter)
local fd, ok, prec, cmd, status;
    fd := fopen("univsos/in.gp", WRITE, TEXT);
    writeline(fd, "r =", StringTools:-SubstituteAll(
        StringTools:-SubstituteAll(convert(r, string), "\n", ""), "\\", ""))
        ;
    writeline(fd, "x =", convert(x, string));
    writeline(fd, "k =", convert(k, string));
    fclose(fd);
    ok := true;
    if iter then
        prec := 1000000000;
        while ok do
            if FileTools:-Exists("univsos/out.mm") then
                FileTools:-Remove("univsos/out.mm")
            end if;
            cmd := sprintf("gp -q -s %d univsos/gpsquares.gp", prec);
            ssystem(cmd);
            try read "univsos/out.mm"
            catch:
                prec := 10*prec;
                printf("   Issue with PARI/GP root isolation: trying wit\
                    h stack precision = %d\n", prec)
            finally ok := false
            end try
        end do
    else
        if FileTools:-Exists("univsos/out.mm") then
            FileTools:-Remove("univsos/out.mm")
        end if;
        ssystem("gp -q univsos/gpsquares.gp");
        read "univsos/out.mm"
    end if;
    return s1gp, s2gp
end proc

polroots := proc(r, x, gproots)
local fd, a, rfloat;
    rfloat := r;
    if gproots then
        fd := fopen("univsos/in.gp", WRITE, TEXT);
        writeline(fd, "r =", convert(rfloat, string));
        fclose(fd);
        if FileTools:-Exists("univsos/out.mm") then
            FileTools:-Remove("univsos/out.mm")
        end if;
        ssystem("gp -q  univsos/mypolroots.gp");
        ssystem("sed -i 's/0\\.E/0\\.0E/g' univsos/out.mm");
        ssystem("sed -i 's/ E/E/g' univsos/out.mm");
        read "univsos/out.mm";
        return agp
    else
        a := [fsolve([r = 0], x, complex, fulldigits)];
        return map(sol -> rhs(sol[1]), a)
    end if
end proc

SOSCHECK2 := proc(f, sos)
local s, i, res;
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    res := expand(f - s);
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

          soscheck2 := proc(f, sos) return SOSCHECK2(f, sos) end proc

Warning, (in univsos3) `se` is implicitly declared local
|univsos/univsos3.mm:21|
Warning, (in univsos3) `so` is implicitly declared local
|univsos/univsos3.mm:22|
univsos3 := proc(p, prec::integer := 10)
local S, s, c, SEVEN, SODD, q, n, m, t, e, r, ok, l, a, p_can, p_cnj, s1,
s2, u, v, i, j, sqs, cfs, sos, rfloat, gp, eigs, eigs2, soslist, soslist2,
sumsos, cnd, maxq, k, obj_plus_r0, id, x, se, so;
    x := op(indets(p));
    id := 2;
    S := sqrfree(p);
    c := lcoeff(p);
    if c < 0 then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    maxq := 1;
    q := q/maxq;
    n := degree(q, x);
    m := floor(1/2*n);
    if 2*m <> n then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if n = 0 then lprint(q, " * (", s, ")^2") end if;
    t := q;
    if id = 2 then t := sum(x^(2*i), i = 0 .. m)
    else if id = 1 then t := sum(x^j, j = 0 .. n) end if
    end if;
    e := min(1, c);
    while
    degree(q - e*t, x) <= 0 or q - e*t <> 0 and 0 < nops(realroot(q - e*t))
    do e := 1/2*e
    end do;
    e := 1/2*e;
    r := q - e*t;
    ok := false;
    k := prec;
    while not ok do
        k := k + 1;
        eigs, soslist, eigs2, soslist2, obj_plus_r0 := sossdp(r, x, k);
        sumsos :=
            obj_plus_r0 + sum(eigs[j]*soslist[j]^2, j = 1 .. nops(soslist))
            ;
        u := r - sumsos;
        v := expand(e*t + u + obj_plus_r0);
        ok := true;
        for i from 0 to m do
            cnd := coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
                 - abs(coeff(v, x, 2*i - 1));
            if not (0 <= cnd) then
                printf("prec = %d\t idx = %d\t err = %8.3e\t", k, i,
                    evalf(cnd));
                lprint(cnd);
                ok := true;
                error "not enough precision";
                break
            end if
        end do
    end do;
    sqs := [op(soslist)];
    cfs := [op(eigs)];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    for i to nops(sqs) do sos := [op(sos), maxq*cfs[i], s*sqs[i]] end do;
    return sos
end proc

Warning, (in UnivariateSumOfSquaresDecItv3) `i` is implicitly declared local
|univsos/univsos3.mm:111|
Warning, (in UnivariateSumOfSquaresDecItv3) `c` is implicitly declared local
|univsos/univsos3.mm:120|
Warning, (in UnivariateSumOfSquaresDecItv3) `si` is implicitly declared local
|univsos/univsos3.mm:123|
Warning, (in UnivariateSumOfSquaresDecItv3) `r` is implicitly declared local
|univsos/univsos3.mm:128|
Warning, (in UnivariateSumOfSquaresDecItv3) `j` is implicitly declared local
|univsos/univsos3.mm:128|
Warning, (in UnivariateSumOfSquaresDecItv3) `t` is implicitly declared local
|univsos/univsos3.mm:129|
UnivariateSumOfSquaresDecItv3 := proc(f, a, b, k::integer := 1)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time[real]();
    sosq := univsos3(q, y, 2, k);
    tcmp := time[real]() - ti;
    printf("%fms\n", 1000*tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

sossdp := proc(r, x, precSVD::integer := 10, precSDP::integer := 200,
epsStar::integer := 3, epsDash::integer := 3, a::rational := 0,
b::rational := 1, itv::boolean := false)
local fd, n, nsdp, nblock, nloc, i, j, Y, Y2, v, e, mons, rfloat, eigs,
eivs, eigs2, eivs2, gmp, normeig, gpround, SVD, af, bf, lowerbnd;
    n := degree(r);
    nsdp := 1 + ceil(1/2*n);
    if itv then nblock := 2 else nblock := 1 end if;
    fd := fopen("univsos/in.dat-s", WRITE, TEXT);
    writeline(fd, convert(2*ceil(1/2*n), string));
    writeline(fd, convert(nblock, string));
    if not itv then writeline(fd, convert(nsdp, string))
    else nloc := ceil(1/2*n); fprintf(fd, "%d %d\n", nsdp, nloc)
    end if;
    rfloat := convert(r, float, 100);
    af := convert(a, float);
    bf := convert(b, float);
    for i to 2*ceil(1/2*n) do fprintf(fd, "%.100f ", coeff(rfloat, x, i))
    end do;
    fprintf(fd, "\n");
    writeline(fd, "0 1 1 1 -1");
    for j from 2 to nsdp do fprintf(fd, "%d 1 %d %d 1\n", j - 1, 1, j)
    end do;
    for i from 2 to nsdp do
        for j from i to nsdp do
            fprintf(fd, "%d 1 %d %d 1\n", i + j - 2, i, j)
        end do
    end do;
    if itv then
        for i to nloc do
            for j from i to nloc do
                fprintf(fd, "%d 2 %d %d %f\n", i + j - 2, i, j,
                    -sign(i + j - 3)*bf*af);
                fprintf(fd, "%d 2 %d %d %f\n", i + j - 1, i, j,
                    sign(i + j - 2)*(bf + af));
                fprintf(fd, "%d 2 %d %d %f\n", i + j, i, j,
                    -sign(i + j - 1))
            end do
        end do
    end if;
    fclose(fd);
    if FileTools:-Exists("univsos/out.dat-s") then
        FileTools:-Remove("univsos/out.dat-s")
    end if;
    if FileTools:-Exists("univsos/out.mm") then
        FileTools:-Remove("univsos/out.mm")
    end if;
    gmp := true;
    if not gmp then
        system("sdpa -ds univsos/in.dat-s -o univsos/out.dat-s -p univso\
            s/param.sdpa > /dev/null")
    else
        write_param(precSDP, epsStar, epsDash);
        system("sdpa_gmp -ds univsos/in.dat-s -o univsos/out.dat-s -p un\
            ivsos/param_gmp.sdpa > /dev/null")
    end if;
    system("echo $(grep objValPrimal univsos/out.dat-s) ';' 'yMat:=' $(s\
        ed -n '/yMat/,/main/{//!p}' univsos/out.dat-s) ';' >> univsos/ou\
        t.mm");
    system("sed -i 's/ =/ :=/g' univsos/out.mm");
    system("sed -i 's/{/[/g' univsos/out.mm");
    system("sed -i 's/}/]/g' univsos/out.mm");
    system("sed -i 's/] \\[/], \\[/g' univsos/out.mm");
    read "univsos/out.mm";
    lowerbnd := coeff(r, x, 0) + convert(objValPrimal, rational, exact);
    SVD := true;
    Y := Matrix(yMat[1]);
    eigs, eivs := eigseivs_(Y, x, nsdp, precSVD, SVD);
    if itv then
        Y2 := Matrix(yMat[2]);
        eigs2, eivs2 := eigseivs_(Y2, x, nloc, precSVD, SVD)
    else eigs2 := Vector(1, 0); eivs2 := Vector(1, 0)
    end if;
    return convert(eigs, list), convert(eivs, list), convert(eigs2, list),
        convert(eivs2, list), lowerbnd
end proc

checkrational_ := proc(U)
local v;
    for v in U do
        if not type(convert(v, rational), realcons) then
            lprint(v);
            error "Non Rational Cholesky factor, retry with gmp = true"
        end if
    end do;
    return
end proc

eigseivs_ := proc(Y, x, nmat, precSVD, SVD)
local ti, tf, v, e, mons, eigs, eivs, gpround, normeig, U, S, V, Ysvd,
Yexact, tcmp;
    mons := Vector(nmat, j -> x^(j - 1));
    normeig := false;
    gpround := false;
    Yexact := convert(Y, rational, exact);
    if not SVD then
        ti := time[real]();
        lprint("starting Cholesky");
        U := LUDecomposition(Yexact, method = 'Cholesky');
        checkrational_(U);
        tcmp := time[real]() - ti;
        lprint(tcmp);
        lprint("ending Cholesky");
        S := IdentityMatrix(nmat)
    else
        Digits := precSVD;
        ti := time[real]();
        U, S, V := MTM[svd](Yexact);
        tcmp := time[real]() - ti;
        lprint(tcmp);
        Digits := 10
    end if;
    eigs := Diagonal(S);
    eivs := Transpose((Transpose(mons)) . U);
    return eigs, eivs
end proc

write_param := proc(precSDP, epsStar, epsDash)
local fd;
    fd := fopen("univsos/my_param_gmp.sdpa", WRITE, TEXT);
    fprintf(fd, "300\tunsigned int maxIteration;\n");
    fprintf(fd, "1.0E-%d\tdouble 0.0 < epsilonStar;\n", epsStar);
    fprintf(fd, "1.0E5   double 0.0 < lambdaStar;\n");
    fprintf(fd, "2.0   \tdouble 1.0 < omegaStar;\n");
    fprintf(fd, "-1.0E5  double lowerBound;\n");
    fprintf(fd, "1.0E5   double upperBound;\n");
    fprintf(fd, "0.1     double 0.0 <= betaStar <  1.0;\n");
    fprintf(fd,
        "0.3     double 0.0 <= betaBar  <  1.0, betaStar <= betaBar;\n");
    fprintf(fd, "0.9     double 0.0 < gammaStar  <  1.0;\n");
    fprintf(fd, "1.0E-%d\tdouble 0.0 < epsilonDash;\n", epsDash);
    fprintf(fd, "%d     precision\n", precSDP);
    fclose(fd)
end proc

      printpol := proc(p) lprint(sort(evalf(expand(p)), x, plex)) end proc

Warning, (in sositv3) `se` is implicitly declared local
|univsos/univsos3.mm:324|
Warning, (in sositv3) `so` is implicitly declared local
|univsos/univsos3.mm:325|
sositv3 := proc(f, a, b, prec::integer := 10, precSVD::integer := 10,
precSDP::integer := 200, epsStar::integer := 3, epsDash::integer := 3)
local bitsos, n, cf, q, sosq, clist, soslist, soslist2, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, sos2, h, S, c, SEVEN, SODD, s, ds,
dq, p1, p2, m, t, e, r, k, ok, eigs, eigs2, sumsos, sumsos2, u, v, i, sqs,
cfs, id, cnd, maxp1, obj_plus_r0, x, se, so;
    x := op(indets(p));
    n := degree(f);
    id := 2;
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    h := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    S := sqrfree(h);
    c := lcoeff(f);
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    ds := degree(s, y);
    dq := 1/2*degree(q, y);
    p1 := add(coeff(q, y, 2*i)*(b - x)^(dq - i)*(x - a)^i, i = 0 .. dq)/
        (b - a)^dq;
    p2 := add(coeff(s, y, 2*i)*(b - x)^(ds - i)*(x - a)^i, i = 0 .. ds)/
        (b - a)^ds;
    p1 := expand(p1);
    maxp1 := 1;
    p1 := p1/maxp1;
    n := degree(p1, x);
    m := ceil(1/2*n);
    if n = 0 then lprint(p1, " * (", p2, ")^2") end if;
    t := p1;
    if id = 3 then t := sum(abs(coeff(p1, x, i))*x^i, i = 0 .. n)
    else
        if id = 2 then t := sum(x^(2*i), i = 0 .. m)
        else if id = 1 then t := sum(x^j, j = 0 .. n) end if
        end if
    end if;
    e := 1/2^prec;
    r := p1 - e*t;
    k := prec;
    ok := false;
    while not ok do
        eigs, soslist, eigs2, soslist2, obj_plus_r0 :=
            sossdp(r, x, precSVD, precSDP, epsStar, epsDash, a, b, true);
        sumsos :=
            obj_plus_r0 + sum(eigs[j]*soslist[j]^2, j = 1 .. nops(soslist))
            ;
        sumsos2 := (b - x)*(x - a)*
            sum(eigs2[j]*soslist2[j]^2, j = 1 .. nops(soslist2));
        u := r - sumsos - sumsos2;
        v := expand(e*t + u + obj_plus_r0);
        ok := true;
        for i from 0 to m do
            cnd := coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
                 - abs(coeff(v, x, 2*i - 1));
            if not (0 <= cnd) then
                printf("prec = %d\t idx = %d\t err = %8.3e\t", k, i,
                    evalf(cnd));
                ok := true;
                error "not enough precision";
                break
            end if
        end do;
        break
    end do;
    sqs := [op(soslist)];
    cfs := [op(eigs)];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    sos2 := [];
    for i to nops(sqs) do sos := [op(sos), maxp1*cfs[i], p2*sqs[i]] end do;
    for i to nops(eigs2) do
        sos2 := [op(sos2), maxp1*eigs2[i], p2*soslist2[i]]
    end do;
    return sos, sos2
end proc

          "/Users/typesarespaces/Documents/GithubProjects/RealCertify"

                               stack_level := -1

getSOSPoly := proc(poly, x)
local fd, _log_time, s, i, sos;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "getSOSPoly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    sos := univsos1(poly, x);
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "getSOSPoly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return s
end proc

Ord := proc(f, t, point)
local fd, _log_time, g, T;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Ord", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    g := subs(t = T + point, f);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Ord", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return ldegree(expand(g), T)
end proc

Eps := proc(f, t, point)
local fd, _log_time, g;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Eps", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    g := subs(t = y + point, f);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Eps", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return tcoeff(expand(g), y)
end proc

Warning, (in Type_of_poly) `output` is implicitly declared local
|../weifeng_certificates.mpl:78|
Type_of_poly := proc(p, t, point)
local fd, _log_time, O, E, output;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    O := Ord(p, t, point);
    E := Eps(p, t, point);
    if type(O, even) and 0 < E then output := 0
    elif type(O, even) and E < 0 then output := 1
    elif type(O, odd) and 0 < E then output := 2
    elif type(O, odd) and E < 0 then output := 3
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return output
end proc

Type_of_P := proc(G, t, point)
local fd, _log_time, O_1, O_2, E_1, E_2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_P", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    O_1 := Ord(G[1], t, point);
    O_2 := Ord(G[2], t, point);
    E_1 := Eps(G[1], t, point);
    E_2 := Eps(G[2], t, point);
    if type(O_1, even) and E_1 < 0 then
        if O_1 <= O_2 or Type_of_poly(G[2], t, point) = 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 1
        elif O_2 < O_1 and Type_of_poly(G[2], t, point) <> 0 then
            if E_2 < 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 2
            elif 0 < E_2 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 3
            end if
        end if
    elif type(O_2, even) and E_2 < 0 then
        if O_2 <= O_1 or Type_of_poly(G[1], t, point) = 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 1
        elif O_1 < O_2 and Type_of_poly(G[1], t, point) <> 0 then
            if E_1 < 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 2
            elif 0 < E_1 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 3
            end if
        end if
    elif E_1*E_2 < 0 and O_1*O_2 <> 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return 4
    elif O_1 = 0 then
        if 0 < E_2 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 5
        elif E_2 < 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 6
        end if
    elif O_2 = 0 then
        if 0 < E_1 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 5
        elif E_1 < 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time, string), "\n"));
            stack_level := stack_level - 1;
            FileTools:-Text:-Close(fd);
            return 6
        end if
    elif 0 < E_1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return 5
    elif E_1 < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return 6
    end if
end proc

Warning, (in Type_of_Point) `output` is implicitly declared local
|../weifeng_certificates.mpl:189|
Type_of_Point := proc(G, f, t, point)
local fd, _log_time, T_1, T_2, output;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_Point", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    T_1 := Type_of_poly(f, t, point);
    T_2 := Type_of_P(G, t, point);
    if T_1 = 1 and 1 <= T_2 and T_2 <= 3 then output := 1
    elif T_1 = 1 and T_2 = 4 then output := 2
    elif T_1 = 2 and 1 <= T_2 and T_2 <= 2 then output := 3
    elif T_1 = 2 and 3 <= T_2 and T_2 <= 5 then output := 4
    elif T_1 = 3 and (T_2 = 1 or T_2 = 3) then output := 5
    elif T_1 = 3 and (T_2 = 2 or T_2 = 4 or T_2 = 6) then output := 6
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_Point", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return output
end proc

Pre_poly := proc(g, f, t, S, point)
local fd, _log_time, h, i, d;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Pre_poly", " ", convert(stack_level, string), "\n"))
        ;
    FileTools:-Text:-Close(fd);
    h := 1;
    for i in S do
        if i <> point then
            if Ord(g, t, i) <= Ord(f, t, i) then
                d := 2*floor(1/2*Ord(f, t, i) - 1/2*Ord(g, t, i)) + 2;
                h := (t - i)^d*h
            end if
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Pre_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_case_1 := proc(g, f, t, point)
local fd, _log_time, m, n, c_1, c_2, h, a;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_1", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    c_2 := Eps(g, t, point);
    a := (abs(c_1) + 1)/abs(c_2);
    h := a*(t - point)^(m - n);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_1", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_case_2 := proc(g_1, g_2, f, t, point)
local fd, _log_time, m, n_1, n_2, c_1, c_2, h_1, h_2, a, g, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_2", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    h := 1;
    n_1 := Ord(g_1, t, point);
    n_2 := Ord(g_2, t, point);
    c_1 := Eps(g_1, t, point);
    c_2 := Eps(g_2, t, point);
    h_1 := (t - point)^(2*floor(1/2*m - 1/2*n_1))/abs(c_1);
    h_2 := (t - point)^(2*floor(1/2*m - 1/2*n_2))/abs(c_2);
    if 0 < c_1 then
        h_1 := 1/4*h_1*(t - point - 1)^2; h_2 := 1/4*h_2*(t - point + 1)^2
    elif c_1 < 0 then
        h_1 := 1/4*h_1*(t - point + 1)^2; h_2 := 1/4*h_2*(t - point - 1)^2
    end if;
    g := h_1*g_1 + h_2*g_2;
    h := Fixing_case_1(expand(g), f, t, point);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_2", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return [h*h_1, h*h_2]
end proc

Fixing_case_3 := proc(g, f, t, point)
local fd, _log_time, m, n, c, h_1, g_1, h_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_3", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c := Eps(g, t, point);
    h_1 := 1/4*(t - point - 1)^2/abs(c);
    g_1 := h_1*g + 1/4*(t - point)^n*(t - point + 1)^2;
    h_2 := Fixing_case_4(g_1, f, t, point);
    h := h_1*h_2;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_3", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_case_4 := proc(g, f, t, point)
local fd, _log_time, m, n, b_1, b_2, d, c_1, c_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_4", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    b_1 := Eps(g, t, point);
    c_2 := Eps(f - c_1*(t - point)^m, t, point);
    b_2 := Eps(g - b_1*(t - point)^n, t, point);
    if 0 < c_2/c_1 - b_2/b_1 then d := 0; h := c_1*(t - point)^(m - n)/b_1
    else
        d := 2/(c_2/c_1 - b_2/b_1 - 1);
        h := c_1*(t - point)^(m - n)*(x - point + d)^2/(b_1*d^2)
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_4", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_case_5 := proc(g, f, t, point)
local fd, _log_time, m, n, c, h_1, g_1, h_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_5", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c := Eps(g, t, point);
    h_1 := 1/4*(t - point + 1)^2/abs(c);
    g_1 := h_1*g + 1/4*(t - point)^n*(t - point - 1)^2;
    h_2 := Fixing_case_6(g_1, f, t, point);
    h := h_1*h_2;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_5", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_case_6 := proc(g, f, t, point)
local fd, _log_time, m, n, a, d, b_1, b_2, c_1, c_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_6", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    b_1 := Eps(g, t, point);
    c_2 := Eps(f - c_1*(t - point)^m, t, point);
    b_2 := Eps(g - b_1*(t - point)^n, t, point);
    if c_2/c_1 - b_2/b_1 < 0 then d := 0; h := c_1*(t - point)^(m - n)/b_1
    else
        d := 2/(c_2/c_1 - b_2/b_1 + 1);
        h := c_1*(t - point)^(m - n)*(x - point + d)^2/(b_1*d^2)
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_6", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return h
end proc

Fixing_points := proc(f, g_1, g_2, t)
local
fd, _log_time, fixing, S, interval, flag, point, H_1, H_2, h_1, h_2, h, g;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_points", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    S := map(proc(ineq)
            interval := bound_info(t, ineq, 0);
            ASSERT(evalb(interval[1] = interval[2]));
            return interval[1]
        end proc, SolveTools:-SemiAlgebraic([0 <= g_1, 0 <= g_2], [t]));
    H_1 := 0;
    H_2 := 0;
    for point in S do
        flag := Type_of_Point([g_1, g_2], f, t, point);
        if flag = 1 then
            if type(Ord(g_1, t, point), even) and Eps(g_1, t, point) < 0
             and Ord(g_1, t, point) <= Ord(g_2, t, point) then
                h := Pre_poly(g_1, f, t, S, point);
                H_1 := H_1 + h*Fixing_case_1(h*g_1, f, t, point)
            elif type(Ord(g_2, t, point), even) and Eps(g_2, t, point) < 0
             and Ord(g_2, t, point) <= Ord(g_1, t, point) then
                h := Pre_poly(g_2, f, t, S, point);
                H_2 := H_2 + h*Fixing_case_1(h*g_2, f, t, point)
            end if
        elif flag = 2 then
            h_1 := Pre_poly(g_1, f, t, S, point);
            h_2 := Pre_poly(g_2, f, t, S, point);
            fixing := Fixing_case_2(h_1*g_1, h_2*g_2, f, t, point);
            H_1 := H_1 + h_1*fixing[1];
            H_2 := H_2 + h_2*fixing[2]
        elif flag = 3 then
            if Type_of_poly(g_1, t, point) = 1 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_3(h_1*g, f, t, point)
            elif Type_of_poly(g_2, t, point) = 1 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_3(h_2*g, f, t, point)
            end if
        elif flag = 4 then
            if Type_of_poly(g_1, t, point) = 2 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_4(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 2 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_4(h_2*g, f, t, point)
            end if
        elif flag = 5 then
            if Type_of_poly(g_1, t, point) = 1 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_5(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 1 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_5(h_2*g, f, t, point)
            end if
        elif flag = 6 then
            if Type_of_poly(g_1, t, point) = 3 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_6(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 3 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_6(h_2*g, f, t, point)
            end if
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_points", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return [H_1, H_2]
end proc

bound_poly := proc(g_1, g_2, x)
local fd, _log_time, d, c, c_1, g, h1, h2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "bound_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    d := [degree(g_1, x), degree(g_2, x)];
    c := [coeff(g_1, x^d[1]), coeff(g_2, x^d[2])];
    c_1 := [
        if d[1] = 1 then subs(x = 0, g_1)/abs(c[1])
        else coeff(g_1/abs(c[1]), x^(d[1] - 1))
        end if,
        if d[2] = 1 then subs(x = 0, g_2)/abs(c[2])
        else coeff(g_2/abs(c[2]), x^(d[2] - 1))
        end if];
    if type(d[1], even) and c[1] < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return [g_1, 1, 0]
    elif type(d[2], even) and c[2] < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return [g_2, 0, 1]
    else
        if d[1] = d[2] then
            h1 := x^2/abs(c[1]);
            h2 :=
                (x + sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[2]);
            g := h1*g_1 + h2*g_2
        elif d[2] < d[1] then
            h1 := 1/abs(c[1]);
            h2 := x^(d[1] - d[2] - 2)*
                (x + sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[2])
        else
            h1 := x^(d[2] - d[1] - 2)*
                (x - sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[1]);
            h2 := 1/abs(c[2])
        end if
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return [expand(h1*g_1 + h2*g_2), h1, h2]
end proc

dot_product := proc(v1, v2)
local fd, _log_time, out, i;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "dot_product", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    out := 0;
    for i to min(nops(v1), nops(v2)) do out := out + v1[i]*v2[i] end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "dot_product", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return out
end proc

bound_info := proc(x, ineq, eps)
local fd, _log_time, i1, i2, j1, j2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "bound_info", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    if nops(ineq) = 2 then
        i1 := simplify(op(ineq[1])[1]);
        i2 := simplify(op(ineq[1])[2]);
        j1 := simplify(op(ineq[2])[1]);
        j2 := simplify(op(ineq[2])[2]);
        if evalb(i1 = x) then
            if evalb(j1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [min(i2, j2) + eps, max(i2, j2) - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [min(i2, j1) + eps, max(i2, j1) - eps]
            end if
        else
            if evalb(j1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [min(i1, j2) + eps, max(i1, j2) - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [min(i1, j1) + eps, max(i1, j1) - eps]
            end if
        end if
    else
        i1 := simplify(op(ineq[1])[1]);
        j1 := simplify(op(ineq[1])[2]);
        if type(ineq[1], `=`) then
            if evalb(i1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [j1, j1]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [i1, i1]
            end if
        end if;
        if type(ineq[1], `<=`) then
            if evalb(i1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [-infinity, j1 - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return [i1 + eps, infinity]
            end if
        end if
    end if
end proc

averkov_lemma_7 := proc(x, f, basis, B_poly)
local fd, _log_time, _gamma, interval, lowerbound, upperbound, eps,
tobe_disjoint_set, N, g, term, semialgebraic_of_B, R, T;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "averkov_lemma_7", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    R := RegularChains:-PolynomialRing([x]);
    semialgebraic_of_B := SolveTools:-SemiAlgebraic([0 <= B_poly], [x]);
    _gamma := 1/2*max(map(proc(g_i)
            map(proc(ineq)
                    interval := bound_info(x, ineq, 0);
                    lowerbound := convert(evalf(interval[1]), rational);
                    upperbound := convert(evalf(interval[2]), rational);
                    simplify(maximize(g_i, x = lowerbound .. upperbound))
                end proc, semialgebraic_of_B)
        end proc, basis));
    _gamma := ceil(evalf(_gamma));
    T := SolveTools:-SemiAlgebraic([0 <= B_poly, f <= 0], [x]);
    eps := -1/2*min(map(proc(g_i)
            map(proc(ineq)
                    interval := bound_info(x, ineq, 0);
                    lowerbound := convert(evalf(interval[1]), rational);
                    upperbound := convert(evalf(interval[2]), rational);
                    simplify(maximize(g_i, x = lowerbound .. upperbound))
                end proc, T)
        end proc, basis));
    N := -1;
    g := 0;
    tobe_disjoint_set := RegularChains:-SemiAlgebraicSetTools:-IsEmpty([],
        [B_poly, g - f], [], [], R);
    while tobe_disjoint_set = false do
        N := N + 1;
        g := add(term, term in
            map(g_i -> g_i*((g_i - _gamma)/(_gamma + eps))^(2*N), basis));
        tobe_disjoint_set := RegularChains:-SemiAlgebraicSetTools:-IsEmpty(
            [], [B_poly, g - f], [], [], R)
    end do;
    if N = -1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "averkov_lemma_7",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return map(g_i -> 0, basis)
    else
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "averkov_lemma_7",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return map(g_i -> ((g_i - _gamma)/(_gamma + eps))^(2*N), basis)
    end if
end proc

Lower_bound_poly := proc(x, poly, g)
local fd, _log_time, i, d_poly, c_poly, d_g, h, S, _point, G, C, eps;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Lower_bound_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    eps := 1/1000;
    d_poly := degree(expand(poly), x);
    c_poly := coeff(poly, x^d_poly);
    if type(d_poly, even) and evalb(0 < evala(c_poly)) then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Lower_bound_poly",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return [poly, 0, 0]
    end if;
    S := map(ineq -> bound_info(x, ineq, eps),
        SolveTools:-SemiAlgebraic([0 <= g], [x]));
    d_g := degree(expand(g), x);
    _point := S[1][1];
    if d_g <= d_poly then
        if type(d_poly - d_g, even) then
            h := (x - _point)^(d_poly - d_g + 2)
        else h := (x - _point)^(d_poly - d_g + 1)
        end if
    else h := 1
    end if;
    G := h*g;
    C := 1/2*min(seq(
        if evalb(S[i][1] = S[i][2]) then 1
        else minimize(poly/G, x = S[i][1] .. S[i][2])
        end if, i = 1 .. numelems(S)));
    C := evalf(C);
    C := convert(C, rational);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Lower_bound_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return [poly - C*G, C*h]
end proc

findPositiveConstantAvoidExponent := proc(f, g)
local fd, _log_time, i, _args, curr_condition, conditions, pos_coeff, sol;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ",
        "findPositiveConstantAvoidExponent", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    sol := solve({0 <= c*f - g, 0 < c}, {x}, 'parametric', 'real',
        'parameters' = {c});
    _args := op(sol);
    conditions := [];
    for i to 1/2*nops(sol) do
        if evalb(_args[2*i] = [[x = x]]) then
            conditions := [evalf(_args[2*i - 1]), op(conditions)];
            pos_coeff :=
                Optimization:-Minimize(c, map(`<=`@op, conditions))[1];
            if pos_coeff = 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ",
                    "findPositiveConstantAvoidExponent", " ",
                    convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 1
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ",
                    "findPositiveConstantAvoidExponent", " ",
                    convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time, string), "\n"));
                stack_level := stack_level - 1;
                FileTools:-Text:-Close(fd);
                return 1/convert(pos_coeff, rational, exact)
            end if
        end if;
        curr_condition := _args[2*i - 1];
        conditions := [op(0, curr_condition)(
            seq(map(v -> -evalf(v + 1/100), [op(curr_condition)]))),
            op(conditions)]
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ",
        "findPositiveConstantAvoidExponent", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return 0
end proc

Last_step := proc(x, _poly, g)
local fd, _log_time, A, i, j, Ga, Ep, tobe_disjoint_set, N, N1, N2, poly,
_g, pos_coeff, semialgebraic_Ep_lifted, m, mu, interval, lowerbound,
upperbound, R;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Last_step", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    poly := _poly;
    pos_coeff := 1;
    R := RegularChains:-PolynomialRing([x]);
    A := RegularChains:-SemiAlgebraicSetTools:-IsEmpty([], [-poly], [], [],
        R);
    if evalb(A) then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return 0
    end if;
    pos_coeff := findPositiveConstantAvoidExponent(poly, g);
    if 0 < pos_coeff then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return pos_coeff
    end if;
    Ga := convert(1/2*evalf(1.001*maximize(g)), rational);
    Ep := -1/2*
        convert(Optimization:-Maximize(g, {poly <= 0})[1], rational, exact)
        ;
    semialgebraic_Ep_lifted :=
        SolveTools:-SemiAlgebraic([0 <= g + 2*Ep], [x]);
    mu := min(map(proc(ineq)
            interval := bound_info(x, ineq, 0);
            lowerbound := convert(evalf(interval[1]), rational);
            upperbound := convert(evalf(interval[2]), rational);
            simplify(minimize(poly, x = lowerbound .. upperbound))
        end proc, semialgebraic_Ep_lifted));
    if mu < 0 then
        N1 := ceil(1/2*(log(mu) - log(2*Ga))/(log(Ga) - log(Ga + Ep)));
        pos_coeff := convert(evalf(exp(1/2*max(N1, N2) - 1/2*min(N1, N2))),
            rational, exact)
    else
        m := evalf(minimize(poly));
        N1 := ceil(1/2*(log(mu) - log(2*Ga))/(log(Ga) - log(Ga + Ep)));
        N2 :=
            ceil(1/2*(log(-m) - log(2*Ep))/(log(Ga + 2*Ep) - log(Ga + Ep)))
            ;
        pos_coeff := convert(evalf(exp(1/2*max(N1, N2) - 1/2*min(N1, N2))),
            rational, exact)
    end if;
    poly := pos_coeff*poly;
    N := -1;
    tobe_disjoint_set := RegularChains:-SemiAlgebraicSetTools:-IsEmpty([],
        [], [-poly], [], R);
    while tobe_disjoint_set = false do
        N := N + 1;
        _g := g*((g - Ga)/(Ga + Ep))^(2*N);
        tobe_disjoint_set := RegularChains:-SemiAlgebraicSetTools:-IsEmpty(
            [], [], [_g - poly], [], R)
    end do;
    if N = -1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return 0
    else
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return ((g - Ga)/(Ga + Ep))^(2*N)/pos_coeff
    end if
end proc

Sqf := proc(x, poly)
local fd, _log_time, L, h, f_u, i;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Sqf", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    L := sqrfree(poly);
    h := 1;
    f_u := L[1];
    for i to numelems(L[2]) do
        if type(L[2][i][2], even) then h := h*L[2][i][1]^L[2][i][2]
        else h := h*L[2][i][1]^(L[2][i][2] - 1); f_u := f_u*L[2][i][1]
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Sqf", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return [f_u, h]
end proc

find_certificate := proc(poly, QM_list, x)
local fd, _log_time, Sqm, Hs, f1, g, A, B, H2, f2, H3, f3, H4, F, s1, s2,
certificates, R;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "find_certificate", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    R := RegularChains:-PolynomialRing([x]);
    Hs := Fixing_points(poly, QM_list[1], QM_list[2], x);
    f1 := poly - QM_list[1]*Hs[1] - QM_list[2]*Hs[2];
    F := Sqf(x, f1);
    f1 := simplify(F[1]);
    if evalb(
    RegularChains:-SemiAlgebraicSetTools:-IsEmpty([], [-f1], [], [], R))
    then
        s1 := Hs[1];
        s2 := Hs[2];
        certificates := [poly - s1*QM_list[1] - s2*QM_list[2], s1, s2];
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "find_certificate",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time, string), "\n"));
        stack_level := stack_level - 1;
        FileTools:-Text:-Close(fd);
        return certificates
    end if;
    g := bound_poly(QM_list[1], QM_list[2], x);
    H2 := averkov_lemma_7(x, f1, QM_list, g[1]);
    f2 := f1 - QM_list[1]*H2[1] - QM_list[2]*H2[2];
    H3 := Lower_bound_poly(x, f2, g[1]);
    f3 := f2 - g[1]*H3[2];
    H4 := Last_step(x, f3, g[1]);
    s1 := Hs[1] + (H2[1] + (H3[2] + H4)*g[2])*F[2];
    s2 := Hs[2] + (H2[2] + (H3[2] + H4)*g[3])*F[2];
    certificates := [poly - s1*QM_list[1] - s2*QM_list[2], s1, s2];
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "find_certificate", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time, string), "\n"));
    stack_level := stack_level - 1;
    FileTools:-Text:-Close(fd);
    return certificates
end proc

bitsizeI := proc(integer)
    if integer = 0 then return 1 end if;
    return ceil(evalf(log(abs(integer), 2))) + 1
end proc

bitsizeR := proc(rat)
local d;
    d := denom(rat);
    if d = 1 then return bitsizeI(numer(rat))
    else return bitsizeI(numer(rat)) + bitsizeI(denom(rat))
    end if
end proc

bitsizeP := proc(poly, x)
local _sum;
    return add(_sum, _sum in map(bitsizeR, [coeffs(collect(poly, x))]))
end proc

  "/Users/typesarespaces/Documents/GithubProjects/phd-thesis/Documents/Seminars/BeihangUniversity-Fall2021/Weifeng-Notes/Weifeng-Certificates/tests"

                            "/Users/typesarespaces"

Convex version 1.2.0, Copyright (C) 1999-2016 Matthias Franz
This package is distributed under the GNU General Public License
See http://www.math.uwo.ca/~mfranz/convex/ for more information
Warning, (in monshom) `i` is implicitly declared local
|multivsos/multivsos.mm:20|
monshom := proc(n, d)
local l1, i;
    l1 := [seq(1, i = 1 .. n)];
    return map(_c -> _c - l1, combinat:-composition(n + d, n))
end proc

Warning, (in revmons) `i` is implicitly declared local
|multivsos/multivsos.mm:26|
revmons := proc(n, d)
local i;
    if d = 0 then return [[seq(0, i = 1 .. n)]]
    else return [op(monshom(n, d)), op(revmons(n, d - 1))]
    end if
end proc

Warning, (in revmons2) `i` is implicitly declared local
|multivsos/multivsos.mm:33|
revmons2 := proc(n, d)
local mons0, i;
    mons0 := [[seq(0, i = 1 .. n)]];
    return [seq(op(monshom(n, d - i + 1)), i = 1 .. d), mons0]
end proc

     monspt := proc(n, d) return ListTools:-Reverse(revmons(n, d)) end proc

Warning, (in mymons) `m` is implicitly declared local
|multivsos/multivsos.mm:48|
Warning, (in mymons) `v` is implicitly declared local
|multivsos/multivsos.mm:48|
Warning, (in anonymous procedure within mons) `i` is implicitly declared local
|multivsos/multivsos.mm:54|
mons := proc(n, d, X, ms::list := monspt(n, d))
    return map(a -> local i; mul(X[i]^a[i], i = 1 .. n), ms)
end proc

Warning, (in support) `m` is implicitly declared local
|multivsos/multivsos.mm:62|
support := proc(f, X, monslist)
local cf, idxf, monsf, m;
    cf := coeffs(f, X, 'monsf');
    monsf := [monsf];
    idxf := seq(ListTools:-Search(m, monslist), m in monsf);
    if member(0, [idxf]) then lprint(m); error "Bug in list of monomials"
    end if;
    return [cf], [idxf]
end proc

Warning, (in dense_perturbation) `m` is implicitly declared local
|multivsos/multivsos.mm:68|
   dense_perturbation := proc(ms) local m; return add(m^2, m in ms) end proc

sos2sdp := proc(r, X, relaxorder, mspt, msptk, ms, msk, rc, ridx, e,
precSVD::integer := 40, precSDP::integer := 200, epsStar::integer := 30,
precOut::integer := 30, precIn::integer := 100, gmp::boolean := false,
algo::integer := 1, g::list := [], gc::list := [], gidx::list := [])
local start_idx, sub_idx, nvars, zero, d, k, n, ng, r0, msdp, nsdp, nblock,
fd, rList, i, rfloat, j, lowerbnd, eigs, eivs, eigs2, eivs2, Y, Yrat,
absorb_tbl, m, absorb_PP, nsdpg, nsdponeg, gic, giidx, ni, ig, igc, gifloat,
mgi, eigsi, eivsi, nl, yMatText, objValPrimalText, mski, epsList, alg,
msptgi, di, msptki;
    k := relaxorder;
    d := 2*k;
    n := nops(X);
    ng := nops(g);
    zero := [seq(0, i = 1 .. n)];
    msdp := nops(mspt);
    nsdp := nops(msk);
    nblock := 1 + ng;
    if FileTools:-Exists("multivsos/in.dat-s") then
        FileTools:-Remove("multivsos/in.dat-s")
    end if;
    fd := fopen("multivsos/in.dat-s", WRITE, TEXT);
    rList := Array([seq(0, i = 1 .. msdp)]);
    for i to nops(rc) do rList[ridx[i]] := rc[i] end do;
    if mspt[1] = zero then sub_idx := 1; nvars := msdp - 1; r0 := rList[1]
    else
        sub_idx := ListTools:-Search(2*mspt[1], mspt) - 1;
        for j from 2 to nsdp do
            k := ListTools:-Search(mspt[1] + mspt[j], mspt);
            sub_idx := min(sub_idx, k - 1)
        end do;
        nvars := msdp - sub_idx;
        r0 := 0
    end if;
    writeline(fd, convert(nvars, string));
    writeline(fd, convert(nblock, string));
    fprintf(fd, "%d ", nsdp);
    nsdpg := locmatsizes(g, k, n);
    for ni in nsdpg do fprintf(fd, "%d ", ni) end do;
    fprintf(fd, "\n");
    rfloat := convert(rList, float, precIn);
    if mspt[1] = zero then
        for i from 2 to msdp do fprintf(fd, "%.*f ", precIn, rfloat[i])
        end do
    else
        for i to nvars do fprintf(fd, "%.*f ", precIn, rfloat[i + sub_idx])
        end do
    end if;
    fprintf(fd, "\n");
    if mspt[1] = zero then
        writeline(fd, "0 1 1 1 -1");
        for j from 2 to nsdp do fprintf(fd, "%d 1 %d %d 1\n", j - 1, 1, j)
        end do;
        for i from 2 to nsdp do
            for j from i to nsdp do
                k := ListTools:-Search(mspt[i] + mspt[j], mspt);
                fprintf(fd, "%d 1 %d %d 1\n", k - 1, i, j)
            end do
        end do
    else
        for i to nsdp do
            for j from i to nsdp do
                k := ListTools:-Search(mspt[i] + mspt[j], mspt);
                fprintf(fd, "%d 1 %d %d 1\n", k - sub_idx, i, j)
            end do
        end do
    end if;
    for ig to ng do
        gic := gc[ig];
        giidx := gidx[ig];
        for igc to nops(gic) do
            msptgi := monspt(n, 1/2*d - ceil(1/2*degree(g[ig])));
            mgi := mspt[giidx[igc]];
            gifloat := convert(gic[igc], float, precIn);
            if mgi = zero then
                fprintf(fd, "0 %d 1 1 %.*f\n", ig + 1, precIn, -gifloat);
                for j from 2 to nsdpg[ig] do
                    fprintf(fd, "%d %d 1 %d %.*f\n", j - 1, ig + 1, j,
                        precIn, gifloat)
                end do;
                for i from 2 to nsdpg[ig] do
                    for j from i to nsdpg[ig] do
                        k := ListTools:-Search(msptgi[i] + msptgi[j] + mgi,
                            mspt);
                        fprintf(fd, "%d %d %d %d %.*f\n", k - 1, ig + 1, i,
                            j, precIn, gifloat)
                    end do
                end do
            else
                for i to nsdpg[ig] do
                    for j from i to nsdpg[ig] do
                        k := ListTools:-Search(msptgi[i] + msptgi[j] + mgi,
                            mspt);
                        fprintf(fd, "%d %d %d %d %.*f\n", k - sub_idx,
                            ig + 1, i, j, precIn, gifloat)
                    end do
                end do
            end if
        end do
    end do;
    absorb_tbl := table([seq(0, i = 1 .. msdp)]);
    for i to nsdp do
        for j from i to nsdp do
            m := mspt[i] + mspt[j];
            if not_even(m) then
                k := ListTools:-Search(m, mspt); absorb_tbl[k] := i
            end if
        end do
    end do;
    absorb_PP := table([seq([], i = 1 .. msdp)]);
    for i to nsdp do
        k := ListTools:-Search(2*mspt[i], mspt);
        absorb_PP[k] := [op(absorb_PP[k]), i, i];
        for j from i + 1 to nsdp do
            m := mspt[i] + mspt[j];
            k := ListTools:-Search(m, mspt);
            absorb_PP[k] := [op(absorb_PP[k]), i, j, j, i]
        end do
    end do;
    fclose(fd);
    if FileTools:-Exists("multivsos/out.dat-s") then
        FileTools:-Remove("multivsos/out.dat-s")
    end if;
    if FileTools:-Exists("multivsos/out.mm") then
        FileTools:-Remove("multivsos/out.mm")
    end if;
    if not gmp then
        ssystem("sdpa -ds multivsos/in.dat-s -o multivsos/out.dat-s -p m\
            ultivsos/param.sdpa > /dev/null")
    else
        write_param(precSDP, epsStar, epsStar);
        ssystem("sdpa_gmp -ds multivsos/in.dat-s -o multivsos/out.dat-s \
            -p multivsos/my_param_gmp.sdpa > /dev/null")
    end if;
    fd := fopen("multivsos/out.dat-s", READ, TEXT);
    nl := "";
    yMatText := "yMat := ";
    do
        nl := readline(fd);
        if SearchText("objValPrimal", nl) = 1 then
            objValPrimalText :=
                StringTools[RegSubs]("objValPrimal = (.*)" = "\\1", nl);
            break
        end if
    end do;
    do nl := readline(fd); break if SearchText("yMat", nl) = 1 end do;
    do
        nl := readline(fd);
        break if 0 < SearchText("main loop", nl);
        yMatText := cat(yMatText, nl)
    end do;
    fclose(fd);
    yMatText := StringTools[SubstituteAll](yMatText, "{", "[");
    yMatText := StringTools[SubstituteAll](yMatText, "}", "]");
    yMatText := StringTools[SubstituteAll](yMatText, "][", "],[");
    fd := fopen("multivsos/out.mm", WRITE, TEXT);
    fprintf(fd, "objValPrimal := %s:\n%s:", objValPrimalText, yMatText);
    fd := fclose(fd);
    read "multivsos/out.mm";
    printf("Numerical SDP ended\n");
    lowerbnd := r0 + convert(objValPrimal, rational, exact);
    printf("Lower bound: %f\n", evalf(lowerbnd));
    eigs := Array([]);
    eivs := Array([]);
    nsdponeg := [nsdp, op(nsdpg)];
    alg := 1;
    for j to 1 + ng do
        i := ng + 2 - j;
        Y := Matrix(yMat[i]);
        if 1 < i then
            di := 1/2*d - ceil(1/2*degree(g[i - 1]));
            msptki := monspt(n, di);
            mski := mons(n, di, X, msptki)
        else mski := msk
        end if;
        if algo = 1 or 1 < i then Yrat := Matrix(Y)
        else
            if 30 <= precOut then Y := convert(Y, rational, exact)
            else Y := convert(Y, rational, precOut)
            end if;
            Y := 1/2*Y + 1/2*LinearAlgebra:-Transpose(Y);
            epsList := epsPP(convert(eigs, list), convert(eivs, list), r, g,
                nsdpg, X, ms, msdp);
            Yrat := absorber_PP(Y, epsList, absorb_PP, nsdp, msptk, mspt)
        end if;
        if (algo = 2 or algo = 3) and i = 1 then alg := algo end if;
        eigsi, eivsi := eigseivs(Yrat, X, mski, precSVD, precOut, alg, e);
        eigs := ArrayTools:-Concatenate(1, eigsi, eigs);
        eivs := ArrayTools:-Concatenate(1, eivsi, eivs)
    end do;
    return convert(eigs, list), convert(eivs, list), lowerbnd, absorb_tbl,
        nsdponeg
end proc

Warning, (in absorber_PP) `im` is implicitly declared local
|multivsos/multivsos.mm:350|
write_param := proc(precSDP, epsStar, epsDash)
local fd;
    fd := fopen("multivsos/my_param_gmp.sdpa", WRITE, TEXT);
    fprintf(fd, "300\tunsigned int maxIteration;\n");
    fprintf(fd, "1.0E-%d\t\t double 0.0 < epsilonStar;\n", epsStar);
    fprintf(fd, "1.0E5   double 0.0 < lambdaStar;\n");
    fprintf(fd, "2.0   \tdouble 1.0 < omegaStar;\n");
    fprintf(fd, "-1.0E5  double lowerBound;\n");
    fprintf(fd, "1.0E5   double upperBound;\n");
    fprintf(fd, "0.1     double 0.0 <= betaStar <  1.0;\n");
    fprintf(fd,
        "0.3     double 0.0 <= betaBar  <  1.0, betaStar <= betaBar;\n");
    fprintf(fd, "0.9     double 0.0 < gammaStar  <  1.0;\n");
    fprintf(fd, "1.0E-%d\t\t double 0.0 < epsilonDash;\n", epsDash);
    fprintf(fd, "%d     precision\n", precSDP);
    fprintf(fd, "%%+50.40Fe     char* \t xPrint \t   (default %%+8.3e, \t\
            NOPRINT skips printout) \n");
    fprintf(fd, "%%+50.40Fe     char* \t XPrint \t   (default %%+8.3e, \t\
            NOPRINT skips printout) \n");
    fprintf(fd, "%%+50.40Fe     char* \t YPrint \t   (default %%+8.3e, \t\
            NOPRINT skips printout) \n");
    fprintf(fd, "%%+50.40Fe     char* \t infPrint \t (default %%+10.16e, \
        \t  NOPRINT skips printout) \n");
    fclose(fd)
end proc

checkrational := proc(U)
local v;
    for v in U do
        if not type(convert(v, rational), realcons) then
            error "Complex Cholesky factor, retry with gmp = true or mor\
                e SDP precision"
        end if
    end do;
    return
end proc

eigseivs := proc(Yrat, X, ms, precSVD, precOut, algo, e)
local v, msvec, eigs, eivs, U, S, V, Ysvd, SVD, ti, tcmp;
    SVD := false;
    msvec := Vector(ms);
    ti := time();
    printf("Cholesky decomposition ... ");
    S := LinearAlgebra:-IdentityMatrix(nops(ms));
    if algo = 1 or algo = 3 then Digits := precSVD end if;
    if algo < 3 then
        U := LinearAlgebra:-LUDecomposition(Yrat, method = 'Cholesky')
    else
        U :=
            LinearAlgebra:-LUDecomposition(Yrat - e*S, method = 'Cholesky')
    end if;
    checkrational(U);
    tcmp := time() - ti;
    printf("done.\n");
    eigs := LinearAlgebra:-Diagonal(S);
    eivs := LinearAlgebra:-Transpose((LinearAlgebra:-Transpose(msvec)) . U)
        ;
    Digits := 10;
    Ysvd := U . S . (V^%T);
    if 30 <= precOut then
        eigs := convert(eigs, rational, exact);
        eivs := map(_e -> convert(_e, rational, exact), eivs)
    else
        eigs := convert(eigs, rational, precOut);
        eivs := map(_e -> convert(_e, rational, precOut), eivs)
    end if;
    return eigs, eivs
end proc

     not_even := proc(m) return has(1, map(_c -> irem(_c, 2), m)) end proc

decomp_mon := proc(a, n)
local c, b, degb, cm, cnt, i;
    c := map(_c -> iquo(_c, 2), a);
    b := a - 2*c;
    degb := ceil(1/2*add(i, i in b));
    cm := [seq(0, i = 1 .. n)];
    cnt := 0;
    for i to n do
        if b[i] = 1 then cm[i] := b[i]; cnt := cnt + 1 end if;
        break if degb <= cnt
    end do;
    return c, cm, b - cm
end proc

NP_PolyhedralSets := proc(f, X, mspt, ms)
local cf, idxf, msptf, ps;
    cf, idxf := support(f, X, ms);
    msptf := map(_idx -> mspt[_idx], idxf);
    ps := PolyhedralSets:-PolyhedralSet(msptf);
    return PolyhedralSets:-ConvexHull(ps)
end proc

absorber := proc(u, X, e, even_mons, ms, mspt, absorb_tbl)
local i, j, k, ucoeffs, uidx, uc, err_list, err, m, bad_m, n, c, cm, cp,
cfs, sqs, n1, m1, m2, k1, k2;
    ucoeffs, uidx := support(u, X, ms);
    n := nops(X);
    err_list := Array([seq(e, i = 1 .. nops(even_mons))]);
    cfs := [];
    sqs := [];
    for i to nops(ucoeffs) do
        uc := ucoeffs[i];
        bad_m := mspt[uidx[i]];
        if not_even(bad_m) then
            k := ListTools:-Search(bad_m, mspt);
            m1 := mspt[absorb_tbl[k]];
            m2 := bad_m - m1;
            cfs := [op(cfs), 1/2*abs(uc)];
            sqs := [op(sqs), mul(X[i]^m1[i], i = 1 .. n)
                 + sign(uc)*mul(X[i]^m2[i], i = 1 .. n)];
            k1 := ListTools:-Search(2*m1, even_mons);
            k2 := ListTools:-Search(2*m2, even_mons);
            err_list[k1] := err_list[k1] - 1/2*abs(uc);
            err_list[k2] := err_list[k2] - 1/2*abs(uc)
        else
            k := ListTools:-Search(bad_m, even_mons);
            err_list[k] := err_list[k] + uc
        end if
    end do;
    err_list := convert(err_list, list);
    cfs := [op(cfs), op(err_list)];
    sqs := [op(sqs), seq(mul(X[i]^(1/2*m[i]), i = 1 .. n), m in even_mons)]
        ;
    return cfs, sqs
end proc

old_absorber := proc(u, X, e, even_mons, ms, mspt, even_mons_n1, absorb_tbl)
local i, j, k, ucoeffs, uidx, uc, err_list, err, m, bad_m, n, c, cm, cp,
cfs, sqs, n1, m1, m2;
    printf("\nu = ");
    lprint(evalf(u));
    ucoeffs, uidx := support(u, X, ms);
    n := nops(X);
    err_list := [];
    for j to nops(even_mons) do
        m := even_mons[j];
        n1 := even_mons_n1[j];
        err := e;
        for i to nops(ucoeffs) do
            uc := ucoeffs[i];
            bad_m := mspt[uidx[i]];
            if m = bad_m then err := err + uc
            else if has(bad_m, n1) then err := err - 1/2*abs(uc) end if
            end if
        end do;
        err_list := [op(err_list), err]
    end do;
    printf("\nerr list = ");
    cfs := [op(err_list)];
    sqs := [seq(mul(X[i]^(1/2*m[i]), i = 1 .. n), m in even_mons)];
    for i to nops(ucoeffs) do
        uc := ucoeffs[i];
        bad_m := mspt[uidx[i]];
        if not_even(bad_m) then
            k := ListTools:-Search(bad_m, mspt);
            m1 := mspt[absorb_tbl[k]];
            m2 := bad_m - m1;
            printf("\n");
            lprint(bad_m);
            lprint(m1);
            lprint(m2);
            cfs := [op(cfs), 1/2*abs(uc)];
            sqs := [op(sqs), mul(X[i]^m1[i], i = 1 .. n)
                 + sign(uc)*mul(X[i]^m2[i], i = 1 .. n)]
        end if
    end do;
    return cfs, sqs
end proc

Warning, (in relaxordermin) `gi` is implicitly declared local
|multivsos/multivsos.mm:625|
Warning, (in locmatsizes) `gi` is implicitly declared local
|multivsos/multivsos.mm:629|
locmatsizes := proc(g, k, n)
local gi;
    return
        [seq(combinat:-binomial(n + k - ceil(1/2*degree(gi)), n), gi in g)]
end proc

Warning, (in preliminary_test_negativity) `x` is implicitly declared local
|multivsos/multivsos.mm:651|
Warning, (in permutepoly) `i` is implicitly declared local
|multivsos/multivsos.mm:678|
Warning, (in is_homogeneous) `v` is implicitly declared local
|multivsos/multivsos.mm:708|
Warning, (in multivsos) `i` is implicitly declared local
|multivsos/multivsos.mm:719|
Warning, (in multivsos_internal) `m` is implicitly declared local
|multivsos/multivsos.mm:815|
multivsos_internal := proc(f, {algo::integer := 1, denom::boolean := false,
epsStar::integer := 5, epsilon::integer := 8, glist::list := [],
gmp::boolean := false, iter_prec::integer := 0, precIn::integer := 100,
precOut::integer := 30, precSDP::integer := 100, precSVD::integer := 40,
relaxorder::integer := 0})
local p, d, mspt, ms, rc, ridx, pc, pidx, ng, gc, gidx, gic, giidx, S, s, c,
q, n, k, t, e, r, l, a, s1, s2, u, v, i, j, sqs, cfs, sos, rfloat, eigs,
eigsg, eigsgi, soslist, soslistg, soslistgi, sumsos, cnd, maxq, obj_plus_r0,
card_nk, even_mons, err_list, err, msptk, msk, absorb_tbl, rmin, nsdponeg,
idx, oneg, idxi, g, X, ti, tf, gi, cg, use_convex, newf, hf, vars,
deg_denom, mspt_denom, ms_denom, msptk_denom, msk_denom, sigma1, bitsos, m;
    use_convex := true;
    ti := time[real]();
    c := max(map(_c -> abs(_c), coeffs(expand(f))));
    c := max(c, 1);
    p := f/c;
    X := [op(indets([p, op(glist)]))];
    g := [];
    ng := nops(glist);
    for i to ng do
        gi := expand(glist[i]);
        cg := max(map(_c -> abs(_c), coeffs(expand(gi))));
        cg := 1;
        g := [op(g), gi/cg]
    end do;
    n := nops(X);
    rmin := relaxordermin([p, op(g)]);
    d := 2*max(relaxorder, rmin);
    k := ceil(1/2*d);
    mspt := monspt(n, d);
    card_nk := combinat:-binomial(n + k, n);
    msptk := monspt(n, k);
    ms := mons(n, d, X, mspt);
    lprint(X);
    printf("Polynomial system with %d variables and degree at most %d\n", n,
        d);
    printf("Size of monomial basis = %d\n", nops(msptk));
    printf("Number of moment variables = %d\n", nops(ms));
    if ng = 0 then
        mspt, msptk := truncate_withNP(p, X, mspt, msptk, ms, true);
        printf("\nAfter Newton polytope reduction:\n");
        printf("Size of monomial basis = %d\n", nops(msptk));
        printf("Number of moment variables = %d\n", nops(mspt))
    end if;
    if ng = 1 and denom then
        deg_denom := d - degree(glist[1]);
        mspt_denom := monspt(n, deg_denom);
        ms_denom := mons(n, deg_denom, X, mspt_denom);
        msptk_denom := monspt(n, 1/2*deg_denom);
        msk_denom := mons(n, 1/2*deg_denom, X, msptk_denom);
        sigma1 := expand(add(m, m in msk_denom)^2);
        mspt, msptk :=
            truncate_withNP(glist[1]*sigma1, X, mspt, msptk, ms, true);
        printf("\nAfter Newton polytope reduction:\n");
        printf("Size of monomial basis = %d\n", nops(msptk));
        printf("Number of moment variables = %d\n", nops(mspt))
    end if;
    ms := mons(n, d, X, mspt);
    msk := mons(n, k, X, msptk);
    if algo = 1 or algo = 3 then
        t := dense_perturbation(msk);
        even_mons := 2*msptk;
        e := 1/2^epsilon
    else e := 0; t := 0
    end if;
    r := expand(p - e*t);
    pc, pidx := support(expand(p), X, ms);
    if r = 0 then rc := [0]; ridx := [1]
    else rc, ridx := support(r, X, ms)
    end if;
    gc := [];
    gidx := [];
    for i to ng do
        gic, giidx := support(g[i], X, ms);
        gc := [op(gc), gic];
        gidx := [op(gidx), giidx]
    end do;
    printf("SDPA starts...\n");
    if algo = 3 then
        eigs, soslist, obj_plus_r0, absorb_tbl, nsdponeg := sos2sdp(p, X, k,
            mspt, msptk, ms, msk, pc, pidx, e, precSVD, precSDP, epsStar,
            precOut, precIn, gmp, algo, g, gc, gidx)
    else
        eigs, soslist, obj_plus_r0, absorb_tbl, nsdponeg := sos2sdp(r, X, k,
            mspt, msptk, ms, msk, rc, ridx, e, precSVD, precSDP, epsStar,
            precOut, precIn, gmp, algo, g, gc, gidx)
    end if;
    idx := 0;
    sumsos := obj_plus_r0;
    oneg := [1, op(g)];
    for i to ng + 1 do
        idxi := idx + nsdponeg[i];
        sumsos :=
            sumsos + oneg[i]*sum(eigs[j]*soslist[j]^2, j = idx + 1 .. idxi)
            ;
        idx := idxi
    end do;
    if algo = 1 or algo = 3 then
        u := expand(r - sumsos + obj_plus_r0);
        try cfs, sqs := absorber(u, X, e, even_mons, ms, mspt, absorb_tbl)
        catch "invalid subscript selector":
            lprint("Invalid absorbtion table, certainly a Newton polytop\
                e issue");
            return false
        end try;
        nsdponeg[1] := nsdponeg[1] + nops(sqs)
    else u := 0; cfs := []; sqs := []
    end if;
    err := expand(u + e*t - add(cfs[i]*sqs[i]^2, i = 1 .. nops(sqs)));
    cfs := [op(cfs), op(eigs)];
    sqs := [op(sqs), op(soslist)];
    sos := [];
    for i to nops(sqs) do sos := [op(sos), c*cfs[i], sqs[i]] end do;
    if soscheck1(f, sos, nsdponeg, g) = 1 then
        printf("\n Exact sum of squares decomposition\n");
        tf := time[real]() - ti;
        bitsos := BitSizePolSeq(sos, X);
        printf("bitsize= %d\n", bitsos);
        printf("time= %fsecs\n", tf);
        return {sos, nsdponeg, tf, bitsos}
    else
        if 2 <= iter_prec then printf("\n Aborting \n"); return {false}
        end if;
        printf("\n***************************\n");
        printf("****   RECURSIVE CALL  ****\n");
        lprint(2*epsilon, 2*precSVD, 2*precSDP, 2*epsStar, 2*precOut,
            2*precIn);
        printf("***************************\n\n");
        if epsilon <= 16 then
            return multivsos_internal(f, ':-epsilon' = 2*epsilon,
                ':-precSVD' = 2*precSVD, ':-precSDP' = 2*precSDP,
                ':-epsStar' = 2*epsStar, ':-precOut' = 2*precOut,
                ':-precIn' = 2*precIn, ':-gmp' = gmp, ':-algo' = algo,
                ':-glist' = glist, ':-relaxorder' = relaxorder,
                ':-denom' = denom, ':-iter_prec' = iter_prec + 1)
        else
            return multivsos_internal(f, ':-epsilon' = 2*epsilon,
                ':-precSVD' = 2*precSVD, ':-precSDP' = 2*precSDP,
                ':-epsStar' = 2*epsStar, ':-precOut' = 2*precOut,
                ':-precIn' = 2*precIn, ':-gmp' = true, ':-algo' = algo,
                ':-glist' = glist, ':-relaxorder' = relaxorder,
                ':-denom' = denom, ':-iter_prec' = iter_prec + 1)
        end if
    end if;
    tf := time[real]() - ti;
    printf("bitsize= %d\n", BitSizePolSeq(sos, X));
    printf("time= %fsecs\n", tf)
end proc

soscheck1 := proc(f, sos, nsdponeg, g::list := [])
local s, i, j, idx, idxi, oneg;
    oneg := [1, op(g)];
    s := 0;
    idx := 0;
    for i to nops(g) + 1 do
        idxi := idx + nsdponeg[i];
        for j from idx + 1 to idxi do
            if sos[2*j - 1] < 0 then
                printf("Negative number => invalid sum of squares decomp\
                    osition\n");
                return 0;
                error "Negative number => invalid sum of squares decompo\
                    sition"
            else s := s + oneg[i]*sos[2*j - 1]*sos[2*j]^2
            end if
        end do;
        idx := idxi
    end do;
    if not (expand(f - s) = 0) then
        printf("Inexact sum of squares decomposition");
        return 0;
        error "Inexact sum of squares decomposition"
    else return 1
    end if
end proc

Warning, (in BitSizeSos) `p` is implicitly declared local
|multivsos/multivsos.mm:996|
BitSizeSos := proc(sos, X)
local p;
    return add(BitSizePol(p[1], X) + BitSizePolQuadr(p[2], X), p in sos)
end proc

BitSizePolQuadr := proc(q, X)
    return BitRat(q[1]) + BitSizePol(q[2], X) + BitRat(q[3])
end proc

Warning, (in BitSizePolSeq3) `p` is implicitly declared local
|multivsos/multivsos.mm:1004|
BitSizePolSeq3 := proc(listpol, X)
local p;
    return add(BitSizePol(p[1], X) + BitSizePolSeq(p[2], X), p in listpol)
end proc

Warning, (in BitSizePolSeq) `p` is implicitly declared local
|multivsos/multivsos.mm:1008|
BitSizePolSeq := proc(listpol, X)
local p;
    return add(BitSizePol(p, X), p in listpol)
end proc

BitSizePol := proc(p, X)
local res;
    res := [coeffs(expand(p), X)]; return BitSizeSeq(res)
end proc

Warning, (in BitSizeSeq) `c` is implicitly declared local
|multivsos/multivsos.mm:1018|
     BitSizeSeq := proc(l) local c; return add(BitRat(c), c in l) end proc

BitRat := proc(r)
local n, d, res, rs;
    if type(r, rational) then rs := r else rs := r^2 end if;
    if rs = 0 then return 1 end if;
    n, d := abs(numer(rs)), abs(denom(rs));
    if d = 1 then res := ilog2(n) + 1
    else res := ilog2(n) + ilog2(d) + 2
    end if;
    return res
end proc

benchRAGLib := proc(f, g::list := [])
local sys, i, ti, tf, sol;
    ti := time[real]();
    sys := [f < 0];
    for i to nops(g) do sys := [op(sys), expand(-g[i]) < 0] end do;
    lprint(sys);
    sol := RAG:-HasRealSolutions(sys);
    tf := time[real]() - ti;
    printf("time= %esecs\n", tf);
    return sol
end proc

benchSamplePoints := proc(f, g::list := [])
local sys, vars, R, P, i, ti, tf;
    ti := time[real]();
    sys := [f < 0];
    for i to nops(g) do sys := [op(sys), 0 <= g[i]] end do;
    vars := [op(indets(f))];
    R := RegularChains:-PolynomialRing(vars);
    P := SamplePoints(sys, R);
    tf := time[real]() - ti;
    printf("time= %esecs\n", tf);
    return P
end proc

printms := proc(ms)
local i;
    for i to nops(ms) do printf("%d ", i); lprint(ms[i]) end do; return
end proc

extractCertificates := proc(out)
local i, j, certificates, sos, rlist, oneWithBasis, s, idx, idxi;
    if not (out[1] = false) then
        certificates := [];
        s := 0;
        idx := 0;
        sos := out[4];
        rlist := out[3];
        oneWithBasis := [1, op(basis)];
        for i to nops(basis) + 1 do
            certificates := [op(certificates), 0];
            idxi := idx + rlist[i];
            for j from 1 + idx to idxi do
                s := s + oneWithBasis[i]*sos[2*j - 1]*sos[2*j]^2;
                certificates[i] :=
                    sos[2*j]^2*sos[2*j - 1] + certificates[i]
            end do;
            idx := idxi
        end do;
        return true, certificates, s
    end if;
    return false, [0], 0
end proc

checkRealCertify := proc(f, basis, test_name)
local st, out, isvalid, certificates, s, h;
    printf("\n>> Test\n%s\n", test_name);
    printf(">> input polynomial\n%s\n", convert(f, string));
    printf(">> basis\n%s\n", convert(basis, string));
    st := time();
    out := multivsos_internal(f, glist = basis, algo = 2, gmp = true);
    isvalid, certificates, s := extractCertificates(out);
    if isvalid then
        printf(">> Time taken\n%f\n", time() - st);
        lprint(">> Sums of squares multipliers", certificates);
        printf(">> Degree size\n%s\n", convert(foldl(
            (_x, _y) -> max(_x, _y), 0,
            op(map(h -> quickdegree(h, x), certificates))), string));
        return
    else
        printf(">> RealCertify couldnt find certificates\n%f\n",
            time() - st)
    end if
end proc

weifengExamples := proc()
local x, f, g_1, g_2, G;
    f := -x*(x - 1)^3*(x - 2)^2;
    g_1 := x*(x - 1/2)*(x - 1)^2*(x - 2);
    g_2 := -x*(x - 1)*(x - 2);
    G := [g_1, g_2];
    try checkWeifeng(f, G, x, "Test 1")
    catch: printf(">> Weifeng approach fails Test 1\n")
    end try;
    try checkRealCertify(f, G, "Test 1")
    catch: printf(">> RealCertify fails Test 1\n")
    end try;
    f := -x*(x - 3);
    g_1 := x*(x - 1)*(x - 2)*(x - 3);
    g_2 := -x*(x - 1)*(x - 2)*(x - 3);
    G := [g_1, g_2];
    try checkWeifeng(f, G, x, "Test 2")
    catch: printf(">> Weifeng approach fails Test 2\n")
    end try;
    try checkRealCertify(f, G, "Test 2")
    catch: printf(">> RealCertify fails Test 2\n")
    end try;
    f := -x + 10;
    g_1 := (x - 2)^3;
    g_2 := -(x - 2)^3;
    G := [g_1, g_2];
    try checkRealCertify(f, G, "Test 3")
    catch: printf(">> RealCertify fails Test 3\n")
    end try;
    checkWeifeng(f, G, x, "Test 3");
    try checkRealCertify(f, G, "Test 3")
    catch: printf(">> RealCertify fails Test 3\n")
    end try
end proc

weifengExamples1 := proc()
local x, f, g_1, g_2, G;
    f := -x*(x - 1)^3*(x - 2)^2;
    g_1 := x*(x - 1/2)*(x - 1)^2*(x - 2);
    g_2 := -x*(x - 1)*(x - 2);
    G := [g_1, g_2];
    try checkWeifeng(f, G, x, "Test 1")
    catch: printf(">> Weifeng approach fails Test 1\n")
    end try
end proc

realCertifyIssues1 := proc()
local x;
    try
        checkRealCertify(x + 1, [x*(x - 1)*(x - 2), -x*(x - 1)*(x - 2)],
            "Test")
    catch: printf(">> RealCertify fails with test\n")
    end try;
    checkWeifeng(x + 1, [x*(x - 1)*(x - 2), -x*(x - 1)*(x - 2)], x, "Test")
end proc

oldProblematicExamples1 := proc()
    checkWeifeng(x + 101/100, [
        (x - 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25),
        (-x + 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25)],
        x, "Works");
    checkRealCertify(x + 101/100, [-x^2 + 100,
        (x - 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25),
        (-x + 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25)],
        "Works");
    checkWeifeng(x + 53/100, [(x - 577/100)*(x - 317/50)*(x - 1069/100)*
        (x - 1443/100)*(x - 381/25), -(x - 577/100)*(x - 317/50)*
        (x - 1069/100)*(x - 1443/100)*(x - 381/25)], x, "Now works!");
    checkRealCertify(x + 53/100, [-x^2 + 100, (x - 577/100)*(x - 317/50)*
        (x - 1069/100)*(x - 1443/100)*(x - 381/25), -(x - 577/100)*
        (x - 317/50)*(x - 1069/100)*(x - 1443/100)*(x - 381/25)], "Works")
end proc

oldProblematicExamples2 := proc()
    checkWeifeng((x - 7)*(x - 71/10), [
        (x - 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25),
        (-x + 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25)],
        x, "PASSED");
    checkWeifeng((x - 7)*(x - 71/10), [
        (x - 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25),
        (-x + 118/25)^3*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25)
        ], x, "FAILS");
    checkWeifeng((x - 10)*(x - 15), [
        (x - 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25),
        (-x + 118/25)^3*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25)
        ], x, "PASSED")
end proc

leftStrictPositiveBenchmark := proc(num_iterations, basisGeneratorFunc, maxtime
)
local i, test_name1, intervals1, basis1, isolated_points1,
archimedean_poly1, f1, benchmarks;
    printf("\n>> Start benchmark\n");
    benchmarks := [];
    for i to num_iterations do
        intervals1 := intervalsGenerator(x, 3, 1, 10, 100);
        basis1 := basisGeneratorFunc(x, intervals1);
        isolated_points1 := getIsolatedPoints(intervals1);
        archimedean_poly1 :=
            getArchimedeanPolynomial(x, isolated_points1, 2);
        f1 := strictlyLeftPolynomial(x, isolated_points1, 10);
        benchmarks := [op(benchmarks), [f1, basis1, archimedean_poly1]]
    end do;
    for i to num_iterations do
        test_name1 :=
            cat("Batch: ", convert(i, string), " Test 1 - Weifeng");
        try
            timelimit(maxtime, checkWeifeng(benchmarks[i][1],
                benchmarks[i][2], x, test_name1));
            printf(">> Succeeds Weifeng %s\n", test_name1)
        catch: printf(">> Timeout Weifeng %s\n", test_name1)
        end try;
        test_name1 := cat("Batch: ", convert(i, string),
            " Test 1 - RealCertify without Archimedean polynomial");
        try
            timelimit(maxtime, checkRealCertify(benchmarks[i][1],
                benchmarks[i][2], test_name1));
            printf(">> Succeeds RealCertify %s\n", test_name1)
        catch: printf(">> Timeout RealCertify %s\n", test_name1)
        end try;
        test_name1 := cat("Batch: ", convert(i, string),
            " Test 1 - RealCertify with Archimedean polynomial");
        try
            timelimit(maxtime, checkRealCertify(benchmarks[i][1],
                [op(benchmarks[i][2]), benchmarks[i][3]], test_name1));
            printf(">> Succeeds RealCertify %s\n", test_name1)
        catch: printf(">> Timeout RealCertify %s\n", test_name1)
        end try
    end do
end proc

rightStrictPositiveBenchmark := proc(
num_iterations, basisGeneratorFunc, maxtime)
local i, test_name1, intervals1, basis1, isolated_points1,
archimedean_poly1, f1, benchmarks;
    printf("\n>> Start benchmark\n");
    benchmarks := [];
    for i to num_iterations do
        intervals1 := intervalsGenerator(x, 3, 1, 10, 100);
        basis1 := basisGeneratorFunc(x, intervals1);
        isolated_points1 := getIsolatedPoints(intervals1);
        archimedean_poly1 :=
            getArchimedeanPolynomial(x, isolated_points1, 2);
        f1 := strictlyRightPolynomial(x, isolated_points1, 10);
        benchmarks := [op(benchmarks), [f1, basis1, archimedean_poly1]]
    end do;
    for i to num_iterations do
        test_name1 :=
            cat("Batch: ", convert(i, string), " Test 1 - Weifeng");
        try
            timelimit(maxtime, checkWeifeng(benchmarks[i][1],
                benchmarks[i][2], x, test_name1));
            printf(">> Succeeds Weifeng %s\n", test_name1)
        catch: printf(">> Timeout Weifeng %s\n", test_name1)
        end try;
        test_name1 := cat("Batch: ", convert(i, string),
            " Test 1 - RealCertify without Archimedean polynomial");
        try
            timelimit(maxtime, checkRealCertify(benchmarks[i][1],
                benchmarks[i][2], test_name1));
            printf(">> Succeeds RealCertify %s\n", test_name1)
        catch: printf(">> Timeout RealCertify %s\n", test_name1)
        end try;
        test_name1 := cat("Batch: ", convert(i, string),
            " Test 1 - RealCertify with Archimedean polynomial");
        try
            timelimit(maxtime, checkRealCertify(benchmarks[i][1],
                [op(benchmarks[i][2]), benchmarks[i][3]], test_name1));
            printf(">> Succeeds RealCertify %s\n", test_name1)
        catch: printf(">> Timeout RealCertify %s\n", test_name1)
        end try
    end do
end proc

productGensBenchmark := proc(num_iterations, basisGeneratorFunc, maxtime)
local i, test_name1, intervals1, basis1, isolated_points1,
archimedean_poly1, f1, benchmarks;
    printf("\n>> Start benchmark\n");
    benchmarks := [];
    for i to num_iterations do
        intervals1 := intervalsGenerator(x, 3, 1, 10, 100);
        basis1 := basisGeneratorFunc(x, intervals1);
        isolated_points1 := getIsolatedPoints(intervals1);
        archimedean_poly1 :=
            getArchimedeanPolynomial(x, isolated_points1, 2);
        f1 := basis1[1]*basis1[2];
        benchmarks := [op(benchmarks), [f1, basis1, archimedean_poly1]]
    end do;
    for i to num_iterations do
        test_name1 := cat("Batch: ", convert(i, string), " Test Weifeng");
        try
            timelimit(maxtime, checkWeifeng(benchmarks[i][1],
                benchmarks[i][2], x, test_name1));
            printf(">> Succeeds Weifeng %s\n", test_name1)
        catch: printf(">> Timeout Weifeng %s\n", test_name1)
        end try;
        test_name1 := cat("Batch: ", convert(i, string),
            " Test - RealCertify without Archimedean polynomial");
        try
            timelimit(maxtime, checkRealCertify(benchmarks[i][1],
                benchmarks[i][2], test_name1));
            printf(">> Succeeds RealCertify %s\n", test_name1)
        catch: printf(">> Timeout RealCertify %s\n", test_name1)
        end try;
        test_name1 := cat("Batch: ", convert(i, string),
            " Test - RealCertify with Archimedean polynomial");
        try
            timelimit(maxtime, checkRealCertify(benchmarks[i][1],
                [op(benchmarks[i][2]), benchmarks[i][3]], test_name1));
            printf(">> Succeeds RealCertify %s\n", test_name1)
        catch: printf(">> Timeout RealCertify %s\n", test_name1)
        end try
    end do
end proc

archimedeanBenchmark := proc(num_iterations, basisGeneratorFunc, maxtime)
local i, test_name1, intervals1, basis1, isolated_points1,
archimedean_poly1, f1, benchmarks;
    printf("\n>> Start benchmark\n");
    benchmarks := [];
    for i to num_iterations do
        intervals1 := intervalsGenerator(x, 3, 1, 10, 100);
        basis1 := basisGeneratorFunc(x, intervals1);
        isolated_points1 := getIsolatedPoints(intervals1);
        archimedean_poly1 :=
            getArchimedeanPolynomial(x, isolated_points1, 2);
        f1 := archimedean_poly1 + 1;
        benchmarks := [op(benchmarks), [f1, basis1, archimedean_poly1]]
    end do;
    for i to num_iterations do
        test_name1 := cat("Batch: ", convert(i, string), " Test Weifeng");
        try
            timelimit(maxtime, checkWeifeng(benchmarks[i][1],
                benchmarks[i][2], x, test_name1));
            printf(">> Succeeds Weifeng %s\n", test_name1)
        catch: printf(">> Timeout Weifeng %s\n", test_name1)
        end try;
        test_name1 := cat("Batch: ", convert(i, string),
            " Test - RealCertify without Archimedean polynomial");
        try
            timelimit(maxtime, checkRealCertify(benchmarks[i][1],
                benchmarks[i][2], test_name1));
            printf(">> Succeeds RealCertify %s\n", test_name1)
        catch: printf(">> Timeout RealCertify %s\n", test_name1)
        end try;
        test_name1 := cat("Batch: ", convert(i, string),
            " Test - RealCertify with Archimedean polynomial");
        try
            timelimit(maxtime, checkRealCertify(benchmarks[i][1],
                [op(benchmarks[i][2]), benchmarks[i][3]], test_name1));
            printf(">> Succeeds RealCertify %s\n", test_name1)
        catch: printf(">> Timeout RealCertify %s\n", test_name1)
        end try
    end do
end proc

natGensBenchmark := proc(num_iterations, basisGeneratorFunc, maxtime)
local i, test_name1, test_name2, test_name3, test_name4, intervals1, basis1,
isolated_points1, nat_gens;
    for i to num_iterations do
        intervals1 := intervalsGenerator(x, 3, 1, 10, 100);
        basis1 := basisGeneratorFunc(x, intervals1);
        print("Basis", basis1);
        isolated_points1 := getIsolatedPoints(intervals1);
        nat_gens := gen_nat_gens(basis1, x);
        test_name1 := cat("Batch: ", convert(i, string), " Test Weifeng");
        try
            map(f1 ->
                timelimit(maxtime, checkWeifeng(f1, basis1, x, test_name1))
                , nat_gens);
            printf(">> Succeeds Weifeng %s\n", test_name1)
        catch: printf(">> Timeout Weifeng %s\n", test_name1)
        end try
    end do
end proc

natGensBenchmark2 := proc(x, num_points)
local
i, _p, pos_isolated_points, isolated_points, basis_poly, basis, tempPoly;
    pos_isolated_points := [seq(i, i = 1 .. num_points)];
    isolated_points := sort(
        [op(map(p -> -p, pos_isolated_points)), op(pos_isolated_points)]);
    basis_poly := mul(_p, _p in map(p -> x - p, isolated_points));
    basis := [-basis_poly, basis_poly];
    printf("\n>> Start benchmark\n");
    try
        checkWeifeng(x + num_points, basis, x,
            "Left Natural Generator Test")
    catch: printf(">> Timeout Weifeng %s\n", "Left Natural Generator Test")
    end try;
    for i to 2*num_points - 1 do
        tempPoly := (x - isolated_points[i])*(x - isolated_points[i + 1]);
        try
            checkWeifeng(tempPoly, basis, x, cat(
                "In between Natural Generator Test ", convert(i, string)))
        catch:
            printf(">> Timeout Weifeng %s\n", cat(
                "In between Natural Generator Test ", convert(i, string)))
        end try
    end do;
    try
        checkWeifeng(-x + num_points, basis, x,
            "Right Natural Generator Test")
    catch:
        printf(">> Timeout Weifeng %s\n", "Right Natural Generator Test")
    end try
end proc

runBenchmark1 := proc()
    leftStrictPositiveBenchmark(100, linearBasisNoBoundedPoly, 300)
end proc

runBenchmark2 := proc()
    natGensBenchmark2(x, 1);
    natGensBenchmark2(x, 2);
    natGensBenchmark2(x, 3);
    natGensBenchmark2(x, 4);
    natGensBenchmark2(x, 5);
    natGensBenchmark2(x, 6);
    natGensBenchmark2(x, 7)
end proc

simple_test := proc()
    checkWeifeng(-(x - 1)^2, [x - 1, -x + 1], x, "PASSED");
    checkWeifeng(x + 2, [x - 1, -x + 1], x, "PASSED");
    checkWeifeng(x + 100, [x - 1, -x + 1], x, "PASSED")
end proc

example_11_paper := proc()
    checkWeifeng(-26*x^7 + 13*x^6 + 87*x^5 + 49*x^4 - 464*x^3 + 1512*x^2
         - 2211*x + 1092,
        [x*(x - 1/2)*(x - 1)^2*(x - 2), -x*(x - 1)*(x - 2)], x, "PASSED")
end proc


>> Start

>> Start benchmark

>> Test
Batch: 1 Test 1 - Weifeng
>> input polynomial
x+379/100
>> basis
[(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25), -(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25)]
memory used=61.3MB, alloc=111.3MB, time=0.35
memory used=166.4MB, alloc=151.3MB, time=0.77
memory used=246.3MB, alloc=145.3MB, time=1.14
>> Time taken
1.145000
">> Sums of squares multipliers", [x+379/100-130/11698481*x^2*(x-851/100)*(x-99
/10)*(x-249/25)*(x-274/25)*(x-324/25)+130/11698481*(x+1)^2*(x-851/100)*(x-99/10
)*(x-249/25)*(x-274/25)*(x-324/25), 130/11698481*x^2, 130/11698481*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 1 Test 1 - Weifeng

>> Test
Batch: 1 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+379/100
>> basis
[(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25), -(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -6.292153
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 1 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 1 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+379/100
>> basis
[(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25), -(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25), -x^2+139876/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 3.127773
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19609
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [379/100*(1/
625000000000000000000000000000000000000000*119308760798162229834358991956231578\
51557991088517127496337813538760588695811582494687^(1/2)-7795636411960218238065\
5071624690124014664086786661075333068868771493583003137133032683/14130631357032\
3390960068931098161775804389956954624728784750979099695722366018430171449156250\
000000000000000000000000000000000000*x*1193087607981622298343589919562315785155\
7991088517127496337813538760588695811582494687^(1/2)+48805129061682955541518023\
968259830407871737540366697572434440813122277668481686535767/745679754988513936\
4647436997264473657223744430323204685211133461725367934882239059179375000000000\
00000000000000000000000000000000*x^2*119308760798162229834358991956231578515579\
91088517127496337813538760588695811582494687^(1/2)-5450283037697831534751024246\
8060770696569995052465892450982033593443846002865596029/23302492343391060514523\
2406164514801788242013447600146412847920678917747965069970599355468750000000000\
00000000000000000000000000*x^3*119308760798162229834358991956231578515579910885\
17127496337813538760588695811582494687^(1/2))^2+379/100*(1/10711018568630513034\
7732249772406626059727587371605544418841242157569357553441970069958460437500000\
00000000000000000000000000000000000*x*60856904414954192273120043080757226398051\
9828118595910159244092257204882156389536758872302215369407612453318155476441678\
2910640897930407639406452430509135495024962533148437984773208674625710047312616\
0249919139957521137377595266210782045996416057775929187868702031463^(1/2)-31812\
7554414753379673647995450536447433303395128067765545490202228693803816529244318\
7245549965796430780582442209889403188021393898737862923436075107187132947747848\
481938231/250894229942918009041556905840852681390385813043616387763540605317119\
4270103848683867382512431437201568491582105361319583983608549608512384319942459\
8075261770386553979009061612686381409241878493208344430210727225231339618071927\
0328092208098680976978599884023342807812500000000000000000000000000000000000000
*x^2*60856904414954192273120043080757226398051982811859591015924409225720488215\
6389536758872302215369407612453318155476441678291064089793040763940645243050913\
5495024962533148437984773208674625710047312616024991913995752113737759526621078\
2045996416057775929187868702031463^(1/2)+65179978117488825833181830824810563012\
8716747755054978429910171174111956540543570449037570379048885646192363116993203\
2099033718179951976071401150004438649776676821857192126467/13381025596955627148\
8830349781788096741539100289928740140554989502463694405538596472927067329676650\
7503195510456192703778124591226457873271637302645230680627753949545547149952676\
6070084929001863044450362779054520123381129638361084164917765262985438858660481\
244949750000000000000000000000000000000000000000000000*x^3*60856904414954192273\
1200430807572263980519828118595910159244092257204882156389536758872302215369407\
6124533181554764416782910640897930407639406452430509135495024962533148437984773\
2086746257100473126160249919139957521137377595266210782045996416057775929187868\
702031463^(1/2))^2+379/100*(1/1331650849157156049461167323406623866049360362605\
9957252656451235127568541019074576157041077951660933548553746236508251074169615\
2254664550468517320592150906591159439817152543083750000000000000000000000000000\
000000000000000*x^2*98952145534693829453020196685861053619605477762211423603460\
0275052605504580115834813189942542473698485359592240932869882753259227111158306\
2444568500875655204087580157868499087068581362077182062933355873435310282759036\
5817802871789406487527512017265273015570851875797916845246394074617722109600214\
0805389369881966549188759031049461015963628118094219214402676690692671268908190\
9594199751749717889973160149144750698828309842980797692650602893^(1/2)-13220117\
1172521416410893365447941501840506938759378134457076077017564455015972202173465\
5919900262372496398135029686719651362673699952104006822131738921980357678527544\
4326749416774412055510742996621326561786324304271542626048287493462892430979254\
71806286750058061/3092254547959182170406881146433157925612671180069106987608125\
8595393922018128619837912185704452303077667487257529152183836039350847223697070\
1392765652364225127736879933390596470893167564911939466667371044853446336219893\
1806339743418952735234750539539781736589121118684901413949814831803815925006690\
0168417808811454662148719720295656748863378690444350450083646584145977153380967\
4818742242178684061661254660773459338384682593149927895331340406250000000000000\
0000000000000000000000000000*x^3*9895214553469382945302019668586105361960547776\
2211423603460027505260550458011583481318994254247369848535959224093286988275325\
9227111158306244456850087565520408758015786849908706858136207718206293335587343\
5310282759036581780287178940648752751201726527301557085187579791684524639407461\
7722109600214080538936988196654918875903104946101596362811809421921440267669069\
26712689081909594199751749717889973160149144750698828309842980797692650602893^(
1/2))^2+22289717521848813941894469842786451903086473186868220604938667428833450\
1460829713844673592279531431011174870854850335693348070909798428618857171025792\
1796397931374280785043988184131378130168338763919310098594882653475213754805581\
0782746016111412660382958849755948034013503098702287368709243508627534933293298\
500417512684525470815324155990690957541013/580530277496606542994633270551903986\
0483616505403091558972154815186412459648193651787602930544193947853245272598657\
6697820969291673922967369032031110707215775580466029230511990804824933746674423\
0142864318560996179251755627099954352541842498940252480724996585250493750000000\
0000000000000000000000000000000000000000000000000000000000000000000000000000000\
00000000*x^6, 46910815101307240826135430129839743270764088930300948579733512903\
9956931541933659/25000000000000000000000000000000000000000000000000000000000000\
000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 1 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 2 Test 1 - Weifeng
>> input polynomial
x+553/100
>> basis
[(x-117/100)*(x-113/25)*(x-243/20)*(x-131/10)*(x-1257/50), -(x-117/100)*(x-113/25)*(x-243/20)*(x-131/10)*(x-1257/50)]
memory used=372.3MB, alloc=176.3MB, time=1.68
>> Time taken
0.805000
">> Sums of squares multipliers", [x+553/100-52/17043241*x^2*(x-117/100)*(x-113
/25)*(x-243/20)*(x-131/10)*(x-1257/50)+52/17043241*(x+1)^2*(x-117/100)*(x-113/
25)*(x-243/20)*(x-131/10)*(x-1257/50), 52/17043241*x^2, 52/17043241*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 2 Test 1 - Weifeng

>> Test
Batch: 2 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+553/100
>> basis
[(x-117/100)*(x-113/25)*(x-243/20)*(x-131/10)*(x-1257/50), -(x-117/100)*(x-113/25)*(x-243/20)*(x-131/10)*(x-1257/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.106908
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 2 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 2 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+553/100
>> basis
[(x-117/100)*(x-113/25)*(x-243/20)*(x-131/10)*(x-1257/50), -(x-117/100)*(x-113/25)*(x-243/20)*(x-131/10)*(x-1257/50), -x^2+1841449/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.211576
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20032
time= 0.120000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [553/100*(1/
50000000000000000000000000000000000000000000*3201522815632803795000987315858491\
372979819901526837688225048765549255480044260360287777^(1/2)-119840333635228740\
69303860360694328459208505151609137120781332446073495263019505817195123/1180294\
7446966269990903639904464971528385602703628941610589679782324921869763173194927\
604540000000000000000000000000000000000000000000*x*3201522815632803795000987315\
858491372979819901526837688225048765549255480044260360287777^(1/2)+247086963775\
634248422892022102131887650838153425161505483305791750651759345879160490999/300\
1427639655753557813425608617335662168581157681410332710983217702427012541494087\
769790937500000000000000000000000000000000000000000*x^2*32015228156328037950009\
87315858491372979819901526837688225048765549255480044260360287777^(1/2)-4265609\
91837752559714073376460987318086436081153840811864643099080763036689895054249/
2501189699713127964844521340514446385140484298067841943925819348085355843784578\
40647482578125000000000000000000000000000000000000000*x^3*320152281563280379500\
0987315858491372979819901526837688225048765549255480044260360287777^(1/2))^2+
553/100*(1/88522105852247024931777299283487286462892020277217062079422598367436\
9140232237989619570340500000000000000000000000000000000000000000000*x*455541185\
9472608785480193287507154311109667671557288946194847326751993248888286157310028\
0275068873065735699037770909990581669043847091140811056752303201975673817557263\
8121151330477755892516882434991212082192901277154748350998293954838006418407976\
99086878285047191227983^(1/2)-2701874011564523083123427520289847898607318394502\
6780827883964085651152680196626803670365673812527932895748279952652494720496222\
7366768292695812028754080371919524810532761439167/28471324121703804909251208046\
9197144444354229472330559137177957921999578055517884831876751719180456660848118\
9860681874411354315240443196300691047018950123479613597328988257195815485974328\
2305152186950755137056329822171771937393372177375401150498561929298928154494517\
48937500000000000000000000000000000000000000000*x^2*455541185947260878548019328\
7507154311109667671557288946194847326751993248888286157310028027506887306573569\
9037770909990581669043847091140811056752303201975673817557263812115133047775589\
2516882434991212082192901277154748350998293954838006418407976990868782850471912\
27983^(1/2)+1917039028138739303115021210462046049785749218455944175043096261790\
9919976322889520851690414207215122257981906297736344134628249871623769860993151\
4602084098716906636482646106733/94904413739012683030837360156399048148118076490\
7768530457259859739998593518392949439589172397268188869493729953560624803784771\
7468143987668970156729833744932045324429960857319384953247760768384062316918379\
0187766073905906457977907257918003834995206430996427181648391631250000000000000\
000000000000000000000000000000*x^3*45554118594726087854801932875071543111096676\
7155728894619484732675199324888828615731002802750688730657356990377709099905816\
6904384709114081105675230320197567381755726381211513304777558925168824349912120\
8219290127715474835099829395483800641840797699086878285047191227983^(1/2))^2+
553/100*(1/32015004340324990446702037498803301339731075933932028782830373224625\
0305473657682296573636566881838399783596578523945433020862182631069664919357000\
3038917601193642871540586849285797775000000000000000000000000000000000000000000\
00*x^2*140744315512697121576517442948412636363678880831360957700958079932997886\
6143461966067304976417279045415679866454771172848649078849664508292690802193904\
0825946344281182944036747072219435127911811643992528901497921393482444654583070\
7062159482611176155169038308520112494853537370568873914807290073689182366724191\
3808226315969025473144358197764980859445955702485124612400085737055635237134182\
0518329804479471734222030085035862584788582959465968575072428510^(1/2)-25463041\
8523164210594113742641311384784563376560943557542769821138017595274628228644579\
2625832548784597439961465556039355927740501798169277556808980943358184281267546\
2653903359196809216787433960278497346417909744509466356666057573452719698704670\
7578863615449172225193/21991299298858925246330850460689474431824825129900149640\
7746999895309197834915932198016402565199850846199979133557995757601418570260079\
4207329378427975129054116293934835005741730034286738736220569373832640859050217\
7316319772786047978462419157996274245162235706267577320865214151386549188639074\
0139347448006549032535361870160230178805968400778259288430578513300720687513396\
4149430058022159455989031949917458472192200786853528873216087416557589855066954\
687500000000000000000000000000000000000000000*x^3*14074431551269712157651744294\
8412636363678880831360957700958079932997886614346196606730497641727904541567986\
6454771172848649078849664508292690802193904082594634428118294403674707221943512\
7911811643992528901497921393482444654583070706215948261117615516903830852011249\
4853537370568873914807290073689182366724191380822631596902547314435819776498085\
9445955702485124612400085737055635237134182051832980447947173422203008503586258\
4788582959465968575072428510^(1/2))^2+78395464146297011058884933838195681166628\
3255943368596944874638668945539064487044841417421447285525220531534995720223765\
8348702834331851544574355879585983252242129634442458658744957508071307685773797\
8292868257468763875868952908116932980507348269709300105390956608190483850462491\
1026737673664825043806540044408542974096923723522698182127490235300635554897/12\
8794879260484628700295049743763968809091002505405168983205418655592309889747792\
0749520545971641671382975733057975430553551244330339743449390760692189361067046\
0114345080427848310813570516871918102393123517555906495122990299403992928343903\
2152444273045093211425362377433593750000000000000000000000000000000000000000000\
000000000000000000000000000000000000000000000*x^6, 3691173678123739898260311061\
6835578753320686432280422771460373438487232409219750153/10000000000000000000000\
000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 2 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 3 Test 1 - Weifeng
>> input polynomial
x+3/4
>> basis
[(x-5/4)*(x-351/50)*(x-1179/100)*(x-779/50)*(x-829/50), -(x-5/4)*(x-351/50)*(x-1179/100)*(x-779/50)*(x-829/50)]
memory used=549.2MB, alloc=184.3MB, time=2.41
>> Time taken
0.723000
">> Sums of squares multipliers", [x+3/4-155/11424286*x^2*(x-5/4)*(x-351/50)*(x
-1179/100)*(x-779/50)*(x-829/50)+155/11424286*(x+1)^2*(x-5/4)*(x-351/50)*(x-\
1179/100)*(x-779/50)*(x-829/50), 155/11424286*x^2, 155/11424286*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 3 Test 1 - Weifeng

>> Test
Batch: 3 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+3/4
>> basis
[(x-5/4)*(x-351/50)*(x-1179/100)*(x-779/50)*(x-829/50), -(x-5/4)*(x-351/50)*(x-1179/100)*(x-779/50)*(x-829/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -12.172141
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 3 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 3 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+3/4
>> basis
[(x-5/4)*(x-351/50)*(x-1179/100)*(x-779/50)*(x-829/50), -(x-5/4)*(x-351/50)*(x-1179/100)*(x-779/50)*(x-829/50), -x^2+772641/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.000006
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19379
time= 0.113000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [(1/
2500000000000000000000000000000000000000000*14247774724329116626372170116209633\
853617643723912835829035667064040680694094085597022^(1/2)-748668924024806772757\
0700942056397702614728093008527155078961541498314721147963765411/17809718405411\
3957829652126452620423170220546548910447862945838300508508676176069962775000000\
000000000000000000000000000000000000*x*1424777472432911662637217011620963385361\
7643723912835829035667064040680694094085597022^(1/2)+62600028657285178829818994\
49622071283503577171578412208647922800351114267019619154849/2849554944865823325\
2744340232419267707235287447825671658071334128081361388188171194044000000000000\
00000000000000000000000000000000*x^2*142477747243291166263721701162096338536176\
43723912835829035667064040680694094085597022^(1/2)+4876902265274709581274752024\
403877571380389189270159281452051531898481446328619679/219196534220447948098033\
3864032251362095022111371205512159333394467797029860628553388000000000000000000\
00000000000000000000000000*x^3*142477747243291166263721701162096338536176437239\
12835829035667064040680694094085597022^(1/2))^2+(1/3561943681082279156593042529\
0524084634044109309782089572589167660101701735235213992555000000000000000000000\
0000000000000000000000*x*232250144046587746198534354522099351029585852320268412\
5663535212341458500047994488261131605504313271300964572458229220831121516048775\
5961667069931384718759814971143957808805764300918046054361384688790610749380164\
933621155535880113449653489660558728898595597^(1/2)-426889344337880672625293114\
6299231096320934092312934970043012010506874936088665814604341751980137754102057\
72053362507271898530174709300124709618177740926920305607436136091/2322501440465\
8774619853435452209935102958585232026841256635352123414585000479944882611316055\
0431327130096457245822922083112151604877559616670699313847187598149711439578088\
0576430091804605436138468879061074938016493362115553588011344965348966055872889\
859559700000000000000000000000000000000000000000000*x^2*23225014404658774619853\
4354522099351029585852320268412566353521234145850004799448826113160550431327130\
0964572458229220831121516048775596166706993138471875981497114395780880576430091\
8046054361384688790610749380164933621155535880113449653489660558728898595597^(1
/2)+234537861993746975768216017725489137101352170102714037856385595118426542662\
7795724585916524117560986490969847510526552431569573154923777883181537703107850\
32458321947470677/2977565949315227515365825057975632705507510927182928366235301\
5542839211539076852413604251352619400914114930416131143856809250205753533284188\
5511940829727689935527486638574432875652795462235402367805007830120258524790014\
8145625655570468396110328042166486615000000000000000000000000000000000000000000\
00000*x^3*232250144046587746198534354522099351029585852320268412566353521234145\
8500047994488261131605504313271300964572458229220831121516048775596166706993138\
4718759814971143957808805764300918046054361384688790610749380164933621155535880\
113449653489660558728898595597^(1/2))^2+(1/978048075044323875219609229646504870\
8822161452900466956004923339846461583968924551353889797787874858735548384723822\
6563214204157773999974635568677546880012779493296744734810000000000000000000000\
000000000000000000000000*x^2*18428190214387811555525462751434566267171860805614\
0484174495487045090590302288879109530893201073425128120267419679415960493460148\
6817846996597453499372336804272637266896020333391598089162192338169774792717532\
5270501458622402454676470412231429686976713419586478752976937884112983917146658\
9148500024171730967233154570285612917005201028494901737086483943220508552396328\
42305233510544232049106973125507405228344909731763897967025707641062^(1/2)-7256\
9682497807014303626469064383737755538091623915454447519932718171926367915941230\
0311295298560561499214796746865523530932064969504837093280371288270996573181065\
0139990556388610087738388285021240629108277016861045712846055716686414825124979\
508945793961818737/115176188839923822222034142196466039169824130035087802609059\
6794031816189389305494434568082506708907050751671372996349753084125929261154372\
8734084371077105026703982918100127083697488057263702113561092454484578294063411\
6390015341727940076446435543604458872415492206105861775706149482166618217812515\
1073318545207216064285080731282506428093135856790524645128178452477052644077094\
4090145030691858203442128267715568582352436229391067275663750000000000000000000\
000000000000000000000000*x^3*18428190214387811555525462751434566267171860805614\
0484174495487045090590302288879109530893201073425128120267419679415960493460148\
6817846996597453499372336804272637266896020333391598089162192338169774792717532\
5270501458622402454676470412231429686976713419586478752976937884112983917146658\
9148500024171730967233154570285612917005201028494901737086483943220508552396328\
42305233510544232049106973125507405228344909731763897967025707641062^(1/2))^2+
1088485328020195130319755604244490368693549096870842399665263735594698697909395\
1685439406876191737955815352346292693091644873297591243719597619456514312667329\
9083952420383942519965085569388877254460750010379767917812720340746121071293150\
3867605241459580605533189078329233156730450005392166527013331509783471822426282\
66777440854340348605110655089122553/2355225510457738718826386504751292189390901\
7840586751386785868128204439448095525933314142069520553280343273780085732348952\
8624489497875280891634923449149335585354272712047798050078796730451712831635449\
4312168863055604405010880982000865575386524939027623417082627500000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000*x
^6, 723540874236054153667348965021680123803451173844119389765438408900446749718\
69601/1000000000000000000000000000000000000000000000000000000000000000000000000\
00000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 3 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 4 Test 1 - Weifeng
>> input polynomial
x+1947/100
>> basis
[(x-493/100)*(x-1149/100)*(x-139/10)*(x-1973/100)*(x-2453/100), (-x+493/100)*(x-1149/100)*(x-139/10)*(x-1973/100)*(x-2453/100)]
memory used=725.4MB, alloc=185.2MB, time=3.15
memory used=880.9MB, alloc=185.2MB, time=3.91
>> Time taken
1.093000
">> Sums of squares multipliers", [x+1947/100-59/4090148*x^2*(x-493/100)*(x-\
1149/100)*(x-139/10)*(x-1973/100)*(x-2453/100)-59/4090148*(x+1)^2*(-x+493/100)*
(x-1149/100)*(x-139/10)*(x-1973/100)*(x-2453/100), 59/4090148*x^2, 59/4090148*(
x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 4 Test 1 - Weifeng

>> Test
Batch: 4 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+1947/100
>> basis
[(x-493/100)*(x-1149/100)*(x-139/10)*(x-1973/100)*(x-2453/100), (-x+493/100)*(x-1149/100)*(x-139/10)*(x-1973/100)*(x-2453/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.707088
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 4 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 4 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+1947/100
>> basis
[(x-493/100)*(x-1149/100)*(x-139/10)*(x-1973/100)*(x-2453/100), (-x+493/100)*(x-1149/100)*(x-139/10)*(x-1973/100)*(x-2453/100), -x^2+7038409/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.253211
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20490
time= 0.119000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1947/100*(1/
500000000000000000000000000000000000000000000*397512067299034330232401815587944\
152324584904091137914820214524346079435521342270069994130^(1/2)-889919891361723\
159136527219019657942087479021083816396861316529069443327023468392496307869/773\
9559950312198409624863349497272645759668082654455201549576789018166609600533998\
262785711100000000000000000000000000000000000000000000*x*3975120672990343302324\
01815587944152324584904091137914820214524346079435521342270069994130^(1/2)+1514\
6807869510768821169317018658139273486410340337823577884806714895050052120807373\
399911/238507240379420598139441089352766491394750942454682748892128714607647661\
3128053620419964780000000000000000000000000000000000000000000000*x^2*3975120672\
9903433023240181558794415232458490409113791482021452434607943552134227006999413\
0^(1/2)-49451002869371160168103163494758164681665278624440591297355287318816493\
240190684021501/530016089732045773643202420783925536432779872121517219760286032\
461439247361789693426658840000000000000000000000000000000000000000000000*x^3*39\
7512067299034330232401815587944152324584904091137914820214524346079435521342270\
069994130^(1/2))^2+1947/100*(1/773955995031219840962486334949727264575966808265\
4455201549576789018166609600533998262785711100000000000000000000000000000000000\
0000000000*x*125075253676696027325992086940930176840369101090682037428423105012\
3953959039358992237942175443967148768611544522399463744565272686420533606806123\
5992879327571492098871624550240386149185173539822678191167966046858451982287209\
0977104740024832792233440817686364558599221739477^(1/2)-65155263952390628134268\
3009452766083596518822302467216048944324954413288960767473809571190621083607864\
259673525875811482698974988766162072203395114195921092840947672559428185695909/
7504515220601761639559525216455810610422146065440922245705386300743723754236153\
9534276530526638028926116692671343967824673916361185232016408367415957275965428\
9525932297473014423168951110412389360691470077962811507118937232545862628440148\
9967534006449061181873515953304368620000000000000000000000000000000000000000000\
00*x^2*125075253676696027325992086940930176840369101090682037428423105012395395\
9039358992237942175443967148768611544522399463744565272686420533606806123599287\
9327571492098871624550240386149185173539822678191167966046858451982287209097710\
4740024832792233440817686364558599221739477^(1/2)+21609545406634141843234151845\
8050510971649435109885030160702879648212252475845563189318523118775595531648423\
51290631116767163368881146635232992481781038091210309625862316484771393493/1302\
8672257989169513124175723013560087538448030279378898794073438791187073326656169\
1452309942079911330063702554416610806725549238168805584042304541592492995536376\
0299127557316706890540122243731528978246663129881088748154917614344841041925341\
5857650085175662974854085597862187500000000000000000000000000000000000000000000\
00*x^3*125075253676696027325992086940930176840369101090682037428423105012395395\
9039358992237942175443967148768611544522399463744565272686420533606806123599287\
9327571492098871624550240386149185173539822678191167966046858451982287209097710\
4740024832792233440817686364558599221739477^(1/2))^2+1947/100*(1/47196776135580\
6785057089580614737483579310667531317141167404125660845006570562177825080436860\
9035702349499932721159092532990185142016176164640247970831640735081311126263985\
959380275793500000000000000000000000000000000000000000000000*x^2*98299953259600\
7910961399763110096855423293237329145720767067811118585306623011285492675679815\
4748993283939423117430747096007694601024462873188727129872665910030938487099359\
3384523784643978111976846406275196647276363212510664466806754722900417977169183\
7944768201811505277980127986666095084590784469317703853273186032853359547617750\
3234787779323424554876101105658114218195275670466798600047649634215952385423303\
74044216576133178226324722975054885892190549275578^(1/2)-1381158952198560973195\
6511460825389985911209041778803185887976214459071921300968444540331808948779571\
9407524677220710854722939978015944696313168227985609291646255756386574499667529\
9481840776923285527691741366851611905797793719292120029907625628190288088277715\
861321307601729/163833255432667985160233293851682809237215539554857620127844635\
1864308844371685475821126133025791498880656570519571791182667949100170743812198\
1211883121109850051564145165598897420630773996351996141067712532774546060535418\
4440778011257871500696628615306324128033635250879663354664444349180765130744886\
2839755455310054755599246029583872464629887237425812683517609685703032545945077\
7997666746082723693253975705506234070276268886303772078716250914764869842487926\
3000000000000000000000000000000000000000000000000*x^3*9829995325960079109613997\
6311009685542329323732914572076706781111858530662301128549267567981547489932839\
3942311743074709600769460102446287318872712987266591003093848709935933845237846\
4397811197684640627519664727636321251066446680675472290041797716918379447682018\
1150527798012798666609508459078446931770385327318603285335954761775032347877793\
2342455487610110565811421819527567046679860004764963421595238542330374044216576\
133178226324722975054885892190549275578^(1/2))^2+902426092825239383634941106476\
5329366226826729494568551207416202355641448903138718712188227333684972973594535\
6003552360961967130622002680132557311080634625588908551349636900526501358377581\
3237834475635521930122427316028678119616529439949416140635201797552371884672937\
8275767526573327247187840100274392914059128536527236099381199490382910459153286\
82256285299749908633937/2033953502021284286488458350856415649168821332989174263\
0496986942832348884471270018075134212394816952114400972480384748013231292158602\
9682382318933395109775029848678418808239065049501517235983059336714072230919281\
6928095427959334552618899318818248373855199021920456601132954960937500000000000\
0000000000000000000000000000000000000000000000000000000000000000000000000000000\
000000*x^6, 2497663482573723752015774662195399745850555028703682432002786800459\
705945354843083/156250000000000000000000000000000000000000000000000000000000000\
000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 4 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 5 Test 1 - Weifeng
>> input polynomial
x+21/100
>> basis
[(x-339/100)*(x-467/100)*(x-243/50)*(x-863/100)*(x-1209/100), -(x-339/100)*(x-467/100)*(x-243/50)*(x-863/100)*(x-1209/100)]
>> Time taken
0.546000
">> Sums of squares multipliers", [x+21/100-(x-339/100)*(x-467/100)*(x-243/50)*
(x-863/100)*(x-1209/100)*(1562500/17247447769*(x-339/100)*(x-467/100)*(x-243/50
)*(x-863/100)*(x-1209/100)-9681250000/17247447769)^2+(x-339/100)*(x-467/100)*(x
-243/50)*(x-863/100)*(x-1209/100)*(-1562500/17247447769*(x-339/100)*(x-467/100)
*(x-243/50)*(x-863/100)*(x-1209/100)-9681250000/17247447769)^2, (1562500/
17247447769*(x-339/100)*(x-467/100)*(x-243/50)*(x-863/100)*(x-1209/100)-\
9681250000/17247447769)^2, (-1562500/17247447769*(x-339/100)*(x-467/100)*(x-243
/50)*(x-863/100)*(x-1209/100)-9681250000/17247447769)^2]
>> Degree size
15
>> Succeeds Weifeng Batch: 5 Test 1 - Weifeng

>> Test
Batch: 5 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+21/100
>> basis
[(x-339/100)*(x-467/100)*(x-243/50)*(x-863/100)*(x-1209/100), -(x-339/100)*(x-467/100)*(x-243/50)*(x-863/100)*(x-1209/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -17.631053
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 5 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 5 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+21/100
>> basis
[(x-339/100)*(x-467/100)*(x-243/50)*(x-863/100)*(x-1209/100), -(x-339/100)*(x-467/100)*(x-243/50)*(x-863/100)*(x-1209/100), -x^2+1985281/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.964159
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19736
time= 0.111000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [(1/
50000000000000000000000000000000000000000000*1252567387692134404661865315793833\
1376747439946517470768284029047536806479899967037824722^(1/2)-31919177577303768\
905142329829284014881559535868143645558121757242975011475731213272219/626283693\
8460672023309326578969165688373719973258735384142014523768403239949983518912361\
000000000000000000000000000000000000000000*x*1252567387692134404661865315793833\
1376747439946517470768284029047536806479899967037824722^(1/2)+66141183472489914\
6927309496315361330723962719341577555499503921436222861186261328118023/93942554\
0769100803496398986845374853256057995988810307621302178565260485992497527836854\
150000000000000000000000000000000000000000000*x^2*12525673876921344046618653157\
938331376747439946517470768284029047536806479899967037824722^(1/2)-681818513907\
22147474144899471197671599169450691414399624448685254026785895473148028971/2505\
1347753842688093237306315876662753494879893034941536568058095073612959799934075\
64944400000000000000000000000000000000000000000000*x^3*125256738769213440466186\
53157938331376747439946517470768284029047536806479899967037824722^(1/2))^2+(1/
1043806156410112003884887763161527614728953328876455897357002420628067206658330\
58648539350000000000000000000000000000000000000000000*x*54997544484575214705298\
7402930486747092036747299976873483107171177128840788977032771667148338124331378\
6688328449655609306688668527571622467748006672134486348850487941631495119940894\
1379837170908230356541044276510983412009032471778570268721241536858299392423066\
58^(1/2)-1549718133345847576257912871501372404165922496360897196241144587471354\
1102210848506378994026444009701660940775046569248676676102863145230022301015489\
205095010051667582872816793/989955800722353864695377325274876144765666145139958\
3722695929081188319134201586589890008670086237964816038991209380096752039603349\
6289204419464120098420754279308782949366912158936094483706907634814641773879697\
7197701416162584492014264836982347663449389063615198440000000000000000000000000\
0000000000000000000*x^2*5499754448457521470529874029304867470920367472999768734\
8310717117712884078897703277166714833812433137866883284496556093066886685275716\
2246774800667213448634885048794163149511994089413798371709082303565410442765109\
8341200903247177857026872124153685829939242306658^(1/2)+22429635350663821042895\
8199114423649854617300655919553798896744959017849700735630870473179854229612453\
3155360694971868376169673565104155394971153740392990802542175306749320309573/32\
9985266907451288231792441758292048255222048379986124089864302706277304473386219\
6630002890028745988272012997069793365584013201116542973480648804003280691809310\
2927649788970719645364827902302544938213924626565906590047205419483067142161232\
744922114979635453839948000000000000000000000000000000000000000000000000*x^3*54\
9975444845752147052987402930486747092036747299976873483107171177128840788977032\
7716671483381243313786688328449655609306688668527571622467748006672134486348850\
4879416314951199408941379837170908230356541044276510983412009032471778570268721\
24153685829939242306658^(1/2))^2+(1/1185512025679938237869512684057811640686608\
7959700781420941265262226343621796519462839359977414402676129307677781153494805\
4648335265288414554172173838161610177732498491218748030000000000000000000000000\
000000000000000000000*x^2*63783523352583331979309586361039678484902615551260658\
2967143014985310990709224877608445491403562230004566112864496402235498687475861\
8364290720469845003332611599097662847392944020249090432686232019335972223613345\
3613586905934827001031374878632365754030243389375591510800460524691667378447532\
8818821014279910427884828534636187908159142622339512539794372343691883956723677\
05880335710335056751787262923047701075363439673833729530192490744467987^(1/2)-\
8970399231361984506313564914349241021758248421977887066202939470951181009738910\
7012142583171290916727415612907371052703268140665348944463991340438029427551337\
3918108538576309980686804237847181058682762646405004208143549767351562559350995\
2765752982748970498356454753/15308045604619999675034300726649522836376627732302\
5579912114323596474637770213970626026917936854935201095867087479136536519684994\
2068407429772912762800799826783783439083374306564859781703844695684640633333667\
2028867260857424358480247529970871767780967258413450141962592110525926000170827\
4078916517043427178502692358848312685097958194229361483009550649362486052149613\
6824941128057048041362042894310153144825808722552172009508724619777867231688000\
0000000000000000000000000000000000000000000*x^3*6378352335258333197930958636103\
9678484902615551260658296714301498531099070922487760844549140356223000456611286\
4496402235498687475861836429072046984500333261159909766284739294402024909043268\
6232019335972223613345361358690593482700103137487863236575403024338937559151080\
0460524691667378447532881882101427991042788482853463618790815914262233951253979\
4372343691883956723677058803357103350567517872629230477010753634396738337295301\
92490744467987^(1/2))^2+3476237876838591647866034634242064997595677997029381915\
1173313271254070369795450919379617692668377944173899423854994451713231215439686\
6207235142847815199534205742556418849981406614218810894312573057341765574765396\
7520219021080236558320959761474463642256263800969904803549628597344763001467425\
583213761489409193157442876971622188331353408659063143964321/387378076468863167\
8345977663551753130233595551968802469398434080586264309835178219725473328843470\
7258716187723279352285757005766718530582715123422351619423191323158437313820654\
1066423132858032416297833007858627652498886169069200950410363984657557382522759\
7184282908880000000000000000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000*x^6, 
7270455137087163342203132163267112453664547362341572077548960942583482604769/
3906250000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 5 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 6 Test 1 - Weifeng
>> input polynomial
x+1153/100
>> basis
[(x-807/100)*(x-969/100)*(x-1443/100)*(x-77/4)*(x-2027/100), -(x-807/100)*(x-969/100)*(x-1443/100)*(x-77/4)*(x-2027/100)]
memory used=1048.2MB, alloc=185.2MB, time=4.63
memory used=1219.6MB, alloc=185.2MB, time=5.36
>> Time taken
0.936000
">> Sums of squares multipliers", [x+1153/100-115/16405298*x^2*(x-807/100)*(x-\
969/100)*(x-1443/100)*(x-77/4)*(x-2027/100)+115/16405298*(x+1)^2*(x-807/100)*(x
-969/100)*(x-1443/100)*(x-77/4)*(x-2027/100), 115/16405298*x^2, 115/16405298*(x
+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 6 Test 1 - Weifeng

>> Test
Batch: 6 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+1153/100
>> basis
[(x-807/100)*(x-969/100)*(x-1443/100)*(x-77/4)*(x-2027/100), -(x-807/100)*(x-969/100)*(x-1443/100)*(x-77/4)*(x-2027/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.470278
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 6 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 6 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+1153/100
>> basis
[(x-807/100)*(x-969/100)*(x-1443/100)*(x-77/4)*(x-2027/100), -(x-807/100)*(x-969/100)*(x-1443/100)*(x-77/4)*(x-2027/100), -x^2+4959529/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.699916
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20401
time= 0.122000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1153/100*(1/
20000000000000000000000000000000000000000000*4174257195241159827976878604721665\
113331666125593804925741212587845906371520790525094169^(1/2)-481417557080536616\
467968171684757270564273864802329496970419194382381659684323084788728651/481291\
8546113057281657341031244079875671411042809657079379618113786330046363471475433\
5768570000000000000000000000000000000000000000000*x*417425719524115982797687860\
4721665113331666125593804925741212587845906371520790525094169^(1/2)+45709573914\
13614030344199256018206507520364834560110123011837819792158459314454398933511/
6261385792861739741965317907082497669997499188390707388611818881768859557281185\
787641253500000000000000000000000000000000000000000000*x^2*41742571952411598279\
76878604721665113331666125593804925741212587845906371520790525094169^(1/2)-6891\
7621265511793668589216627712166613109913404351156472625462477686880307912318779\
1549/41742571952411598279768786047216651133316661255938049257412125878459063715\
207905250941690000000000000000000000000000000000000000000000*x^3*41742571952411\
59827976878604721665113331666125593804925741212587845906371520790525094169^(1/2
))^2+1153/100*(11/5549295083668355045750914209024424096649136932359534612524699\
68519563854345708261117491411612100000000000000000000000000000000000000000000*x
*258645568022560680616378535493259854441779277984605485935527443752226945506577\
0482600621786808126506991481749949395153856875057283900055355557148556247277973\
8792937080808550093620549693833627123282987759681429041020127254631584883288983\
5024359760503533660739441470648922177^(1/2)-24751335138055676376302139111672126\
1395434791052248020204580127169993971560993362856838567765887388653762109042487\
1750718184237672785793629734451498227816358172993758095270072549/13459439793021\
3710641654051427541988434577247867097390773041167607403440853379209849121688819\
1566265563650520355279351530030385403590661936976833593884099552755920403164365\
1393037580066175348025992881748316441825335712361473504709430520469611089011458\
82015990155094443654000000000000000000000000000000000000000000000*x^2*258645568\
0225606806163785354932598544417792779846054859355274437522269455065770482600621\
7868081265069914817499493951538568750572839000553555571485562472779738792937080\
8085500936205496938336271232829877596814290410201272546315848832889835024359760\
503533660739441470648922177^(1/2)+408869746629341358438177326298859738584639124\
4064822519202205980081968338271547544140261514184047414311690564694110075294747\
62426555977509048461392749407539467050720593088652253680983/8225213206846393428\
1010809205720104043352762585448405472414046871190991632620628241129920945040160\
6733341984661559603712796346635527626739263620529595838615573062468600445362907\
8521151551601571440094401748936671038490887567141766874206953651221062558167875\
495392243822330000000000000000000000000000000000000000000000000000*x^3*25864556\
8022560680616378535493259854441779277984605485935527443752226945506577048260062\
1786808126506991481749949395153856875057283900055355557148556247277973879293708\
0808550093620549693833627123282987759681429041020127254631584883288983502435976\
0503533660739441470648922177^(1/2))^2+1153/100*(1/41947852422802680815657356665\
9119418553737846020824925458386109918732881892473472361192070522738738774185614\
2908667580146399105785331867135716794263576112785506437822403436973956330000000\
00000000000000000000000000000000000000000*x^2*280870756548424368141180805320527\
9526688220092898574145002844927714246969682770991282315432032145375587715699826\
8132591400951094244371889645606385114574307618738931284507113181863159355178802\
8705543779829998958501063922808767028888672968831709333227776292684707726003588\
1392134073259128064621072343507613053918304761108017542197327963879873063822248\
0226195416552880567332831977192225147865983213902553436121729758555973902558930\
834255067684013688370973^(1/2)-643609170078406079076311697213342924540434473345\
3985872971053433549276276631374017180400931463435121259408278409656267300907660\
4491782555464881234053682800931829305391608754077198538950729669840134534099355\
1478704711796379065013662552393670270480698144335259946130104309213/61791566440\
6533609910597771705161495871408420437686311900625884097134333330209618082109395\
0470719826292974539618989170108209240733761815722033404725206347676122564882591\
5649000098950581393366315219631562599770870234063017928746355508053142976053310\
1107843906356997207893906269496117008174216635915571674871862027047443763859283\
4121520535720740408945649762991641633724813223034982289532530516307058561755946\
7805468823142585629647835361148904830114416140600000000000000000000000000000000\
00000000000000000*x^3*280870756548424368141180805320527952668822009289857414500\
2844927714246969682770991282315432032145375587715699826813259140095109424437188\
9645606385114574307618738931284507113181863159355178802870554377982999895850106\
3922808767028888672968831709333227776292684707726003588139213407325912806462107\
2343507613053918304761108017542197327963879873063822248022619541655288056733283\
1977192225147865983213902553436121729758555973902558930834255067684013688370973
^(1/2))^2+405360930364052677048436304472155686249475873002518617154810633257330\
2549907219264332888319093612228610599417072359241291853874735411460465363940644\
6349505673465824193156994038808916000709019308509793314621973999381123000574462\
5198504530231054780609305452183226495562188873449345475311558676884650877469469\
95059924569068159861674609270066934425225221493833743496959289591971/7291630827\
6836934449704311312523724459823185681479843199496293240500495793359778515132415\
7313259992042558372413343758584415804609525404913908332340090807561393251888302\
8655417881433034802493782954291912549130101419562399430286267855822472112202062\
5253709665760840478850483309000000000000000000000000000000000000000000000000000\
0000000000000000000000000000000000000000000000000000000*x^6, 897041493837422600\
049325669214257198949866325709654855519956255047257120613810033/250000000000000\
00000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 6 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 7 Test 1 - Weifeng
>> input polynomial
x+639/100
>> basis
[(x-331/100)*(x-397/100)*(x-589/50)*(x-1321/100)*(x-1421/100), -(x-331/100)*(x-397/100)*(x-589/50)*(x-1321/100)*(x-1421/100)]
memory used=1382.5MB, alloc=185.2MB, time=6.09
>> Time taken
0.808000
">> Sums of squares multipliers", [x+639/100-209/2326318*x^2*(x-331/100)*(x-397
/100)*(x-589/50)*(x-1321/100)*(x-1421/100)+209/2326318*(x+1)^2*(x-331/100)*(x-\
397/100)*(x-589/50)*(x-1321/100)*(x-1421/100), 209/2326318*x^2, 209/2326318*(x+
1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 7 Test 1 - Weifeng

>> Test
Batch: 7 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+639/100
>> basis
[(x-331/100)*(x-397/100)*(x-589/50)*(x-1321/100)*(x-1421/100), -(x-331/100)*(x-397/100)*(x-589/50)*(x-1321/100)*(x-1421/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.761549
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 7 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 7 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+639/100
>> basis
[(x-331/100)*(x-397/100)*(x-589/50)*(x-1321/100)*(x-1421/100), -(x-331/100)*(x-397/100)*(x-589/50)*(x-1321/100)*(x-1421/100), -x^2+2313441/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.518000
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20412
time= 0.114000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [639/100*(1/
1000000000000000000000000000000000000000000000*20194095579796654152756901850574\
98177448975844568988667248893994143568685025947285280561506^(1/2)-4071393539251\
842578557944051588209340900215170316814692795368540551572854128737459821270847/
2580805415098012400722332056503482670779791129359167516744086524515480779463160\
6305885576046680000000000000000000000000000000000000000000*x*201940955797966541\
5275690185057498177448975844568988667248893994143568685025947285280561506^(1/2)
+718493427007395274182963462473246374628282182636061065856498108204559583665687\
15216647/2423291469575598498330828222068997812938771013482786400698672792972282\
422031136742336673807200000000000000000000000000000000000000000*x^2*20194095579\
7966541527569018505749817744897584456898866724889399414356868502594728528056150\
6^(1/2)-11351938507336289685277643225179415778644252488258738076183222319597709\
0991286268036133/80776382319186616611027607402299927097959033782759546689955759\
765742747401037891411222460240000000000000000000000000000000000000000000*x^3*20\
1940955797966541527569018505749817744897584456898866724889399414356868502594728\
5280561506^(1/2))^2+639/100*(1/258080541509801240072233205650348267077979112935\
9167516744086524515480779463160630588557604668000000000000000000000000000000000\
0000000000*x*109204238310808843578620389201367529469696831033032817206692528206\
1009798003015998350397213518584178076711401207031366276486654736894913235629719\
1297679403345889630398299034416644624512493945610266705875965488128754601373997\
5693844239532976565721997956674898337560252750290^(1/2)-25557725386214512774705\
5800086991939757802957016872624261620683467195169100419834323678207002107502741\
4011605584494889143945478136370243589177289422463424456073026690436912740079133
/327612714932426530735861167604102588409090493099098451620077584618302939400904\
7995051191640555752534230134203621094098829459964210684739706889157389303821003\
7668891194897103249933873537481836830800117627896464386263804121992708153271859\
8929697165993870024695012680758250870000000000000000000000000000000000000000000\
000*x^2*10920423831080884357862038920136752946969683103303281720669252820610097\
9800301599835039721351858417807671140120703136627648665473689491323562971912976\
7940334588963039829903441664462451249394561026670587596548812875460137399756938\
44239532976565721997956674898337560252750290^(1/2)+1039595056301538140073184397\
5641730390183941723774092047234995515877284343573777573458626640501829578804443\
332924481582064437083484078208484889466474876096155237188161005278879002260691/
2730105957770221089465509730034188236742420775825820430167313205152524495007539\
9958759930337964604451917785030175784156912166368422372830890742978244198508364\
7240759957475860416115612812348640256667646899137203218865034349939234610598832\
4414143049948916872458439006318757250000000000000000000000000000000000000000000\
0000000*x^3*1092042383108088435786203892013675294696968310330328172066925282061\
0097980030159983503972135185841780767114012070313662764866547368949132356297191\
2976794033458896303982990344166446245124939456102667058759654881287546013739975\
693844239532976565721997956674898337560252750290^(1/2))^2+639/100*(1/3244638648\
3402536189301666753882471123754131462841507297652971055401748293000547911557825\
3552745539084118272645664100040718759997267037571884110647618087723544860034582\
0865372541527900000000000000000000000000000000000000000000000*x^2*4001393148365\
1047245398442877576136847106574058896722350593074699240014080097309813486751773\
4221240085773216833001370262583785815378632661470477545745294634717202468158732\
6865304382186307271750007032437948897982028903970017391958072571331925691483219\
1832792688632341364469388895290950802497507335187982727483247337059789499569791\
5660700687680736151913051684270629166514639435475837327271704648733600814992785\
7601026160693158298485023093375379039040369893^(1/2)-71341622298968045685946085\
2869681503467819377092683685068689102791110857877916293119051302739363337851983\
8856800448008024383984453064205357007493240047564517673334247112880989600812145\
0197217251439035278196771502335219570824428019993433631761416446381620702464896\
4678992483/33344942903042539371165369064646780705922145049080601958827562249366\
6784000810915112389598111851033404811014027501141885486488179482193884558731288\
1210788622643353901322772387753651821922726458339193698290748318357419975014493\
2983938094432714095693493193993907193617803724490746075792335414589445989985606\
2360394475498245829748263050583906400613459927543070225524305428866196229864439\
3930872072780006791606548000855133910965248737519244479482532533641577500000000\
0000000000000000000000000000000000000000*x^3*4001393148365104724539844287757613\
6847106574058896722350593074699240014080097309813486751773422124008577321683300\
1370262583785815378632661470477545745294634717202468158732686530438218630727175\
0007032437948897982028903970017391958072571331925691483219183279268863234136446\
9388895290950802497507335187982727483247337059789499569791566070068768073615191\
3051684270629166514639435475837327271704648733600814992785760102616069315829848\
5023093375379039040369893^(1/2))^2+33877984623284058172935409091578989931887368\
0149389816305842950652061368753708580369817095682155837939797503486623117618758\
6047055225101035721774315326996887201140113372971710033695531025937902381038301\
2464771059415294293082190580367835937381732822254331194636166874717902868535163\
1674407192708737023230602729940036615746022467565534589444016790976625663320354\
8862474543/77077018083584545573857297616955583099885507753582821248026764127016\
7288477321296969701368959482303715887899777291057651411509183565526221852655137\
0637606430498215458136385484862133586373316633179423930960835340740045952402133\
2618677762792480078951495396623840711287523666875000000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000*x^6, 
29048827238369041734220563343815957817209005039756857499613183182229601186359/
24414062500000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 7 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 8 Test 1 - Weifeng
>> input polynomial
x+171/10
>> basis
[(x-44/5)*(x-1289/100)*(x-2403/100)*(x-3099/100)*(x-3199/100), (-x+44/5)*(x-1289/100)*(x-2403/100)*(x-3099/100)*(x-3199/100)]
memory used=1555.8MB, alloc=185.2MB, time=6.87
>> Time taken
0.985000
">> Sums of squares multipliers", [x+171/10-31/23021142*x^2*(x-44/5)*(x-1289/
100)*(x-2403/100)*(x-3099/100)*(x-3199/100)-31/23021142*(x+1)^2*(-x+44/5)*(x-\
1289/100)*(x-2403/100)*(x-3099/100)*(x-3199/100), 31/23021142*x^2, 31/23021142*
(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 8 Test 1 - Weifeng

>> Test
Batch: 8 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+171/10
>> basis
[(x-44/5)*(x-1289/100)*(x-2403/100)*(x-3099/100)*(x-3199/100), (-x+44/5)*(x-1289/100)*(x-2403/100)*(x-3099/100)*(x-3199/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.010339
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 8 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 8 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+171/10
>> basis
[(x-44/5)*(x-1289/100)*(x-2403/100)*(x-3099/100)*(x-3199/100), (-x+44/5)*(x-1289/100)*(x-2403/100)*(x-3099/100)*(x-3199/100), -x^2+10883401/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.443997
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 8 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 9 Test 1 - Weifeng
>> input polynomial
x+83/10
>> basis
[(x-7/5)*(x-209/100)*(x-517/100)*(x-139/10)*(x-839/50), -(x-7/5)*(x-209/100)*(x-517/100)*(x-139/10)*(x-839/50)]
memory used=1714.8MB, alloc=185.2MB, time=7.58
>> Time taken
0.763000
">> Sums of squares multipliers", [x+83/10-594/6424417*x^2*(x-7/5)*(x-209/100)*
(x-517/100)*(x-139/10)*(x-839/50)+594/6424417*(x+1)^2*(x-7/5)*(x-209/100)*(x-\
517/100)*(x-139/10)*(x-839/50), 594/6424417*x^2, 594/6424417*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 9 Test 1 - Weifeng

>> Test
Batch: 9 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+83/10
>> basis
[(x-7/5)*(x-209/100)*(x-517/100)*(x-139/10)*(x-839/50), -(x-7/5)*(x-209/100)*(x-517/100)*(x-139/10)*(x-839/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.223908
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 9 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 9 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+83/10
>> basis
[(x-7/5)*(x-209/100)*(x-517/100)*(x-139/10)*(x-839/50), -(x-7/5)*(x-209/100)*(x-517/100)*(x-139/10)*(x-839/50), -x^2+881721/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.135164
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19840
time= 0.111000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [83/10*(3/
25000000000000000000000000000000000000000000*8074003761846630156555862554219836\
0474225347902991244735962226754128208525331481088262^(1/2)-28439260017142624016\
341103384402095525355666497613767475933326688011116242677035076363/670142312233\
2703029941365920002463919360703875948273313084864820592641307602512930325746000\
000000000000000000000000000000000000000*x*8074003761846630156555862554219836047\
4225347902991244735962226754128208525331481088262^(1/2)+41246239512126499102161\
00127818862260208512527085980542735504385596576577437905523760959/7266603385661\
9671409002762987978524426802813112692120262366004078715387672798332979435800000\
00000000000000000000000000000000000000000*x^2*807400376184663015655586255421983\
60474225347902991244735962226754128208525331481088262^(1/2)-7516976007825165119\
738207758026961959892152666970513160217806503805230623399362000351/403700188092\
3315078277931277109918023711267395149562236798111337706410426266574054413100000\
00000000000000000000000000000000000000000*x^3*807400376184663015655586255421983\
60474225347902991244735962226754128208525331481088262^(1/2))^2+83/10*(1/5026067\
3417495272724560244400018479395205279069612049848136486154444809807018846977443\
09500000000000000000000000000000000000000000000*x*15184399893297429531518196988\
2501966340250861413448166024822874374093621577785634258524502871535998848826515\
9398247947102857865829988216618905967273758799601467754446025877351459339726794\
925487063168559391978832165934853659579012089357127219566743656644002634594133^
(1/2)-1228233965368964553076681650402218408241250370115828115524091478015828068\
3512146200331220143990078520389192716353248610762955953391376797072787136380165\
6731278766533392124386759/45553199679892288594554590964750589902075258424034449\
8074468623122280864733356902775573508614607996546479547819474384130857359748996\
4649856717901821276398804403263338077632054378019180384776461189505678175936496\
4978045609787370362680713816587002309699320079037823990000000000000000000000000\
00000000000000000000*x^2*151843998932974295315181969882501966340250861413448166\
0248228743740936215777856342585245028715359988488265159398247947102857865829988\
2166189059672737587996014677544460258773514593397267949254870631685593919788321\
65934853659579012089357127219566743656644002634594133^(1/2)+1353895060264521606\
5832416560090557628123972500871173303415257436626564510483612381330627553770121\
9259492048545883502174880442739947671611169260894662255255460502621712791621/15\
1843998932974295315181969882501966340250861413448166024822874374093621577785634\
2585245028715359988488265159398247947102857865829988216618905967273758799601467\
7544460258773514593397267949254870631685593919788321659348536595790120893571272\
1956674365664400263459413300000000000000000000000000000000000000000000*x^3*1518\
4399893297429531518196988250196634025086141344816602482287437409362157778563425\
8524502871535998848826515939824794710285786582998821661890596727375879960146775\
4446025877351459339726794925487063168559391978832165934853659579012089357127219\
566743656644002634594133^(1/2))^2+83/10*(1/225678367380268233228502663716529023\
3821526947934805364404826431265867451233605055127938079634978240190731769396769\
8561117925668804953504046173344682546882196534453720502435000925800000000000000\
00000000000000000000000000000000*x^2*685677384350230949964371250680396856806049\
6145149522224825642753701784320157775352940302312376602497170790851391920773359\
4841019790446838653438506139839257401198675572152707810891411746682367099689149\
2287781762723072441771569530895592313418296085825092148046308837896261592460550\
8073808861119539099195424118265037973133405171196797052297612574283083512762790\
3454124771519756882665061730097337085378908789767260835789418689292254627456790\
0734147178^(1/2)-80770133628506866174137434436403939407444294917809007551745981\
1883260961683803255115751876732105950384963607146856006430484299988562429244659\
2077120702545836809321278762853198883169495003167755465691996956349854137681154\
0319939598033131889717477602517991077750710441/34283869217511547498218562534019\
8428403024807257476111241282137685089216007888767647015115618830124858539542569\
5960386679742050989522341932671925306991962870059933778607635390544570587334118\
3549844574614389088136153622088578476544779615670914804291254607402315441894813\
0796230275403690443055976954959771205913251898656670258559839852614880628714154\
1756381395172706238575987844133253086504866854268945439488363041789470934464612\
731372839503670735890000000000000000000000000000000000000000000000*x^3*68567738\
4350230949964371250680396856806049614514952222482564275370178432015777535294030\
2312376602497170790851391920773359484101979044683865343850613983925740119867557\
2152707810891411746682367099689149228778176272307244177156953089559231341829608\
5825092148046308837896261592460550807380886111953909919542411826503797313340517\
1196797052297612574283083512762790345412477151975688266506173009733708537890878\
97672608357894186892922546274567900734147178^(1/2))^2+9699162391881248328962409\
5342479969299888015500782680539834793411232740992982477535518902349927345782805\
6824964236177500383163982633719078257014136584535788971546300443737699918355101\
5553755377272255049093300591239481640939916336122819878096171665170646859648566\
4092873238677872187525749205816425428799871895318943583837690497472248775470896\
91067/8011128566526860797613858085287340536849811528483489498363615014828290944\
6602096511581988590190045538005885294602657929740326203451509570369710858366720\
8206211702354111024578959658606544492676496557978812031760900321575555102579733\
5937742561363398179579877391090543018261718750000000000000000000000000000000000\
00000000000000000000000000000000000000000000000*x^6, 17772757791871811020616579\
56164958189696352961928769285691558719056812943423296147/1000000000000000000000\
000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 9 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 10 Test 1 - Weifeng
>> input polynomial
x+717/50
>> basis
[(x-114/25)*(x-277/50)*(x-41/5)*(x-1931/100)*(x-2031/100), -(x-114/25)*(x-277/50)*(x-41/5)*(x-1931/100)*(x-2031/100)]
memory used=1879.7MB, alloc=185.2MB, time=8.32
memory used=2037.6MB, alloc=185.2MB, time=9.06
>> Time taken
1.056000
">> Sums of squares multipliers", [x+717/50-179/2928543*x^2*(x-114/25)*(x-277/
50)*(x-41/5)*(x-1931/100)*(x-2031/100)+179/2928543*(x+1)^2*(x-114/25)*(x-277/50
)*(x-41/5)*(x-1931/100)*(x-2031/100), 179/2928543*x^2, 179/2928543*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 10 Test 1 - Weifeng

>> Test
Batch: 10 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+717/50
>> basis
[(x-114/25)*(x-277/50)*(x-41/5)*(x-1931/100)*(x-2031/100), -(x-114/25)*(x-277/50)*(x-41/5)*(x-1931/100)*(x-2031/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.110927
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 10 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 10 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+717/50
>> basis
[(x-114/25)*(x-277/50)*(x-41/5)*(x-1931/100)*(x-2031/100), -(x-114/25)*(x-277/50)*(x-41/5)*(x-1931/100)*(x-2031/100), -x^2+4541161/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.312471
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20583
time= 0.118000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [717/50*(1/
125000000000000000000000000000000000000000000*421090959229038479077572168498072\
75932445066407274549917626043808413557000475328075906870^(1/2)-1271872293454307\
56842286806536292366107458774418540990001456852334483778709028009634746163/8626\
3490790634454142462641375176619553037464611473863688393924030378629626688029229\
786359400000000000000000000000000000000000000000000*x*4210909592290384790775721\
6849807275932445066407274549917626043808413557000475328075906870^(1/2)+45522451\
5816640363068293186081878034010432473077418712408581986738696632183922441872155\
2493/33687276738323078326205773479845820745956053125819639934100835046730845600\
380262460725496000000000000000000000000000000000000000000000000*x^2*42109095922\
903847907757216849807275932445066407274549917626043808413557000475328075906870^
(1/2)-2415176453855315653420051399250444780286855973239894046219561587001708442\
302884031054381991/673745534766461566524115469596916414919121062516392798682016\
700934616912007605249214509920000000000000000000000000000000000000000000000000*
x^3*421090959229038479077572168498072759324450664072745499176260438084135570004\
75328075906870^(1/2))^2+717/50*(1/103084871494808172700242856443336060365879770\
2107112671076307392163024624038921949295946994830000000000000000000000000000000\
000000000000000*x*9271047533554909240810255415282357993345547519938291811443129\
5520581530232537350034754696630010892720554904479853387751009492967421800677506\
2854909667441647834545368023013484186574406380690578479960763062455175737150380\
22641447212152411705867143605520226085627316555126326477^(1/2)-1392415652072476\
7616455333286104539840731055702787361390060722443008251878775982999146503794264\
2838831545826910950564875005691037114182887573615073667414082305533891880060179\
17276679/1551639754569859287164896303812946944492978664424818713212239255574586\
2800424661093682794415064584555741406607506843138244266605426242791214441086354\
2668058214986672472470876014489440398441937820913935240578272089899645226178154\
3299621953236270185866447298504222871215503372000000000000000000000000000000000\
00000000000000*x^2*927104753355490924081025541528235799334554751993829181144312\
9552058153023253735003475469663001089272055490447985338775100949296742180067750\
6285490966744164783454536802301348418657440638069057847996076306245517573715038\
022641447212152411705867143605520226085627316555126326477^(1/2)+749671108752272\
5519967655367884401424525890484366861866445916947361890211352331445810120036854\
9702724518808579349025676098446914428582826344523621149515607017614350339126490\
29907691/3103279509139718574329792607625893888985957328849637426424478511149172\
5600849322187365588830129169111482813215013686276488533210852485582428882172708\
5336116429973344944941752028978880796883875641827870481156544179799290452356308\
6599243906472540371732894597008445742431006744000000000000000000000000000000000\
000000000000000*x^3*92710475335549092408102554152823579933455475199382918114431\
2955205815302325373500347546966300108927205549044798533877510094929674218006775\
0628549096674416478345453680230134841865744063806905784799607630624551757371503\
8022641447212152411705867143605520226085627316555126326477^(1/2))^2+717/50*(1/
4532777593021501939671267688808677352787230236872958637183421072071342967400588\
6382852370029660442532389553508766748659051893782139553519745348248319774596752\
7147291615293725170879803976000000000000000000000000000000000000000000000000*x^
2*33186377482179474795221432666461924024243449782033487129629283764361518801453\
2908559512069843893627429488965942805863377504786162530562710294061848025200694\
9797437724480679685210741799809282557133130732917466812524819971144222166732062\
4252231984669880127284708964857282702529539959345014332583590486555515928771142\
9448198706484593435144139439076968634487590283581562493180964416591127825243520\
5364686779719819619262997963327190678618677263435748431530052994259370^(1/2)-26\
9531781100174580911541751640935751627644524738665440394572621684816322622169665\
8744493038171624081298226371611033190591679662904259609964125498193180855708983\
5471495261465884370581383628366400729378670245869510076183351547018085301313811\
25427325403279647079276578369237987129/1769940132382905322411809742211302614626\
3173217084526469135618007659476694108421789840643725007660129572744850282979380\
1335885953349633445490166318946773703989196678638969583211239562656495069713766\
9724222648966679903984610251822257099960119039182393606788517811459055077468242\
1311650674310711248259496275162011276237237264345844983207687436750771660506004\
8151243499996363181022181934840129877619449961585057046360693224710783502859662\
78738323991634826949302716640000000000000000000000000000000000000000000000000*x
^3*3318637748217947479522143266646192402424344978203348712962928376436151880145\
3290855951206984389362742948896594280586337750478616253056271029406184802520069\
4979743772448067968521074179980928255713313073291746681252481997114422216673206\
2425223198466988012728470896485728270252953995934501433258359048655551592877114\
2944819870648459343514413943907696863448759028358156249318096441659112782524352\
05364686779719819619262997963327190678618677263435748431530052994259370^(1/2))^
2+21512805049704212163612492157267519010846560662964308528249565328192880729188\
1009608493801064769090515363785067694055061316590347114395501936010642534095371\
1221096583765685513655086675522830097463536176479634139778848930933593200395562\
2675187315640239838561072876451741778287545065799937921380697292701915799176552\
3433338832644695830746154490304674691829448864802411/46857100646839770975310303\
9819918884366600731832538928856488970981661417155389383573256452110449819651088\
9278950986678762697919083563702886556547574507288606843067496260706018889419956\
8894846005707630124145221886175547626564924240660157920224749509596668753080740\
3401221754921680000000000000000000000000000000000000000000000000000000000000000\
0000000000000000000000000000000000*x^6, 338662659240406191360038035054571231845\
3077535818948239315882218115900243304697893/12500000000000000000000000000000000\
00000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 10 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 11 Test 1 - Weifeng
>> input polynomial
x+101/100
>> basis
[(x-409/100)*(x-673/100)*(x-283/25)*(x-1239/100)*(x-201/10), -(x-409/100)*(x-673/100)*(x-283/25)*(x-1239/100)*(x-201/10)]
memory used=2202.7MB, alloc=185.2MB, time=9.80
>> Time taken
0.766000
">> Sums of squares multipliers", [x+101/100-51/8089103*x^2*(x-409/100)*(x-673/
100)*(x-283/25)*(x-1239/100)*(x-201/10)+51/8089103*(x+1)^2*(x-409/100)*(x-673/
100)*(x-283/25)*(x-1239/100)*(x-201/10), 51/8089103*x^2, 51/8089103*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 11 Test 1 - Weifeng

>> Test
Batch: 11 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+101/100
>> basis
[(x-409/100)*(x-673/100)*(x-283/25)*(x-1239/100)*(x-201/10), -(x-409/100)*(x-673/100)*(x-283/25)*(x-1239/100)*(x-201/10)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -9.266627
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 11 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 11 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+101/100
>> basis
[(x-409/100)*(x-673/100)*(x-283/25)*(x-1239/100)*(x-201/10), -(x-409/100)*(x-673/100)*(x-283/25)*(x-1239/100)*(x-201/10), -x^2+48841/100]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 5.030368
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19846
time= 0.115000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [101/100*(1/
25000000000000000000000000000000000000000000*6723820080273616574121985615157631\
768179220549125430264485047752212153681282158450266570^(1/2)-558037589938907431\
9449912921747549934860925082306629126117169950107122326026295222977209/67910582\
8107635273986320547130920808586101275461668456712989822973427521809498003476923\
570000000000000000000000000000000000000000000*x*6723820080273616574121985615157\
631768179220549125430264485047752212153681282158450266570^(1/2)+510185922091029\
426156607987493920247732617366160381913612578735213372953334126065331/645486727\
7062671911157106190551326497452051727160413053905645842123667534030872112255907\
20000000000000000000000000000000000000000*x^2*672382008027361657412198561515763\
1768179220549125430264485047752212153681282158450266570^(1/2)-56245571747281477\
5478845843532159510941977330070762251195937673153957520909157280819/26895280321\
0944662964879424606305270727168821965017210579401910088486147251286338010662800\
00000000000000000000000000000000000000000*x^3*672382008027361657412198561515763\
1768179220549125430264485047752212153681282158450266570^(1/2))^2+101/100*(1/679\
1058281076352739863205471309208085861012754616684567129898229734275218094980034\
76923570000000000000000000000000000000000000000000*x*19939308887647129455057461\
1611872884550236494691485738406754772237260436581045344039006652760884150672117\
6362727936181553935219453600483978144355626717746198650589747650497495552791284\
9015486083893865778053907729053798092130501570335580080410170158911147042904495\
5^(1/2)-19750044787694970877140501234991983216949959569041326872023285117948621\
7498631497223871626433506645478320070058745324166195213368287852180494866896303\
8463483295667648738265423/11963585332588277673034476696712373073014189681489144\
3044052863342356261948627206423403991656530490403270581763676170893236113167216\
0290386886613376030647719190353848590298497331674770940929165033631946683234463\
7432278855278300942201348048246102095346688225742697300000000000000000000000000\
000000000000000000*x^2*19939308887647129455057461161187288455023649469148573840\
6754772237260436581045344039006652760884150672117636272793618155393521945360048\
3978144355626717746198650589747650497495552791284901548608389386577805390772905\
37980921305015703355800804101701589111470429044955^(1/2)+3177691508008961204400\
7067119052966192120916679124711207483342529932880145631338199144982506818470282\
21059805068199118041866019051961014290207684466888352710691484214113561709547/
6646436295882376485019153720395762818341216489716191280225159074575347886034844\
8013002217586961383557372545424264539385131173981786682799271478520890591539955\
0196582550165831850930428300516202796462192601796924301793269737683385677852669\
347005671963704901430149850000000000000000000000000000000000000000000000000*x^3
*199393088876471294550574611611872884550236494691485738406754772237260436581045\
3440390066527608841506721176362727936181553935219453600483978144355626717746198\
6505897476504974955527912849015486083893865778053907729053798092130501570335580\
0804101701589111470429044955^(1/2))^2+101/100*(1/533785193078877093639165019380\
6679502183792475834788850754864190953596373939541498497986059815749517153638171\
0241106451290833560872851629879555952951690849669857670216746515576700000000000\
00000000000000000000000000000000000*x^2*370457238212450007590197168073965363408\
9551784899492412858130024343903366713658921246360025072735224712116033929812499\
8847017894168054032528410625526655002697551082962207706731551523863092739921249\
3194236305806126610373798934685607125971734510668404779138615089673756620603080\
0350387524771674336107273181617690600405848683681249141742312428162852744041920\
3196500951530099603655868437050960583885205352544295375826636744785022386602951\
507638757^(1/2)-305901780819577918946255519052114514348686832693951766834363404\
2370610906654483470530858989426780720530560404020356040977207384364584466223267\
2321835965143481035031624991261183417570952148633146945817271081386273611703240\
560839987737690118963823229920271092336672803/370457238212450007590197168073965\
3634089551784899492412858130024343903366713658921246360025072735224712116033929\
8124998847017894168054032528410625526655002697551082962207706731551523863092739\
9212493194236305806126610373798934685607125971734510668404779138615089673756620\
6030800350387524771674336107273181617690600405848683681249141742312428162852744\
0419203196500951530099603655868437050960583885205352544295375826636744785022386\
60295150763875700000000000000000000000000000000000000000000000*x^3*370457238212\
4500075901971680739653634089551784899492412858130024343903366713658921246360025\
0727352247121160339298124998847017894168054032528410625526655002697551082962207\
7067315515238630927399212493194236305806126610373798934685607125971734510668404\
7791386150896737566206030800350387524771674336107273181617690600405848683681249\
1417423124281628527440419203196500951530099603655868437050960583885205352544295\
375826636744785022386602951507638757^(1/2))^2+157796276825992821573183627048791\
9049097494834812717505699847333707109893723651258115516942216483996135281544348\
2162846411330784823147921747046194652997932458029469671449636305370540496259946\
9545478844805889700915748772333563351391078531891800204367105362533153110176084\
1238604707168214245293138204247700735618638341936893427450196439782550374853946\
45654551/3123086952525648294178641966205789518501066527514383933858815395476995\
1523013408157441325190612835648614044212618561768340060400224329147622696336397\
9471141933283155335504472557974672143565868528623887712053409080230461796859197\
7680531153388590012926464251572178058695000000000000000000000000000000000000000\
0000000000000000000000000000000000000000000000000000000000000*x^6, 431508984280\
83282480139185636570466253726780918893336126739001460206030791537229/2500000000\
0000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 11 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 12 Test 1 - Weifeng
>> input polynomial
x+299/100
>> basis
[(x-431/100)*(x-581/100)*(x-983/100)*(x-497/50)*(x-1209/100), (-x+431/100)*(x-581/100)*(x-983/100)*(x-497/50)*(x-1209/100)]
memory used=2374.0MB, alloc=185.2MB, time=10.55
>> Time taken
0.885000
">> Sums of squares multipliers", [x+299/100-448/10610641*x^2*(x-431/100)*(x-\
581/100)*(x-983/100)*(x-497/50)*(x-1209/100)-448/10610641*(x+1)^2*(-x+431/100)*
(x-581/100)*(x-983/100)*(x-497/50)*(x-1209/100), 448/10610641*x^2, 448/10610641
*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 12 Test 1 - Weifeng

>> Test
Batch: 12 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+299/100
>> basis
[(x-431/100)*(x-581/100)*(x-983/100)*(x-497/50)*(x-1209/100), (-x+431/100)*(x-581/100)*(x-983/100)*(x-497/50)*(x-1209/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -4.026963
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 12 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 12 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+299/100
>> basis
[(x-431/100)*(x-581/100)*(x-983/100)*(x-497/50)*(x-1209/100), (-x+431/100)*(x-581/100)*(x-983/100)*(x-497/50)*(x-1209/100), -x^2+1985281/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.441469
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20294
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [299/100*(1/
1000000000000000000000000000000000000000000000*46916657035112249492321069748552\
01583762529444212720704312268610770930644744234042483237638^(1/2)-8091244674378\
509204960519986880914735873905997037971797995641800307130265274978067404798409/
2805616090699712519640799970963410547089992607639206981178736629241016525557051\
9574049761075240000000000000000000000000000000000000000000*x*469166570351122494\
9232106974855201583762529444212720704312268610770930644744234042483237638^(1/2)
+906813355681057872851406256822463220781087398422736010136795150350607500630218\
171126883/175937463881670935596204011557070059391094854157977026411710072903909\
89917790877659312141142500000000000000000000000000000000000000000*x^2*469166570\
3511224949232106974855201583762529444212720704312268610770930644744234042483237\
638^(1/2)-947724614003798549944704857803673551480903528095719571528392306221797\
2061559381487701/39097214195926874576934224790460013198021078701772672535935571\
75642442203953528368736031365000000000000000000000000000000000000000000*x^3*469\
1665703511224949232106974855201583762529444212720704312268610770930644744234042\
483237638^(1/2))^2+299/100*(1/4676026817832854199401333284939017578483321012732\
0116352978943820683608759284199290082935125400000000000000000000000000000000000\
000000000*x*1002814427752858962295831822024418437512208145569480835615212767950\
0197311752962314764085356623555877823717050779468982112089026788131823980536075\
6689599217485739587972305127886509619013137617261575582036416445162905781143261\
8352475570400386135737097543948595153597421098458^(1/2)-45468801644001258260627\
2873821022606743061697493088393506010628380209596422405838085796037240680579209\
855173680309477656275317269210100627022602550352981597101889783484405557557879/
1128166231221966332582810799777470742201234163765665940067114363943772197572208\
2604109596026201500362551681682126902604876100155136648301978103085127579911967\
1457036468843268872323321389779819419272529790968500808269003786169564653501670\
0434402704234736942169547797098735765250000000000000000000000000000000000000000\
00*x^2*100281442775285896229583182202441843751220814556948083561521276795001973\
1175296231476408535662355587782371705077946898211208902678813182398053607566895\
9921748573958797230512788650961901313761726157558203641644516290578114326183524\
75570400386135737097543948595153597421098458^(1/2)+2279073806621528114786132605\
5261713792273149706011569865951132009491365700641225453436100697984546650640410\
1657493083137176254495703110942281135474296717606631757018729758723483342939/11\
7517315752288159644042791643486535645961892058923535423657746244142937247105027\
1261416252729322954432466841888219021341260432826734198122719071367456240829911\
0107965504507174200345978102064522840888519892552167528021227725996318073090629\
5250281691118431475994562197784975546875000000000000000000000000000000000000000\
0000*x^3*1002814427752858962295831822024418437512208145569480835615212767950019\
7311752962314764085356623555877823717050779468982112089026788131823980536075668\
9599217485739587972305127886509619013137617261575582036416445162905781143261835\
2475570400386135737097543948595153597421098458^(1/2))^2+299/100*(1/721385304825\
3103194109491130925053941726508105798916102117106576358780167133726938732908278\
8106695797932470891903671127249812788372811553632107880031517656683116311268484\
247663393919462500000000000000000000000000000000000000000000*x^2*27297675769055\
6291037968715284537288708054994438048710434488779489768628810055210050955566376\
6669631367435836735275764311832566335458319792717901754927310087552646334833238\
5970057433302957879885409479008282670271427812590620825426682437497692434311643\
0408047684298667717662672098273384686034578179125945447746105251303985511107097\
0649286708687195470635831901860942914320770399463521045790112510836449275080993\
103954864919212046551841234580526081261951790562^(1/2)-609651664035660350997926\
1864917218273088932738224937723182802324479326941641304360418777652679853224977\
7917286966826961786882478071311351756161067288839459746040781794437094795525055\
4899410065667444949637317467984091644082827534255537875327983913066087380107149\
6628950103/63978927583724130712023917644813427040950389321417666508083307692914\
5223773566898556927108695313194851742774234830257260585757734873043701418258223\
8110883017701514847265402961732210930380753098142846642566250844865893575926755\
9593786962885216642917913376886176007500246327188773032824535789354260732643464\
3154934182743716041657258745926572348561438430273101998658495543930562374262745\
1070576197272927988471077587394214654403234105877893548108002957699509129687500\
000000000000000000000000000000000000000*x^3*27297675769055629103796871528453728\
8708054994438048710434488779489768628810055210050955566376666963136743583673527\
5764311832566335458319792717901754927310087552646334833238597005743330295787988\
5409479008282670271427812590620825426682437497692434311643040804768429866771766\
2672098273384686034578179125945447746105251303985511107097064928670868719547063\
5831901860942914320770399463521045790112510836449275080993103954864919212046551\
841234580526081261951790562^(1/2))^2+320757448640881927396526063736752283162375\
5497339453162583383083868461441717867693574179723893362907058769587854959096052\
0363000672017349409915099308788856755139261019682817504186703904413963539202028\
1512432299793525371957532777728136758023244810785274372855666203139559023596185\
7985281696597785980206034195234036779144655795571737692776241501574298915027271\
9585951/19487324923831611396815031379810899512245176436048977499934956643114096\
3006012062795646230602825617764957939413216194865169068190611031824527983298716\
2552140499618022478514653336816361293348197437645216385728325371591423572909119\
9340008972710251837266027981511038668443779879760742187500000000000000000000000\
0000000000000000000000000000000000000000000000000000000000000000*x^6, 618983143\
0117018909424567857268133675660756201445347475094667569837569290248379/62500000\
00000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 12 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 13 Test 1 - Weifeng
>> input polynomial
x+287/50
>> basis
[(x-99/25)*(x-247/25)*(x-407/25)*(x-1669/100)*(x-1769/100), (-x+99/25)*(x-247/25)*(x-407/25)*(x-1669/100)*(x-1769/100)]
memory used=2545.8MB, alloc=185.2MB, time=11.33
>> Time taken
1.026000
">> Sums of squares multipliers", [x+287/50-360/34121519*x^2*(x-99/25)*(x-247/
25)*(x-407/25)*(x-1669/100)*(x-1769/100)-360/34121519*(x+1)^2*(-x+99/25)*(x-247
/25)*(x-407/25)*(x-1669/100)*(x-1769/100), 360/34121519*x^2, 360/34121519*(x+1)
^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 13 Test 1 - Weifeng

>> Test
Batch: 13 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+287/50
>> basis
[(x-99/25)*(x-247/25)*(x-407/25)*(x-1669/100)*(x-1769/100), (-x+99/25)*(x-247/25)*(x-407/25)*(x-1669/100)*(x-1769/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.575126
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 13 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 13 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+287/50
>> basis
[(x-99/25)*(x-247/25)*(x-407/25)*(x-1669/100)*(x-1769/100), (-x+99/25)*(x-247/25)*(x-407/25)*(x-1669/100)*(x-1769/100), -x^2+3493161/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.689898
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20044
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [287/50*(1/
250000000000000000000000000000000000000000000*119034917564739541866778433566144\
470040605739345975072548870408966689319183196944828079471^(1/2)-184770455555948\
7672259694934563535506075041043090493830562072633809379369807240600035631/15528\
6460641273856889842774697652104098426578146794753734208215333817430025352378025\
72185535000000000000000000000000000000000000000000*x*11903491756473954186677843\
3566144470040605739345975072548870408966689319183196944828079471^(1/2)-44198368\
2754781488633114573325090523828561674801587376156409385802895129553489884349/14\
2841901077687450240134120279373364048726887215170087058644490760027183019836333\
79369536520000000000000000000000000000000000000000000*x^2*119034917564739541866\
778433566144470040605739345975072548870408966689319183196944828079471^(1/2)+638\
6520676805710365296247913424151196733639712705718012178903521592378892454435855\
551/190455868103583266986845493705831152064969182953560116078192654346702910693\
11511172492715360000000000000000000000000000000000000000000*x^3*119034917564739\
541866778433566144470040605739345975072548870408966689319183196944828079471^(1/
2))^2+287/50*(1/931718763847643141339056648185912624590559468880768522405249292\
002904580152114268154331132100000000000000000000000000000000000000000000*x*1827\
4661887714547405706891229991553958534244357552837242895092401837980267104156656\
1572842531213092016838488265094822711546701876168374514071857350121349026346692\
1964924318367688387858307299990062850609801403264144387126276751579228309433504\
1719601744056852513375727297^(1/2)-30023643224151466844528052954504952645692565\
2880206059349431304710849446662917328638526798000737063223404863066457434838774\
690925363067203593534948887836476216091401424556283643/243662158502860632076091\
8830665540527804565914340378299052678986911730702280554220820971233749507893557\
8465102012643028206226916822449935209580980016179870179558959532324244902511838\
1107639998675046747973520435219251616836900210563774591133889594689920758033511\
6763639600000000000000000000000000000000000000000000*x^2*1827466188771454740570\
6891229991553958534244357552837242895092401837980267104156656157284253121309201\
6838488265094822711546701876168374514071857350121349026346692196492431836768838\
7858307299990062850609801403264144387126276751579228309433504171960174405685251\
3375727297^(1/2)+28828651573015748446840640152635448597320550559688413064356443\
6533958588634039510647596151697562625936454881249286530125972532677156482655192\
4862132822009171271925546736371408273/73098647550858189622827564919966215834136\
9774302113489715803696073519210684166266246291370124852368067353953060379290846\
1868075046734980562874294004853961053867687859697273470753551433229199960251402\
4392056130565775485051070063169132377340166878406976227410053502909188000000000\
0000000000000000000000000000000000000*x^3*1827466188771454740570689122999155395\
8534244357552837242895092401837980267104156656157284253121309201683848826509482\
2711546701876168374514071857350121349026346692196492431836768838785830729999006\
28506098014032641443871262767515792283094335041719601744056852513375727297^(1/2
))^2+287/50*(1/1857634829890007659023272726351698701628427253857809748220486390\
9361847858946114679673911017743575535893502059171115885704372816835004054688000\
9605713963405194197242097617964548218470000000000000000000000000000000000000000\
00000*x^2*164347063534530534534644809679322222502055116507509485413102193134044\
7091901143517589714191353091651898620427486471594937915100739246710841618242322\
5141791626452178814548355655694773885217255857037140673825512770643741626962486\
2707312345277006799402149110215659621853651306327353966251668553931762637172958\
3877951962940953170713162911644795608453934133659454518821173268673187656271675\
22090067029235458274450999215227220354699072846207450753746153323^(1/2)-8058979\
1324637173983497851548780558627085908578205248906584762487442523681877407316508\
0869032224101385195481680512584094814728285241420189294650150857803365065157003\
3127839245219365533175045841668748721930994527045675597675642772019528001673649\
909672629883740334619333/262955301655248855255431695486915556003288186412015176\
6609635090144715347041829628143542706164946643037792683978354551900664161182794\
7373465891877160226866602323486103277369049111638216347609371259425078120820433\
0299866031399780331699752443210879043438576345055394965842090123766346002669686\
2908202194767334204723140705525073141060658631672973526294613855127230113877229\
8771002500346803534410724677673323912159874436355256751851655393192120599384531\
68000000000000000000000000000000000000000000000*x^3*164347063534530534534644809\
6793222225020551165075094854131021931340447091901143517589714191353091651898620\
4274864715949379151007392467108416182423225141791626452178814548355655694773885\
2172558570371406738255127706437416269624862707312345277006799402149110215659621\
8536513063273539662516685539317626371729583877951962940953170713162911644795608\
4539341336594545188211732686731876562716752209006702923545827445099921522722035\
4699072846207450753746153323^(1/2))^2+68889276337070162256393404988639606299124\
7603441273175037630971784007046995597474111289264603328512806261748040406503322\
5382764213798485591890646478166495611482316128909034712918528526728997780805555\
6429911716450130592078841236009793408666861115763879664967988146674995587163855\
0524197864521165350012377142300674261649852383164031496637078748151149338772385\
9/25479687146449210570933514370775184401420932059150503270806171906121723785218\
8517920173040880896193031156587509091545904602385735728228539548367843926820334\
8128750449865599662532676236839869676192272410461790881593467362314600137354772\
5117084966634558653882220640027193920000000000000000000000000000000000000000000\
000000000000000000000000000000000000000000000000000*x^6, 2251486423821175117680\
013539595483459176596293370705607119717491198586769301477823/500000000000000000\
0000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 13 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 14 Test 1 - Weifeng
>> input polynomial
x+301/100
>> basis
[(x-989/100)*(x-1631/100)*(x-977/50)*(x-1089/50)*(x-51/2), (-x+989/100)*(x-1631/100)*(x-977/50)*(x-1089/50)*(x-51/2)]
memory used=2695.6MB, alloc=185.2MB, time=12.05
memory used=2858.6MB, alloc=185.2MB, time=12.78
>> Time taken
1.015000
">> Sums of squares multipliers", [x+301/100-11/21419403*x^2*(x-989/100)*(x-\
1631/100)*(x-977/50)*(x-1089/50)*(x-51/2)-11/21419403*(x+1)^2*(-x+989/100)*(x-\
1631/100)*(x-977/50)*(x-1089/50)*(x-51/2), 11/21419403*x^2, 11/21419403*(x+1)^2
]
>> Degree size
7
>> Succeeds Weifeng Batch: 14 Test 1 - Weifeng

>> Test
Batch: 14 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+301/100
>> basis
[(x-989/100)*(x-1631/100)*(x-977/50)*(x-1089/50)*(x-51/2), (-x+989/100)*(x-1631/100)*(x-977/50)*(x-1089/50)*(x-51/2)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.554291
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 14 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 14 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+301/100
>> basis
[(x-989/100)*(x-1631/100)*(x-977/50)*(x-1089/50)*(x-51/2), (-x+989/100)*(x-1631/100)*(x-977/50)*(x-1089/50)*(x-51/2), -x^2+3025/4]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 3.997507
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 14 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 15 Test 1 - Weifeng
>> input polynomial
x+149/100
>> basis
[(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100), -(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100)]
memory used=3022.1MB, alloc=185.2MB, time=13.53
>> Time taken
1.013000
">> Sums of squares multipliers", [x+149/100-28/13008843*x^2*(x-341/100)*(x-843
/100)*(x-383/25)*(x-2591/100)*(x-2691/100)+28/13008843*(x+1)^2*(x-341/100)*(x-\
843/100)*(x-383/25)*(x-2591/100)*(x-2691/100), 28/13008843*x^2, 28/13008843*(x+
1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 15 Test 1 - Weifeng

>> Test
Batch: 15 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+149/100
>> basis
[(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100), -(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.802791
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 15 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 15 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+149/100
>> basis
[(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100), -(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100), -x^2+7789681/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 3.288595
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20205
time= 0.140000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [149/100*(1/
500000000000000000000000000000000000000000000*102012754098494696357723544757260\
1961209261838706091677083570762944479209340705279521160823^(1/2)-86066218642970\
2203599068344661079548629881855715469395887724474963561146306023008969135089/60\
7996014427028390292032326753270768880720055868830639541808174714909608767060346\
5946118505080000000000000000000000000000000000000000000*x*102012754098494696357\
7235447572601961209261838706091677083570762944479209340705279521160823^(1/2)+52\
6592499249513325380487223271007925441772719379437574106364202683777572863880151\
715721/612076524590968178146341268543561176725557103223655006250142457766687525\
60442316771269649380000000000000000000000000000000000000000000*x^2*102012754098\
4946963577235447572601961209261838706091677083570762944479209340705279521160823
^(1/2)-225628015686311602486480143017073767761847995855822580305427204853191384\
1334747649517/16322040655759151417235767161161631379348189419297466833337132207\
111667349451284472338573168000000000000000000000000000000000000000000*x^3*10201\
2754098494696357723544757260196120926183870609167708357076294447920934070527952\
1160823^(1/2))^2+149/100*(1/911994021640542585438048490129906153321080083803245\
9593127122620723644131505905198919177757620000000000000000000000000000000000000\
0000000*x*763420332035789957838417112140766575727606127640263386860194890281322\
2548779639838823653399097832261476658788015283450200243766965824115077261753537\
1587661241415507637273909009583181596893717396004050365032033248422243003800417\
7190154804464495636535001620621225071935046933^(1/2)-27194508380204690408892767\
0232783957839115387035931392224866200645461931368471471059284157575506049515266\
15439315693325678542983384730133902881197024385440421574544810712346461787/3053\
6813281431598313536684485630663029104245105610535474407795611252890195118559355\
2946135963913290459066351520611338008009750678632964603090470141486350644965662\
0305490956360383327263875748695840162014601281329936889720152016708760619217857\
9825461400064824849002877401877320000000000000000000000000000000000000000000*x^
2*76342033203578995783841711214076657572760612764026338686019489028132225487796\
3983882365339909783226147665878801528345020024376696582411507726175353715876612\
4141550763727390900958318159689371739600405036503203324842224300380041771901548\
04464495636535001620621225071935046933^(1/2)+3957716813851880071986200592609990\
2103799235030751363394266994413018242518502008487573217714252393109578963023124\
4091034811796863394253789906773989551188673683757097015269176995991/20357875520\
9543988756911229904204420194028300704070236496051970741685934634123729035297423\
9759421936393775676804075586720065004524219764020603134276575670966437746870327\
3042402555515092504991305601080097341875532912598134346778058404128119053216974\
266709883232668584934584880000000000000000000000000000000000000000000000*x^3*76\
3420332035789957838417112140766575727606127640263386860194890281322254877963983\
8823653399097832261476658788015283450200243766965824115077261753537158766124141\
5507637273909009583181596893717396004050365032033248422243003800417719015480446\
4495636535001620621225071935046933^(1/2))^2+149/100*(1/299343092452419148645410\
4929325063276660914571699992516380875920696175468074017091159055852966022088208\
8332883985243286044858385659339097695466985119438642063859918597269668202659182\
84000000000000000000000000000000000000000000000*x^2*423241302661599037963102520\
1747077179082349635562224935394507009706194061216370117945300726829886338449439\
3351417067521948559946708717647331188530536634743189071613516906574149640822946\
4914753845713458502600100935909609268126025457554000680008393364215263092102650\
0849987593515235341300323481831989893364549565431450484082115915733570250492039\
3638564662973112337126103829173963854563800011622145015739062750876168556263222\
40920716115835100537322888310253^(1/2)-4432998185651398850488940681533761169956\
4532989019717974313358801216612531476303989894792597551335361779387096698485354\
1268935664583392515374525117274019906960610063995916278723548820886595988508712\
49750723181883786391257094481190423668633436073634392900527902497584863/3385930\
4212927923037048201613976617432658797084497799483156056077649552489730960943562\
4058146390907075955146811336540175588479573669741178649508244293077945512572908\
1352525931971265835719318030765707668020800807487276874145008203660432005440067\
1469137221047368212006799900748121882730402587854655919146916396523451603872656\
9273258685620039363149108517303784898697008830633391710836510400092977160125912\
5020070093484501057792736572892668080429858310648202400000000000000000000000000\
000000000000000000*x^3*42324130266159903796310252017470771790823496355622249353\
9450700970619406121637011794530072682988633844943933514170675219485599467087176\
4733118853053663474318907161351690657414964082294649147538457134585026001009359\
0960926812602545755400068000839336421526309210265008499875935152353413003234818\
3198989336454956543145048408211591573357025049203936385646629731123371261038291\
7396385456380001162214501573906275087616855626322240920716115835100537322888310\
253^(1/2))^2+441934506967736744481357104944049658817609319692005113526495997288\
2841874927592023476006990402533915147353345804182307643054206679196376810181414\
0652006780355700149180642451328169448614358212422656130553635396690213052877417\
2251473795260921478501918498014454058108994681397009400517195021239651124075449\
964573450829564309340187804416597820825856520269032655227/108587546744802517987\
5839689072416373697657726396228032271375808354928198344943768214453833308897473\
4640175246866303903206129961774384703085957195802705132043492192081901665961123\
5928294922351934561185671096460101951123642049269980316254618812464068722785124\
6952301125070656000000000000000000000000000000000000000000000000000000000000000\
0000000000000000000000000000000*x^6, 295649376840437109825589216737674008452077\
259564411623752590917152640714370451629/625000000000000000000000000000000000000\
000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 15 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 16 Test 1 - Weifeng
>> input polynomial
x+747/50
>> basis
[(x-493/50)*(x-389/20)*(x-2439/100)*(x-253/10)*(x-263/10), (-x+493/50)*(x-389/20)*(x-2439/100)*(x-253/10)*(x-263/10)]
memory used=3185.9MB, alloc=185.2MB, time=14.30
>> Time taken
0.939000
">> Sums of squares multipliers", [x+747/50-19/19544517*x^2*(x-493/50)*(x-389/
20)*(x-2439/100)*(x-253/10)*(x-263/10)-19/19544517*(x+1)^2*(-x+493/50)*(x-389/
20)*(x-2439/100)*(x-253/10)*(x-263/10), 19/19544517*x^2, 19/19544517*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 16 Test 1 - Weifeng

>> Test
Batch: 16 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+747/50
>> basis
[(x-493/50)*(x-389/20)*(x-2439/100)*(x-253/10)*(x-263/10), (-x+493/50)*(x-389/20)*(x-2439/100)*(x-253/10)*(x-263/10)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.060084
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 16 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 16 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+747/50
>> basis
[(x-493/50)*(x-389/20)*(x-2439/100)*(x-253/10)*(x-263/10), (-x+493/50)*(x-389/20)*(x-2439/100)*(x-253/10)*(x-263/10), -x^2+74529/100]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.555433
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 16 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 17 Test 1 - Weifeng
>> input polynomial
x+931/100
>> basis
[(x-409/100)*(x-123/20)*(x-373/50)*(x-249/25)*(x-72/5), -(x-409/100)*(x-123/20)*(x-373/50)*(x-249/25)*(x-72/5)]
memory used=3334.6MB, alloc=185.2MB, time=15.04
memory used=3497.4MB, alloc=185.2MB, time=15.78
>> Time taken
0.950000
">> Sums of squares multipliers", [x+931/100-293/2233083*x^2*(x-409/100)*(x-123
/20)*(x-373/50)*(x-249/25)*(x-72/5)+293/2233083*(x+1)^2*(x-409/100)*(x-123/20)*
(x-373/50)*(x-249/25)*(x-72/5), 293/2233083*x^2, 293/2233083*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 17 Test 1 - Weifeng

>> Test
Batch: 17 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+931/100
>> basis
[(x-409/100)*(x-123/20)*(x-373/50)*(x-249/25)*(x-72/5), -(x-409/100)*(x-123/20)*(x-373/50)*(x-249/25)*(x-72/5)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.037372
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 17 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 17 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+931/100
>> basis
[(x-409/100)*(x-123/20)*(x-373/50)*(x-249/25)*(x-72/5), -(x-409/100)*(x-123/20)*(x-373/50)*(x-249/25)*(x-72/5), -x^2+6724/25]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.416263
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19928
time= 0.120000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [931/100*(1/
12500000000000000000000000000000000000000000*3170036814250359315274079650543401\
13751005564548712522561132465891460404341766962437389^(1/2)-1291564670947822901\
50649017187419806815376778156487651923775228631508262156584447640404247/1180521\
7096268338090080672618623625836087447223794054340176573029797985457687401681168\
366360000000000000000000000000000000000000000000*x*3170036814250359315274079650\
54340113751005564548712522561132465891460404341766962437389^(1/2)+9902865752835\
69519751126391298334228733166605326958557375188237658565051795088612887/7608088\
3542008623566577911613041627300241335491691005414671791813950497042024070984973\
3600000000000000000000000000000000000000000*x^2*3170036814250359315274079650543\
40113751005564548712522561132465891460404341766962437389^(1/2)-5600248736270131\
84792589853872921361929979945051776951578918685397819625396764704189/1268014725\
7001437261096318602173604550040222581948500902445298635658416173670678497495560\
000000000000000000000000000000000000000000*x^3*31700368142503593152740796505434\
0113751005564548712522561132465891460404341766962437389^(1/2))^2+931/100*(1/354\
1565128880501427024201785587087750826234167138216302052971908939395637306220504\
3505099080000000000000000000000000000000000000000000*x*118531500986397044241183\
9655174495835875057703873406265242792755400872834692542407444092467996200540574\
2508585058570131423192489406927963018840383714377589514988982051310032011500175\
6757370162077413192753976128787069974661098405653186803579200971070910811319427\
753051^(1/2)-453305583375991186909191656513181056217784239793900477769813101618\
3269989306199807998819297418811759737497785734674850986102119636464768976184710\
7218343415972950662041150823099/11853150098639704424118396551744958358750577038\
7340626524279275540087283469254240744409246799620054057425085850585701314231924\
8940692796301884038371437758951498898205131003201150017567573701620774131927539\
7612878706997466109840565318680357920097107091081131942775305100000000000000000\
000000000000000000000000000*x^2*11853150098639704424118396551744958358750577038\
7340626524279275540087283469254240744409246799620054057425085850585701314231924\
8940692796301884038371437758951498898205131003201150017567573701620774131927539\
76128787069974661098405653186803579200971070910811319427753051^(1/2)+6158772797\
2736526040677832217489940793468044396667883877462889970447762953581097638274778\
7920468372463444347233321730774135496787802775749740158496799114428971930739201\
331081303/435777577155871486180823402637682292601124155835811126927497336544438\
5421663758850897398779397796105052392862153886077729114885811370574639279552836\
1682314393341845776875117689338881160797853704931320865432400289363961272462649\
1372010307276474158348936806321425562687500000000000000000000000000000000000000\
0000000*x^3*1185315009863970442411839655174495835875057703873406265242792755400\
8728346925424074440924679962005405742508585058570131423192489406927963018840383\
7143775895149889820513100320115001756757370162077413192753976128787069974661098\
405653186803579200971070910811319427753051^(1/2))^2+931/100*(1/2336950403335201\
7602990248638992520152815654589733407181703940264837546983618909863809158171323\
6363687177944471791934589619465475939278371725369108777224784573517867698200023\
858724375000000000000000000000000000000000000000000*x^2*18131207717653185388387\
6303896937018508869111951796052046210764553753349463727084808846141575089535456\
6186164522965437716161925090213425039241091831666930284321406107791883331907962\
8759877369730767365344014340343546241768078352367604961966832141961713405018726\
2891531428955726107380203177480874814156744396343103543623343385431485555494740\
6350579817810303214385349464928491157455446413900223327815154576743220168410249\
9154375498978634994739296302^(1/2)-33542582944644723877747710064495331012010873\
8908489946822984141016063886923688095570639514874984129711040135564907869444142\
4512380030474481707787897770408185784514508621935153671435266089598100190258565\
916308068874982934389200985826475189927640765054686403973933519/133317703806273\
4219734384587477478077271096411410265088575079151130539334292110917712103982169\
7759960045486503845334100854131802133922242935596263468139193267069162557293259\
7934409034999098306843877686353046620173134130647634943879448249756118690894951\
5074906344790672271733280201325023363829961868799591149581643703112819010525629\
0845201517283675130958111870480510771533023216584164808089877410405548358406030\
6500753670252761021901727902494825750000000000000000000000000000000000000000000\
00*x^3*181312077176531853883876303896937018508869111951796052046210764553753349\
4637270848088461415750895354566186164522965437716161925090213425039241091831666\
9302843214061077918833319079628759877369730767365344014340343546241768078352367\
6049619668321419617134050187262891531428955726107380203177480874814156744396343\
1035436233433854314855554947406350579817810303214385349464928491157455446413900\
2233278151545767432201684102499154375498978634994739296302^(1/2))^2+62825285616\
5191687021074627520002698117104849768173383523592433919826733366260683853227806\
0228350482902182248114180496068605118317091852119868678659303715649098719260360\
8395412018735838837575652691768930073646079124194525096603359712193820620448339\
3434941560005993794674776385442446501718506768782915930932068515223051517890613\
78440870176379694234352547/4261866169782349223071721894705338380845442911629902\
8561590924652397674188671836359548786758491963065894626974636074176152323914914\
6550982005822492910093800173509986321162928152720207235827917595732070174277687\
3774665915642171632441018530919550135475962787557278839863281250000000000000000\
000000000000000000000000000000000000000000000000000000000000000000000000000*x^6
, 58362782160413707324971552059536853062054877672138109607178194223827092892247\
29771/2500000000000000000000000000000000000000000000000000000000000000000000000\
000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 17 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 18 Test 1 - Weifeng
>> input polynomial
x+737/100
>> basis
[(x-513/100)*(x-629/50)*(x-727/50)*(x-2327/100)*(x-2427/100), (-x+513/100)*(x-629/50)*(x-727/50)*(x-2327/100)*(x-2427/100)]
memory used=3665.2MB, alloc=185.2MB, time=16.54
>> Time taken
0.841000
">> Sums of squares multipliers", [x+737/100-41/9895948*x^2*(x-513/100)*(x-629/
50)*(x-727/50)*(x-2327/100)*(x-2427/100)-41/9895948*(x+1)^2*(-x+513/100)*(x-629
/50)*(x-727/50)*(x-2327/100)*(x-2427/100), 41/9895948*x^2, 41/9895948*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 18 Test 1 - Weifeng

>> Test
Batch: 18 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+737/100
>> basis
[(x-513/100)*(x-629/50)*(x-727/50)*(x-2327/100)*(x-2427/100), (-x+513/100)*(x-629/50)*(x-727/50)*(x-2327/100)*(x-2427/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.187879
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 18 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 18 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+737/100
>> basis
[(x-513/100)*(x-629/50)*(x-727/50)*(x-2327/100)*(x-2427/100), (-x+513/100)*(x-629/50)*(x-727/50)*(x-2327/100)*(x-2427/100), -x^2+6385729/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.696066
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20407
time= 0.124000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [737/100*(1/
500000000000000000000000000000000000000000000*615669032207922705801956077729298\
966774531789485473316307993187917816646847610812931864299^(1/2)-698360865828552\
225602118533945143902309445308158215463936115038933349474069363867842068247/453\
7480767372390341760416292864933385128299288507938341189909794954308687266891691\
307839883630000000000000000000000000000000000000000000*x*6156690322079227058019\
56077729298966774531789485473316307993187917816646847610812931864299^(1/2)+6039\
0500383702043550577029284243705252263502297640633911791494451459545812870718110\
339/923503548311884058702934116593948450161797684228209974461989781876724970271\
4162193977964485000000000000000000000000000000000000000000*x^2*6156690322079227\
05801956077729298966774531789485473316307993187917816646847610812931864299^(1/2
)-14611532773537440669622131786402120608079927107886954620299081310002400117850\
7609923/38479314512995169112622254858081185423408236842842082269249574244863540\
42797567580824151868750000000000000000000000000000000000000000*x^3*615669032207\
922705801956077729298966774531789485473316307993187917816646847610812931864299^
(1/2))^2+737/100*(1/68062211510585855126406244392974000776924489327619075117848\
646924314630309003375369617598254450000000000000000000000000000000000000000000*
x*16996066861057551242643662520485614481106709134796936688655505559511297844447\
2430944677736613426407975468459432649684685111393947724593716411525141941252286\
0843949540958515695011875333988597987212860990084801590069223015270102966495790\
73623392668857497166627057966268894598^(1/2)-1586495114109957045730145565777077\
4787992163110884794099230225098480890152684739184149259001159459443981481417897\
68633037337227960674165375769234616377625323641907650661166441513/1634237198178\
6106964080444731236167770294912629612439123707216884145478696583887590834397751\
2910007668719672531393927581837878795889032419626466482635819505850379763553703\
4322126803205758267295396981721235386144297329822375099006245952630994160277475\
934294490941983354755750000000000000000000000000000000000000000000*x^2*16996066\
8610575512426436625204856144811067091347969366886555055595112978444472430944677\
7366134264079754684594326496846851113939477245937164115251419412522860843949540\
9585156950118753339885979872128609900848015900692230152701029664957907362339266\
8857497166627057966268894598^(1/2)+20509799196754259911388641129602289648237977\
2716090133695598286642309245969195538980804817426570646133774237363593264690266\
30550592491676419908081583447363332588043560836514652006331231/1133071124070503\
4161762441680323742987404472756531291125770337039674198562964828729645182440895\
0938650312306288433123123407595965149729144274350094627501524056263302730567713\
0007916889325731991475240660056534393379482010180068644330527157489284459049981\
110847053108459297320000000000000000000000000000000000000000000000000000*x^3*16\
9960668610575512426436625204856144811067091347969366886555055595112978444472430\
9446777366134264079754684594326496846851113939477245937164115251419412522860843\
9495409585156950118753339885979872128609900848015900692230152701029664957907362\
3392668857497166627057966268894598^(1/2))^2+737/100*(1/106176345580863899600824\
8065227236551262079884253299819351474117861108078427112085078790479819465040908\
0797047931705728987176673794771897621086001547561831972565603434712096587732077\
000000000000000000000000000000000000000000000000*x^2*16823889450414821700693766\
0227999527799642932908352288930387650333514362824855252045072366807394101321091\
0178608187541003329534720272053252942505768696320721113898795317040619552945807\
9429789705284291526291290200926708046423279263528422593234463799580071940120129\
1356324976556269010850395514463425657106494079092911861487428554134787450253870\
5210729263758551334875475210442583942300252843545140035873578727904749123031592\
4477138602962004770743727972664773^(1/2)-33375967808667045818729841776092098348\
9546329721338913905372408079337821160414073534485356122975554646225205735046484\
3970317258821468380430451554690695077486339331566382126469679524717624960864963\
75773595574031264995214570555200494318876414938035962310545316952944428816209/
8411944725207410850346883011399976389982146645417614446519382516675718141242762\
6022536183403697050660545508930409377050166476736013602662647125288434816036055\
6949397658520309776472903971489485264214576314564510046335402321163963176421129\
6617231899790035970060064567816248827813450542519775723171282855324703954645593\
0743714277067393725126935260536463187927566743773760522129197115012642177257001\
7936789363952374561515796223856930148100238537186398633238650000000000000000000\
00000000000000000000000000000*x^3*168238894504148217006937660227999527799642932\
9083522889303876503335143628248552520450723668073941013210910178608187541003329\
5347202720532529425057686963207211138987953170406195529458079429789705284291526\
2912902009267080464232792635284225932344637995800719401201291356324976556269010\
8503955144634256571064940790929118614874285541347874502538705210729263758551334\
8754752104425839423002528435451400358735787279047491230315924477138602962004770\
743727972664773^(1/2))^2+293677152431661229213946668124650941040336600491084506\
0190924963763051526174863444847514180138306764877930229819089449632304149393299\
0996674652406682045518469731461202924690963465487902111318032044297632921398483\
3573279480252552568182715989324874650437613792381797247438968747770437274199994\
9171453756951851278787655560997591872234871290614110631208711615354055750676989\
96243/4943712726043811213369731568404390954530050079963232913971574303564116270\
9700976107259542615639852204719934322843008803387190374095622965274655785885202\
4893072997790334708377424817887194802348730106074825330678394594391905669250999\
9975559840582079271241681530409856379684232880000000000000000000000000000000000\
000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 
6669700052578078057032060569709570574580014724694827801611488866452932106839287\
3/16000000000000000000000000000000000000000000000000000000000000000000000000000\
000]
>> Degree size
6
>> Succeeds RealCertify Batch: 18 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 19 Test 1 - Weifeng
>> input polynomial
x+513/100
>> basis
[(x-297/100)*(x-601/50)*(x-319/25)*(x-67/5)*(x-1461/100), (-x+297/100)*(x-601/50)*(x-319/25)*(x-67/5)*(x-1461/100)]
memory used=3834.1MB, alloc=185.2MB, time=17.31
>> Time taken
1.081000
">> Sums of squares multipliers", [x+513/100-163/7387397*x^2*(x-297/100)*(x-601
/50)*(x-319/25)*(x-67/5)*(x-1461/100)-163/7387397*(x+1)^2*(-x+297/100)*(x-601/
50)*(x-319/25)*(x-67/5)*(x-1461/100), 163/7387397*x^2, 163/7387397*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 19 Test 1 - Weifeng

>> Test
Batch: 19 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+513/100
>> basis
[(x-297/100)*(x-601/50)*(x-319/25)*(x-67/5)*(x-1461/100), (-x+297/100)*(x-601/50)*(x-319/25)*(x-67/5)*(x-1461/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.645059
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 19 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 19 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+513/100
>> basis
[(x-297/100)*(x-601/50)*(x-319/25)*(x-67/5)*(x-1461/100), (-x+297/100)*(x-601/50)*(x-319/25)*(x-67/5)*(x-1461/100), -x^2+2758921/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.578949
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20188
time= 0.115000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [513/100*(1/
250000000000000000000000000000000000000000000*111986795172071606445989112684064\
704317789607131585432537049812927664558109218957162982485^(1/2)-104364636265548\
315450252396902171180597570119984910392052674995715252790811408293401273609/574\
4922592327273410679241480692519331502606845850332689150655403189191831002932502\
46100148050000000000000000000000000000000000000000000*x*11198679517207160644598\
9112684064704317789607131585432537049812927664558109218957162982485^(1/2)+11043\
9486023402690899045242642384034045262689106031448535044104366220593816036774324\
07/1679801927581074096689836690260970564766844106973781488055747193914968371638\
284357444737275000000000000000000000000000000000000000000*x^2*11198679517207160\
6445989112684064704317789607131585432537049812927664558109218957162982485^(1/2)
+546548456806022344015664290213603164884622483965952129215000433054779274511652\
5870963/22397359034414321289197822536812940863557921426317086507409962585532911\
621843791432596497000000000000000000000000000000000000000000000*x^3*11198679517\
2071606445989112684064704317789607131585432537049812927664558109218957162982485
^(1/2))^2+513/100*(1/5744922592327273410679241480692519331502606845850332689150\
65540318919183100293250246100148050000000000000000000000000000000000000000000*x
*106731981266736685081071537973189665735915442380249911401907671289514943682616\
1474075003433161406278471722761438078424690044346519350330607351862209956574145\
2626902659239016895189063700343345622812757581564133699342700603253807166770397\
770615357623110449425877275659413^(1/2)-511614135970601041219692392597463308614\
2376043245344302272183246150708493716954117313432584115933615767896796792450989\
262423965679850860947958101258156698467268309689298940863071/320195943800210055\
2432146139195689972077463271407497342057230138685448310478484422225010299484218\
8354151682843142352740701330395580509918220555866298697224357880707977717050685\
5671911010300368684382727446924010980281018097614215003111933118460728693313482\
77631826978239000000000000000000000000000000000000000000000*x^2*106731981266736\
6850810715379731896657359154423802499114019076712895149436826161474075003433161\
4062784717227614380784246900443465193503306073518622099565741452626902659239016\
8951890637003433456228127575815641336993427006032538071667703977706153576231104\
49425877275659413^(1/2)+3241996904186258877747042952026337758788746269989687206\
9394381147844152621721987344110685901213365725552144620738367846486603208675972\
6922388959933142675048407201345174543421382917/85385585013389348064857230378551\
7325887323539041999291215261370316119549460929179260002746529125022777378209150\
4627397520354772154802644858814897679652593162101522127391213516151250960274676\
4982502060652513069594741604826030457334163182164922860984883595407018205275304\
000000000000000000000000000000000000000000000000*x^3*10673198126673668508107153\
7973189665735915442380249911401907671289514943682616147407500343316140627847172\
2761438078424690044346519350330607351862209956574145262690265923901689518906370\
0343345622812757581564133699342700603253807166770397770615357623110449425877275\
659413^(1/2))^2+513/100*(1/2859229459225240341922731006534586888793636625173372\
4409212818452673520550197169195790291201356967576342304348678773815663577406286\
4221772366108761994643753179707371051216314827817400000000000000000000000000000\
00000000000000000*x^2*456455177713777225292875595588298377696669382154372278346\
8242795909102114029278699388526794775493282029746554116949351991171437697012266\
2189194768184555136619912922485242840665003434667229543542091133431295310011139\
5418925040718846015746559898089333519717838543959566630003452266969938985702541\
0260882925248949894344444927103246255019804323182367165231835347571814120256820\
13054492452595555207802331311876629423532912728283347393271717719674028946693^(
1/2)-13643322130937963902909908294110623680248558534798486172195535259587844358\
3472232738683229850813926699382669067148161055287924654075951947981531959003981\
0192544602459458658233475265212370932592803188942363748074544953028151536952713\
92257249822766900534373532007276279623/6086069036183696337238341274510645035955\
5917620582970446243237278788028187057049325180357263673243760396620721559324693\
2156191692934968829189263575794068488265505633136571208866712462229727247227881\
7790839374668151938919000542917946876620798641191113596237847252794221733379363\
5595991864760338803478439003319331924592599028043283400264057642431562203091137\
9676241882700909350739323270127406943736441749168839231377216971044463191028956\
95956537192892400000000000000000000000000000000000000000000000*x^3*456455177713\
7772252928755955882983776966693821543722783468242795909102114029278699388526794\
7754932820297465541169493519911714376970122662189194768184555136619912922485242\
8406650034346672295435420911334312953100111395418925040718846015746559898089333\
5197178385439595666300034522669699389857025410260882925248949894344444927103246\
2550198043231823671652318353475718141202568201305449245259555520780233131187662\
9423532912728283347393271717719674028946693^(1/2))^2+59454899165684881359144482\
9040776006550355826343754936252863133742624340267239844409601246410364713382597\
2253573023031009346369494840493066124437106427181266046622561985598250768980783\
8673826130426925488628751204800826740254600917260526352853939655134224625680782\
5909556526611736436976061431826926456458028004691616785724208359459508906709721\
24022832947832711891/1075487820841352274641615239353300327317896265317139243159\
4439458244557099196777503042890378905320132134960539269542865838999809256926374\
6397856725567603340020924260042706580945392183669437172957193744445262747566966\
6872661252267486223927320520606870176079444545670443584000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000000*x^6,
1047094964635882647465920836006558686118651103191709514859527922363144200659888\
937/250000000000000000000000000000000000000000000000000000000000000000000000000\
0000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 19 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 20 Test 1 - Weifeng
>> input polynomial
x+491/100
>> basis
[(x-739/100)*(x-63/5)*(x-2013/100), (-x+739/100)*(x-63/5)*(x-2013/100)]
memory used=3991.6MB, alloc=185.2MB, time=18.05
>> Time taken
0.579000
">> Sums of squares multipliers", [x+491/100-2953/4497081*x^2*(x-739/100)*(x-63
/5)*(x-2013/100)-2953/4497081*(x+1)^2*(-x+739/100)*(x-63/5)*(x-2013/100), 2953/
4497081*x^2, 2953/4497081*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 20 Test 1 - Weifeng

>> Test
Batch: 20 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+491/100
>> basis
[(x-739/100)*(x-63/5)*(x-2013/100), (-x+739/100)*(x-63/5)*(x-2013/100)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -22.373344
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 20 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 20 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+491/100
>> basis
[(x-739/100)*(x-63/5)*(x-2013/100), (-x+739/100)*(x-63/5)*(x-2013/100), -x^2+4897369/10000]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 2.505090
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9947
time= 0.115000secs
>> Time taken
0.007000
">> Sums of squares multipliers", [491/100*(3/
10000000000000000000000000000000000000000000*4503629648227163102242614802425454\
1344848052894972195741033970651638033765479208751291^(1/2)-23999572596893759916\
2186954436445354328795440873125176608693656764565318951362272585987/11056410786\
3976854160056193399544899001601969857156740544238397949771372894251457484419405\
00000000000000000000000000000000000000000*x*45036296482271631022426148024254541\
344848052894972195741033970651638033765479208751291^(1/2)+340088267221656225940\
190403383286426758614476052917565201035377350749681719058649145018098559/405326\
6683404446792018353322182908721036324760547497616693057358647423038893128787616\
19000000000000000000000000000000000000000000000000000*x^2*450362964822716310224\
26148024254541344848052894972195741033970651638033765479208751291^(1/2))^2+491/
100*(1/325721861767275812355525545755059272458719403199183757643326320360026464\
5464647937490995671300000000000000000000000000000000000000000000000*x*374625934\
2572139088853712737564952647806088659568623695778318094654650684713423019306908\
9409073091303842471331765215396928664461982963948023852215850595349944241224414\
7547263388262129371188744015423903744393141245919618144411944229445886903729626\
127629374232891872495974814757^(1/2)-145196564262503938042854688403932222974067\
2955025982761286202399209848890165391886195028571335532996917035459333811468190\
13876683679449540788106458909909992367780725157113431707267/1144478414227741065\
8412564371379692406739578389720846321115024729087527550041007187291982507863469\
8484243802439201269033386958641495816541824395771437664001866317386195788369670\
5485120278580684364838809809755013989571134860728953857777658565365456601719065\
8845983884805747905000000000000000000000000000000000000000000000*x^2*3746259342\
5721390888537127375649526478060886595686236957783180946546506847134230193069089\
4090730913038424713317652153969286644619829639480238522158505953499442412244147\
5472633882621293711887440154239037443931412459196181444119442294458869037296261\
27629374232891872495974814757^(1/2))^2+4052619293115308501532095307772055963957\
6173052624719515973174750735204275082423696856981586273494235208027479887254934\
6930743300104509470080069243909266961772503562267828791612671379361297397711137\
2331322301862789525581160780023977863539084797365273225840517644553373977523374\
636702291/931613877870906771136461655484932645227313416927498785800038353258678\
9569957224044213926645987581856605823740580440409137395825669246528814703584251\
1843222772496881140427816393895726730900000000000000000000000000000000000000000\
000000000000000000000000000000000000000000000000000000000000000*x^4, 2745124494\
655412245653215767952325016255211965527454423960479802328768674146354891/250000\
0000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 20 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 21 Test 1 - Weifeng
>> input polynomial
x+217/50
>> basis
[(x-204/25)*(x-963/100)*(x-432/25)*(x-621/20)*(x-641/20), -(x-204/25)*(x-963/100)*(x-432/25)*(x-621/20)*(x-641/20)]
memory used=4165.6MB, alloc=185.3MB, time=18.80
>> Time taken
0.823000
">> Sums of squares multipliers", [x+217/50-43/45875125*x^2*(x-204/25)*(x-963/
100)*(x-432/25)*(x-621/20)*(x-641/20)+43/45875125*(x+1)^2*(x-204/25)*(x-963/100
)*(x-432/25)*(x-621/20)*(x-641/20), 43/45875125*x^2, 43/45875125*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 21 Test 1 - Weifeng

>> Test
Batch: 21 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+217/50
>> basis
[(x-204/25)*(x-963/100)*(x-432/25)*(x-621/20)*(x-641/20), -(x-204/25)*(x-963/100)*(x-432/25)*(x-621/20)*(x-641/20)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.911613
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 21 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 21 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+217/50
>> basis
[(x-204/25)*(x-963/100)*(x-432/25)*(x-621/20)*(x-641/20), -(x-204/25)*(x-963/100)*(x-432/25)*(x-621/20)*(x-641/20), -x^2+436921/400]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.781691
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 21 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 22 Test 1 - Weifeng
>> input polynomial
x+463/50
>> basis
[(x-377/50)*(x-1257/100)*(x-1507/100)*(x-389/25)*(x-1841/100), (-x+377/50)*(x-1257/100)*(x-1507/100)*(x-389/25)*(x-1841/100)]
memory used=4315.0MB, alloc=185.3MB, time=19.53
>> Time taken
0.904000
">> Sums of squares multipliers", [x+463/50-87/14017543*x^2*(x-377/50)*(x-1257/
100)*(x-1507/100)*(x-389/25)*(x-1841/100)-87/14017543*(x+1)^2*(-x+377/50)*(x-\
1257/100)*(x-1507/100)*(x-389/25)*(x-1841/100), 87/14017543*x^2, 87/14017543*(x
+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 22 Test 1 - Weifeng

>> Test
Batch: 22 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+463/50
>> basis
[(x-377/50)*(x-1257/100)*(x-1507/100)*(x-389/25)*(x-1841/100), (-x+377/50)*(x-1257/100)*(x-1507/100)*(x-389/25)*(x-1841/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.361775
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 22 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 22 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+463/50
>> basis
[(x-377/50)*(x-1257/100)*(x-1507/100)*(x-389/25)*(x-1841/100), (-x+377/50)*(x-1257/100)*(x-1507/100)*(x-389/25)*(x-1841/100), -x^2+4165681/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.814257
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20447
time= 0.119000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [463/50*(1/
500000000000000000000000000000000000000000000*585534835811072264129130566427317\
693639787970839852807148892336249587692406422228539868034^(1/2)-918907253816124\
547933526224416106087663678124077228136203276303078688597976271070905370333/542\
2052579610529165835749045116961843104436609977036994198743033671182031683469836\
279177994840000000000000000000000000000000000000000000*x*5855348358110722641291\
30566427317693639787970839852807148892336249587692406422228539868034^(1/2)+5365\
2946413048286905528274012492430615464676451715146568238147897478266162966031900\
67/2810567211893146867819826718851124929470982260031293474314683213998020923550\
82669699136656320000000000000000000000000000000000000000*x^2*585534835811072264\
129130566427317693639787970839852807148892336249587692406422228539868034^(1/2)-\
2821496437141333516220186082290050944741567622143919738089612488980237356553008\
2466797/46842786864885781130330445314185415491183037667188224571911386899967015\
392513778283189442720000000000000000000000000000000000000000000*x^3*58553483581\
1072264129130566427317693639787970839852807148892336249587692406422228539868034
^(1/2))^2+463/50*(19/7531231033079025011345855423667460000072062451258104384942\
0540737692718420083396025917782348327600000000000000000000000000000000000000000\
00*x*13732886354096070601721970252065135579836357378126882369170832193878576360\
8133627169400787266682052139616791066320409381279353829608106955239011259159554\
6570251655266148230916797009964921541048735367290677058120056141541594401505958\
7498531111622074493932326091209058593888194^(1/2)-19537953040708680891983435051\
9742341487622546821655024649967957677982459183768688301062875910485140463045602\
851993982904902143853338987991584434442796511980832425318444029035855811/563552\
5717663614285803832284864742462567835641131981965750449496408055094070278436757\
2677280063909085371901301513774908084400059666393782927456024277139060118318466\
6453917654841105601155707989761813790990585405638589401518220920371841192421427\
255756770441027501019683118522000000000000000000000000000000000000000000000*x^2
*137328863540960706017219702520651355798363573781268823691708321938785763608133\
6271694007872666820521396167910663204093812793538296081069552390112591595546570\
2516552661482309167970099649215410487353672906770581200561415415944015059587498\
531111622074493932326091209058593888194^(1/2)+561490153261144400522342602904127\
1259671641035747742047807551820034619681025927659669376323146186827858963241761\
9189138392221809799608568014532853475872724079643095627682654472734300587/46962\
7143138634523816986023738728538547319636760998497145870791367337924505856536396\
4389773338659090447658441792814575673700004972199481910621335356428255009859872\
2204493137903425466762975665813484482582548783803215783459851743364320099368452\
2713130642034189584183069265435000000000000000000000000000000000000000000000000\
0000*x^3*1373288635409607060172197025206513557983635737812688236917083219387857\
6360813362716940078726668205213961679106632040938127935382960810695523901125915\
9554657025165526614823091679700996492154104873536729067705812005614154159440150\
59587498531111622074493932326091209058593888194^(1/2))^2+463/50*(1/207874255548\
7508416730645426361840840003105232821737409261829636927936035287281675367227975\
9913651760882198430982572316833180575755861642027721102417565742540517946216942\
72614251091000000000000000000000000000000000000000000000000*x^2*460371003823127\
2730106129937927487411696454421668713344821166598549884125153988513888737882279\
5773011446130448373710466347199723638236025989026072442143212842545776593724400\
1188272779086885584213583577892855712625728083515125021042428390669202138443442\
3243595738356211623349185825223593970350667620703770788140276481113039722861460\
1132186352830904459282730428580061042546916882674264200066472062487122409318801\
7053909421954885346450370127144458637621357^(1/2)-10350806004157279733026558958\
9037765711940903114908829073665064488231109690770636089450468335944981312793190\
5624580339698412004510535038625550502353116991660680754296149825632103140584294\
1162893538274372920857273790875360595378779370623509516407068920689505060901035\
913944637/437352453631970909360082344103111304111163170058527767758010826862238\
9918896289088194300988165598436087382392595502494302983973745632422468957476882\
0036052200418487764038180112885914013254130500290439899821292699444167933936876\
9990306971135742031521270208141595143840104218172653396241427183313423966858224\
8733262657057387736718387107557703518935923631859390715105799041957103854055099\
0063148459362766288852861620121395085714107912785162078723570574028915000000000\
0000000000000000000000000000000000000000*x^3*4603710038231272730106129937927487\
4116964544216687133448211665985498841251539885138887378822795773011446130448373\
7104663471997236382360259890260724421432128425457765937244001188272779086885584\
2135835778928557126257280835151250210424283906692021384434423243595738356211623\
3491858252235939703506676207037707881402764811130397228614601132186352830904459\
2827304285800610425469168826742642000664720624871224093188017053909421954885346\
450370127144458637621357^(1/2))^2+895302481610966367624116753669290064967461366\
5455089705198737063837663445506918925895020645108552586329338944138646078658755\
7483173260293892818432909377232585169439676455968297925326763362885536050838260\
5722749419900634408347330996846820224690967619578079771031730961445528826075919\
5641722845121032290649235686719248432290685496488038535254841958960381238288669\
8301267904671/78897297637477765665146351705346242167335122140475655508924830967\
3724104554483511093526090858527030884990172827969663052162904028629100519970140\
7477941632557940871036308579529147584876738786765344187845376964189343427481736\
0264499704904684160916958063320243460773797507955243750000000000000000000000000\
0000000000000000000000000000000000000000000000000000000000000000000000000000000
*x^6, 3342358693394931171813686524173482201647553455099724123594785753067250931\
3251103/12500000000000000000000000000000000000000000000000000000000000000000000\
000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 22 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 23 Test 1 - Weifeng
>> input polynomial
x+427/50
>> basis
[(x-39/25)*(x-681/100)*(x-83/10)*(x-979/100)*(x-1003/50)*(x-2189/100)*(x-2289/100), -(x-39/25)*(x-681/100)*(x-83/10)*(x-979/100)*(x-1003/50)*(x-2189/100)*(x-2289/100)]
memory used=4465.0MB, alloc=185.3MB, time=20.26
memory used=4581.4MB, alloc=185.3MB, time=20.87
>> Time taken
0.903000
">> Sums of squares multipliers", [x+427/50-21/59976122*x^2*(x-39/25)*(x-681/
100)*(x-83/10)*(x-979/100)*(x-1003/50)*(x-2189/100)*(x-2289/100)+21/59976122*(x
+1)^2*(x-39/25)*(x-681/100)*(x-83/10)*(x-979/100)*(x-1003/50)*(x-2189/100)*(x-\
2289/100), 21/59976122*x^2, 21/59976122*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 23 Test 1 - Weifeng

>> Test
Batch: 23 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+427/50
>> basis
[(x-39/25)*(x-681/100)*(x-83/10)*(x-979/100)*(x-1003/50)*(x-2189/100)*(x-2289/100), -(x-39/25)*(x-681/100)*(x-83/10)*(x-979/100)*(x-1003/50)*(x-2189/100)*(x-2289/100)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 1.015647
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 23 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 23 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+427/50
>> basis
[(x-39/25)*(x-681/100)*(x-83/10)*(x-979/100)*(x-1003/50)*(x-2189/100)*(x-2289/100), -(x-39/25)*(x-681/100)*(x-83/10)*(x-979/100)*(x-1003/50)*(x-2189/100)*(x-2289/100), -x^2+5707321/10000]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 1.182675
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 36058
time= 0.127000secs
>> Time taken
0.018000
">> Sums of squares multipliers", [427/50*(1/
50000000000000000000000000000000000000000000*3241730389449344673720836206214166\
846422259674857656338216276407941666178038748179703213^(1/2)-907162131918557084\
0068763847086317284068997751192817344030692887154001131323026805116211/69210943\
8147435087839398530026724621711152440582109628209175013095545729011272736366635\
9755000000000000000000000000000000000000000000*x*324173038944934467372083620621\
4166846422259674857656338216276407941666178038748179703213^(1/2)+29195905711713\
451804303697409844509916831454487719335360384863641278145559763798072783/243129\
7792087008505290627154660625134816694756143242253662207305956249633529061134777\
40975000000000000000000000000000000000000000000*x^2*324173038944934467372083620\
6214166846422259674857656338216276407941666178038748179703213^(1/2)-40514563550\
94204996357622996996336486936969082865024279858272332039936824929722697933/2593\
3843115594757389766689649713334771378077398861250705730211263533329424309985437\
62570400000000000000000000000000000000000000000000*x^3*324173038944934467372083\
6206214166846422259674857656338216276407941666178038748179703213^(1/2)-19343231\
622941886453345010037457585777114289657933192905001883564963315436273508548069/
3241730389449344673720836206214166846422259674857656338216276407941666178038748\
17970321300000000000000000000000000000000000000000000000*x^4*324173038944934467\
3720836206214166846422259674857656338216276407941666178038748179703213^(1/2))^2
+427/50*(1/20763283144423052635181955900801738651334573217463288846275250392866\
3718703381820909990792650000000000000000000000000000000000000000000*x*253058416\
7317858971815948926626810512763645994028818938119582285866909138443765345259392\
9710361767099397554742855829508433361362249350571614941022715370342130692704455\
6755489453071580655910713573678332505482245822137616319356710319319890269778022\
7209252551068344848198^(1/2)-99322541008392066027660609011920976799746901400624\
5733618184803470600706004262682302516265319212221244458080640112730309905862649\
728125989353058145519422216755740910366564463689/202446733385428717745275914130\
1448410210916795223055150495665828693527310755012276207514376828941367951804379\
4284663606746689089799480457291952818172296273704554163564540439156245726452472\
8570858942666004385796657710093055485368255455912215822418176740204085467587855\
8400000000000000000000000000000000000000000000*x^2*2530584167317858971815948926\
6268105127636459940288189381195822858669091384437653452593929710361767099397554\
7428558295084333613622493505716149410227153703421306927044556755489453071580655\
9107135736783325054822458221376163193567103193198902697780227209252551068344848\
198^(1/2)+883860822207910536676107593544003578596116438245766331671792221075900\
1520437444387506785219611422059327696515143079071018411866139381901350698605797\
95575064158326550631152258631/8435280557726196572719829755422701709212153313429\
3964603986076195563637948125511508646432367872556997991849142852765028111204540\
8311685720498034090512344737689756815189184964843571935519702378578927775018274\
1527404587210645223677310663008992600757364175170227816160660000000000000000000\
0000000000000000000000000000*x^3*2530584167317858971815948926626810512763645994\
0288189381195822858669091384437653452593929710361767099397554742855829508433361\
3622493505716149410227153703421306927044556755489453071580655910713573678332505\
4822458221376163193567103193198902697780227209252551068344848198^(1/2)+72141363\
6852365405714060776956493737272624803904921333938917409211521488122198822165743\
0816074029955616571785309099518197251161536132225307047532326012762978542801035\
5483221021/67482244461809572581758638043381613673697226507435171683188860956450\
9103585004092069171458942980455983934793142822120224889636326649348576398427272\
4098757901518054521513479718748575484157619028631422200146193221923669768516178\
9418485304071940806058913401361822529285280000000000000000000000000000000000000\
0000000000*x^4*2530584167317858971815948926626810512763645994028818938119582285\
8669091384437653452593929710361767099397554742855829508433361362249350571614941\
0227153703421306927044556755489453071580655910713573678332505482245822137616319\
3567103193198902697780227209252551068344848198^(1/2))^2+427/50*(1/1561255171345\
5206308548680051018371559489305263534694601123541645171675868122154991020907776\
9118112164986417549396615725125185636802539087273976335797099765633218732259614\
32252216920000000000000000000000000000000000000000000000*x^2*934978066553893196\
4326904085854009664649976504504833820939902086230251103796819943475819208712781\
6181365048583665734079586354708918923738956624678971229942587624429690353474148\
4267843764398764707342739434786586204021499145284355875628806383302293261391900\
6997287618598897750504459678180947299892941669508037760046565212982327917077478\
2530784011077447515003005375847233905722566324351923587334334364795841223449633\
306344765587115958576298557973213930^(1/2)-236653682897722436768827484337286747\
3255095755868797886791934599780064929737342932290405840868694491560035765553603\
5024606965135293582570919458576589650581753624681726785855056831292113788214073\
54505797817898597193282209344442669882206396903841007319840151846331027899/3739\
9122662155727857307616343416038658599906018019335283759608344921004415187279773\
9032768348511264725460194334662936318345418835675694955826498715884919770350497\
7187614138965937071375057595058829370957739146344816085996581137423502515225533\
2091730455676027989150474395591002017838712723789199571766678032151040186260851\
9293116683099130123136044309790060012021503388935622890265297407694349337337459\
1833648937985332253790623484638343051942318928557200000000000000000000000000000\
00000000000000000*x^3*934978066553893196432690408585400966464997650450483382093\
9902086230251103796819943475819208712781618136504858366573407958635470891892373\
8956624678971229942587624429690353474148426784376439876470734273943478658620402\
1499145284355875628806383302293261391900699728761859889775050445967818094729989\
2941669508037760046565212982327917077478253078401107744751500300537584723390572\
2566324351923587334334364795841223449633306344765587115958576298557973213930^(1
/2)+575508228403775630298285222727191621518873614377665977984098625634150264210\
1209713161530758683873435341899870549935918540528123670615899495168094484038748\
4243321110743977971606737470383576767478851771986634803167584583719601421274779\
392438978615442446421427427259545503/373991226621557278573076163434160386585999\
0601801933528375960834492100441518727977390327683485112647254601943346629363183\
4541883567569495582649871588491977035049771876141389659370713750575950588293709\
5773914634481608599658113742350251522553320917304556760279891504743955910020178\
3871272378919957176667803215104018626085192931166830991301231360443097900600120\
2150338893562289026529740769434933733745918336489379853322537906234846383430519\
4231892855720000000000000000000000000000000000000000000000000*x^4*9349780665538\
9319643269040858540096646499765045048338209399020862302511037968199434758192087\
1278161813650485836657340795863547089189237389566246789712299425876244296903534\
7414842678437643987647073427394347865862040214991452843558756288063833022932613\
9190069972876185988977505044596781809472998929416695080377600465652129823279170\
7747825307840110774475150030053758472339057225663243519235873343343647958412234\
49633306344765587115958576298557973213930^(1/2))^2+427/50*(1/215590705566291132\
6377009846216864839823275406685912432817033132560908286591020205533172169741103\
6113676459974556899699405064815048710260480826262452837446149621254664408516173\
8797143140414819160393126729505183522234055210545373924319018207796798550083005\
38924581908651900000000000000000000000000000000000000000000000*x^3*294571366887\
4522827769518638955954467448761058266161203432372979989596890028742059204383973\
8491390317998075864088894796610218415917161101135377359329107668832182003796306\
9705797379785760790486250331520466564975448937717711425961042139540689691230467\
6680263309131096464346272492956286692294143161646643970221412731457731306592286\
7695271235892637920218795393610341222510729317650809005478431233234001719739185\
1821045238922794114845390426067584999090667876582518072997478686175516449925016\
3546415782438345637983549128909385638527316566942575420622147649460693609038124\
41485094071435839776733101690293232392593511853893806793344513^(1/2)-8185802277\
0842681757351494443433321144708906646180983936871520072126171217953035217948470\
3839054526750396913741302875262411398329299074805425615238060849357043444449771\
8345630609694501120468238895523135935011821868865481992109150062251624307202716\
5582420620154264721135457328335720205600155656457472822773147022201155222576373\
361664646845548178875547633419/392761822516603043702602485194127262326501474435\
4881604576497306652795853371656078939178631798852042399743448545185972881362455\
4556214801513836479105476891776242671728409294106317304768105398166710869395541\
9967265250290281901281389519387586254973956890701774550812861912836332394171558\
9725524215528858626961883641943641742123049026036164785685056029172719148045496\
3347639090201078673971241644312002292985580242806031856372548646052056809011333\
2120890502110024097329971581567355266566688472855437658446085064473217187918085\
1369755422590100560829530199280924812050832553134587619144530356441355870576431\
9012468247185840905779268400000000000000000000000000000000000000000000000*x^4*
2945713668874522827769518638955954467448761058266161203432372979989596890028742\
0592043839738491390317998075864088894796610218415917161101135377359329107668832\
1820037963069705797379785760790486250331520466564975448937717711425961042139540\
6896912304676680263309131096464346272492956286692294143161646643970221412731457\
7313065922867695271235892637920218795393610341222510729317650809005478431233234\
0017197391851821045238922794114845390426067584999090667876582518072997478686175\
5164499250163546415782438345637983549128909385638527316566942575420622147649460\
69360903812441485094071435839776733101690293232392593511853893806793344513^(1/2
))^2+20045548026940520498765430751854589784676091628902715317877978333861029797\
0747546596747330253555039956279434054911766517423255459328759926691697316381880\
4625770984004637522081342443785452112974353253678426135167728520113401789986075\
9625892116697885022656543334678880654557397533332880434982973885890010002719312\
9632204108379257808782012704891626247012770860108599619528250100556365671975716\
688632328842888647442230422387041206442522533346399061131/136634539097454597473\
3344090692757252312186352349985996618812072908227764693892959691176401348039541\
8790277238429490458269717794859142405991408865614260478111370999658655188713287\
8977625560153668920712905483934953811146468188360536018880919109665726692097539\
4434805520018969685681160605821794099265948675736987087909239014484948904764129\
4119692814108601715270000000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000000*x^8, 53806474697052292779067938955979\
53916165264252677032272397007615728846292256479243/5000000000000000000000000000\
0000000000000000000000000000000000000000000000000000]
>> Degree size
8
>> Succeeds RealCertify Batch: 23 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 24 Test 1 - Weifeng
>> input polynomial
x+241/50
>> basis
[(x-112/25)*(x-294/25)*(x-343/25), (-x+112/25)*(x-294/25)*(x-343/25)]
memory used=4736.1MB, alloc=185.3MB, time=21.61
>> Time taken
0.571000
">> Sums of squares multipliers", [x+241/50-1363/670137*x^2*(x-112/25)*(x-294/
25)*(x-343/25)-1363/670137*(x+1)^2*(-x+112/25)*(x-294/25)*(x-343/25), 1363/
670137*x^2, 1363/670137*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 24 Test 1 - Weifeng

>> Test
Batch: 24 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+241/50
>> basis
[(x-112/25)*(x-294/25)*(x-343/25), (-x+112/25)*(x-294/25)*(x-343/25)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -30.843559
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 24 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 24 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+241/50
>> basis
[(x-112/25)*(x-294/25)*(x-343/25), (-x+112/25)*(x-294/25)*(x-343/25), -x^2+154449/625]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 1.929462
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9637
time= 0.116000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [241/50*(1/
625000000000000000000000000000000000000000*936074720333259134575098512505918278\
376937630353771490817685947255080130364655742839^(1/2)-159055649584287816654746\
3537918744574276303761490585483532200381846392195795439400103/17624531843774644\
6431717766807754925850657788215046038505517432256620555795220339081405468750000\
00000000000000000000000000000000*x*93607472033325913457509851250591827837693763\
0353771490817685947255080130364655742839^(1/2)+32381126322659523051715269732063\
612380092247986603595143704021338585219927836783679209399/702056040249944350931\
3238843794387087827032227653286181132644604413100977734918071292500000000000000\
000000000000000000000000000000000*x^2*93607472033325913457509851250591827837693\
7630353771490817685947255080130364655742839^(1/2))^2+241/50*(1/2038805843687850\
8923221111264321089822404092940716525734318256563445865894391088824936984625000\
0000000000000000000000000000000000000000*x*136441601544055132623555575866504442\
6624472365475919109345974559469598453564544032554841196226739563153025333273347\
0194393288103497153927185378107322476270777559886230865004004937022485085762353\
46970321333444842757497187969639028692257774208646030084282576698198871157^(1/2
)-25175133162702551481665447467276380733706011033804353291847044644566945907761\
9815323475767964287961360189462548960962583639107942411927346952078888729679388\
413179192253644403/884605819139361596366413225275573409377899614546109381059371\
4726851649724873859132227964187154691151147726486471388870846270813989337349056\
9100799549249680871109220895130990695909118808906654262640710667365459203675906\
8963718249930146378506642913695722624933998230781250000000000000000000000000000\
000000000000*x^2*13644160154405513262355557586650444266244723654759191093459745\
5946959845356454403255484119622673956315302533327334701943932881034971539271853\
7810732247627077755988623086500400493702248508576235346970321333444842757497187\
969639028692257774208646030084282576698198871157^(1/2))^2+425338417922256852524\
6491291818494630352693016100742827898743347592238934638783246213339533999771683\
7258347788686059165611450621522304010794456856771959671351282354970883296757970\
0602669416017938662314133321991684196049408752349831716611234921800718679069408\
6475419076985321/23527375444474119240342940464965606268532889174211891500821526\
1412399536823966482779159507787116990352127119446932531303643375816461736829865\
8575144228128478262952646453642263867781250000000000000000000000000000000000000\
0000000000000000000000000000000000000000000000000000000000*x^4, 162392251852750\
6881804006835410940407812473840891216433032064645917679755870773889/12500000000\
00000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 24 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 25 Test 1 - Weifeng
>> input polynomial
x+573/100
>> basis
[(x-377/100)*(x-319/50)*(x-819/50), (-x+377/100)*(x-319/50)*(x-819/50)]
>> Time taken
0.476000
">> Sums of squares multipliers", [x+573/100-2207/1315449*x^2*(x-377/100)*(x-\
319/50)*(x-819/50)-2207/1315449*(x+1)^2*(-x+377/100)*(x-319/50)*(x-819/50), 
2207/1315449*x^2, 2207/1315449*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 25 Test 1 - Weifeng

>> Test
Batch: 25 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+573/100
>> basis
[(x-377/100)*(x-319/50)*(x-819/50), (-x+377/100)*(x-319/50)*(x-819/50)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -25.383926
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 25 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 25 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+573/100
>> basis
[(x-377/100)*(x-319/50)*(x-819/50), (-x+377/100)*(x-319/50)*(x-819/50), -x^2+844561/2500]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 1.657940
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9745
time= 0.116000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [573/100*(1/
5000000000000000000000000000000000000000000*58291721672208296005017388337742611\
076057917210438342215015446269347716372092605733691^(1/2)-309982032719562982975\
9002689672991017989602141231805606618161448858599050205534535155343/16700578259\
0876768054374817587632580732905932807905850446019253561681207406045315427024715\
000000000000000000000000000000000000000000*x*5829172167220829600501738833774261\
1076057917210438342215015446269347716372092605733691^(1/2)+29993032397470108448\
262893246214328052458600755231232157469983350651256574365323184542639/349750330\
0332497760301043300264556664563475032626300532900926776160862982325556344021460\
0000000000000000000000000000000000000000000000*x^2*5829172167220829600501738833\
7742611076057917210438342215015446269347716372092605733691^(1/2))^2+573/100*(1/
6379620894971492539677118031847564583997006633262003487037935486056222122910931\
049312344113000000000000000000000000000000000000000000000*x*2016833278555474016\
8456693212144878960380622974798894814677022654659730024540341642702601837285754\
1191383489946132980969330328991642492374484775174695707891430982653412336414413\
4916553729292773716096869330276196084583077280188933601198362755204600060732251\
880024203297797^(1/2)-232364744499683531991185193332934606489432981079278133413\
0937938109014447560445337132360277918460987830736577076136382658110463438324167\
52893058523931045675323896654545827829823/3167800961081896361537700504525373658\
6985271688165803373838255478523136164199489491155919116155634742102118839706750\
9375911511505197632001808547394810012394917773801171209027874594223098841796918\
7586705754360517410339911958411937593505281814457487006385735937210790520100000\
0000000000000000000000000000000000000000*x^2*2016833278555474016845669321214487\
8960380622974798894814677022654659730024540341642702601837285754119138348994613\
2980969330328991642492374484775174695707891430982653412336414413491655372929277\
3716096869330276196084583077280188933601198362755204600060732251880024203297797
^(1/2))^2+139828119154612834864364997880548731313683256189968184771393521229221\
3813590833306550090249115118566887796115921579100317136052808557195299907636117\
7260543971581068279781287087592133360741795556742780047477772563208676017589379\
6540374153724870313249356736238721831128150351/37936422463193771497552583523622\
1250014540437210055338419217993032734707783065480957939161454314562088336273814\
5744215085739880501686601876089191967714391380968172139707835932696828000000000\
0000000000000000000000000000000000000000000000000000000000000000000000000000000\
00000000*x^4, 25654225104858918835736311080418683249704819063761467968944627855\
974256234980453/250000000000000000000000000000000000000000000000000000000000000\
00000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 25 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 26 Test 1 - Weifeng
>> input polynomial
x+433/100
>> basis
[(x-257/100)*(x-421/100)*(x-146/25)*(x-113/10)*(x-709/50), -(x-257/100)*(x-421/100)*(x-146/25)*(x-113/10)*(x-709/50)]
memory used=4905.0MB, alloc=185.3MB, time=22.38
memory used=5073.8MB, alloc=185.3MB, time=23.15
>> Time taken
1.211000
">> Sums of squares multipliers", [x+433/100-103/534447*x^2*(x-257/100)*(x-421/
100)*(x-146/25)*(x-113/10)*(x-709/50)+103/534447*(x+1)^2*(x-257/100)*(x-421/100
)*(x-146/25)*(x-113/10)*(x-709/50), 103/534447*x^2, 103/534447*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 26 Test 1 - Weifeng

>> Test
Batch: 26 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+433/100
>> basis
[(x-257/100)*(x-421/100)*(x-146/25)*(x-113/10)*(x-709/50), -(x-257/100)*(x-421/100)*(x-146/25)*(x-113/10)*(x-709/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -3.127970
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 26 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 26 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+433/100
>> basis
[(x-257/100)*(x-421/100)*(x-146/25)*(x-113/10)*(x-709/50), -(x-257/100)*(x-421/100)*(x-146/25)*(x-113/10)*(x-709/50), -x^2+654481/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.564311
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19869
time= 0.114000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [433/100*(3/
125000000000000000000000000000000000000000000*366964848003159417093951729388756\
9544193569654991899386790119090099780856500461833487935^(1/2)-77447618918294897\
42655253152927047903925077617876645980445204886588181044165475226422469/1986197\
2398171003450210137353166470157947695757643655431001519575165063885808749673753\
44818750000000000000000000000000000000000000000*x*36696484800315941709395172938\
87569544193569654991899386790119090099780856500461833487935^(1/2)+8165859567640\
6270845299223829266199697143470487106156117496823479033629856010708433561/16513\
4181601421737692278278224940629488710634474635472405555359054490138542520782506\
957075000000000000000000000000000000000000000000*x^2*36696484800315941709395172\
93887569544193569654991899386790119090099780856500461833487935^(1/2)-3931226535\
16355693144765330072440550934882512402481745606871040754413253784122552297/2293\
5303000197463568371983086797309651209810343699371167438244313123630353127886459\
299593750000000000000000000000000000000000000000*x^3*36696484800315941709395172\
93887569544193569654991899386790119090099780856500461833487935^(1/2))^2+433/100
*(13/10320280858089653392729187368705297894069622715671643361948389571255767195\
066226330482291678225000000000000000000000000000000000000000000*x*1026647449075\
9654918224926468975739510082936548273014232052961739301618421568450099407592520\
9856703379797662520027521645484719855867031769601852952220559411834754041702066\
9125230203263757487857924039363843390596628697806870680611721960632104585689662\
57906521054336962203^(1/2)-1245025112361075107827560446294085657635270012430927\
2488528486698170800022566942758001303455821392525451420217232877156329729965899\
874530207584346219057148622882617879925736881/722417193164741884040798448848971\
2775931627550928254096601932517190443101204704710538685557131227323563995450131\
8442266417149148001122961433174529745269505296539542912467696095514447327046092\
7739562918408852361224726011618730944304930439017011437226482815083920168433515\
62500000000000000000000000000000000000000*x^2*102664744907596549182249264689757\
3951008293654827301423205296173930161842156845009940759252098567033797976625200\
2752164548471985586703176960185295222055941183475404170206691252302032637574878\
5792403936384339059662869780687068061172196063210458568966257906521054336962203
^(1/2)+194304188605446892587718970867699551558412860652094771261067667875450641\
6997643097922057348469479612934440360089354489940537039516715351496519411284625\
88923270248933612430393133/3082313357502898705240740048422277451064161088396055\
0812168245406679223898473406764965058377093236580539713920562535367004650303147\
1457968781544660246483222598568716426528836674194975262063329168880178521110340\
7892164316239918695701036539805915465499660011024726051983000000000000000000000\
0000000000000000000000000*x^3*1026647449075965491822492646897573951008293654827\
3014232052961739301618421568450099407592520985670337979766252002752164548471985\
5867031769601852952220559411834754041702066912523020326375748785792403936384339\
059662869780687068061172196063210458568966257906521054336962203^(1/2))^2+433/
100*(1/145487503191025664577860422766013334901630790836224271272415265903235397\
1853058185439303094383452472246179109569453266705536213291926826170323320865506\
9625105468713754474787364359500000000000000000000000000000000000000000000*x^2*
1355739873244073998193165661811272226417917167681768326289009946200730650420473\
1238940120821341586213958580702318610656498373326816888773121307634950323679305\
2529625017540019639443688908704496463573521913364310013090791487548573892912436\
1652474591103577948678888663380952738303415655056020026364562196905456213715474\
6550736040715434791042844206138266345021026422380400694060900095148873219147838\
5022752196697674772943406207133701216086690443253^(1/2)-11521451171492328847590\
8128453316861544711054149224316234703716390623308883590834843773767954410503033\
9571958909571448009021500697855084476485514814386033160828053203397315622746058\
1490098760047270114496433763056762518696504572965029509597198078145421432906824\
61021/2753846617527025308829867750554146709911394246853591912774551453220234133\
6665860329097120418350096997103367051584677896012320820096805320402656133492844\
9735887950800816878164892619993095806008441633716386521254714090670209083040719\
9783859606589013179142708253992597492560249678813049332540678553016962464207934\
1095578931182582703226919305777293718353513323959920460188909811203318271148726\
3940469577465399542151882541293858240330595176089962857656250000000000000000000\
000000000000000000000*x^3*13557398732440739981931656618112722264179171676817683\
2628900994620073065042047312389401208213415862139585807023186106564983733268168\
8877312130763495032367930525296250175400196394436889087044964635735219133643100\
1309079148754857389291243616524745911035779486788886633809527383034156550560200\
2636456219690545621371547465507360407154347910428442061382663450210264223804006\
940609000951488732191478385022752196697674772943406207133701216086690443253^(1/
2))^2+1677054297393519571962222850076961568766710595778034715669506738993734236\
0273183515442774696535653365959511112060742220295160245829948955265433612702040\
1011480460536880132219695997340911971599261875568228127696159765096337016988108\
2724210922488166707411421113073653970007553829739157156270641602115530076158866\
10027490995918709882427235988868177360529/1635414331373388662613460040736603322\
1979757045735004800993890889759839728434388706422379561920976522943347637896826\
1193678168621427195626420403530293599569028491108427203119006372764125063547592\
3804993226693737258856078720203621643693013707372345102503027330285076837000000\
0000000000000000000000000000000000000000000000000000000000000000000000000000000\
000000000*x^6, 1489572729236940791951294159616233473471652027002759674344834732\
835374351347679257/625000000000000000000000000000000000000000000000000000000000\
000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 26 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 27 Test 1 - Weifeng
>> input polynomial
x+533/50
>> basis
[(x-161/25)*(x-697/100)*(x-791/50)*(x-1533/50)*(x-1583/50), -(x-161/25)*(x-697/100)*(x-791/50)*(x-1533/50)*(x-1583/50)]
memory used=5240.5MB, alloc=185.3MB, time=23.93
>> Time taken
1.012000
">> Sums of squares multipliers", [x+533/50-64/14555679*x^2*(x-161/25)*(x-697/
100)*(x-791/50)*(x-1533/50)*(x-1583/50)+64/14555679*(x+1)^2*(x-161/25)*(x-697/
100)*(x-791/50)*(x-1533/50)*(x-1583/50), 64/14555679*x^2, 64/14555679*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 27 Test 1 - Weifeng

>> Test
Batch: 27 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+533/50
>> basis
[(x-161/25)*(x-697/100)*(x-791/50)*(x-1533/50)*(x-1583/50), -(x-161/25)*(x-697/100)*(x-791/50)*(x-1533/50)*(x-1583/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.577363
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 27 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 27 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+533/50
>> basis
[(x-161/25)*(x-697/100)*(x-791/50)*(x-1533/50)*(x-1583/50), -(x-161/25)*(x-697/100)*(x-791/50)*(x-1533/50)*(x-1583/50), -x^2+2666689/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.594154
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20452
time= 0.125000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [533/50*(1/
25000000000000000000000000000000000000000000*3278004586640905642776178734814523\
069778873105572583492201233829588457876030437128679511^(1/2)-728066655139427082\
036412016504842603573488237159895052863318576387373372539602594771127/109198527\
7924751692249814541035087997620087103293866875839536019481655029952639368491362\
10187500000000000000000000000000000000000000*x*32780045866409056427761787348145\
23069778873105572583492201233829588457876030437128679511^(1/2)+9414374630762398\
11807134150824452922045803272004336416012304999309844261304535883113560351/2458\
5034399806792320821340511108923023341548291794376191509253721913434070228278465\
09633250000000000000000000000000000000000000000000000*x^2*327800458664090564277\
6178734814523069778873105572583492201233829588457876030437128679511^(1/2)-30194\
7734963246241276899807143538461093621423925967137523161208936074179825667591303\
9573/48205949803542730040826157864919456908512839787832110179429909258653792294\
5652518923457500000000000000000000000000000000000000000000000*x^3*3278004586640\
905642776178734814523069778873105572583492201233829588457876030437128679511^(1/
2))^2+533/50*(1/131038233350970203069977744924210559714410452395264025100744322\
33779860359431672421896345222500000000000000000000000000000000000000000000*x*11\
0098068793584233620205939773071080115868522684200771956500707883094945800977678\
0578346718194639340980057995713234218689374252931841348595869481663676068072849\
0986053803792819885051242133589608823177303108484846081600682158730583351464533\
194532273021942228736793444234757^(1/2)-123055044503873835363582322009758745652\
1315553985119537877022762182622166476341091231557858190300713343152422858970819\
611622503663675157686167850786779359189531839906436754899223949/275245171983960\
5840505148494326777002896713067105019298912517697077373645024441951445866795486\
5983524501449892830855467234356323296033714896737041591901701821227465134509482\
0497126281053339740220579432577712121152040017053968264583786613329863306825548\
555718419836105868925000000000000000000000000000000000000000000000*x^2*11009806\
8793584233620205939773071080115868522684200771956500707883094945800977678057834\
6718194639340980057995713234218689374252931841348595869481663676068072849098605\
3803792819885051242133589608823177303108484846081600682158730583351464533194532\
273021942228736793444234757^(1/2)+488498758147843727122889372320739616450534332\
6642322814537478076438659428310404309392041024056244430998519673612646693695604\
625505784837089118613391961650649204839587503161422633189/647635698785789609530\
6231751357122359756971922600045409205923993123232105939863415166745401144937299\
8826940924307895217022014878343608740933498921392709886638182270904728193058147\
3602478446447577833959006381461534211804832866504903027325482031310177761307572\
75255554322100000000000000000000000000000000000000000000000000*x^3*110098068793\
5842336202059397730710801158685226842007719565007078830949458009776780578346718\
1946393409800579957132342186893742529318413485958694816636760680728490986053803\
7928198850512421335896088231773031084848460816006821587305833514645331945322730\
21942228736793444234757^(1/2))^2+533/50*(1/167934586245356443854315554339052765\
1552494617299471833319547829924629068510096295753645434312267282807076416540208\
8625729596043577718346901499921205282373411776967429105716390835121935000000000\
00000000000000000000000000000000000000*x^2*312811840143835883432716037409659512\
8201633805167041499071474966691832221987852434595528411998417670099379780020516\
5787321419924007640185443289204541184635956257171595764028333420763933092581486\
9330119200300604138570300381983918481107247737784546821613816865080279519073458\
5993707424249532809116772034757889810196638426422047289126276681821436469132506\
7331551351453214489680471741940797941106661060404114750170016853512158942954934\
514631302995043584202943849^(1/2)-396287577544680598798279808859625181196971808\
6644661332406222313095521047408600887523763602579727662282079629992672541554239\
9187238189050220929489369886884886120124559394352912571820402732563632635071343\
02288229660480994817146555281989571542290283648205059317468700617790037/1564059\
2007191794171635801870482975641008169025835207495357374833459161109939262172977\
6420599920883504968989001025828936607099620038200927216446022705923179781285857\
9788201416671038196654629074346650596001503020692851501909919592405536238688922\
7341080690843254013975953672929968537121247664045583860173789449050983192132110\
2364456313834091071823456625336657756757266072448402358709703989705533305302020\
5737508500842675607947147746725731565149752179210147192450000000000000000000000\
00000000000000000000000000*x^3*312811840143835883432716037409659512820163380516\
7041499071474966691832221987852434595528411998417670099379780020516578732141992\
4007640185443289204541184635956257171595764028333420763933092581486933011920030\
0604138570300381983918481107247737784546821613816865080279519073458599370742424\
9532809116772034757889810196638426422047289126276681821436469132506733155135145\
3214489680471741940797941106661060404114750170016853512158942954934514631302995\
043584202943849^(1/2))^2+541279761954392451614834161201190768986091439317648797\
3560325369961814262328189034699923305653028718608174310284251345082400800304271\
6286705749844620688337543345568840475862239873017936625677208460317274923194735\
2836432741995524801052640304690628941381232597161058048192563039331422117453764\
637047680255041288192217889451805943171944183639150414488722647199715098877/419\
1076156851473084620710701017866791007708366727766052190402093098827203742678419\
9834520672917436016522613365880594797988146827885395587238626909613745583621536\
6169025421834213853024324830151493656717505407937558867721713148018739110518627\
2975524263957287965441322564502902150000000000000000000000000000000000000000000\
0000000000000000000000000000000000000000000000000000000000*x^6, 142995573883211\
3643420654609356958661649739901089545264267947149368692745670122093/50000000000\
000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 27 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 28 Test 1 - Weifeng
>> input polynomial
x+589/50
>> basis
[(x-331/50)*(x-863/100)*(x-1393/100)*(x-439/20)*(x-2909/100), -(x-331/50)*(x-863/100)*(x-1393/100)*(x-439/20)*(x-2909/100)]
memory used=5379.9MB, alloc=185.3MB, time=24.64
>> Time taken
1.011000
">> Sums of squares multipliers", [x+589/50-78/12136495*x^2*(x-331/50)*(x-863/
100)*(x-1393/100)*(x-439/20)*(x-2909/100)+78/12136495*(x+1)^2*(x-331/50)*(x-863
/100)*(x-1393/100)*(x-439/20)*(x-2909/100), 78/12136495*x^2, 78/12136495*(x+1)^
2]
>> Degree size
7
>> Succeeds Weifeng Batch: 28 Test 1 - Weifeng

>> Test
Batch: 28 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+589/50
>> basis
[(x-331/50)*(x-863/100)*(x-1393/100)*(x-439/20)*(x-2909/100), -(x-331/50)*(x-863/100)*(x-1393/100)*(x-439/20)*(x-2909/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.523185
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 28 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 28 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+589/50
>> basis
[(x-331/50)*(x-863/100)*(x-1393/100)*(x-439/20)*(x-2909/100), -(x-331/50)*(x-863/100)*(x-1393/100)*(x-439/20)*(x-2909/100), -x^2+9665881/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.558992
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20381
time= 0.122000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [589/50*(1/
500000000000000000000000000000000000000000000*982868338686464207802366051077667\
166956390671593133236550540350598736505991008531646327110^(1/2)-169384590753454\
2633959379205856394549918246212300737702965507967767306242188691976245808937/57\
8909451486327418395593604084745961337314105568355476328268266502655802028704025\
1396866677900000000000000000000000000000000000000000000*x*982868338686464207802\
366051077667166956390671593133236550540350598736505991008531646327110^(1/2)+402\
1100849691907516223969841341631385221443522792417343598555390733699480052848681\
01607/2200451504521934793587386681517165299156098518492089335560911232683738446\
2485265633872995000000000000000000000000000000000000000000000*x^2*9828683386864\
64207802366051077667166956390671593133236550540350598736505991008531646327110^(
1/2)-79914846384857250439416916406109529237595662602870845873157946448597556396\
961596487389/245717084671616051950591512769416791739097667898283309137635087649\
684126497752132911581777500000000000000000000000000000000000000000000*x^3*98286\
8338686464207802366051077667166956390671593133236550540350598736505991008531646\
327110^(1/2))^2+589/50*(1/86836417722949112759339040612711894200597115835253321\
4492402399753983703043056037709530001685000000000000000000000000000000000000000\
00000*x*43240631929559834412331693648093322214858024748305261077745275336336582\
3673391962325487406494656168742321120591670022496554839355722668326286646332598\
2506906381212200292357300738646005883020493231423572851621824259864080227473248\
49447893694666885798036039270244491312479137^(1/2)-2489187552721143891311939813\
8133906850994784820645393144584918127192412270812372526490287219045370776972297\
16912612205918281282483984283641369950302393341125533207858770636400163/3226912\
8305641667471889323617980091205117928916645717222197966668907897289059101666081\
1497384071767718150089993783598878025999519196021139019885322834515440774717328\
3800266642342273138718672009874196696157926734522286627035427797383939505184081\
237298776412464511129197605500000000000000000000000000000000000000000000*x^2*43\
2406319295598344123316936480933222148580247483052610777452753363365823673391962\
3254874064946561687423211205916700224965548393557226683262866463325982506906381\
2122002923573007386460058830204932314235728516218242598640802274732484944789369\
4666885798036039270244491312479137^(1/2)+19487267434936442281792290475138619642\
2765335258650779547444300201617283421591179521817638293869846454208364989228938\
423799313893557352220648380712255544616731052895765156486374219409/135126974779\
8744825385365426502916319214313273384539408679539854260518198979349882267148145\
2958005273197535018489688203017338729866333385196457697893695334082441288125913\
6165648082687683844390413481986651613182008120752507108539015452466779583401811\
88626227195140353514973031250000000000000000000000000000000000000000000000*x^3*
4324063192955983441233169364809332221485802474830526107774527533633658236733919\
6232548740649465616874232112059167002249655483935572266832628664633259825069063\
8121220029235730073864600588302049323142357285162182425986408022747324849447893\
694666885798036039270244491312479137^(1/2))^2+589/50*(1/54992909817590572077961\
6226281693124938648232861367722002403706713447232350746507760408142298872735183\
9548783498992980454735762738741220471744757934098595403039536022065448923651515\
70875000000000000000000000000000000000000000000000*x^2*958320686258560573898588\
8707748981514752307831959245208298125655053712682209367843530856427173510610173\
8238206701949968444720162164144220635821891984628447377570094605247239987149887\
1953685136879529167910689653358969384878389600313072621512589673988108612537224\
2333433341311054409435054818685638324745954693989852901209036463096920658925284\
0990970576708736374516094872673872990235895011566135660313076497485227390438140\
40569465168639603119818777052831649023^(1/2)-6770222218466008801426855920313716\
7594831828176447041854145368742222639812318027548538897051459823823804390738754\
2654510800005437454367387599880004293122233444825370674489399383237259126736573\
0968015736547416706281872552923857107872129629267863853086784994703649045188810\
1/11979008578232007173732360884686226893440384789949056510372657068817140852761\
7098044135705339668882627172797758377437460555900202705180275794777364980785559\
2219626182565590499839373589942106421099411459888362066698711731097987000391340\
7768907370924851357656715302916791676638818011793818523357047905932443367487316\
1265112955788711508236566051238713220885920468145118590842341237794868764457669\
5753913456218565342380476755071183146079950389977347131603956127875000000000000\
000000000000000000000000000000000*x^3*95832068625856057389858887077489815147523\
0783195924520829812565505371268220936784353085642717351061017382382067019499684\
4472016216414422063582189198462844737757009460524723998714988719536851368795291\
6791068965335896938487838960031307262151258967398810861253722423334333413110544\
0943505481868563832474595469398985290120903646309692065892528409909705767087363\
7451609487267387299023589501156613566031307649748522739043814040569465168639603\
119818777052831649023^(1/2))^2+133547322316909137370716658536082651960527465608\
0469692034643559757185713509830264832672884803486699978008836694524008438352286\
3198248889407457551467563010494690745789257158970744298565399951733380765940084\
0374266164726873202213928186488391901607829202309017615058191416480564308201271\
3317111813787288241138868269844563929910535331954949008209520821919710161524903
/957252993443529287427851518140491088655926700012198158118023825763040708369425\
1305855577366386398569894740564482927254521612615934241255375081056731607406416\
0374465503715407122467035975577627881337690470646271130013599587704174003821774\
4767735672557141407680771587571118257861328125000000000000000000000000000000000\
000000000000000000000000000000000000000000000000000000000000*x^6, 
8936717465607647164304458747568590431173394806139545251864670257993440400309/
762939453125000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 28 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 29 Test 1 - Weifeng
>> input polynomial
x+483/50
>> basis
[(x-247/50)*(x-507/100)*(x-8)*(x-299/20)*(x-319/20), (-x+247/50)*(x-507/100)*(x-8)*(x-299/20)*(x-319/20)]
memory used=5576.2MB, alloc=217.3MB, time=25.58
memory used=5749.0MB, alloc=217.3MB, time=26.40
>> Time taken
1.105000
">> Sums of squares multipliers", [x+483/50-178/2424133*x^2*(x-247/50)*(x-507/
100)*(x-8)*(x-299/20)*(x-319/20)-178/2424133*(x+1)^2*(-x+247/50)*(x-507/100)*(x
-8)*(x-299/20)*(x-319/20), 178/2424133*x^2, 178/2424133*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 29 Test 1 - Weifeng

>> Test
Batch: 29 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+483/50
>> basis
[(x-247/50)*(x-507/100)*(x-8)*(x-299/20)*(x-319/20), (-x+247/50)*(x-507/100)*(x-8)*(x-299/20)*(x-319/20)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.824559
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 29 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 29 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+483/50
>> basis
[(x-247/50)*(x-507/100)*(x-8)*(x-299/20)*(x-319/20), (-x+247/50)*(x-507/100)*(x-8)*(x-299/20)*(x-319/20), -x^2+114921/400]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.495526
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20009
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [483/50*(1/
62500000000000000000000000000000000000000*3172518125115615917425920429796372801\
7722681622884573684497783690745103889033814237^(1/2)-11752325487782342524695627\
30688548273675832484881625747226960038537581108446113876121041/2451722007089347\
9809867513081466369012096088358165198543379887236207816285445331642353600000000\
0000000000000000000000000000000000*x*317251812511561591742592042979637280177226\
81622884573684497783690745103889033814237^(1/2)+1891577466786123432033412084900\
94522427533511403850976826348831993465067679557211643123019/3807021750138739100\
9111045157556473621267217947461488421397340428894124666840577084400000000000000\
0000000000000000000000000000000000*x^2*3172518125115615917425920429796372801772\
2681622884573684497783690745103889033814237^(1/2)-19596227888963084845165340124\
65200009802131882415146683033090783927484763388681212094473/1269007250046246366\
9703681719185491207089072649153829473799113476298041555613525694800000000000000\
0000000000000000000000000000000000*x^3*3172518125115615917425920429796372801772\
2681622884573684497783690745103889033814237^(1/2))^2+483/50*(1/3064652508861684\
9762334391351832961265120110447706498179224859045259770356806664552942000000000\
000000000000000000000000000000000000*x*1553516342740538843123532223051973618157\
0921235081568673814339214556005652249911386568744831197038687639438552762174048\
6380403461909554422618307456069360026300538220319230172470124952832311497294205\
603029551632778592039700287495565179997248606724769712844078763^(1/2)-101926258\
4457065311467094128235136404280410905057815086490121470676477810612669058869679\
7758589419167147177006848961299772816332181312337571593464510023106829412920212\
502610113/298275137806183457879718186825978934686161687713566118537235312919475\
3085231982986221199007589831428026772202130337417338503746468663444914271503156\
5317125049703338301292193114263990943803807480487475781673913493489671622455199\
1485145594717324911557848660631224960000000000000000000000000000000000000000000\
0*x^2*1553516342740538843123532223051973618157092123508156867381433921455600565\
2249911386568744831197038687639438552762174048638040346190955442261830745606936\
0026300538220319230172470124952832311497294205603029551632778592039700287495565\
179997248606724769712844078763^(1/2)+134092726148709964148265297266560585290499\
9435564911033364028317986728782093127447842169560965847716029931981533822348840\
2547152199408649358916742194075439627512814496225899707/12428130741924310744988\
2577844157889452567369880652549390514713716448045217999291092549958649576309501\
1155084220973923891043227695276435380946459648554880210404305762553841379760999\
6226584919783536448242364130622287363176022999645214399779888537981577027526301\
0400000000000000000000000000000000000000000000000*x^3*1553516342740538843123532\
2230519736181570921235081568673814339214556005652249911386568744831197038687639\
4385527621740486380403461909554422618307456069360026300538220319230172470124952\
832311497294205603029551632778592039700287495565179997248606724769712844078763^
(1/2))^2+483/50*(1/146903779408723547547071951023753154145408117133596262549291\
3662480738953873381579140189369407001377828400929403244436814871653517280846065\
7806636904941097832536916402373605466997000000000000000000000000000000000000000\
000000000*x^2*76770839689747700022109428693060655165420544872190527637209319419\
8932789152657863674604849478450399323178955316991184604137956196851911158030444\
1039043957753260776931582892769437153865756523370713953752837394256453036730150\
2597812087294493450779863656895787300913606204240784620183861152494611594745320\
9487196993443348065017495519036326237208555317720376689595246474890069404194746\
3723066150967838649775964841838694452969665034401612348417962322917^(1/2)-55401\
6787611462783974175513078494191289787629602181540971801779020072197093154735497\
8432070561389245987630862004046381914112163586656034889866599345468501779978898\
7429217701441589156307629179957313098477924293698437935673840102360447187539573\
275281083947195867309131323/102361119586330266696145904924080873553894059829587\
3701829457592265243718870210484899473132637933865764238607089321579472183941595\
8025482107072588052058610337681035908777190359249538487675364494285271670449859\
0086040489735336797082783059324601039818209194383067884808272321046160245148203\
3261487929937612649595991257797420023327358715101649611407090293835586126995299\
8534258722596618297421534623784866367953122451592603959553379202149797890616430\
556000000000000000000000000000000000000000000000000*x^3*76770839689747700022109\
4286930606551654205448721905276372093194198932789152657863674604849478450399323\
1789553169911846041379561968519111580304441039043957753260776931582892769437153\
8657565233707139537528373942564530367301502597812087294493450779863656895787300\
9136062042407846201838611524946115947453209487196993443348065017495519036326237\
2085553177203766895952464748900694041947463723066150967838649775964841838694452\
969665034401612348417962322917^(1/2))^2+323595004903114728233932256875164482262\
5083305168570693226885221172862366714712983506659897353849177555811386963409274\
2104566583732838596941920742731857806552297719764619315237639246104393740860907\
5973120434891431553923469414055742704726254076948451887343777432226849784283037\
5416532493665240482643805997200689339272923864746559522998023123500244861839484\
143/238899510565917194984795406904745269663733648130423599389570092232114146571\
1113774704427174206076050276937550992368289601155824442451781277777298147371040\
5217533079182525226005820478825714510327725786823896534230295654420960184380437\
0910814196913211427475582547538021193600000000000000000000000000000000000000000\
0000000000000000000000000000000000000000000000000000000*x^6, 254403412391581972\
568884069425293932541300138366959842426294271312050826985786667/125000000000000\
00000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 29 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 30 Test 1 - Weifeng
>> input polynomial
x+39/50
>> basis
[(x-261/50)*(x-246/25)*(x-223/20), (-x+261/50)*(x-246/25)*(x-223/20)]
>> Time taken
0.473000
">> Sums of squares multipliers", [x+39/50-515/779784*x^2*(x-261/50)*(x-246/25)
*(x-223/20)-515/779784*(x+1)^2*(-x+261/50)*(x-246/25)*(x-223/20), 515/779784*x^
2, 515/779784*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 30 Test 1 - Weifeng

>> Test
Batch: 30 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+39/50
>> basis
[(x-261/50)*(x-246/25)*(x-223/20), (-x+261/50)*(x-246/25)*(x-223/20)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -100.861687
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 30 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 30 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+39/50
>> basis
[(x-261/50)*(x-246/25)*(x-223/20), (-x+261/50)*(x-246/25)*(x-223/20), -x^2+69169/400]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 5.999990
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9477
time= 0.116000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [(1/
1000000000000000000000000000000000000000000*11078008626004890083299736941609338\
706622068301813746484476159656569388163176964859195^(1/2)-117599307564144221582\
576683263648757907941827332127237701139785005961591054617172391/886240690080391\
2066639789553287470965297654641450997187580927725255510530541571887356000000000\
00000000000000000000000000000000*x*11078008626004890083299736941609338706622068\
301813746484476159656569388163176964859195^(1/2)+380988728451991236389767787279\
496370844405149532778679980438781095562896783406195080831637/443120345040195603\
3319894776643735482648827320725498593790463862627755265270785943678000000000000\
0000000000000000000000000000000000000*x^2*1107800862600489008329973694160933870\
6622068301813746484476159656569388163176964859195^(1/2))^2+(1/44312034504019560\
3331989477664373548264882732072549859379046386262775526527078594367800000000000\
0000000000000000000000000000000000*x*477361509598814614721993153393924467423210\
1136848410464482196406171566885457747203126236826123199982902106148267114023117\
9722899138825253650650464131099998284341790696141209256567072268684912310800672\
16121180388025061371051123169183356739850431721880007054677^(1/2)-6152098979724\
5869578285857979034712093949932466825894937615251949854594538629094781411863620\
6950136406069489991287357951426817621405146558219608307059580111269649503242659\
33/3818892076790516917775945227151395739385680909478728371585757124937253508366\
1977625009894608985599863216849186136912184943778319311060202920520371304879998\
6274734325569129674052536578149479298486405377289694431042004909684089853534668\
5391880345377504005643741600000000000000000000000000000000000000000000*x^2*4773\
6150959881461472199315339392446742321011368484104644821964061715668854577472031\
2623682612319998290210614826711402311797228991388252536506504641310999982843417\
9069614120925656707226868491231080067216121180388025061371051123169183356739850\
431721880007054677^(1/2))^2+332017832638268606815463911084939938584178385848486\
4752278182508941039095240518129616016742369246970933179932506826287634147615858\
7981637634102322626924587257752076554147288257348374355996588957136802820670052\
480754747985421407731209084471225898070424623741789528408147/172363653329621047\
5676284047335523617965517836589373945534329939777125119636247633504949164848337\
4569725085401538408843695643045968267926652601393291733166057679988375330163544\
0000000000000000000000000000000000000000000000000000000000000000000000000000000\
000000000000000000*x^4, 2495141996821764697456645576704435718993722732129619014\
9126117287958859125949489/25000000000000000000000000000000000000000000000000000\
000000000000000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 30 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 31 Test 1 - Weifeng
>> input polynomial
x+129/50
>> basis
[(x-201/50)*(x-909/100)*(x-23/2)*(x-332/25)*(x-87/4), -(x-201/50)*(x-909/100)*(x-23/2)*(x-332/25)*(x-87/4)]
memory used=5958.4MB, alloc=217.6MB, time=27.37
>> Time taken
0.931000
">> Sums of squares multipliers", [x+129/50-77/9048737*x^2*(x-201/50)*(x-909/
100)*(x-23/2)*(x-332/25)*(x-87/4)+77/9048737*(x+1)^2*(x-201/50)*(x-909/100)*(x-\
23/2)*(x-332/25)*(x-87/4), 77/9048737*x^2, 77/9048737*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 31 Test 1 - Weifeng

>> Test
Batch: 31 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+129/50
>> basis
[(x-201/50)*(x-909/100)*(x-23/2)*(x-332/25)*(x-87/4), -(x-201/50)*(x-909/100)*(x-23/2)*(x-332/25)*(x-87/4)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.974773
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 31 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 31 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+129/50
>> basis
[(x-201/50)*(x-909/100)*(x-23/2)*(x-332/25)*(x-87/4), -(x-201/50)*(x-909/100)*(x-23/2)*(x-332/25)*(x-87/4), -x^2+9025/16]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.558149
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19612
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [129/50*(1/
10000000000000000000000000000000000000000000*4193422729866295397452083720092527\
49709130917574805416186132382073619703745073415584527^(1/2)-7545251102056132272\
072794073361968277566576670320818067882799479848664900504600803043089/540951532\
1527521062713187998919360471247788836714989868801107728749694178311447061040398\
30000000000000000000000000000000000000000000*x*41934227298662953974520837200925\
2749709130917574805416186132382073619703745073415584527^(1/2)+14676098098671666\
042344878281881168477883738878286887029671462858848033593321398391891/125802681\
8959888619235625116027758249127392752724416248558397146220859111235220246753581\
0000000000000000000000000000000000000000000*x^2*4193422729866295397452083720092\
52749709130917574805416186132382073619703745073415584527^(1/2)-3671128099704874\
0265999667815494785617150820421282516407333386751389752727587075537/13418952735\
5721452718466679042960879906921893623937733179562362263558305198423492987048640\
0000000000000000000000000000000000000000*x^3*4193422729866295397452083720092527\
49709130917574805416186132382073619703745073415584527^(1/2))^2+129/50*(1/540951\
5321527521062713187998919360471247788836714989868801107728749694178311447061040\
39830000000000000000000000000000000000000000000*x*40629996304693059636576255847\
9797499343636089517486014700480676483380239010795782290822285647779093664872431\
4460316475096571067317253608480871979481508667323013649696064167153895358708986\
2089479344591672726727356833335499053650833889745767284758707788697623130466^(1
/2)-181236860256448075574327792453027764961893820764980095423434875140245260652\
0370669314045712550197953002698871620888817162549258246441027653755145297979601\
910129031592750259933/975119911312633431277830140351513998424726614841966435281\
1536235601125736259098774979734855546698247956938354704759540231770561561408660\
3540927507556208015752327592705540011693488609015669014750427020014544145656400\
0051977287620013353898414834208986928742955131184000000000000000000000000000000\
0000000000000*x^2*4062999630469305963657625584797974993436360895174860147004806\
7648338023901079578229082228564777909366487243144603164750965710673172536084808\
7197948150866732301364969606416715389535870898620894793445916727267273568333354\
99053650833889745767284758707788697623130466^(1/2)+3230120823649461465522495086\
0800739417955975068813139645297875217035843968175235847019240431246858099013307\
591165448098137279346767768828470821705240948746694244463202802649/650079940875\
0889541852200935676759989498177432279776235207690823734083824172732516653156570\
3644654986379589031365063601545137077076057735693951671704138677168218395137026\
6744623257393437793431669513466763627637709333367984858413342235932276556139324\
6191619700874560000000000000000000000000000000000000000000*x^3*4062999630469305\
9636576255847979749934363608951748601470048067648338023901079578229082228564777\
9093664872431446031647509657106731725360848087197948150866732301364969606416715\
3895358708986208947934459167272672735683333549905365083388974576728475870778869\
7623130466^(1/2))^2+129/50*(1/7751185400950697110512950533591804290617943008730\
5859238162458056124838088453235027981076101313904030028064652986808336137505340\
0167738840183631461667104566372807490638762542064000000000000000000000000000000\
0000000000000*x^2*2712923786921549369691144208993275703104081972811443519220425\
2294851313882369557584966838234717080263805117110655733815657477297252250015966\
3686180952919992493671226512720915926308976765398258128049609463645194274507851\
0881126094995528575441905683004591897024805177412069893606845055087308178090922\
4366357568002721582330969948565261249747935520761849289630299800718135954646814\
123709109653701878100640249888394111428078317139584079251502^(1/2)-724752469333\
2701256683737016607656858889729015482622249650599985639851396620609657653391006\
4122198670284734230377866191132825383325401900206915525389215524756544701321592\
5970973705495231742711550483392381933479454999847539226683636582914242146580219\
14221176389/1302203417722343697451749220316772337489959346949492889225804110152\
8630663537387640784082352664198526626456213114752231515589102681080007663856936\
6857401596396962188726106039644628308847391163901463812542549693251763768522294\
0525597853716212114727842204110571906485157793548931285626441907925483642769585\
1632641306359518865575311325399879009049965687659022543904344705258230470779380\
3726337769014883073199464291734854775922270003580407209600000000000000000000000\
00000000000000000000*x^3*271292378692154936969114420899327570310408197281144351\
9220425229485131388236955758496683823471708026380511711065573381565747729725225\
0015966368618095291999249367122651272091592630897676539825812804960946364519427\
4507851088112609499552857544190568300459189702480517741206989360684505508730817\
8090922436635756800272158233096994856526124974793552076184928963029980071813595\
4646814123709109653701878100640249888394111428078317139584079251502^(1/2))^2+12\
9840330949194579336421545202610523152880287137920697715133586226528753781726521\
6367976038249615415962228663172774598474854439831153444215504389255163300148588\
0982804286572004191047224094933348833565287809490810388161938325109911853661481\
3088767827008669902115843947638736035492040523702176432085176085057636895107452\
311240195707603849191954001/336001101860529889819888078902920534640353100661741\
7573785124965762219703250188542693391276675580588845365491649423652973430405654\
8001727724504438200512035590037542600298559871908743031032830026597479288968153\
6766630825655514619770841368120206227366930706402762800000000000000000000000000\
0000000000000000000000000000000000000000000000000000000000000000*x^6, 463583000\
9306441808172641248565462937792861145380155740216908107174254107163683041/50000\
00000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 31 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 32 Test 1 - Weifeng
>> input polynomial
x+563/50
>> basis
[(x-76/25)*(x-951/100)*(x-651/50)*(x-307/20)*(x-2429/100), -(x-76/25)*(x-951/100)*(x-651/50)*(x-307/20)*(x-2429/100)]
memory used=6111.3MB, alloc=217.6MB, time=28.15
memory used=6348.3MB, alloc=249.6MB, time=29.12
>> Time taken
1.181000
">> Sums of squares multipliers", [x+563/50-137/12025493*x^2*(x-76/25)*(x-951/
100)*(x-651/50)*(x-307/20)*(x-2429/100)+137/12025493*(x+1)^2*(x-76/25)*(x-951/
100)*(x-651/50)*(x-307/20)*(x-2429/100), 137/12025493*x^2, 137/12025493*(x+1)^2
]
>> Degree size
7
>> Succeeds Weifeng Batch: 32 Test 1 - Weifeng

>> Test
Batch: 32 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+563/50
>> basis
[(x-76/25)*(x-951/100)*(x-651/50)*(x-307/20)*(x-2429/100), -(x-76/25)*(x-951/100)*(x-651/50)*(x-307/20)*(x-2429/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.070813
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 32 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 32 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+563/50
>> basis
[(x-76/25)*(x-951/100)*(x-651/50)*(x-307/20)*(x-2429/100), -(x-76/25)*(x-951/100)*(x-651/50)*(x-307/20)*(x-2429/100), -x^2+6911641/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.269985
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20230
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [563/50*(1/
125000000000000000000000000000000000000000000*224072559540998807695429034554416\
55612623080807418746543540773923998839072717472875437465^(1/2)-4661716806336709\
6744111014021313160953760739637603729705520422444945362936459690852902063/12615\
2851021582328732526546454136521099067944945767543040134557192113463979399372288\
712927950000000000000000000000000000000000000000000*x*2240725595409988076954290\
3455441655612623080807418746543540773923998839072717472875437465^(1/2)+15942598\
9644588775029022144222125018493686696769554181695440781805973626832847722349435\
7/67221767862299642308628710366324966837869242422256239630622321771996517218152\
418626312395000000000000000000000000000000000000000000000*x^2*22407255954099880\
769542903455441655612623080807418746543540773923998839072717472875437465^(1/2)-\
4483981686229573852682322368016390439309735511284080196950285032564575712190110\
634587/112036279770499403847714517277208278063115404037093732717703869619994195\
36358736437718732500000000000000000000000000000000000000000000*x^3*224072559540\
99880769542903455441655612623080807418746543540773923998839072717472875437465^(
1/2))^2+563/50*(1/2367468504171695035880414855122628712625841766815570891053191\
85663866267401339488661817928119500000000000000000000000000000000000000000000*x
*137277141086355154255862364558658775732785686361180669042529483122203594669421\
6764293799259972146582912414530651070874219205460382671283983140559413191914774\
7738999387527922143958016399007462582660548352445181042310689803301455699015114\
80581780132912861615470135968791996298^(1/2)-3442543823662409814833497622333169\
4063664296544492339151478102733626046923889288377380692535003385751450573284219\
74876729858327331205845071774397639317620587753937969515103369141/1097241802644\
0465260237666794208960760169371023540195571782995986677019112120737902881166376\
3315446236338639217225913569918731291687758044833614873168092655177309941818606\
8377403393850719957044795248092113735607289486751596031094947922142560925505880\
6176322585456233683807000000000000000000000000000000000000000000000*x^2*1372771\
4108635515425586236455865877573278568636118066904252948312220359466942167642937\
9925997214658291241453065107087421920546038267128398314055941319191477477389993\
8752792214395801639900746258266054835244518104231068980330145569901511480581780\
132912861615470135968791996298^(1/2)+255308188958933825501978130063751593789367\
3168330256400542330237983493222153239104931624360979038167251440326539118753723\
1091936318365421283658097191469351134970910410194872117843/40638585283112834297\
1765436822554102228495223094081317473444295802852559708175477884487643567834986\
0605134785823181984071064121914361409067911661969188616858418886734022475471864\
4216693331742399824003411619837307018027836890040553626746020775018736319171565\
13131938401410000000000000000000000000000000000000000000000000*x^3*137277141086\
3551542558623645586587757327856863611806690425294831222035946694216764293799259\
9721465829124145306510708742192054603826712839831405594131919147747738999387527\
9221439580163990074625826605483524451810423106898033014556990151148058178013291\
2861615470135968791996298^(1/2))^2+563/50*(1/6523287783977606286100864213687949\
6288231739006426927714525763781989032840459063254366665937432579227993820500584\
9118091778553890497120844094858085012293914715392755201599179862660950000000000\
000000000000000000000000000000000000*x^2*31086217906418855445421907627898405199\
8302573449607814665366190630172690295541625810567073368359084421276579464398376\
2437699925002144834580623323801270254857842367131584257520304256735991403956783\
6300189518519449554981758037479343732710036208058200437956485810423715278633828\
3576092644095660500485160270899727629242672024481652815670964961212545252756853\
7147540782988169646183915957885631927191288219380790572554988359843030536108034\
1621134931606332273^(1/2)-63891516454778861838869425853177087744116457923453282\
9808511682070807080982067389310399962245879339744733079617494559955116124460686\
4282204353154033162639624633241294303218798375929168035373486946185585268827324\
0412833980590314615781108694991187381975810281592110742727/10362072635472951815\
1406358759661350666100857816535938221788730210057563431847208603522357789453028\
1404255264881327920812566641667381611526874441267090084952614122377194752506768\
0855786638013189278766729839506483184993919345826447910903345402686066812652161\
9368079050928779427858697548031886833495053423633242543080890674827217605223654\
9870708484175856179049180260996056548727971985961877309063762739793596857518329\
4532810101787026780540378310535444091000000000000000000000000000000000000000000\
00000*x^3*310862179064188554454219076278984051998302573449607814665366190630172\
6902955416258105670733683590844212765794643983762437699925002144834580623323801\
2702548578423671315842575203042567359914039567836300189518519449554981758037479\
3437327100362080582004379564858104237152786338283576092644095660500485160270899\
7276292426720244816528156709649612125452527568537147540782988169646183915957885\
6319271912882193807905725549883598430305361080341621134931606332273^(1/2))^2+71\
2986999584363229477560636215299734047022120017232107004085391622799483554961929\
7097346567225870002671015571842216160237511034979840931699360776957940374638857\
1292931292160293888010101414379360236402162673896807382951292116127846780361358\
6285661901748269762504703686294649725000242688687204076140372206819137742460404\
0828477460626447667826477703940671162577523393/16083298623104836779682861908502\
0064283299453546337801247075849027462134716910202243874539390244121001657951842\
4719454402285078541052741762148508831749455780089266891519489028835998327911207\
7700305156428511359083171691733688522864888931697288617599040337869555825888854\
9022500000000000000000000000000000000000000000000000000000000000000000000000000\
000000000000000000000000*x^6, 4257468565545939408208283398510476922401783538104\
863433029368426017099980979300923/125000000000000000000000000000000000000000000\
0000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 32 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 33 Test 1 - Weifeng
>> input polynomial
x+73/50
>> basis
[(x-197/50)*(x-609/100)*(x-25/4)*(x-987/100)*(x-1087/100), -(x-197/50)*(x-609/100)*(x-25/4)*(x-987/100)*(x-1087/100)]
memory used=6556.8MB, alloc=233.6MB, time=30.09
>> Time taken
1.110000
">> Sums of squares multipliers", [x+73/50-106/2459089*x^2*(x-197/50)*(x-609/
100)*(x-25/4)*(x-987/100)*(x-1087/100)+106/2459089*(x+1)^2*(x-197/50)*(x-609/
100)*(x-25/4)*(x-987/100)*(x-1087/100), 106/2459089*x^2, 106/2459089*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 33 Test 1 - Weifeng

>> Test
Batch: 33 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+73/50
>> basis
[(x-197/50)*(x-609/100)*(x-25/4)*(x-987/100)*(x-1087/100), -(x-197/50)*(x-609/100)*(x-25/4)*(x-987/100)*(x-1087/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -11.174597
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 33 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 33 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+73/50
>> basis
[(x-197/50)*(x-609/100)*(x-25/4)*(x-987/100)*(x-1087/100), -(x-197/50)*(x-609/100)*(x-25/4)*(x-987/100)*(x-1087/100), -x^2+1408969/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 3.698646
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19780
time= 0.111000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [73/50*(1/
1000000000000000000000000000000000000000000*83132443870326657953751466387861795\
57717036456317774187131150552655139417782157036998^(1/2)-2782163441054133060758\
298518043284800415881642195943123771056546001203920760417480952179/758583550316\
7307538279821307892388846416795766389968945757174879297814718726218296260675000\
000000000000000000000000000000000000000*x*8313244387032665795375146638786179557\
717036456317774187131150552655139417782157036998^(1/2)+608815322773856377077044\
99248067215359935313053446030306982551558492534996621754300113/8313244387032665\
7953751466387861795577170364563177741871311505526551394177821570369980000000000\
0000000000000000000000000000000000*x^2*8313244387032665795375146638786179557717\
036456317774187131150552655139417782157036998^(1/2)-839018966730025647523358020\
9522729850526435687503298134468287269734812956663134480119/20783110967581664488\
4378665969654488942925911407944354678278763816378485444553925924950000000000000\
0000000000000000000000000000000*x^3*8313244387032665795375146638786179557717036\
456317774187131150552655139417782157036998^(1/2))^2+73/50*(1/151716710063346150\
7655964261578477769283359153277993789151434975859562943745243659252135000000000\
0000000000000000000000000000000000*x*236301070420225139809097075782416456457616\
7910415131891001145336784942735647662050302739886850645473713265001949014532176\
6397459485442394695271381071303852615891199349722197681805541728850679679855566\
3155510825599089257241506858742013848081251345521532470795753^(1/2)-16983692084\
6599736358327324623099106784251413493893425658316594944635540915446668826426906\
4105149214830060635149480630491029908390113796802864002737476064892570148921643\
11903/1181505352101125699045485378912082282288083955207565945500572668392471367\
8238310251513699434253227368566325009745072660883198729742721197347635690535651\
9263079455996748610988409027708644253398399277831577755412799544628620753429371\
00692404062567276076623539787650000000000000000000000000000000000000000000*x^2*
2363010704202251398090970757824164564576167910415131891001145336784942735647662\
0503027398868506454737132650019490145321766397459485442394695271381071303852615\
8911993497221976818055417288506796798555663155510825599089257241506858742013848\
081251345521532470795753^(1/2)+117161118328255292220627316448490426682559639938\
9849468152618552800996702538869039589312205258534083407389597872682985648938399\
419365336594048555115041515460869277268568126121717/141780642252135083885458245\
4694498738745700746249079134600687202070965641388597230181643932110387284227959\
0011694087193059838475691265436817162828642782311569534719609833318609083325037\
3104078079133397893306495359453554344904115245208308848750807312919482477451800\
0000000000000000000000000000000000000000000000*x^3*2363010704202251398090970757\
8241645645761679104151318910011453367849427356476620503027398868506454737132650\
0194901453217663974594854423946952713810713038526158911993497221976818055417288\
506796798555663155510825599089257241506858742013848081251345521532470795753^(1/
2))^2+73/50*(1/1705479060296726671767645978302149017486703844643289008312483315\
4477060061341315491537704331491333094019336741197537269613144288759551299288357\
0232633364742610007073221324071241000000000000000000000000000000000000000000000\
0*x^2*7045094878677049673970477887967939296887480047575427775804467058311213431\
0507110022931818449164946880842534305087928391842254612888170668655196746289791\
2204293862871665247935502051076543325261797951061879955584014268845212040817313\
2466586627009938852708931640121488722828187036500146576702713701201663113954868\
4030930937150659346303197598396776346829649386478817904912854895696793250610541\
67792219644733261021939274252848180601950972925496317^(1/2)-3521848797577832756\
2279427414521358648706520751544559216548834306185795970442233100178419125179956\
8237846255675100402205760907721240379928937097015715021036471948042554015912574\
5013821749273045697649316686930469633834134824664041663899853281248306351300221\
250444951/704509487867704967397047788796793929688748004757542777580446705831121\
3431050711002293181844916494688084253430508792839184225461288817066865519674628\
9791220429386287166524793550205107654332526179795106187995558401426884521204081\
7313246658662700993885270893164012148872282818703650014657670271370120166311395\
4868403093093715065934630319759839677634682964938647881790491285489569679325061\
0541677922196447332610219392742528481806019509729254963170000000000000000000000\
000000000000000000000000*x^3*70450948786770496739704778879679392968874800475754\
2777580446705831121343105071100229318184491649468808425343050879283918422546128\
8817066865519674628979122042938628716652479355020510765433252617979510618799555\
8401426884521204081731324665866270099388527089316401214887228281870365001465767\
0271370120166311395486840309309371506593463031975983967763468296493864788179049\
1285489569679325061054167792219644733261021939274252848180601950972925496317^(1
/2))^2+949376365505830220622467347284420442166835937718327878832003333840805277\
9784853999608099861183450399286789967746456577584265903499849522426891430153354\
2447982995440667691860904867664083316574130805397017884355346914481969909683680\
7805187549410510957387337758623157602640203789341494766135140880692968133079117\
82293285946145996333743909363352864280319523283187/7435547628132334918659944307\
5316326174090715339935827374353321626358638803289668988461215911840508174137574\
5889447131171708401259924203212734819385298577920487704577004949240391030400859\
3954476511730932045610061421691665902970159462125015545077985679338381534572798\
6600000000000000000000000000000000000000000000000000000000000000000000000000000\
000000000000000000000*x^6, 9337182800597102231136992026549852460519492088645372\
2265697795657728430019281753/50000000000000000000000000000000000000000000000000\
000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 33 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 34 Test 1 - Weifeng
>> input polynomial
x+233/25
>> basis
[(x-169/50)*(x-34/5)*(x-269/20)*(x-293/20)*(x-313/20), (-x+169/50)*(x-34/5)*(x-269/20)*(x-293/20)*(x-313/20)]
memory used=6756.0MB, alloc=233.6MB, time=31.05
>> Time taken
0.838000
">> Sums of squares multipliers", [x+233/25-297/6186214*x^2*(x-169/50)*(x-34/5)
*(x-269/20)*(x-293/20)*(x-313/20)-297/6186214*(x+1)^2*(-x+169/50)*(x-34/5)*(x-\
269/20)*(x-293/20)*(x-313/20), 297/6186214*x^2, 297/6186214*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 34 Test 1 - Weifeng

>> Test
Batch: 34 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+233/25
>> basis
[(x-169/50)*(x-34/5)*(x-269/20)*(x-293/20)*(x-313/20), (-x+169/50)*(x-34/5)*(x-269/20)*(x-293/20)*(x-313/20)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.265104
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 34 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 34 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+233/25
>> basis
[(x-169/50)*(x-34/5)*(x-269/20)*(x-293/20)*(x-313/20), (-x+169/50)*(x-34/5)*(x-269/20)*(x-293/20)*(x-313/20), -x^2+110889/400]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.362662
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19791
time= 0.115000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [233/25*(1/
5000000000000000000000000000000000000000000*39491757268398556929876806902289420\
628166861021117305725836946905482722769925189457745^(1/2)-311481025131846094022\
377799084053291315330022334281721099075977260556858164130823528881/294450542193\
1796404691614722634699202036121157734506314918402761272791809725622125969467200\
0000000000000000000000000000000000000000*x*394917572683985569298768069022894206\
28166861021117305725836946905482722769925189457745^(1/2)+6023336454484288104186\
61060318543665633933382548645630836791869230857807121826572017/7898351453679711\
3859753613804578841256333722042234611451673893810965445539850378915490000000000\
0000000000000000000000000000000000*x^2*3949175726839855692987680690228942062816\
6861021117305725836946905482722769925189457745^(1/2)-29512964050451270516603916\
245325522869603979771915450661655452504789352648119463829/263278381789323712865\
8453793485961375211124068074487048389129793698848184661679297183000000000000000\
000000000000000000000000000000*x^3*39491757268398556929876806902289420628166861\
021117305725836946905482722769925189457745^(1/2))^2+233/25*(1/34303488165505428\
1146573115186942457037208114876069985687993921688280245833034977675442928800000\
00000000000000000000000000000000000000*x*39679398473238050142230287439290693263\
7420764846619624216578065874090156728019628751947660330005352774278124727029433\
0751109257306980630503086619862377914300651938537460753388348570541122193511184\
1673895135878879591323224914749417790030984261406567493821436002968423^(1/2)-61\
2306002942457679227780748399722595066728395070917241992252770530748925806073209\
7583477273350190013539812702920598967913898806906876557527549943997649861833022\
5196683954207/17029784752462682464476518214287851186155397632902129794702921282\
1497921342497694743325176107298434667072156535205765268287950957381142940046636\
0455956186395129587355133370552939300661425834124971745660735445445476022456004\
9248677163103426721633719954429800859643100000000000000000000000000000000000000\
000000*x^2*39679398473238050142230287439290693263742076484661962421657806587409\
0156728019628751947660330005352774278124727029433075110925730698063050308661986\
2377914300651938537460753388348570541122193511184167389513587887959132322491474\
9417790030984261406567493821436002968423^(1/2)+10700086959164777982091959494107\
8092136131337942724160648971889598898210136911021928106122162413301759725059407\
329475089828445257837662798378777552267825660611788859874248365921/851489237623\
1341232238259107143925593077698816451064897351460641074896067124884737166258805\
3649217333536078267602882634143975478690571470023318022797809319756479367756668\
5276469650330712917062485872830367722722738011228002462433858155171336081685997\
721490042982155000000000000000000000000000000000000000000000000*x^3*39679398473\
2380501422302874392906932637420764846619624216578065874090156728019628751947660\
3300053527742781247270294330751109257306980630503086619862377914300651938537460\
7533883485705411221935111841673895135878879591323224914749417790030984261406567\
493821436002968423^(1/2))^2+233/25*(1/55522374795419404474807535513639795036508\
1878035770340238846986860797074125068279946867599636849899130800988522801100262\
4653503133534054124245578668246290456550812141759355062580000000000000000000000\
000000000000000000000000*x^2*12718025553968128945864330251790821226654922044737\
4590618512519121887291386293182586089789160394267756233660401350520719374988146\
1695819525689913237900682408249217912176888839157600578945428624392947959935003\
0947246396978531076426160297742715819784512795790907408203632503872707903631912\
7642851736428696770884647480815776016093546805327659000733007462768014484825834\
78248730897641144311401988173036143588645758318217635698378914878010010945333^(
1/2)-36641091435584973614340704391732949899635457024071488187736085324583837340\
8226750356824095905609003929407788255273371773652479424445767418957894063995989\
0974673614910132611300128749236807552573789589920355960341467827546488505021580\
206983698498877576856419693389991/317950638849203223646608256294770530666373051\
1184364765462812978047182284657329564652244729009856693905841510033763017984374\
7036542395488142247830947517060206230447804422220978940014473635715609823698998\
3750773681159924463276910654007443567895494612819894772685205090812596817697590\
7978191071293410717419272116187020394400402338670133191475018325186569200362120\
6458695621827244102860778504970432590358971614395795544089245947287195025027363\
3325000000000000000000000000000000000000000000000*x^3*1271802555396812894586433\
0251790821226654922044737459061851251912188729138629318258608978916039426775623\
3660401350520719374988146169581952568991323790068240824921791217688883915760057\
8945428624392947959935003094724639697853107642616029774271581978451279579090740\
8203632503872707903631912764285173642869677088464748081577601609354680532765900\
0733007462768014484825834782487308976411443114019881730361435886457583182176356\
98378914878010010945333^(1/2))^2+1396437555773378842126470246580847205863878473\
0276626391766445761986837515401375291666100743519998854959556079224155576472949\
9352510161196305622686443518492538111634474660541277625390140150966133815358175\
1101632359792148858931821135281480856894902455587368499720960814193286226966466\
3094824475433264005804217782287860548786765402474135421852507323668148850317/28\
6326584571301648544783766859314403406380176303825286424326988653105305910555422\
2536870672601266322899428925216773826173273240381789068952477102695387248724451\
7479741278908530202409998795568412372737848506433227912506562259054865624713013\
1767611659459746022541335481250000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000000000000*x^6, 19228038621052629797413091\
99518838860979547224161288804892536354175706821037699473/2500000000000000000000\
000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 34 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 35 Test 1 - Weifeng
>> input polynomial
x+671/50
>> basis
[(x-279/50)*(x-541/50)*(x-1021/50), (-x+279/50)*(x-541/50)*(x-1021/50)]
>> Time taken
0.486000
">> Sums of squares multipliers", [x+671/50-1316/732005*x^2*(x-279/50)*(x-541/
50)*(x-1021/50)-1316/732005*(x+1)^2*(-x+279/50)*(x-541/50)*(x-1021/50), 1316/
732005*x^2, 1316/732005*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 35 Test 1 - Weifeng

>> Test
Batch: 35 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+671/50
>> basis
[(x-279/50)*(x-541/50)*(x-1021/50), (-x+279/50)*(x-541/50)*(x-1021/50)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -10.043281
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 35 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 35 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+671/50
>> basis
[(x-279/50)*(x-541/50)*(x-1021/50), (-x+279/50)*(x-541/50)*(x-1021/50), -x^2+1256641/2500]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 1.415798
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9924
time= 0.114000secs
>> Time taken
0.007000
">> Sums of squares multipliers", [671/50*(1/
5000000000000000000000000000000000000000000*43802095237044740203361795782476023\
085477830870283114597268713046895495690696349819463^(1/2)-630610114984823645331\
6392378297398004338848915032895603212159674785089058751848322221951/73478014760\
1425516911394124251035287258890612848999247369182661361671940211431268221491825\
000000000000000000000000000000000000000000*x*4380209523704474020336179578247602\
3085477830870283114597268713046895495690696349819463^(1/2)+66822181626623081289\
91939873834403654610989055379674828265265595663732472005813236539308037/2190104\
7618522370101680897891238011542738915435141557298634356523447747845348174909731\
500000000000000000000000000000000000000000000000000*x^2*43802095237044740203361\
795782476023085477830870283114597268713046895495690696349819463^(1/2))^2+671/50
*(1/146956029520285103382278824850207057451778122569799849473836532272334388042\
2862536442983650000000000000000000000000000000000000000000000*x*297485326879506\
6172373955027337755439639896686648371064064707188502606033449919159749261987378\
1237106371139526913503902118482590464417004297563494401869767838857611419886589\
0341250676281209588723668378806937754064524911901123253804843803205773342456984\
63105961742808373^(1/2)-1900595387810371471859728324928353242336795758100522430\
2374271562200488249211122959964717189121448380275067516075334732135036093750065\
9275789562284082774716790255246479050127879813/74371331719876654309348875683443\
8859909974171662092766016176797125651508362479789937315496844530927659278488172\
8375975529620647616104251074390873600467441959714402854971647258531266907030239\
7180917094701734438516131227975280813451210950801443335614246157764904357020932\
50000000000000000000000000000000000000000000000*x^2*297485326879506617237395502\
7337755439639896686648371064064707188502606033449919159749261987378123710637113\
9526913503902118482590464417004297563494401869767838857611419886589034125067628\
1209588723668378806937754064524911901123253804843803205773342456984631059617428\
08373^(1/2))^2+4458481965644326580692265656396462230814523248172139452811194559\
6439887193983099375087157552829580573450910694916823287613407074048559375942005\
5188096392430331459923974545904797727992147004328547733817416219204645024215686\
930294633106602104365752223402616195423492468026287388786717/848947194391041342\
0608571030175173839556551869355346491018501931355496265438209860080812827897631\
3682298344502984344325544346901993713439366490649406662675519544665525284561616\
4581963750000000000000000000000000000000000000000000000000000000000000000000000\
0000000000000000000000000000000*x^4, 132911631420938759515906518244365131425788\
72796943957872607771739444394161595185479/5000000000000000000000000000000000000\
000000000000000000000000000000000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 35 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 36 Test 1 - Weifeng
>> input polynomial
x+529/100
>> basis
[(x-951/100)*(x-219/20)*(x-657/25)*(x-732/25)*(x-757/25), (-x+951/100)*(x-219/20)*(x-657/25)*(x-732/25)*(x-757/25)]
memory used=6967.1MB, alloc=234.1MB, time=32.02
>> Time taken
0.994000
">> Sums of squares multipliers", [x+529/100-10/17673023*x^2*(x-951/100)*(x-219
/20)*(x-657/25)*(x-732/25)*(x-757/25)-10/17673023*(x+1)^2*(-x+951/100)*(x-219/
20)*(x-657/25)*(x-732/25)*(x-757/25), 10/17673023*x^2, 10/17673023*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 36 Test 1 - Weifeng

>> Test
Batch: 36 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+529/100
>> basis
[(x-951/100)*(x-219/20)*(x-657/25)*(x-732/25)*(x-757/25), (-x+951/100)*(x-219/20)*(x-657/25)*(x-732/25)*(x-757/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.385658
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 36 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 36 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+529/100
>> basis
[(x-951/100)*(x-219/20)*(x-657/25)*(x-732/25)*(x-757/25), (-x+951/100)*(x-219/20)*(x-657/25)*(x-732/25)*(x-757/25), -x^2+611524/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.600901
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 36 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 37 Test 1 - Weifeng
>> input polynomial
x+41/20
>> basis
[(x-31/20)*(x-13/4)*(x-579/100)*(x-1137/100)*(x-1237/100), (-x+31/20)*(x-13/4)*(x-579/100)*(x-1137/100)*(x-1237/100)]
memory used=7167.6MB, alloc=234.1MB, time=33.00
>> Time taken
0.895000
">> Sums of squares multipliers", [x+41/20-871/3506336*x^2*(x-31/20)*(x-13/4)*(
x-579/100)*(x-1137/100)*(x-1237/100)-871/3506336*(x+1)^2*(-x+31/20)*(x-13/4)*(x
-579/100)*(x-1137/100)*(x-1237/100), 871/3506336*x^2, 871/3506336*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 37 Test 1 - Weifeng

>> Test
Batch: 37 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+41/20
>> basis
[(x-31/20)*(x-13/4)*(x-579/100)*(x-1137/100)*(x-1237/100), (-x+31/20)*(x-13/4)*(x-579/100)*(x-1137/100)*(x-1237/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -7.409638
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 37 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 37 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+41/20
>> basis
[(x-31/20)*(x-13/4)*(x-579/100)*(x-1137/100)*(x-1237/100), (-x+31/20)*(x-13/4)*(x-579/100)*(x-1137/100)*(x-1237/100), -x^2+1787569/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.756101
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19675
time= 0.111000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [41/20*(7/
25000000000000000000000000000000000000000000*3028672600856298534103676241032415\
5860837803115561760055831374424524350066954808426790^(1/2)-93262715484837084090\
638907114225452812458813481007108685455585278546329324726174468571/155219470793\
8852998728134073529112987867937409672540202861357939256872940931433931872987500\
000000000000000000000000000000000000000*x*3028672600856298534103676241032415586\
0837803115561760055831374424524350066954808426790^(1/2)+27178095569186578468633\
591355709795249011482979980634846699713404654814599228175522519/302867260085629\
8534103676241032415586083780311556176005583137442452435006695480842679000000000\
000000000000000000000000000000000000*x^2*30286726008562985341036762410324155860\
837803115561760055831374424524350066954808426790^(1/2)-153655471907354625784162\
60618512827356204135756044526479787812794221538538537234408809/4240141641198817\
9477451467374453818205172924361786464078163924194334090093736731797506000000000\
000000000000000000000000000000000000*x^3*30286726008562985341036762410324155860\
837803115561760055831374424524350066954808426790^(1/2))^2+41/20*(1/620877883175\
5411994912536294116451951471749638690160811445431757027491763725735727491950000\
000000000000000000000000000000000000000*x*1229428340413868551097796361261090574\
9599907839579051794993005290454046935616946968369192713389494212945263952513638\
4852952581223496844936595113724291793136461857266084184221072806172367565662761\
92899999083954609014794911596266132845224609149701112859401750753^(1/2)-6518795\
0228394825500057043971365432150249467602260442810727806080839152104060298089932\
3939469194872870216664549602877130967923001006675367242587014795081761499431309\
1626071/24588566808277371021955927225221811499199815679158103589986010580908093\
8712338939367383854267789884258905279050272769705905162446993689873190227448583\
5862729237145321683684421456123447351313255238579999816790921802958982319253226\
56904492182994022257188035015060000000000000000000000000000000000000000000*x^2*
1229428340413868551097796361261090574959990783957905179499300529045404693561694\
6968369192713389494212945263952513638485295258122349684493659511372429179313646\
1857266084184221072806172367565662761928999990839546090147949115962661328452246\
09149701112859401750753^(1/2)+5034931284317676353311575402957319432805509511672\
3990627573769562159206767183974081069321644539945937780097500160842128926660160\
720676466817326185633790726161799823584391282161/430299919144853992884228726441\
3817012359967743852668128247551851658916427465931438929217449686322974530842383\
3797734698533403428223895727808289803502127597761650043129464477375482160328647\
9819666751499967938411315517821905869314649582861320239538950079061276355000000\
00000000000000000000000000000000000000000*x^3*122942834041386855109779636126109\
0574959990783957905179499300529045404693561694696836919271338949421294526395251\
3638485295258122349684493659511372429179313646185726608418422107280617236756566\
276192899999083954609014794911596266132845224609149701112859401750753^(1/2))^2+
41/20*(3/2029648797407602745018910996639319989015707999590951894753682960092781\
7934206419631710071277698316515439683758730448531341731976914510934115812730026\
324751174288967155059940035000000000000000000000000000000000000000000000*x^2*12\
5319138100503733907964243495245925089734765811577879986032383396971759420124440\
3366742535564474192616632627169993791233257636677649381618513741968367524051001\
6903413687959115480860285379923053850974737243143375055403854725264609096497256\
3416768162135489830101002341374680320130750153524179419732734028887728934088469\
6927600200146921124941325618047738337636325071879499525067640041788079943968526\
87018160874108058059401647864883582705527^(1/2)-3011905240362748249400146489581\
5275344682234907117117096916190647796695622034556743321779031594311598934619733\
9456445902109674547003529070615105456328534132237390005685736785160008539683065\
8787746317006209527262526408450882873734051064094753856253995014569294941/25063\
8276201007467815928486990491850179469531623155759972064766793943518840248880673\
3485071128948385233265254339987582466515273355298763237027483936735048102003380\
6827375918230961720570759846107701949474486286750110807709450529218192994512683\
3536324270979660202004682749360640261500307048358839465468057775457868176939385\
5200400293842249882651236095476675272650143758999050135280083576159887937053740\
3632174821611611880329572976716541105400000000000000000000000000000000000000000\
0000*x^3*1253191381005037339079642434952459250897347658115778799860323833969717\
5942012444033667425355644741926166326271699937912332576366776493816185137419683\
6752405100169034136879591154808602853799230538509747372431433750554038547252646\
0909649725634167681621354898301010023413746803201307501535241794197327340288877\
2893408846969276002001469211249413256180477383376363250718794995250676400417880\
7994396852687018160874108058059401647864883582705527^(1/2))^2+14592164109011018\
7815182153451567836224770455524466919722362584787253049099443041763804849836590\
2734023191096132229491538785367475919690228560891303351219395164843565743562533\
1676689240446133659775600529115689196609936813474707785523840459782442203738954\
8575033731209944829708041890641676216676342080900040860080286477641267213256452\
4594726013268280718549/10805243348307173452593340309088455754798689980904570446\
4244742354749312949847186779116819654694098315042515896577950553888400048628357\
1432182724251926447723901421600728773739951778560339290334999124175113266147625\
2132801422631940007770665725915276381488415751876350000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000*x^6, 20698\
685686623310089048587329733023019612781375157676279853540389856572893864841/200\
00000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 37 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 38 Test 1 - Weifeng
>> input polynomial
x+653/100
>> basis
[(x-137/100)*(x-457/100)*(x-159/20)*(x-274/25)*(x-299/25), (-x+137/100)*(x-457/100)*(x-159/20)*(x-274/25)*(x-299/25)]
memory used=7369.9MB, alloc=234.1MB, time=33.97
>> Time taken
1.021000
">> Sums of squares multipliers", [x+653/100-1359/2840977*x^2*(x-137/100)*(x-\
457/100)*(x-159/20)*(x-274/25)*(x-299/25)-1359/2840977*(x+1)^2*(-x+137/100)*(x-\
457/100)*(x-159/20)*(x-274/25)*(x-299/25), 1359/2840977*x^2, 1359/2840977*(x+1)
^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 38 Test 1 - Weifeng

>> Test
Batch: 38 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+653/100
>> basis
[(x-137/100)*(x-457/100)*(x-159/20)*(x-274/25)*(x-299/25), (-x+137/100)*(x-457/100)*(x-159/20)*(x-274/25)*(x-299/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.073491
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 38 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 38 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+653/100
>> basis
[(x-137/100)*(x-457/100)*(x-159/20)*(x-274/25)*(x-299/25), (-x+137/100)*(x-457/100)*(x-159/20)*(x-274/25)*(x-299/25), -x^2+104976/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.209802
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20020
time= 0.117000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [653/100*(1/
250000000000000000000000000000000000000000000*803128526738318594496315863188171\
48739923787363920079192639223432223218355279142794109890^(1/2)-2052704349599262\
64735024881606320780096353100823980111723469810727748753313242351225005019/1048\
8858559202440844121885173237519625434046629727962342558682580248352317199456048\
91075163400000000000000000000000000000000000000000000*x*80312852673831859449631\
586318817148739923787363920079192639223432223218355279142794109890^(1/2)+148299\
2339455060689883916902566687414538528780774986266545001920354321410774190831451\
7/80312852673831859449631586318817148739923787363920079192639223432223218355279\
1427941098900000000000000000000000000000000000000000000*x^2*8031285267383185944\
9631586318817148739923787363920079192639223432223218355279142794109890^(1/2)-18\
4387114227487205764370750482647743022727750888021848275685475202506231928667988\
49/7301168424893805404511962392619740794538526123992734472058111221111201668661\
7402540099900000000000000000000000000000000000000000000*x^3*8031285267383185944\
9631586318817148739923787363920079192639223432223218355279142794109890^(1/2))^2
+653/100*(1/6849224639159193871211591018124100315408432449212359409690819724902\
17406313124479993872081700200000000000000000000000000000000000000000000*x*24171\
5288992681678642501347272237391558472706695381613587365339706834698762067592686\
7355263718351159465691438595341187863385519482699477091980950804977236705644985\
6744946668513804625364479742612258686696267623815126197418701555390124408507494\
645957138292106069073913014667662^(1/2)-332051801528543445626870065622579043186\
6361274930153904277739557378843622580998299526634464335587725011172935722758030\
41949053849545330046107965693356398642252149720501895719737/1850806194430947003\
3882185855454624162210773866415131208833486960707097914400275090867957608869457\
5763069788560133322194746211292702869608880624104515868047905435350267585516951\
0308220863686264338337419316050828110734871263518789442910299195608419382717619\
147708569143542700000000000000000000000000000000000000000000*x^2*24171528899268\
1678642501347272237391558472706695381613587365339706834698762067592686735526371\
8351159465691438595341187863385519482699477091980950804977236705644985674494666\
8513804625364479742612258686696267623815126197418701555390124408507494645957138\
292106069073913014667662^(1/2)+168675718045751354474274145474192329496183278905\
2335790590811971676115245378725942856493833219599005144604382423485067650299530\
265839719811679973038546495233419033845630684756027/315478328596184148304809986\
1725220027649563727229851910596617095575073508136410526852492774239112086870507\
7595477270828649922379437989137877379108724295689983881025613792985843925708310\
1764704148580241928872300246147989419917975473223346453796889667508685081995778\
831285687500000000000000000000000000000000000000000000*x^3*24171528899268167864\
2501347272237391558472706695381613587365339706834698762067592686735526371835115\
9465691438595341187863385519482699477091980950804977236705644985674494666851380\
4625364479742612258686696267623815126197418701555390124408507494645957138292106\
069073913014667662^(1/2))^2+653/100*(1/6617043398899450520828959920994101106203\
9412025830268156132136153306386368145016285407451695058872153258433796698637415\
2330977697947747075544577999148757059321515560693296973522562062500000000000000\
0000000000000000000000000000*x^2*4449996985056442486653342790948989090119000607\
7413347656387564007440846636295363742012827105159084822330625064961417495211256\
9495054917377658596713097004799778879373001353700118265091086528476463552610370\
8415160393159233397568365787986482050097270155181018256745301321793448429817293\
6119935153209963866397610218332617501254002995338244355177113796488793386638408\
7511131333578607930107153614286434097296881809142709646467917922435766871709505\
63369458^(1/2)-7026537468733814648491988959189075059649259461305511434756507490\
3935974442107080743523732143721012016503556665898638341821231094552032474808051\
2983449766229035454844826224440660514892821795080260444815530199628905342613418\
590272131542612189009891548089313278582923631/556249623132055310831667848868623\
6362648750759676668457048445500930105829536920467751603388144885602791328133120\
1771869014071186881864672207324589137125599972359921625169212514783136385816059\
5579440762963551895049144904174696045723498310256262158769397627282093162665224\
1810537271617014991894151245483299701277291577187656750374417280544397139224561\
0991733298010938891416697325991263394201785804262162110226142838705808489740304\
470858963688204211822500000000000000000000000000000000000000000000*x^3*44499969\
8505644248665334279094898909011900060774133476563875640074408466362953637420128\
2710515908482233062506496141749521125694950549173776585967130970047997788793730\
0135370011826509108652847646355261037084151603931592333975683657879864820500972\
7015518101825674530132179344842981729361199351532099638663976102183326175012540\
0299533824435517711379648879338663840875111313335786079301071536142864340972968\
8180914270964646791792243576687170950563369458^(1/2))^2+14425279560095801672225\
1000681153051254529090418775641376818009511320443034233616257689328146991342238\
1222035075002407909765116127309830121046187995721331511943426491886411422034742\
4591910375853297976085331203449712563489286212637312183721785178789676354368914\
2920840804413737375846872594093335717502401131390719710250128140532928678942194\
50514203765413528507/7388364271756485570998684706868944547335760645792696644278\
2626575318938853001217366250317002886392903057482591014424313207781333269310848\
3182207735330134200928408091886222881085587844102360663192011400440448962512332\
3530238115550014295440557046251828143536007715643662890625000000000000000000000\
000000000000000000000000000000000000000000000000000000000000000000000*x^6, 4294\
254264777622787191611497506646605580058062539809281984361408391387505447039837/
1000000000000000000000000000000000000000000000000000000000000000000000000000000\
0000]
>> Degree size
6
>> Succeeds RealCertify Batch: 38 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 39 Test 1 - Weifeng
>> input polynomial
x+1201/100
>> basis
[(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10), -(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10)]
memory used=7561.3MB, alloc=234.1MB, time=34.94
memory used=7733.3MB, alloc=234.1MB, time=35.86
>> Time taken
1.414000
">> Sums of squares multipliers", [x+1201/100-2/845222041*x^2*(x-799/100)*(x-\
979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10)+2/845222041*
(x+1)^2*(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*
(x-397/10), 2/845222041*x^2, 2/845222041*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 39 Test 1 - Weifeng

>> Test
Batch: 39 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+1201/100
>> basis
[(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10), -(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 1.538467
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 39 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 39 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+1201/100
>> basis
[(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10), -(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10), -x^2+165649/100]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 1.341402
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 39 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 40 Test 1 - Weifeng
>> input polynomial
x+28/5
>> basis
[(x-21/10)*(x-109/50)*(x-1097/100)*(x-149/10)*(x-2041/100), -(x-21/10)*(x-109/50)*(x-1097/100)*(x-149/10)*(x-2041/100)]
memory used=7934.2MB, alloc=234.1MB, time=36.82
>> Time taken
0.874000
">> Sums of squares multipliers", [x+28/5-207/9051043*x^2*(x-21/10)*(x-109/50)*
(x-1097/100)*(x-149/10)*(x-2041/100)+207/9051043*(x+1)^2*(x-21/10)*(x-109/50)*(
x-1097/100)*(x-149/10)*(x-2041/100), 207/9051043*x^2, 207/9051043*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 40 Test 1 - Weifeng

>> Test
Batch: 40 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+28/5
>> basis
[(x-21/10)*(x-109/50)*(x-1097/100)*(x-149/10)*(x-2041/100), -(x-21/10)*(x-109/50)*(x-1097/100)*(x-149/10)*(x-2041/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.259102
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 40 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 40 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+28/5
>> basis
[(x-21/10)*(x-109/50)*(x-1097/100)*(x-149/10)*(x-2041/100), -(x-21/10)*(x-109/50)*(x-1097/100)*(x-149/10)*(x-2041/100), -x^2+5022081/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.318871
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19698
time= 0.118000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [28/5*(1/
25000000000000000000000000000000000000000000*9667283667803019856732450191869630\
23762928923854573839977813862766259741440864415201627^(1/2)-3128652316066061015\
2353267607567722410220336891417058637775751637746131574548834770767/67670985674\
6211389971271513430874116634050246698201687984469703936381819008605090641138900\
0000000000000000000000000000000000000000*x*966728366780301985673245019186963023\
762928923854573839977813862766259741440864415201627^(1/2)+817248939383755156753\
0033188851004401189144543569898144829270789982175902900426685219/18126156877130\
6622313733441097555566955549173222732594995840099268673701520162077850305062500\
00000000000000000000000000000000000000*x^2*966728366780301985673245019186963023\
762928923854573839977813862766259741440864415201627^(1/2)-691014156057603334009\
895997958384923515816786463770556490056507521381945390577043239/604205229237688\
7410457781369918518898518305774091086499861336642289123384005402595010168750000\
0000000000000000000000000000000000000*x^3*9667283667803019856732450191869630237\
62928923854573839977813862766259741440864415201627^(1/2))^2+28/5*(1/50753239255\
9658542478453635073155587475537685023651265988352277952286364256453817980854175\
000000000000000000000000000000000000000000*x*3092890743064763371261704522292695\
0439683022189982190545016163948657795264708183239272026198940516238324488946024\
3717788973090385703150223333076371199691480795989428239355280943225989323625566\
47262432717262608290202522097857074481168441099009720725837302624423713^(1/2)-\
3810724900305770939254424590808737203207154729972179418242672695488844165251912\
7978556349526731880519975840317968926453333663978290004777123607482050482009519\
8738788276903663/19330567144154771070385653264329344024801888868738869090635102\
4679111220404426145245450163743378226489528055912652323618108181491064468889583\
1727319998071754974933926495970505895162433272659790453902044828913018137657631\
1160671550730275686881075453648314140264820625000000000000000000000000000000000\
00000000*x^2*309289074306476337126170452229269504396830221899821905450161639486\
5779526470818323927202619894051623832448894602437177889730903857031502233330763\
7119969148079598942823935528094322598932362556647262432717262608290202522097857\
074481168441099009720725837302624423713^(1/2)+210139491296731162277236339730213\
7518265966112193253551239529714999702859117651600834080344791808450798387198066\
26493845580004376758977494974640114695285812726414440299576565917/4123854324086\
3511616822726963902600586244029586642920726688218598210393686277577652362701598\
5873549844326519280324957051964120514270866964444101828266255307727985904319140\
3745909679857648340886301657695635014438693669613047609930822458813201296096778\
3070165898284000000000000000000000000000000000000000000000000*x^3*3092890743064\
7633712617045222926950439683022189982190545016163948657795264708183239272026198\
9405162383244889460243717788973090385703150223333076371199691480795989428239355\
2809432259893236255664726243271726260829020252209785707448116844109900972072583\
7302624423713^(1/2))^2+28/5*(1/319933794160366410784372598185294581722847812838\
4781799733733453611202577316404011406985486307901374772347391810954354249153949\
4191454166497705568397420181099281314842196346419000000000000000000000000000000\
0000000000000000*x^2*1932854248525892278627336550079768740970705771432498809977\
3936728399036741113447859573265274360600875708932311493331786553945727730803610\
9517348633366318258755826799198830220965847516982271152529607705692822276596411\
9728478878959688723529935826210475862920286968013907904410859428182051843471528\
9773867943884887177474706213527607539790625560037276123920847527154099019821172\
378724683017168822082600836469739713490359499880894576187122770633^(1/2)-671214\
1480893758384160057296169386832310438402037385256506478418871347330212337601878\
5084118589617525953679559804207698529428643716455415295060831536057801566522220\
6513795758697258077934236327217375868604092870582600019592307807816987942395741\
57426651185315086981/4832135621314730696568341375199421852426764428581247024943\
4841820997591852783619648933163185901502189272330778733329466384864319327009027\
3793371583415795646889566997997075552414618792455677881324019264232055691491029\
9321197197399221808824839565526189657300717420034769761027148570455129608678822\
4434669859712217943686765533819018849476563900093190309802118817885247549552930\
9468117075429220552065020911743492837258987497022364404678069265825000000000000\
000000000000000000000000000000000*x^3*19328542485258922786273365500797687409707\
0577143249880997739367283990367411134478595732652743606008757089323114933317865\
5394572773080361095173486333663182587558267991988302209658475169822711525296077\
0569282227659641197284788789596887235299358262104758629202869680139079044108594\
2818205184347152897738679438848871774747062135276075397906255600372761239208475\
2715409901982117237872468301716882208260083646973971349035949988089457618712277\
0633^(1/2))^2+13615503645496808902897121917922638111259415336919500337899146059\
3646161403262882422505518084070272372407164278716705596376725286425817140298083\
2763180524276410791643526102754679195354101771465480801517009386428068655560579\
9776563729267097458181506929212544219830998286789690125516473899910151474074725\
1074566947732850231066507362014614298830308429281/36248516733253596670675149535\
4355597678117544095245468839178660896910229583422995553238742001686435883229070\
1874227274707613182605779658660818372936726396630440626072866003385997135547325\
5296098408279698279551827302308535236789139394776235792035764413313111870818420\
0000000000000000000000000000000000000000000000000000000000000000000000000000000\
00000000000000000*x^6, 47149244644490294398013817065176723816655333939784135982\
9499586526805192002359783/12500000000000000000000000000000000000000000000000000\
0000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 40 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 41 Test 1 - Weifeng
>> input polynomial
x+269/50
>> basis
[(x-101/50)*(x-121/50)*(x-237/50)*(x-543/50)*(x-1419/100), (-x+101/50)*(x-121/50)*(x-237/50)*(x-543/50)*(x-1419/100)]
>> Time taken
0.674000
">> Sums of squares multipliers", [x+269/50-319/2292821*x^2*(x-101/50)*(x-121/
50)*(x-237/50)*(x-543/50)*(x-1419/100)-319/2292821*(x+1)^2*(-x+101/50)*(x-121/
50)*(x-237/50)*(x-543/50)*(x-1419/100), 319/2292821*x^2, 319/2292821*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 41 Test 1 - Weifeng

>> Test
Batch: 41 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+269/50
>> basis
[(x-101/50)*(x-121/50)*(x-237/50)*(x-543/50)*(x-1419/100), (-x+101/50)*(x-121/50)*(x-237/50)*(x-543/50)*(x-1419/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.821787
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 41 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 41 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+269/50
>> basis
[(x-101/50)*(x-121/50)*(x-237/50)*(x-543/50)*(x-1419/100), (-x+101/50)*(x-121/50)*(x-237/50)*(x-543/50)*(x-1419/100), -x^2+2621161/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.266655
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20068
time= 0.116000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [269/50*(1/
250000000000000000000000000000000000000000000*818654150451016009627070543354551\
07750277365059598975265387262442609883559724228450461681^(1/2)-1118982737876138\
25447114175063713771316761835950553691763102993721896949511035082122099/6881811\
4522288533309275617550741949952576910003225388582466167490818933367393179541169\
3505906250000000000000000000000000000000000000*x*818654150451016009627070543354\
55107750277365059598975265387262442609883559724228450461681^(1/2)+2989616878577\
95332062293228635804403702318996576973818958749988091359500521909109442739/1169\
5059292157371566101007762207872535753909294228425037912466063229983365674889778\
637383000000000000000000000000000000000000000000000*x^2*81865415045101600962707\
054335455107750277365059598975265387262442609883559724228450461681^(1/2)-162042\
3970492979710904130666226675439078240799080151860441454917549848173383295105567\
37/1637308300902032019254141086709102155005547301191979505307745248852197671194\
48456900923362000000000000000000000000000000000000000000000*x^3*818654150451016\
00962707054335455107750277365059598975265387262442609883559724228450461681^(1/2
))^2+269/50*(1/2961931649039298473631222579383933525958910206538820724589343848\
804846892132602447451928849420500000000000000000000000000000000000000000000*x*
5620742752245372997025412768020055535764488910796805372643371959357496148979106\
9581151558466506693947307376562162772930049871615880015665247326440606550033111\
3802930973075821292061984577717696692480114962300271419840008502701857303106873\
837250818843383536129132132976259406613^(1/2)-167439314828515835293262456743234\
1015673787691201312539554016638075253809603957480316022570368848363711513974183\
7193930653360016038015233208143984897531967399389600821710691527899/29849934956\
1623632343357024323954091118666431800148984208357512445963682898518691349716189\
4132060220249993444618309767926174807003718304049247288401834839782866717636606\
8816850348485638752931316647908388863530080713755098390964275257932758218312206\
2338574683553973965087311000000000000000000000000000000000000000000000*x^2*5620\
7427522453729970254127680200555357644889107968053726433719593574961489791069581\
1515584665066939473073765621627729300498716158800156652473264406065500331113802\
9309730758212920619845777176966924801149623002714198400085027018573031068738372\
50818843383536129132132976259406613^(1/2)+7490764417318397247623997402701235066\
6167603757303290947022058894925742645032179618731557136773700821999147366019327\
76649460684437464593710223482433790072617541940802216894632037/3343192715090184\
6822455986724282858205290640361616686231336041393947932484634093431168213214279\
0744667999265797250694007731578384416450053515696301005502055681072375299970748\
7239030391540328307464565739552715369039940571019787998828888468920450967098192\
036455804508408977883200000000000000000000000000000000000000000000*x^3*56207427\
5224537299702541276802005553576448891079680537264337195935749614897910695811515\
5846650669394730737656216277293004987161588001566524732644060655003311138029309\
7307582129206198457771769669248011496230027141984000850270185730310687383725081\
8843383536129132132976259406613^(1/2))^2+269/50*(1/1897661194872089301409040595\
2953460454407697342532802026558815303851011709041652926460167291882052220670465\
6687008232409600553837945216583286359091046551693924206512014486859434316986000\
000000000000000000000000000000000000000000*x^2*19590623836084961589388292439883\
9450658953747089304692536422260982757806218832743043218562320640572129350231971\
6206587673468180799565979112040368144249835055646905959853406309902032972847113\
6763632579848355706637987514983044113860169485898741871849469655859755315178429\
7833056657295000907746297556947081734625725892682155976162995185631167841939528\
2297793615311611520025886019559719661290659727096583931902835602945081148213968\
3785629752409566797355133^(1/2)-25423758159383220345494253264650506806377740929\
5505277640044376396611341524560683676934003232918657506409375580077636850206084\
0793689884653194661096608041689676599214659802057415755389938239948788547442448\
0584904987954131710875134123658907307452291930497298840223231383/78362495344339\
8463575531697595357802635814988357218770145689043931031224875330972172874249282\
5622885174009278864826350693872723198263916448161472576999340222587623839413625\
2396081318913884547054530319393422826551950059932176455440677943594967487397878\
6234390212607137191332226629180003630985190227788326938502903570728623904651980\
7425246713677581129191174461246446080103544078238878645162638908386335727611342\
4117803245928558735142519009638267189420532000000000000000000000000000000000000\
000000000*x^3*19590623836084961589388292439883945065895374708930469253642226098\
2757806218832743043218562320640572129350231971620658767346818079956597911204036\
8144249835055646905959853406309902032972847113676363257984835570663798751498304\
4113860169485898741871849469655859755315178429783305665729500090774629755694708\
1734625725892682155976162995185631167841939528229779361531161152002588601955971\
96612906597270965839319028356029450811482139683785629752409566797355133^(1/2))^
2+15267694398219614103052495076467658634137350463473435889919417726790097551373\
9593877774336728182153744587220842293009290483972260008426111488134268571988067\
3761213100583524382317311367123294283989842465314031026309176881143516295611275\
4127492349284177648508892700523598506998792973904487018004288751350847993527291\
35035653836527190293269591540604415451/6607079961889346444047459644165738058496\
4185140879520434700071659994444903685618635054744920099627218526901895749539004\
4805034969735139940482264153223050383674992158067120983646948822223390947055689\
7189894262509857359079833294391917624934456339768162954731442447066895392000000\
0000000000000000000000000000000000000000000000000000000000000000000000000000000\
0000000*x^6, 289825403845998399850913207077889855346445965816991792333478767085\
82606765257549/2000000000000000000000000000000000000000000000000000000000000000\
00000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 41 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 42 Test 1 - Weifeng
>> input polynomial
x+44/5
>> basis
[(x-59/10)*(x-669/100)*(x-267/25)*(x-227/10)*(x-237/10), -(x-59/10)*(x-669/100)*(x-267/25)*(x-227/10)*(x-237/10)]
memory used=8132.6MB, alloc=234.1MB, time=37.78
memory used=8332.2MB, alloc=234.1MB, time=38.75
>> Time taken
1.223000
">> Sums of squares multipliers", [x+44/5-53/4314210*x^2*(x-59/10)*(x-669/100)*
(x-267/25)*(x-227/10)*(x-237/10)+53/4314210*(x+1)^2*(x-59/10)*(x-669/100)*(x-\
267/25)*(x-227/10)*(x-237/10), 53/4314210*x^2, 53/4314210*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 42 Test 1 - Weifeng

>> Test
Batch: 42 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+44/5
>> basis
[(x-59/10)*(x-669/100)*(x-267/25)*(x-227/10)*(x-237/10), -(x-59/10)*(x-669/100)*(x-267/25)*(x-227/10)*(x-237/10)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.349190
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 42 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 42 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+44/5
>> basis
[(x-59/10)*(x-669/100)*(x-267/25)*(x-227/10)*(x-237/10), -(x-59/10)*(x-669/100)*(x-267/25)*(x-227/10)*(x-237/10), -x^2+61009/100]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.659236
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19737
time= 0.119000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [44/5*(1/
1000000000000000000000000000000000000000000*60179537296770889630435564031354322\
27044056298597159783723292636491063933464105394682^(1/2)-1358411244749185863759\
9652533977228801080842920670748768448336891167414712635885349527/66197491026447\
9785934791204344897544974846192845687576209562190014017032681051593415020000000\
00000000000000000000000000000000000*x*60179537296770889630435564031354322270440\
56298597159783723292636491063933464105394682^(1/2)+2769646567124285301438583513\
954028269281496275743018085416535747519808133326971143146079/180538611890312668\
8913066920940629668113216889579147935116987790947319180039231618404600000000000\
00000000000000000000000000000000000*x^2*601795372967708896304355640313543222704\
4056298597159783723292636491063933464105394682^(1/2)-25231733444235896318752745\
7088415214179678428117545226074522018672662449090398530222891/75224421620963612\
0380444550391929028380507037324644972965411579561382991683013174335250000000000\
000000000000000000000000000000000000*x^3*60179537296770889630435564031354322270\
44056298597159783723292636491063933464105394682^(1/2))^2+44/5*(1/11032915171074\
6630989131867390816257495807698807614596034927031669002838780175265569170000000\
0000000000000000000000000000000000000*x*118468043446013925425013573263724119861\
5619907714677819429347748375759746500087902566990337346304138309535105837036314\
2326551084104167671921505024413998850281250090261224553731914724526040893502031\
0903495925198213256210068652828917161100408370548444303175077^(1/2)-36833821054\
3020407364651483209569096716477729773054343840079477560469847705385135666823284\
6459688852359126310759346134513211596289685469247167859336242756372522752937164\
67867/5331061955070626644125610796867585393770289584716050187432064867690918859\
2503955615514565180583686223929079762666634140469479878468754523646772609862994\
8262656254061755104917936162603671840207591399065731663391959652945308937730127\
2249518376674679993642878465000000000000000000000000000000000000000000000*x^2*
1184680434460139254250135732637241198615619907714677819429347748375759746500087\
9025669903373463041383095351058370363142326551084104167671921505024413998850281\
2500902612245537319147245260408935020310903495925198213256210068652828917161100\
408370548444303175077^(1/2)+345888280615094980445723158669318664616377905401467\
1258612430539869696551123306338051724723361722061002420775758530917244945703257\
643403107879062267688213865784969444606975703/222127581461276110171900449869482\
7247404287326965020911430027028204549524687664817313106882524320259330378323444\
4430891862283282695314384852821920776247844277343919239796038247340108486326675\
3163082944054859746649855393878724054219677063265694778333068453269375000000000\
0000000000000000000000000000000000000*x^3*1184680434460139254250135732637241198\
6156199077146778194293477483757597465000879025669903373463041383095351058370363\
1423265510841041676719215050244139988502812500902612245537319147245260408935020\
310903495925198213256210068652828917161100408370548444303175077^(1/2))^2+44/5*(
1/10630314943328779257834407381090679454118188518806454305894481048251993933001\
3679810200413270209798500257712316654208545317508610425124742103146511460160172\
568950977842705361900000000000000000000000000000000000000000000000*x^2*26747425\
1087211524295231515511622979401592680930009185109135597035623456321539615610441\
3123044990738002364657759224983289781801605172214839009647442751372556820607166\
8126438223908833623415960943921333280143666074098250157437288760206768981512507\
0610520034785480199328168932434242958364077009499966046708031219623547283126075\
3272433653825466863075241457459934135759586666099625864285413995276226487882999\
54428862110502584459802610111792678^(1/2)-2677637822534799333295178695247479055\
6723531834764050126489804133966308416990446654956067359933859201200788173070901\
3259950843175217912110451124354597240659580407081464498835142342633060034268980\
168313557631539477338944124593183780392497407872312476277058699515159/501514220\
7885216080535590915842930863779862767437672220796292444417939806028867792695774\
6057093576337544337332985468436683408780096979028231430889551588235440386384377\
7370716698290630439049267698524999002693738889342190451949164253876918403359507\
3947250652227753737403167483142055469326443928124363375775585367941511558613912\
3858131009227503682660777327373765045492249989367984955351512411429246647806241\
4554116457192345862129893959611271250000000000000000000000000000000000000000000\
000*x^3*26747425108721152429523151551162297940159268093000918510913559703562345\
6321539615610441312304499073800236465775922498328978180160517221483900964744275\
1372556820607166812643822390883362341596094392133328014366607409825015743728876\
0206768981512507061052003478548019932816893243424295836407700949996604670803121\
9623547283126075327243365382546686307524145745993413575958666609962586428541399\
527622648788299954428862110502584459802610111792678^(1/2))^2+113552762740674605\
4260623397787521449480269012958404014786635968619049903679768119749494591273378\
7304285306603060535546105165325703271142507158974193478935456033430289788206337\
9203954569733899077656194065538073177888155056471368706708191504134638075716449\
6945238564828451194567792884811685550430623295897902279376385843179706227207544\
587931925571152353/552864125493644590085271989189548189953774473355949777317568\
0350942231796402908356155017038520106628459699093603425944368818755761424065605\
0756328757896379284334039305053965672700072876101582407254801123410098010142110\
1573728156457141155325332726132840314011057582519531250000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000*x^6, 19246154\
602907282416672032976234762858744069183325885338730735728501848005307699/125000\
0000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 42 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 43 Test 1 - Weifeng
>> input polynomial
x+2313/100
>> basis
[(x-667/100)*(x-1473/100)*(x-1593/100)*(x-2043/100)*(x-152/5), (-x+667/100)*(x-1473/100)*(x-1593/100)*(x-2043/100)*(x-152/5)]
memory used=8531.4MB, alloc=234.1MB, time=39.72
>> Time taken
0.987000
">> Sums of squares multipliers", [x+2313/100-151/26534529*x^2*(x-667/100)*(x-\
1473/100)*(x-1593/100)*(x-2043/100)*(x-152/5)-151/26534529*(x+1)^2*(-x+667/100)
*(x-1473/100)*(x-1593/100)*(x-2043/100)*(x-152/5), 151/26534529*x^2, 151/
26534529*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 43 Test 1 - Weifeng

>> Test
Batch: 43 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+2313/100
>> basis
[(x-667/100)*(x-1473/100)*(x-1593/100)*(x-2043/100)*(x-152/5), (-x+667/100)*(x-1473/100)*(x-1593/100)*(x-2043/100)*(x-152/5)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.884358
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 43 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 43 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+2313/100
>> basis
[(x-667/100)*(x-1473/100)*(x-1593/100)*(x-2043/100)*(x-152/5), (-x+667/100)*(x-1473/100)*(x-1593/100)*(x-2043/100)*(x-152/5), -x^2+26244/25]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.288372
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19819
time= 0.124000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [2313/100*(1/
6250000000000000000000000000000000000000000*72191478617338772428143462752737670\
639171016194054192833779023853259686851288246561905^(1/2)-346481071159283200421\
4885478693456990778522456385331880686014262645584401859920005132691/33395778008\
3809161252591658694164464376805120913694696049061764345179311374059428595372530\
000000000000000000000000000000000000000000*x*7219147861733877242814346275273767\
0639171016194054192833779023853259686851288246561905^(1/2)+87064797830016255034\
553476584889763330187825363651377498966165185692285059112493013/169198778009387\
7478784612408267289155605570692048145144541695871560773910577068278794648437500\
00000000000000000000000000000000000*x^2*721914786173387724281434627527376706391\
71016194054192833779023853259686851288246561905^(1/2)-1309413285083268335930599\
86470601954465632565277051249074538586242366360421890757727/1804786965433469310\
7035865688184417659792754048513548208444755963314921712822061640476250000000000\
000000000000000000000000000000000*x^3*72191478617338772428143462752737670639171\
016194054192833779023853259686851288246561905^(1/2))^2+2313/100*(1/429135747407\
6947722095802814220013367241945803740976844230443671835554151156663657450537010\
50000000000000000000000000000000000000000000*x*35258104278722394804327994488104\
3937985093003993036809187856666524538393486294798928732637711848548660451195566\
3967714478611059553956029049704597814331268244602346431259886137272204382745804\
952421627886322060531282373920799227536242183684205618476097495568652393897807^
(1/2)-1748994706088400292554394654248832068431978977679678578402437959187424566\
3344130365241021605426492946939718949868713472195384546826521733038600051100819\
5341220326215184715193/12861662553035893046325873475719015247510688375232373876\
0161721738036865328171740854352859087493390805125679316535787249949333398125827\
9079415587724099441237087431820741689981981592065690347137313337020788689396138\
9982687740372821895125307170300861250591811718362954062500000000000000000000000\
00000000000000000*x^2*352581042787223948043279944881043937985093003993036809187\
8566665245383934862947989287326377118485486604511955663967714478611059553956029\
0497045978143312682446023464312598861372722043827458049524216278863220605312823\
73920799227536242183684205618476097495568652393897807^(1/2)+2440048506695428504\
1591333938728576603637663705271872386238574463784966355388684960775816002531054\
108442851559258519875281953467000112818846641130353833726215363580029405811191/
1071805212752991087193822789643251270625890697936031156334681014483640544401431\
1737862738257291115900427139943044648937495777783177152325661796564367495343642\
3952651728474165165132672140862261442778085065724116344916522397836440182459377\
55975250717708826509765302461718750000000000000000000000000000000000000000000*x
^3*3525810427872239480432799448810439379850930039930368091878566665245383934862\
9479892873263771184854866045119556639677144786110595539560290497045978143312682\
4460234643125988613727220438274580495242162788632206053128237392079922753624218\
3684205618476097495568652393897807^(1/2))^2+2313/100*(1/34661556005155345700260\
3293328889426172652313912952250422283986183858599675021041899148074425980402069\
0881163680436660777885514399292584461361938666165501962132176404185899600815312\
5000000000000000000000000000000000000000000*x^2*2511656315103946635462225411873\
6368990585816179607746177993270422507833371678990996604369830973219109865149860\
3597383556795441158443313578270301173115159424244229157213335148825852630907914\
0128473895990372701652105915604843436091529044310156872589191223183708542828218\
4211480814564827833821520995839756511312876577215482166293808817003558713830641\
4265544239465007792633267781859550137083770786265522241457108240796671853519529\
23953986657096783^(1/2)-1205625407259620829472489287647353547132986547949613436\
4430194101151073921511234859435381218657682839005013761119876339390298307704282\
9333906169526375614868896468928577871531583116466357985854380648085710035545205\
302347816389104334602192653874117934727857496606293/130815433078330553930324240\
2017519218259677926021236780103816167838949654774947447739810928696521828638809\
8885604030393583095893668922582201578186099747886679386935271527872334679824526\
4538548358015416165244877713849771085595629767137724487337114020376207484819938\
9697094347959091918116344870885199987318297545655063306362827802542552268683012\
0125742997095805469155866316030305184902973113061784662616742557720874826659037\
4754812260347172379078125000000000000000000000000000000000000000000*x^3*2511656\
3151039466354622254118736368990585816179607746177993270422507833371678990996604\
3698309732191098651498603597383556795441158443313578270301173115159424244229157\
2133351488258526309079140128473895990372701652105915604843436091529044310156872\
5891912231837085428282184211480814564827833821520995839756511312876577215482166\
2938088170035587138306414265544239465007792633267781859550137083770786265522241\
45710824079667185351952923953986657096783^(1/2))^2+1203097933214814346987397518\
9445070557311120639058386285234875641979287117637203278645334562585404594040336\
7997856572895494201887269091400115714557907457757560745144551736376334999727658\
0308100031180390329450998725550940794641372425839273909200611385058573979509174\
9500589379174742175039810022547829991397739749939014318615491650270215120083306\
0449141653/86381801461752565128951779814901497499527918353064459001713688657087\
4025299310301508680165990707264866321277950656119341112649209313792931387578946\
8399937971332760675397967706534033932924243648244934167321259433801801288980729\
3614248038939518704958668438171524516563415527343750000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000*x^6, 12931268559719332\
964664678090828751074877183580424857000765013254899606058090095137/100000000000\
000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 43 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 44 Test 1 - Weifeng
>> input polynomial
x+239/25
>> basis
[(x-337/50)*(x-757/100)*(x-1411/100)*(x-503/25)*(x-2793/100), -(x-337/50)*(x-757/100)*(x-1411/100)*(x-503/25)*(x-2793/100)]
memory used=8732.7MB, alloc=234.1MB, time=40.69
>> Time taken
1.042000
">> Sums of squares multipliers", [x+239/25-61/9070590*x^2*(x-337/50)*(x-757/
100)*(x-1411/100)*(x-503/25)*(x-2793/100)+61/9070590*(x+1)^2*(x-337/50)*(x-757/
100)*(x-1411/100)*(x-503/25)*(x-2793/100), 61/9070590*x^2, 61/9070590*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 44 Test 1 - Weifeng

>> Test
Batch: 44 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+239/25
>> basis
[(x-337/50)*(x-757/100)*(x-1411/100)*(x-503/25)*(x-2793/100), -(x-337/50)*(x-757/100)*(x-1411/100)*(x-503/25)*(x-2793/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.420642
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 44 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 44 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+239/25
>> basis
[(x-337/50)*(x-757/100)*(x-1411/100)*(x-503/25)*(x-2793/100), -(x-337/50)*(x-757/100)*(x-1411/100)*(x-503/25)*(x-2793/100), -x^2+8958049/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.672075
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20111
time= 0.123000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [239/25*(1/
50000000000000000000000000000000000000000000*9925795042184347984952294706403952\
969835193710011036205138057100276725146671513424174869^(1/2)-140607923931282874\
11075705757788592687470017415894350180496618353560498369002575952851429/4744530\
0301641183368071968696610895195812225933852753060559912939322746201089834167555\
87382000000000000000000000000000000000000000000*x*99257950421843479849522947064\
03952969835193710011036205138057100276725146671513424174869^(1/2)+3819664083329\
0703139519073718220530835080132049162547904673527638243070802042690583881333/19\
8515900843686959699045894128079059396703874200220724102761142005534502933430268\
483497380000000000000000000000000000000000000000000000*x^2*99257950421843479849\
52294706403952969835193710011036205138057100276725146671513424174869^(1/2)-1762\
9194860505674085839208988184719120838832275974436961169450144825312892268631860\
7639/49628975210921739924761473532019764849175968550055181025690285501383625733\
357567120874345000000000000000000000000000000000000000000000*x^3*99257950421843\
47984952294706403952969835193710011036205138057100276725146671513424174869^(1/2
))^2+239/25*(1/5669713386046121412484600259245001975899560999095403990736909596\
24906817103023518302292692149000000000000000000000000000000000000000000000*x*21\
2647208701043655638098060088687317619239624369011105478573732514333343764163934\
9369875323841105683213033165355342868431327026245960565373629801554704646616230\
3199824763919600887695756707139374221853810374896758905647213455755365500385184\
838992751713319590298988751728151933^(1/2)-158152613058930657613848732164581246\
0529607931903052879375807474592376829995058738280955356928513720764784197004568\
895657854161166555056136047746569314546397383066197341112507253/127105324985680\
6070759701494851687493241121484572690409316041437623032538937022922516363014848\
2400975571029081621894013337280491607654305879436948922323052099404183995674787\
5677750721797412668106526322835474577160225028173674568831442828361261164086750\
26652898379409281621000000000000000000000000000000000000000000000*x^2*212647208\
7010436556380980600886873176192396243690111054785737325143333437641639349369875\
3238411056832130331653553428684313270262459605653736298015547046466162303199824\
7639196008876957567071393742218538103748967589056472134557553655003851848389927\
51713319590298988751728151933^(1/2)+9231237765567289947047968904784622656774437\
3676753120672443005422552511460270523446967473319870508392602238395170786041453\
06304749706670903914368759546866439405641563603064379469/3791494069175131745163\
8822999837268974522089738674003686984190610914322894428240586425601295188980182\
8113083400653088466026832846251051737880931715012477406374272533961889970061472\
3235434184702041268152762735966427167033589724354347016186912619951451357382256\
618857882301718750000000000000000000000000000000000000000000*x^3*21264720870104\
3655638098060088687317619239624369011105478573732514333343764163934936987532384\
1105683213033165355342868431327026245960565373629801554704646616230319982476391\
9600887695756707139374221853810374896758905647213455755365500385184838992751713\
319590298988751728151933^(1/2))^2+239/25*(1/16073919757394883486284119906195584\
0492986282463623190920894753149995767524729031581744423975740203198209424980518\
5708330839952493816521150141627697005740126515767525119629540278769300000000000\
000000000000000000000000000000000000*x^2*12559751246930922739202383325045532149\
1701626125534689882595110530693282267967218289063077862054743695506904928881468\
1462126891995183122218606672233556939562605812334508652865661630370281455815443\
0304826534368553736339369189655535924059726241840026975277917107304616219407414\
9619845046526909758547595504797995843251057770787875276536743950940129801783507\
0638264343118611581336794519709920274582057701062166243906102425440105969861730\
82651874196387083163^(1/2)-5743650739375976679754629548983964796872610008025749\
0275020847631821594901784161942865957544459985020668751217194149411024863748290\
9246465950600852587159620836342196327331828530070724768177460604231807376580157\
6525951463184496883350576294965845244912923316155403169527/28544889197570278952\
7326893751034821572049150285306113369534342115212005154470950656961540595578962\
9443338748383669730595742936352688914133196982348993044460467755305701483785594\
6144779123995805523420060305383076673498566340126218009226650549636424943813447\
9711468550441077612772375105742976723971807965449990552843313115426989264856236\
2521366586404170615086964416178662684856351181158909714959222047868559645241141\
8760002408405948427875425953724337082500000000000000000000000000000000000000000\
0000*x^3*1255975124693092273920238332504553214917016261255346898825951105306932\
8226796721828906307786205474369550690492888146814621268919951831222186066722335\
5693956260581233450865286566163037028145581544303048265343685537363393691896555\
3592405972624184002697527791710730461621940741496198450465269097585475955047979\
9584325105777078787527653674395094012980178350706382643431186115813367945197099\
2027458205770106216624390610242544010596986173082651874196387083163^(1/2))^2+75\
9132311849406667485775230644714732433126180764391285794110327958030579306357745\
8004397463995488500812004271472757320120598538234909529862134357099829229786890\
7760572489183300091462396993710238805600931130077328720188691399607208696841582\
4357123194985937061120936145858506123811679217434038542951280062535474116098784\
574734035737336935928588126483098967/586826734721745906256750503267565527184752\
8989076274738446416993747671945896993597070219853360313539077437539625193171109\
9857108717068697923297664652558791286839325990806624877748756729190890687000486\
4038673898684511012672482789314340075950816368616673996269419154505357543230056\
7626953125000000000000000000000000000000000000000000000000000000000000000000000\
00000000*x^6, 17040307386300132371026140839739741646911692646485280754126517872\
076876122147559/156250000000000000000000000000000000000000000000000000000000000\
0000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 44 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 45 Test 1 - Weifeng
>> input polynomial
x+187/20
>> basis
[(x-41/20)*(x-182/25)*(x-237/20), (-x+41/20)*(x-182/25)*(x-237/20)]
>> Time taken
0.491000
">> Sums of squares multipliers", [x+187/20-4071/353495*x^2*(x-41/20)*(x-182/25
)*(x-237/20)-4071/353495*(x+1)^2*(-x+41/20)*(x-182/25)*(x-237/20), 4071/353495*
x^2, 4071/353495*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 45 Test 1 - Weifeng

>> Test
Batch: 45 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+187/20
>> basis
[(x-41/20)*(x-182/25)*(x-237/20), (-x+41/20)*(x-182/25)*(x-237/20)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -17.831079
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 45 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 45 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+187/20
>> basis
[(x-41/20)*(x-182/25)*(x-237/20), (-x+41/20)*(x-182/25)*(x-237/20), -x^2+76729/400]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 1.219255
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9560
time= 0.115000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [187/20*(1/
1000000000000000000000000000000000000000000*12831084881219836446136539112106179\
92832693122727538158407386550582061004690761296711^(1/2)-6645655721775305232199\
31152902119985408098279739073475734063162203064718089056388723/2399412872788109\
4154275328139638556465971361395004963562218128495884540787717236248495700000000\
000000000000000000000000000000000*x*1283108488121983644613653911210617992832693\
122727538158407386550582061004690761296711^(1/2)+641350753016049141319662345345\
6393746514537682360540950533381176419455397778807364156191/38493254643659509338\
4096173363185397849807936818261447522215965174618301407228389013300000000000000\
0000000000000000000000000000000000*x^2*1283108488121983644613653911210617992832\
693122727538158407386550582061004690761296711^(1/2))^2+187/20*(1/79980429092936\
9805142510937987951882199045379833498785407270949862818026257241208283190000000\
00000000000000000000000000000000000000*x*12115485665934961947451861487924202987\
5102522662464643806459403734092044907546488308589660118981118996949552889695244\
2496948948224938113752826546675118944182602528444123231031505883932212278839614\
92786287867442328119736039439010417037520692415145366152728192117^(1/2)-8652862\
4805542034158820526239673752368500080080272422828930065338218963556439599221257\
8016278088082404762853101725114985847775774232825450410107288369631569644111074\
16965907/1090393709934146575270667533913178268875922703962181794258134633606828\
4041679183947773069410708300709725459760072571982472540534024443023775438920076\
0704976434227559971090792835529553899105095565343507659080698095307762435495109\
375333768623173630829537455372905300000000000000000000000000000000000000000000*
x^2*121154856659349619474518614879242029875102522662464643806459403734092044907\
5464883085896601189811189969495528896952442496948948224938113752826546675118944\
1826025284441232310315058839322122788396149278628786744232811973603943901041703\
7520692415145366152728192117^(1/2))^2+11434052069515752053540730554465230806509\
8470266013615912930109090303882551786123434716806179180681582075397549418203149\
4500375696749078324445496573937322681785352458995046006964415841633746295603891\
27188029274739414981576525504734071518483476346787155056843197239084129187/4588\
9541594900696761052204448425664205934835818530319317284924291394364027651697583\
4981244356160600120877725817112396927644333476971003074062926070157422893499153\
4361572950263704200000000000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000*x^4, 62026338330922163203382128700056304395\
065659957449001071879061297665131785875987/200000000000000000000000000000000000\
00000000000000000000000000000000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 45 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 46 Test 1 - Weifeng
>> input polynomial
x+513/100
>> basis
[(x-637/100)*(x-331/50)*(x-258/25)*(x-349/25)*(x-374/25), -(x-637/100)*(x-331/50)*(x-258/25)*(x-349/25)*(x-374/25)]
memory used=8932.0MB, alloc=234.1MB, time=41.68
memory used=9125.5MB, alloc=234.1MB, time=42.67
>> Time taken
1.367000
">> Sums of squares multipliers", [x+513/100-380/19163219*x^2*(x-637/100)*(x-\
331/50)*(x-258/25)*(x-349/25)*(x-374/25)+380/19163219*(x+1)^2*(x-637/100)*(x-\
331/50)*(x-258/25)*(x-349/25)*(x-374/25), 380/19163219*x^2, 380/19163219*(x+1)^
2]
>> Degree size
7
>> Succeeds Weifeng Batch: 46 Test 1 - Weifeng

>> Test
Batch: 46 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+513/100
>> basis
[(x-637/100)*(x-331/50)*(x-258/25)*(x-349/25)*(x-374/25), -(x-637/100)*(x-331/50)*(x-258/25)*(x-349/25)*(x-374/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.754157
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 46 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 46 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+513/100
>> basis
[(x-637/100)*(x-331/50)*(x-258/25)*(x-349/25)*(x-374/25), -(x-637/100)*(x-331/50)*(x-258/25)*(x-349/25)*(x-374/25), -x^2+159201/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.239114
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19826
time= 0.113000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [513/100*(1/
6250000000000000000000000000000000000000000*30858823458901192292727678175588971\
65977682908891605940684691593602185456470334347295158^(1/2)-1904190537972533921\
4661901378740570598556144918155911832742872666577386467254725965201183/39576441\
0860407791154232472601928561536637833065348461892811696879480284792320380040604\
013500000000000000000000000000000000000000000*x*3085882345890119229272767817558\
897165977682908891605940684691593602185456470334347295158^(1/2)+103905491320924\
59471727890065103829819412312974089847735364071425759148489246044529233/2269031\
1366839111979946822187933067396894727271261808387387438188251363650517164318346\
75000000000000000000000000000000000000000000*x^2*308588234589011922927276781755\
8897165977682908891605940684691593602185456470334347295158^(1/2)-52567157334193\
960814153544584335849082163556098078630008270918990629677660931000033369/385735\
2932362649036590959771948621457472103636114507425855864492002731820587917934118\
94750000000000000000000000000000000000000000000*x^3*308588234589011922927276781\
7558897165977682908891605940684691593602185456470334347295158^(1/2))^2+513/100*
(1/4947055135755097389427905907524107019207972913316855773660146210993503559904\
004750507550168750000000000000000000000000000000000000000*x*6042443529335697167\
0143383417226604435428811987696011604778177137311016590459466885964093670761250\
0698146816234667892907445359934949431426612594055736328570830542118513700707992\
4313654272111193435255329460323179367054813689781920419060063816465227188964212\
702639847^(1/2)-322311691713943051156058267182678054655679060300439178662105232\
2271371623403374826927658680902004467723952886984224929069303992424158919660740\
7763755521037053837485526204127/13884291197922098269793975969031848445640811578\
0551497253626326142718328562636642660763082883183019461890352995098320980571084\
5438762480300120850311894137341062826559084790229762020600705907902903321537100\
2580834942681097632770956845266690754745466886406738746874648437500000000000000\
00000000000000000000000*x^2*604244352933569716701433834172266044354288119876960\
1160477817713731101659045946688596409367076125006981468162346678929074453599349\
4943142661259405573632857083054211851370070799243136542721111934352553294603231\
79367054813689781920419060063816465227188964212702639847^(1/2)+6016606300524610\
3286778817358805330099152277054811682446435408072840021868206887947402126390292\
9874711863645151549435514345521487172243534054931577986072762390374124377835972\
513/755305441166962145876792292715332555442860149846200145059727214216387707380\
7433360745511708845156258726835202933348661343066999186867892832657425696704107\
1353817764814212588499053920678401389917940691618254039742088185171122274005238\
2507977058153398620526587829980875000000000000000000000000000000000000000000000
*x^3*60424435293356971670143383417226604435428811987696011604778177137311016590\
4594668859640936707612500698146816234667892907445359934949431426612594055736328\
5708305421185137007079924313654272111193435255329460323179367054813689781920419\
060063816465227188964212702639847^(1/2))^2+513/100*(13/146856948484682780000006\
4396021199794322453956947634896742400111288005293581581261920194246271561810500\
1388118412713577275581187960225633584880818391779867368957863967495530819098750\
000000000000000000000000000000000000000000*x^2*65941083577424671123136549685641\
9653300583370562919691432451145628680529814747745709368079678034841249101716539\
2209904442949298046009964360379424154816529472837678066769709527896348103116191\
5072208150654451057994152598170321741761859885804986099850244176169014618100719\
0949469826288266436405427947071613939858577720233440095027578489056703227965955\
9968665614315154693887911919428474311384651496838202626405170911172888846329385\
41851047406182^(1/2)-2227498598202377738980607653138616135239637504249545549713\
3806469091114346274962553094543648516095123312126421137702834050866969219926703\
4063916757576624895817267372964819567209319438323087421672031832279371011705711\
829729448625313748543577364826829582062276634033/446476086722146210729570388496\
5341402556033238186435410740554631860857753954021194907179706153360904290792872\
4009754561332469205519859133690069017714903584972338445243753241595131523614849\
2133301409353389512371835408216778220126512592976804593384402694942811036476723\
6188720368615493470663161751724964052717792453314080583976749229352988094772686\
1603954506763592193239866070287796961483333577843175330282951678044399768230355\
21377116466812690625000000000000000000000000000000000000000000*x^3*659410835774\
2467112313654968564196533005833705629196914324511456286805298147477457093680796\
7803484124910171653922099044429492980460099643603794241548165294728376780667697\
0952789634810311619150722081506544510579941525981703217417618598858049860998502\
4417616901461810071909494698262882664364054279470716139398585777202334400950275\
7848905670322796595599686656143151546938879119194284743113846514968382026264051\
7091117288884632938541851047406182^(1/2))^2+43481270251913996090986588321597104\
9671842733319286357382863270830344520613278026437015147892482637732951052033514\
7444484266224141630455353717668347788321932222838860869452523959622195110677378\
6568571505136672548222067353331655785866434359462629682031449181959561609729810\
8180528526232815834844157337384036338030795508195696719423346883041139076557114\
9/74105139226608665419718943663953238323297860006612964551309739371460734095079\
7906223345133213656349123390122548187808641607711610467406821585692894905496757\
1895893517529562980787814712974269189562569003141455766011257433950619323086414\
2049614040226384698381651639078125000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000000000000*x^6, 24132403934802500486042534\
6178183337936610509997183448188469360117080357363085033/40000000000000000000000\
00000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 46 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 47 Test 1 - Weifeng
>> input polynomial
x+681/50
>> basis
[(x-97/25)*(x-199/20)*(x-316/25)*(x-369/25)*(x-168/5), -(x-97/25)*(x-199/20)*(x-316/25)*(x-369/25)*(x-168/5)]
memory used=9324.0MB, alloc=234.1MB, time=43.66
>> Time taken
1.088000
">> Sums of squares multipliers", [x+681/50-21/29882725*x^2*(x-97/25)*(x-199/20
)*(x-316/25)*(x-369/25)*(x-168/5)+21/29882725*(x+1)^2*(x-97/25)*(x-199/20)*(x-\
316/25)*(x-369/25)*(x-168/5), 21/29882725*x^2, 21/29882725*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 47 Test 1 - Weifeng

>> Test
Batch: 47 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+681/50
>> basis
[(x-97/25)*(x-199/20)*(x-316/25)*(x-369/25)*(x-168/5), -(x-97/25)*(x-199/20)*(x-316/25)*(x-369/25)*(x-168/5)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.284382
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 47 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 47 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+681/50
>> basis
[(x-97/25)*(x-199/20)*(x-316/25)*(x-369/25)*(x-168/5), -(x-97/25)*(x-199/20)*(x-316/25)*(x-369/25)*(x-168/5), -x^2+31684/25]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.279514
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19580
time= 0.122000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [681/50*(1/
625000000000000000000000000000000000000000*576712745631427776028270929415978460\
713165179131214089454303231655629925328107783578^(1/2)-305329184124199651210182\
59900287239659411405898939432286598117808723414887714341443989/3927413797750023\
1547525250293228133174566548698835679491838050075748397914844140061661800000000\
0000000000000000000000000000000000*x*576712745631427776028270929415978460713165\
179131214089454303231655629925328107783578^(1/2)+810454606893678647183867034586\
5171865354876985698424213746760250953591637642593762659/17301382368942833280848\
1278824793538213949553739364226836290969496688977598432335073400000000000000000\
0000000000000000000000000000*x^2*5767127456314277760282709294159784607131651791\
31214089454303231655629925328107783578^(1/2)-7205875731506562165616049924766783\
286896402640390684525123707783978851416524477811/961187909385712960047118215693\
2974345219419652186901490905053860927165422135129726300000000000000000000000000\
0000000000000000000*x^3*5767127456314277760282709294159784607131651791312140894\
54303231655629925328107783578^(1/2))^2+681/50*(1/222880733022313814032205795414\
0696557656651638658924811161809341798721581667404948499307150000000000000000000\
000000000000000000000000*x*1143943955676707669301847969670756506884925777041899\
2523558516533580258590641494729705156803420773195269784591506385659405284270553\
4747351794823461740550131777351793715089611980563246069216092499475585222158459\
760374611912250720278994530246195880018916608855260938^(1/2)-875119146194689545\
2657740062092251292722631065342498294591131601608805000504170409690460805157305\
790846170637923230143894306912091684904657103551934659115985299509635266757/302\
3640411480284588463034281068078872823592362225284367460400845880244561403038254\
5476185383491030472078725792527891610762865913357201943205680210151687259500621\
6194841646551490475540271055751099935467547555400247686198887006309107474529285\
099242340748745872936400000000000000000000000000000000000000000000*x^2*11439439\
5567670766930184796967075650688492577704189925235585165335802585906414947297051\
5680342077319526978459150638565940528427055347473517948234617405501317773517937\
1508961198056324606921609249947558522215845976037461191225072027899453024619588\
0018916608855260938^(1/2)+10200991592667445566037436175073550793530321995745901\
8272601751840319195554558676371354029287307915739170142835663617408792339654452\
81538197445022283208589492359760359271969/2099750285750197630877107139630610328\
3497169182120030329586116985279476120854432323247350960757660050054670689255480\
2852519902176091680161150557014942272635420983468640032327423941347410455382708\
2885191302468057275598603381988257690795342257633627366310735228725000000000000\
0000000000000000000000000000000000*x^3*1143943955676707669301847969670756506884\
9257770418992523558516533580258590641494729705156803420773195269784591506385659\
4052842705534747351794823461740550131777351793715089611980563246069216092499475\
585222158459760374611912250720278994530246195880018916608855260938^(1/2))^2+681
/50*(1/577410587575308182089816581708575424145018284956045786542504283218746977\
9069088046333569999907986830933253313972322643521415805058835842286405345502286\
3903813092302956648892735000000000000000000000000000000000000000000000*x^2*8399\
5182355642574474755723124863272976561177031765915525463100969535559440724978609\
1328616915494751533328411194511678283427741606835525589271133826663558397069888\
4942512874514713498578252473622143541215820962119541294872944914864857427208103\
2477747086419620297676291365240438040926879641311686551208651982180288277720233\
2355033149901970956921844131502318857203987041957538735535944799603852988407186\
43729346610704217451347003887213196003^(1/2)-1350795349815754124436977761232224\
1043930527834638101137948593363022455210803297434799521811785052034627276079508\
4180124490953064018051615769870472747344055860164268098661870673764313699698205\
775050279057647706141033349229127916397581576646926240367028876875453/279983941\
1854752482491857437495442432552039234392197184182103365651185314690832620304428\
7230516491717777613706483722609447591386894517519642371127555451946568996283141\
7095817157116619275082454071451373860698737318043162431497162161914240270108259\
1569547320676589209712174681268030895988043722885040288399406009609257341107850\
1104996732365230728137716743961906799568065251291184531493320128432946906214576\
4488702347391504490012957377320010000000000000000000000000000000000000000000000
*x^3*83995182355642574474755723124863272976561177031765915525463100969535559440\
7249786091328616915494751533328411194511678283427741606835525589271133826663558\
3970698884942512874514713498578252473622143541215820962119541294872944914864857\
4272081032477747086419620297676291365240438040926879641311686551208651982180288\
2777202332355033149901970956921844131502318857203987041957538735535944799603852\
98840718643729346610704217451347003887213196003^(1/2))^2+1200470517218392573307\
8835051650778901498915784397008639676264861137991052582773928679805828721217568\
6625132740427825677690291824733231390339280774543116253097596538779799686015310\
9011399759597454096196504395439636640939910906955474947931559828106888634643405\
7659465016499135639492734821926342743150207268168512282364703430364317513845006\
803521983/227294883839611545253365557341872510149658767534250756301498001753080\
5525386748000468610317643107554365530287853881448861120861612021933093012472195\
1114453191761199209417963682242197006054099791689745960905903982215686037984819\
4457413911874899191805801595639926531250000000000000000000000000000000000000000\
00000000000000000000000000000000000000000000000000000*x^6, 33802354782381804033\
9235417395484923986496127788427382530870636894572610065372201/50000000000000000\
000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 47 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 48 Test 1 - Weifeng
>> input polynomial
x+14/5
>> basis
[(x-5/2)*(x-149/50)*(x-387/50)*(x-441/25)*(x-466/25), (-x+5/2)*(x-149/50)*(x-387/50)*(x-441/25)*(x-466/25)]
memory used=9521.2MB, alloc=235.1MB, time=44.67
>> Time taken
0.901000
">> Sums of squares multipliers", [x+14/5-103/1491548*x^2*(x-5/2)*(x-149/50)*(x
-387/50)*(x-441/25)*(x-466/25)-103/1491548*(x+1)^2*(-x+5/2)*(x-149/50)*(x-387/
50)*(x-441/25)*(x-466/25), 103/1491548*x^2, 103/1491548*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 48 Test 1 - Weifeng

>> Test
Batch: 48 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+14/5
>> basis
[(x-5/2)*(x-149/50)*(x-387/50)*(x-441/25)*(x-466/25), (-x+5/2)*(x-149/50)*(x-387/50)*(x-441/25)*(x-466/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -4.247373
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 48 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 48 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+14/5
>> basis
[(x-5/2)*(x-149/50)*(x-387/50)*(x-441/25)*(x-466/25), (-x+5/2)*(x-149/50)*(x-387/50)*(x-441/25)*(x-466/25), -x^2+241081/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.866688
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20048
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [14/5*(1/
12500000000000000000000000000000000000000000*5678349066869922453661108258767614\
06069955151133073973378566973143830169924049068305655^(1/2)-3733187700949539370\
49874413649102486193967825988799936603165691221308492194609518561319/1656185144\
5037273823178232421405541010373691908047990890208203383361713289451431158914937\
500000000000000000000000000000000000000000*x*5678349066869922453661108258767614\
06069955151133073973378566973143830169924049068305655^(1/2)+5334903376678191507\
81234429777415093012877899260212118107574311045525572166813965385294839/2129380\
9000762209201229155970378552727623318167490274001696261492893631372151840061462\
0625000000000000000000000000000000000000000000000*x^2*5678349066869922453661108\
25876761406069955151133073973378566973143830169924049068305655^(1/2)-1067694825\
4547169445180226811970874376525348778087923729345773647782984206295997231687678\
7/14195872667174806134152770646919035151748878778326849334464174328595754248101\
22670764137500000000000000000000000000000000000000000000000*x^3*567834906686992\
245366110825876761406069955151133073973378566973143830169924049068305655^(1/2))
^2+14/5*(1/99371108670223642939069394528433246062242151448287945341249220300170\
2797367085869534896250000000000000000000000000000000000000000000*x*301385541285\
3892024210495159314710159231399034829255412867930665481955010301428884993861502\
8867051808042621850323384756686202222332176992802092450243308542127332699496807\
5048899640162749063542476640566387473279379449745983834833616330264527798742302\
995935580919957^(1/2)-169589378586624058317523095331329661644297672148412484209\
7143978022298983914712707382155355089270581115312794705830506388868827591363586\
95990243384754853194497872816847124706423/1506927706426946012105247579657355079\
6156995174146277064339653327409775051507144424969307514433525904021310925161692\
3783431011111660884964010462251216542710636663497484037524449820081374531771238\
3202831937366396897248729919174168081651322638993711514979677904599785000000000\
000000000000000000000000000000000000*x^2*30138554128538920242104951593147101592\
3139903482925541286793066548195501030142888499386150288670518080426218503233847\
5668620222233217699280209245024330854212733269949680750488996401627490635424766\
40566387473279379449745983834833616330264527798742302995935580919957^(1/2)+1285\
7220898671314494698290035843962077959938599705890517195156813901893215452762506\
7467454968386022703276926433521818677454631514381147276839585631763091003647412\
448666406570751/376731926606736503026311894914338769903924879353656926608491333\
1852443762876786106242326878608381476005327731290423094585775277791522124100261\
5562804135677659165874371009381112455020343632942809580070798434159922431218247\
9793542020412830659748427878744919476149946250000000000000000000000000000000000\
00000000000*x^3*301385541285389202421049515931471015923139903482925541286793066\
5481955010301428884993861502886705180804262185032338475668620222233217699280209\
2450243308542127332699496807504889964016274906354247664056638747327937944974598\
3834833616330264527798742302995935580919957^(1/2))^2+14/5*(1/746384930622454383\
7902985377166761834810787205769830562104242738738391800041197591114185214180044\
6377804711880597439838012947806510661062512397255972826723513763505528311786080\
07187500000000000000000000000000000000000000000000*x^2*482124008388876496706388\
6088208444978018157288571967102021336026706591580593281402241514730764680527183\
3597646482967109172799916138435342269058348716073855548852562313680887229920686\
6443548717713715503469072130034646764491353553639181074470010063283970917293783\
1787196797828936404076091573959321492054956812619227923045559667122611703474944\
3667636754140077663869866036617928923167636048464761456241808397693461323511554\
79707147111116154052679514255^(1/2)-2582786015937243432545171800445070088472189\
9391247564904172153055636658120325316824974412336315018710826949265556701638911\
4876798693009766623789165664107989862519924637882830424320771891729234177282059\
926655150836988965408148144423023608573154560033655819417307612788977/241062004\
1944382483531943044104222489009078644285983551010668013353295790296640701120757\
3653823402635916798823241483554586399958069217671134529174358036927774426281156\
8404436149603433221774358856857751734536065017323382245676776819590537235005031\
6419854586468915893598398914468202038045786979660746027478406309613961522779833\
5613058517374721833818377070038831934933018308964461583818024232380728120904198\
8467306617557773985357355555807702633975712750000000000000000000000000000000000\
00000000000000*x^3*482124008388876496706388608820844497801815728857196710202133\
6026706591580593281402241514730764680527183359764648296710917279991613843534226\
9058348716073855548852562313680887229920686644354871771371550346907213003464676\
4491353553639181074470010063283970917293783178719679782893640407609157395932149\
2054956812619227923045559667122611703474944366763675414007766386986603661792892\
316763604846476145624180839769346132351155479707147111116154052679514255^(1/2))
^2+4213946292740445875972972919842944498895875833444465333866166903502464522374\
1556807452474346661479084724639870513318074040496238254358538146673589630266479\
6117257454525600038750206867229984408606045324642006069403264401578480101203299\
2066166962150928770409435475152395692811684072807787786701448309556890025855138\
1636644378278523854044856849086224015027103/90836089929018844159471883544017888\
9849851712459009851575922175377733246634350413004010494069663299819406234106786\
6924271267285881198796746576763976132831493085689768411007220489253490559567312\
9083567574221076987013195955658427055727057176221094703374639538817135602183250\
0000000000000000000000000000000000000000000000000000000000000000000000000000000\
000000000000000*x^6, 1741302032551351501330076733517824044356712867062769787913\
1004988905958354259647/10000000000000000000000000000000000000000000000000000000\
000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 48 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 49 Test 1 - Weifeng
>> input polynomial
x+781/100
>> basis
[(x-189/100)*(x-433/50)*(x-951/100)*(x-454/25)*(x-1943/100), (-x+189/100)*(x-433/50)*(x-951/100)*(x-454/25)*(x-1943/100)]
memory used=9724.1MB, alloc=236.7MB, time=45.71
>> Time taken
1.097000
">> Sums of squares multipliers", [x+781/100-158/2625679*x^2*(x-189/100)*(x-433
/50)*(x-951/100)*(x-454/25)*(x-1943/100)-158/2625679*(x+1)^2*(-x+189/100)*(x-\
433/50)*(x-951/100)*(x-454/25)*(x-1943/100), 158/2625679*x^2, 158/2625679*(x+1)
^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 49 Test 1 - Weifeng

>> Test
Batch: 49 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+781/100
>> basis
[(x-189/100)*(x-433/50)*(x-951/100)*(x-454/25)*(x-1943/100), (-x+189/100)*(x-433/50)*(x-951/100)*(x-454/25)*(x-1943/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.097407
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 49 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 49 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+781/100
>> basis
[(x-189/100)*(x-433/50)*(x-951/100)*(x-454/25)*(x-1943/100), (-x+189/100)*(x-433/50)*(x-951/100)*(x-454/25)*(x-1943/100), -x^2+4592449/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.241999
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20091
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [781/100*(1/
50000000000000000000000000000000000000000000*3322685273712295318290917571786137\
364123934801264398711559799455236989394689701403880933^(1/2)-162537886692094122\
81155484399279294469752237032201567182113752002223252205402177417917479/2076013\
7590154421148681652988519786251046344638299963149825626996320709738021254371448\
069384000000000000000000000000000000000000000000*x*3322685273712295318290917571\
786137364123934801264398711559799455236989394689701403880933^(1/2)+171547856165\
4494371552098752368509654478199133116652873620568495473547391278433875263/35441\
9762529311500617697874323854652173219712134869195899711941891945535433568149747\
29952000000000000000000000000000000000000000000*x^2*332268527371229531829091757\
1786137364123934801264398711559799455236989394689701403880933^(1/2)-93292298711\
4006982582836703876698028189067855485680333003421021628941700961975089301/17720\
9881264655750308848937161927326086609856067434597949855970945972767716784074873\
6497600000000000000000000000000000000000000000000*x^3*3322685273712295318290917\
571786137364123934801264398711559799455236989394689701403880933^(1/2))^2+781/
100*(1/259501719876930264358520662356497328138079307978749539372820337454008871\
72526567964310086730000000000000000000000000000000000000000000*x*19994547957250\
0807312372597696582186730202632890346277447876848625682575006325121463095363316\
1836096549326474262442806969446551043060671597053159142179827829564096499213452\
8994168657684421030539342044338042776892957467784545441563581819086207890906001\
045909298954791^(1/2)-299992017170233133817476353965049552496736031937020792679\
5548250439949659281222627795428113815384986252337796676416094847681124652467065\
50561249942715959845977476636893472279521/1066375891053337638999320521048438329\
2277473754151801463886765260036404000337339811365086043529792514929741196066361\
6371703816055629902485176168487582924150910085146624717487968899507650245496209\
8242364695614767624398281842423550057697017931087514986722448495944255520000000\
00000000000000000000000000000000000000*x^2*199945479572500807312372597696582186\
7302026328903462774478768486256825750063251214630953633161836096549326474262442\
8069694465510430606715970531591421798278295640964992134528994168657684421030539\
342044338042776892957467784545441563581819086207890906001045909298954791^(1/2)+
3807661965118850214522736882058993052260773976396487528310701952974253662894131\
8164202200023098202693098482581510762355120407878405249342257248426765786002822\
621778218884556758419/799781918290003229249490390786328746920810531561385109791\
5073945027303000253004858523814532647344386197305897049771227877786204172242686\
3882126365687193113182563859968538115976674630737684122157368177352171107571829\
8711381817662543272763448315636240041836371958191640000000000000000000000000000\
000000000000000000000*x^3*19994547957250080731237259769658218673020263289034627\
7447876848625682575006325121463095363316183609654932647426244280696944655104306\
0671597053159142179827829564096499213452899416865768442103053934204433804277689\
2957467784545441563581819086207890906001045909298954791^(1/2))^2+781/100*(1/144\
4220897990330843856761765170549805790304494336381085847956135783778065863002116\
8804375997983881393610150907416984256343042472952704173367049459353797121011685\
62336387176524294480000000000000000000000000000000000000000000000*x^2*351165652\
4440270445562570451267900202616517215256836958782763989222267718722144480827332\
2644116434105285875342001502164453670352941967587006325018382103057542716853669\
8693615645784675782752532714276899174355535099950958764805005488990366262531147\
0585662169273870258285118614590599754988265676897991136284439959536458202096944\
3578441808413324395468938654313137498303077006557686593942821049912477388392947\
2438311482046153920141557897546720832477353^(1/2)-32815551669273502253029788694\
6381914082152707469886012307695433630502115361605609187256277865014459131773168\
9345722404469325059872468964683420207955916402276936515247495125603123153393431\
1478556580656757022696700543650030890523466253866617834752417650548498785756450\
491/936441739850738785483352120338106720697737924068489855675403730459271391659\
2385282206219371764382428076233424533733910520978760784524689868353338235227482\
0113911609786318297505542580208734008723807173113161476026653589003948001463730\
7643366749725489509911806365402209364963890826601330204180506130969675850655876\
3888538925184954251148910219838791716974483503332880820535082049758384752279976\
6606369047859316883061878974378704415439345792221993960800000000000000000000000\
0000000000000000000000000*x^3*3511656524440270445562570451267900202616517215256\
8369587827639892222677187221444808273322644116434105285875342001502164453670352\
9419675870063250183821030575427168536698693615645784675782752532714276899174355\
5350999509587648050054889903662625311470585662169273870258285118614590599754988\
2656768979911362844399595364582020969443578441808413324395468938654313137498303\
0770065576865939428210499124773883929472438311482046153920141557897546720832477\
353^(1/2))^2+115027465177303467833124728504933691572397478313045342194650741694\
7336067800756024201655218519510727135965964599023000147422670366028048877014914\
2021926886615115325435106199071099142945072364440235343433388903075286478506152\
6795863507101572713595219178144688792548812586811210742898928460045067221550898\
14339389618088287140480871580535250073962220202225385795087/7294569402769674966\
4681693438682127870885789456598784339841732173681046955795374814102089315241957\
2383310221242836711090608201585159448498214050152656846913312943294833464038186\
1565768520525720811634849621728250272372005682280897363978817066322971500541298\
2814539448173750000000000000000000000000000000000000000000000000000000000000000\
000000000000000000000000000000000*x^6, 1652449699280455795266183502182211482953\
67450118992133995464374812187134224018341/1000000000000000000000000000000000000\
00000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 49 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 50 Test 1 - Weifeng
>> input polynomial
x+3/10
>> basis
[(x-81/10)*(x-441/50)*(x-348/25), (-x+81/10)*(x-441/50)*(x-348/25)]
>> Time taken
0.065000
">> Sums of squares multipliers", [x+3/10-(x-81/10)*(x-441/50)*(x-348/25)*(3125
/3508384*(x-81/10)*(x-441/50)*(x-348/25)-903125/1754192)^2-(-x+81/10)*(x-441/50
)*(x-348/25)*(3125/3508384*(-x+81/10)*(x-441/50)*(x-348/25)-903125/1754192)^2,
(3125/3508384*(x-81/10)*(x-441/50)*(x-348/25)-903125/1754192)^2, (3125/3508384*
(-x+81/10)*(x-441/50)*(x-348/25)-903125/1754192)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 50 Test 1 - Weifeng

>> Test
Batch: 50 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+3/10
>> basis
[(x-81/10)*(x-441/50)*(x-348/25), (-x+81/10)*(x-441/50)*(x-348/25)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -101.913523
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 50 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 50 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+3/10
>> basis
[(x-81/10)*(x-441/50)*(x-348/25), (-x+81/10)*(x-441/50)*(x-348/25), -x^2+158404/625]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 8.167602
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9428
time= 0.111000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [(11/
125000000000000000000000000000000000000000*520302817819071312305209684952343768\
2681158726374403567267988946027040373375110439^(1/2)-79044883864378526617068944\
9449002035160047481003214440763809196310937505508856958613/57233309960097844353\
5730653447578145094927459901184392399478784062974441071262148290000000000000000\
00000000000000000000000000*x*52030281781907131230520968495234376826811587263744\
03567267988946027040373375110439^(1/2)+3169389784205629157644302026267576028079\
38882054821864518971848264568640493324447980941359/5365622808759172908147474876\
0710451102649449365736036787451136005903853850430826402187500000000000000000000\
0000000000000000000000000*x^2*5203028178190713123052096849523437682681158726374\
403567267988946027040373375110439^(1/2))^2+(1/107312456175183458162949497521420\
9022052988987314720735749022720118077077008616528043750000000000000000000000000\
00000000000000000*x*29058498377028323191086388728192021360549227339009970387544\
9525204587287859156031558492232474596042853940121758613836188650397471267750165\
1362420633212219291303609123718691315015201578938008196634158379455633708464795\
466316330925998553777791316613712791182^(1/2)-636987316584995236206048909997371\
0898370539031302795197855605796991611919117802536729319276916534376076557989933\
3564302840285807041801145624739599184813252875730626807024933/15982174107365577\
7550975138005056117483020750364554837131497238862523008322535817357170727861027\
8235696670669672376099037577186091972625908249331348266720610216985018045280223\
2583608684159045081487871087005985396556375064739820092992045777852241375420351\
5010000000000000000000000000000000000000000000000*x^2*2905849837702832319108638\
8728192021360549227339009970387544952520458728785915603155849223247459604285394\
0121758613836188650397471267750165136242063321221929130360912371869131501520157\
8938008196634158379455633708464795466316330925998553777791316613712791182^(1/2)
)^2+465060374036498793121997600472663561343408800749732702650239417879633757421\
0555993793924164594032465651865339177938378366916913530753460082227341021732263\
0115222473154380433421178369782615284086995789802007899636433793664492163416086\
0844190629848918102011883168721/16362071576086264245676462397324687761726984872\
1813363614340423142460746257811531615870850095245267862919536854518998326191797\
4674023884383762595524737793808222838942270387318359375000000000000000000000000\
0000000000000000000000000000000000000000000000000000000000000000000*x^4, 
367018442738000838069362268343973441838120488625954951149224315159419350611441/
40000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 50 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 51 Test 1 - Weifeng
>> input polynomial
x+109/25
>> basis
[(x-277/50)*(x-873/100)*(x-473/50)*(x-374/25)*(x-399/25), (-x+277/50)*(x-873/100)*(x-473/50)*(x-374/25)*(x-399/25)]
memory used=9923.5MB, alloc=236.7MB, time=46.73
>> Time taken
1.089000
">> Sums of squares multipliers", [x+109/25-127/8944428*x^2*(x-277/50)*(x-873/
100)*(x-473/50)*(x-374/25)*(x-399/25)-127/8944428*(x+1)^2*(-x+277/50)*(x-873/
100)*(x-473/50)*(x-374/25)*(x-399/25), 127/8944428*x^2, 127/8944428*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 51 Test 1 - Weifeng

>> Test
Batch: 51 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+109/25
>> basis
[(x-277/50)*(x-873/100)*(x-473/50)*(x-374/25)*(x-399/25), (-x+277/50)*(x-873/100)*(x-473/50)*(x-374/25)*(x-399/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.922063
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 51 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 51 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+109/25
>> basis
[(x-277/50)*(x-873/100)*(x-473/50)*(x-374/25)*(x-399/25), (-x+277/50)*(x-873/100)*(x-473/50)*(x-374/25)*(x-399/25), -x^2+179776/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.270647
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19877
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [109/25*(1/
12500000000000000000000000000000000000000000*9010054640926679180518733171268072\
94680170760299850983579253126839187277261655796021538^(1/2)-1658053824102554226\
635291446959697558098479487874360205058477097087347828904654691138477/982095955\
8610080306765419156682199512013861287268375721013859082547141322152048176634764\
2000000000000000000000000000000000000000000*x*901005464092667918051873317126807\
294680170760299850983579253126839187277261655796021538^(1/2)+603248619224419464\
44794198087159510335507274560212256097914467106668923540473156822821/3378770490\
3475046926945249392255273550506403511244411884221992256469522897312092350807675\
000000000000000000000000000000000000000000*x^2*90100546409266791805187331712680\
7294680170760299850983579253126839187277261655796021538^(1/2)-32339820171006493\
00500380209173061052857137217725586361493753849441403710312242745803/5631284150\
5791744878242082320425455917510672518740686473703320427449204828853487251346125\
000000000000000000000000000000000000000000*x^3*90100546409266791805187331712680\
7294680170760299850983579253126839187277261655796021538^(1/2))^2+109/25*(1/7365\
7196689575602300740643675116496340103959654512817907603943119103559916140361324\
76073150000000000000000000000000000000000000000000*x*11914124679105312535841359\
9009478981351254201170566278535657770991497296199575839559770090638231577537579\
2512848353338583206795302171464166529752040839898063236021340521376040529291437\
3080569625521939758684862972310478128511123216966770361825289230523348023833470\
478^(1/2)-140681492172840255198481106507429503453391256474284568771157380175171\
1970750781932397753985491754976759334907716256038521233149426147089971023625669\
1216247269555764241308727031/74463279244408203349008499380924363344533875731603\
9240847861068696858101247348997248563066488947359609870320530220836614504247063\
8571651040810950255249362895225133378258600253308071483175356015951212349178039\
3576940488303194520106042314761408057690770925148959190487500000000000000000000\
0000000000000000000000*x^2*1191412467910531253584135990094789813512542011705662\
7853565777099149729619957583955977009063823157753757925128483533385832067953021\
7146416652975204083989806323602134052137604052929143730805696255219397586848629\
72310478128511123216966770361825289230523348023833470478^(1/2)+1696419939114915\
3387521816134655238022751594941752879686120496314734343495711765443305869885076\
2476705446781731768950773651516811432051921712763675385040904259173247008007346\
8251/23269774763877563546565156056538863545166836166126226276495658396776815663\
9796561640175958277796049878084475165694011442032577207455364095025342195476542\
5904757854180705812579158772338492298754984753859118137299279390259474828753313\
8223362940018028365914109049747027343750000000000000000000000000000000000000000\
00*x^3*119141246791053125358413599009478981351254201170566278535657770991497296\
1995758395597700906382315775375792512848353338583206795302171464166529752040839\
8980632360213405213760405292914373080569625521939758684862972310478128511123216\
966770361825289230523348023833470478^(1/2))^2+109/25*(1/20661161949609912659585\
3699738329586643735976018405261628513740487875237164394681616623446434096752236\
8103519700211325717787161820210420143413011143934128194945660667015045040723593\
7500000000000000000000000000000000000000000*x^2*3327586895721543075361659164416\
9105094582873075925729154089861477318126917491936371838909770497693485596984274\
4184487036417337422931425159077409921222781067341331508935676104004190903803486\
2635370932612495717596418011058810493296059431619636916028819157648002801753116\
7214493288482419971069245020690524478297560378581353231092585068590473298988116\
2717117983210469968781006833178934619603975816607664228501918903870170402587304\
594871905972697743^(1/2)-300587110372782197304827724717588739858120440219123122\
6732233326730620614323710413019663032539987460322802641264962619990306864891650\
1691766746885737665365625823106290911521129676271090475939653269739749882119760\
488650983393828693360371932839007861007106209041254727/103987090491298221105051\
8488880284534205714783622679036065308171166191466171623011619965930328052921424\
9057585755765219888041794466607036221169060038211908354416609654239878250130965\
7438589457355341644140491174888062845587827915501857238113653625900598676500087\
5547848975452915265075624095913906896578889946798761830667288471643283393452290\
5933786334909936975327186524406463536841706862624244268989507140684965745942825\
080853268589747061646804468750000000000000000000000000000000000000000000*x^3*33\
2758689572154307536165916441691050945828730759257291540898614773181269174919363\
7183890977049769348559698427441844870364173374229314251590774099212227810673413\
3150893567610400419090380348626353709326124957175964180110588104932960594316196\
3691602881915764800280175311672144932884824199710692450206905244782975603785813\
5323109258506859047329898811627171179832104699687810068331789346196039758166076\
64228501918903870170402587304594871905972697743^(1/2))^2+4576127032505610442415\
5392941374559063125159414689318801474282969703672093058140739348680769946159854\
3631794136031615406222387300438955921554596553750771473595269233547363959719017\
7503776255798191439539640317283480414132032321384276474272033138701348481135580\
1067760729254799707169562853445972747873106279211376203707563180626446316444226\
69710198467008705341/1382347589752858945672112090306157127032582353097182902948\
6346875925049777170295432952827700997357533093191754496093526414455757614418905\
3830636099859824002886928035787292479772089487275862160828012643450952009080081\
1166250081700532068777913731582481481781080713550885009765625000000000000000000\
0000000000000000000000000000000000000000000000000000000000000000000000*x^6, 131\
078296921179779139681127053603396164929007563472564656566405071291284631878549/
2500000000000000000000000000000000000000000000000000000000000000000000000000000\
0]
>> Degree size
6
>> Succeeds RealCertify Batch: 51 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 52 Test 1 - Weifeng
>> input polynomial
x+913/100
>> basis
[(x-167/100)*(x-87/25)*(x-39/5)*(x-251/20)*(x-1637/100)*(x-1033/50)*(x-1083/50), -(x-167/100)*(x-87/25)*(x-39/5)*(x-251/20)*(x-1637/100)*(x-1033/50)*(x-1083/50)]
memory used=10091.1MB, alloc=236.7MB, time=47.64
>> Time taken
1.234000
">> Sums of squares multipliers", [x+913/100-31/29898418*x^2*(x-167/100)*(x-87/
25)*(x-39/5)*(x-251/20)*(x-1637/100)*(x-1033/50)*(x-1083/50)+31/29898418*(x+1)^
2*(x-167/100)*(x-87/25)*(x-39/5)*(x-251/20)*(x-1637/100)*(x-1033/50)*(x-1083/50
), 31/29898418*x^2, 31/29898418*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 52 Test 1 - Weifeng

>> Test
Batch: 52 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+913/100
>> basis
[(x-167/100)*(x-87/25)*(x-39/5)*(x-251/20)*(x-1637/100)*(x-1033/50)*(x-1083/50), -(x-167/100)*(x-87/25)*(x-39/5)*(x-251/20)*(x-1637/100)*(x-1033/50)*(x-1083/50)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.978579
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 52 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 52 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+913/100
>> basis
[(x-167/100)*(x-87/25)*(x-39/5)*(x-251/20)*(x-1637/100)*(x-1033/50)*(x-1083/50), -(x-167/100)*(x-87/25)*(x-39/5)*(x-251/20)*(x-1637/100)*(x-1033/50)*(x-1083/50), -x^2+1283689/2500]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 1.182915
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... memory used=10250.3MB, alloc=236.7MB, time=48.55
done.

 Exact sum of squares decomposition
bitsize= 36100
time= 0.185000secs
>> Time taken
0.208000
">> Sums of squares multipliers", [913/100*(3/
62500000000000000000000000000000000000000000*5988289458336281663393110433307598\
95068645256262635643269240763310039930196700753735195^(1/2)-2074837064310337773\
8528264602654896840246283864505087890383088129554029699605829365960297/41004812\
0659576886900843236920737838148254839225839756728612612676549842202190841120174\
7762500000000000000000000000000000000000000000*x*598828945833628166339311043330\
759895068645256262635643269240763310039930196700753735195^(1/2)+438316824809874\
79944934123028141979012179728412839168374744379785204615241097468775757/7185947\
3500035379960717325199691187408237430751516277192308891597204791623604090448223\
400000000000000000000000000000000000000000000*x^2*59882894583362816633931104333\
0759895068645256262635643269240763310039930196700753735195^(1/2)-15193653448685\
519385752164488659283897068427656777133894181492288741945252095242355371/718594\
7350003537996071732519969118740823743075151627719230889159720479162360409044822\
34000000000000000000000000000000000000000000000*x^3*598828945833628166339311043\
330759895068645256262635643269240763310039930196700753735195^(1/2)+448496578220\
82004412539369084802145830943709620795308821621557669763800997965313660709/3266\
3397045470627254871511454405085185562468523416489632867677998729450738001859294\
6470000000000000000000000000000000000000000000000000*x^4*5988289458336281663393\
11043330759895068645256262635643269240763310039930196700753735195^(1/2))^2+913/
100*(1/164019248263830754760337294768295135259301935690335902691445045070619936\
88087633644806991050000000000000000000000000000000000000000000*x*25358946211163\
2169645728856022556711476545554295751258796044070268093804430452971145675649845\
9437952204240071776217143589134854931084869342576688803046526061558112724585515\
7198171344277828109895176451011860992670779850467489612278551406489551449707559\
385439533337957^(1/2)-309894982156486124482064700964107945434743213644036129064\
7643098809139871227453743217050188800045856153558789441071339897414827326841477\
21052422585656338160894221147954452994323/3803841931674482544685932840338350672\
1481833144362688819406610540214070664567945671851347476891569283063601076643257\
1538370228239662730401386503320456978909233716908687827357972570164167421648427\
6467651779148900616977570123441841782710973432717456133907815930000693550000000\
0000000000000000000000000000000000000*x^2*2535894621116321696457288560225567114\
7654555429575125879604407026809380443045297114567564984594379522042400717762171\
4358913485493108486934257668880304652606155811272458551571981713442778281098951\
76451011860992670779850467489612278551406489551449707559385439533337957^(1/2)+
6491237821391781564862151380305732024649416610970924933745261006314082051759934\
7577034748788552771868040498594588677125133880406789826806036543494655538432717\
346955075864764096937/190192096583724127234296642016917533607409165721813444097\
0330527010703533228397283592567373844578464153180053832162857691851141198313652\
0069325166022848945461685845434391367898628508208371082421382338258895744503084\
8878506172092089135548671635872806695390796500034677500000000000000000000000000\
000000000000000000000*x^3*25358946211163216964572885602255671147654555429575125\
8796044070268093804430452971145675649845943795220424007177621714358913485493108\
4869342576688803046526061558112724585515719817134427782810989517645101186099267\
0779850467489612278551406489551449707559385439533337957^(1/2)-27290053331704948\
6034469963406644560044574800778601103503750439083025081874121543611900183788998\
5200578269613335137709131506728198093540294933421924744775194839842341800640455\
9/69160762394081500812471506187970012220876060262477616035284746436752855753759\
9012215479045034392168782974565029877402797036778617568600729793642400830870744\
0613034703415042872228548439407666335048123003234816182939959218406257894150383\
588059486283879832392600001261000000000000000000000000000000000000000000000000*
x^4*253589462111632169645728856022556711476545554295751258796044070268093804430\
4529711456756498459437952204240071776217143589134854931084869342576688803046526\
0615581127245855157198171344277828109895176451011860992670779850467489612278551\
406489551449707559385439533337957^(1/2))^2+913/100*(1/2646722656319357618041640\
7940867261140414764962183949779954434768526874949644715622853480255082328088983\
2648890820024023386562289266153092366646483555394803942559292708884392556953750\
0000000000000000000000000000000000000000000*x^2*4972174549833613981286021438268\
6628987649041900246879234965847779114724896922554332104972966132472007784995107\
3354537995925496164102281273416671619510420033890007337451298061471977502680699\
7414805177540666666863225034289435890942208572541368027641727814654171748261810\
2185365195082389965987071530195665567060695677919488074365531590518483335883608\
9111157627814323662499861397685271764730977170055710799640002274470455730209451\
4585303188898810704195^(1/2)-20734303814213565714703878379555093002718896556904\
8598399929185122746423108835038742939010050965392560874186840470456076583296939\
6984319249127734596956096598405713090633380209261469914857163317006701262818734\
0304676047482618104142061313152029259657939672993806023774199/49721745498336139\
8128602143826866289876490419002468792349658477791147248969225543321049729661324\
7200778499510733545379959254961641022812734166716195104200338900073374512980614\
7197750268069974148051775406666668632250342894358909422085725413680276417278146\
5417174826181021853651950823899659870715301956655670606956779194880743655315905\
1848333588360891111576278143236624998613976852717647309771700557107996400022744\
7045573020945145853031888988107041950000000000000000000000000000000000000000000\
0000*x^3*4972174549833613981286021438268662898764904190024687923496584777911472\
4896922554332104972966132472007784995107335453799592549616410228127341667161951\
0420033890007337451298061471977502680699741480517754066666686322503428943589094\
2208572541368027641727814654171748261810218536519508238996598707153019566556706\
0695677919488074365531590518483335883608911115762781432366249986139768527176473\
09771700557107996400022744704557302094514585303188898810704195^(1/2)+8900116863\
7159894920711730676153205058383862600645821615236249482869442556825890407446184\
7066272365452237837400611450750150422221287476863788160471024642563383847085573\
7988663636423066387333322487816899539413791405113052753253794357915222305841411\
43008155102179261617/7955479279733782370057634301229860638023846704039500677594\
5356446583559835076086931367956745811955212455992171736726079348079386256365003\
7466674591216672054224011739922076898355164004289119586368828406506666698116005\
4863097425507533716066188844226764503446674797218896349658431213182394557931444\
8313064907297113084671180918984850544829573337413774257785220450291785999977823\
6296434823569563472089137279424003639152729168335122333648510223809712671200000\
000000000000000000000000000000000000000000*x^4*49721745498336139812860214382686\
6289876490419002468792349658477791147248969225543321049729661324720077849951073\
3545379959254961641022812734166716195104200338900073374512980614719775026806997\
4148051775406666668632250342894358909422085725413680276417278146541717482618102\
1853651950823899659870715301956655670606956779194880743655315905184833358836089\
1111576278143236624998613976852717647309771700557107996400022744704557302094514\
585303188898810704195^(1/2))^2+913/100*(1/5870673843037976124350991891508444307\
9056907995798782597144277019509774944437368015289373213214472047061570501466655\
7870486076748455502611640853436765117134309273062811514953010259557227262204591\
5854973446815683477454483078176816920683116066799426705002309351097752566250000\
000000000000000000000000000000000000000000*x^3*24096330593807230972928029731169\
8543729268632892812036506452275492469076580603259001182501326155670216167524580\
2915103549894213117800034203269169603008863652388087043944783091673897360502735\
2352826435576535942213330679254211504634749677621786720206187350389078027198770\
8528909895994470521374453836344576979111752895310607576518896368282659097772484\
0852923790944375074585455871114622525853449249892097551592506960889109945190996\
3387769411933004153709755472864103137059386244719254497188393151703983209322007\
9841371550776294557152393733492799142196244710014202591104769015023998748206449\
59000723327689539858158793101007481450777^(1/2)-1558284848105473088951566490155\
2230095700273384903485041563863210934851623580757119439457327898705744081382545\
8940764001694073635361969597381761080073269821593710043005837300756995797391412\
0858504384442280328651233860135502555385045164060775752439523039191962407403298\
3964583796861404079434327437561867290168015804204593826701743844522367366589913\
41612233663/1927706447504578477834242378493588349834149063142496292051618203939\
7526126448260720094600106092453617293401966423320828399153704942400273626153356\
8240709092191046963515582647333911788840218818822611484612287537706645434033692\
0370779974209742937616494988031126242175901668231279167955764170995630690756615\
8328940231624848606121511709462612727821798726823390327555000596683646968916980\
2068275939991367804127400556871128795615279707102155295464033229678043782912825\
0964750899577540359775071452136318656745760638730972406210356457219149867942393\
1375699576801136207288381521201919899856515967200578662151631886527034480805985\
1606216000000000000000000000000000000000000000000000000*x^4*2409633059380723097\
2928029731169854372926863289281203650645227549246907658060325900118250132615567\
0216167524580291510354989421311780003420326916960300886365238808704394478309167\
3897360502735235282643557653594221333067925421150463474967762178672020618735038\
9078027198770852890989599447052137445383634457697911175289531060757651889636828\
2659097772484085292379094437507458545587111462252585344924989209755159250696088\
9109945190996338776941193300415370975547286410313705938624471925449718839315170\
3983209322007984137155077629455715239373349279914219624471001420259110476901502\
399874820644959000723327689539858158793101007481450777^(1/2))^2+327681055616478\
8469456478392326361485049385757443348126426221331168044659538411510521327655827\
8061999517708174568043002838026214412925430309978385016080063349990366112612607\
7492057258209036011037675178233482664063747219559091207645072377620185079024606\
6556741112177824436808168630022772696887547103808499829797313003682591089517636\
8482089131381982455375996703452040018119501370123931752062465388631794575258526\
187930758223037419599314265897720822003/164181020700940731865984108988285788612\
1541176460785379605111725984170271943089835768442306665487603703690999231533555\
7578154640596799356639204970715193800071783040815164411900174338236232589604607\
9015248972024453349225435444489401974159745345800667480718199163306661580842436\
3222836649605826735323215785075946398613684733300143918988771289460379288776690\
9148800000000000000000000000000000000000000000000000000000000000000000000000000\
0000000000000000000000000*x^8, 786764867309158768981480359361935052240548608719\
80966147374506521350947256290657/6250000000000000000000000000000000000000000000\
000000000000000000000000000000000]
>> Degree size
8
>> Succeeds RealCertify Batch: 52 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 53 Test 1 - Weifeng
>> input polynomial
x+533/50
>> basis
[(x-227/50)*(x-32/5)*(x-1241/100)*(x-2367/100)*(x-2541/100), (-x+227/50)*(x-32/5)*(x-1241/100)*(x-2367/100)*(x-2541/100)]
>> Time taken
0.821000
">> Sums of squares multipliers", [x+533/50-67/4173984*x^2*(x-227/50)*(x-32/5)*
(x-1241/100)*(x-2367/100)*(x-2541/100)-67/4173984*(x+1)^2*(-x+227/50)*(x-32/5)*
(x-1241/100)*(x-2367/100)*(x-2541/100), 67/4173984*x^2, 67/4173984*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 53 Test 1 - Weifeng

>> Test
Batch: 53 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+533/50
>> basis
[(x-227/50)*(x-32/5)*(x-1241/100)*(x-2367/100)*(x-2541/100), (-x+227/50)*(x-32/5)*(x-1241/100)*(x-2367/100)*(x-2541/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.317701
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 53 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 53 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+533/50
>> basis
[(x-227/50)*(x-32/5)*(x-1241/100)*(x-2367/100)*(x-2541/100), (-x+227/50)*(x-32/5)*(x-1241/100)*(x-2367/100)*(x-2541/100), -x^2+7513081/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.425892
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20504
time= 0.120000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [533/50*(1/
125000000000000000000000000000000000000000000*325422051891003186553985514892909\
06314244402870842597791290851335977377761055292378514755^(1/2)-1225716275794815\
626675418858438216939094009518260699774731640706166548488049968711958719297/138\
7599629263237587466194235503364245239381338412728369820641900966075387731397667\
019869153200000000000000000000000000000000000000000000*x*3254220518910031865539\
8551489290906314244402870842597791290851335977377761055292378514755^(1/2)+15854\
4855616957454576462581922181868346177965080943477904472987490294271977448554456\
48259/1952532311346019119323913089357454378854664172250555867477451080158642665\
66331754271088530000000000000000000000000000000000000000000000*x^2*325422051891\
00318655398551489290906314244402870842597791290851335977377761055292378514755^(
1/2)-51795687950359769104882484525696783752377701491821907045061918565946350993\
2625640220237/26033764151280254924318841191432725051395522296674078233032681068\
7819022088442339028118040000000000000000000000000000000000000000000000*x^3*3254\
2205189100318655398551489290906314244402870842597791290851335977377761055292378\
514755^(1/2))^2+533/50*(1/20813994438948563811992913532550463678590720076190925\
5473096285144911308159709650052980372980000000000000000000000000000000000000000\
00000*x*24272351456361345355311192642229860336052304739402492764060050141336789\
7781997678009718170268307556526265831990581443441317149427555838952156235110262\
4893020460718146871262192420002288846052578601989027692828066351183195648332625\
7063497627938709606340637122513195750009773^(1/2)-22073789307334679922020400072\
4752608675662105093182021785459432580573201241303053778975745799309513293747763\
607535894793120405566466759543662643095896761443118313756112541232029637/485447\
0291272269071062238528445972067210460947880498552812010028267357955639953560194\
3634053661511305253166398116288688263429885511167790431247022052497860409214362\
9374252438484000457769210515720397805538565613270236639129666525141269952558774\
19212681274245026391500019546000000000000000000000000000000000000000000000*x^2*
2427235145636134535531119264222986033605230473940249276406005014133678977819976\
7800971817026830755652626583199058144344131714942755583895215623511026248930204\
6071814687126219242000228884605257860198902769282806635118319564833262570634976\
27938709606340637122513195750009773^(1/2)+4585680709515471981570837157210685886\
4342750160943605467768864375892141159810953102696633003559641873330601920916617\
3536670254111678203978222522730445562928312429508039546988688670691/40453919093\
9355755921853210703831005600871745656708212734334169022279829636662796682863617\
1138459275437763866509690724021952490459263982535937251837708155034101196911452\
1036540333371480767542976699817128213801105853053260805543761772496046564516010\
56772853752199291668295500000000000000000000000000000000000000000000000000*x^3*
2427235145636134535531119264222986033605230473940249276406005014133678977819976\
7800971817026830755652626583199058144344131714942755583895215623511026248930204\
6071814687126219242000228884605257860198902769282806635118319564833262570634976\
27938709606340637122513195750009773^(1/2))^2+533/50*(1/372936488405080844461199\
2801225635671700246934955738470892001154927951800790811388859685804641353274968\
8430909535731416114686989926774929328065061082802788199483872448344918121424869\
23000000000000000000000000000000000000000000000000*x^2*352636993628580482786049\
6601437699508350028850145441521000356908123445651353026783996951082733072918894\
4732351778762831660233909128666253163809670264961605691138032227999575881956328\
5815264974173402318396725307713967639342201835821189325454902931484539724453004\
0210908188540614336341469895902568574181552841804332569791970284125459789042476\
0297975967742010584285237756157653129154128406051550758948328090986644629365957\
4630913193467635391216860131864778166133^(1/2)-37600383924545691479958913254299\
7434480331137904788741473140252145177263066084748898062509882340553594728941153\
0559506656812594744568226648095429383718995267857324895476839199083299288772554\
3851299490999559419791090735037771830246916765479152288342388399652006526245787\
80449/3526369936285804827860496601437699508350028850145441521000356908123445651\
3530267839969510827330729188944732351778762831660233909128666253163809670264961\
6056911380322279995758819563285815264974173402318396725307713967639342201835821\
1893254549029314845397244530040210908188540614336341469895902568574181552841804\
3325697919702841254597890424760297975967742010584285237756157653129154128406051\
5507589483280909866446293659574630913193467635391216860131864778166133000000000\
000000000000000000000000000000000000000*x^3*35263699362858048278604966014376995\
0835002885014544152100035690812344565135302678399695108273307291889447323517787\
6283166023390912866625316380967026496160569113803222799957588195632858152649741\
7340231839672530771396763934220183582118932545490293148453972445300402109081885\
4061433634146989590256857418155284180433256979197028412545978904247602979759677\
4201058428523775615765312915412840605155075894832809098664462936595746309131934\
67635391216860131864778166133^(1/2))^2+6900023039391012220196094917431584114647\
4855491017039621191855630257245993569941028251479519261392601620210626152391062\
2438139918183244006804960686241409763297009607221954208694248373042108906283247\
6993382779401016435228028793307987064746407793367202142136404585842780186426079\
2840771226803387356171601309512929001193424476583069012673848011754174999452911\
614467148302283/354588185179350966474358566753012189912027911578377431363366101\
3188614366968850943881278817717493202358934246608233030450760614431825646414862\
6465043959709148739398800408291363316851542844861983757360295381075348733448361\
0705492406470046700973492970616127518095044431119763516250000000000000000000000\
0000000000000000000000000000000000000000000000000000000000000000000000000000000
*x^6, 4320349611739209151610394318165235757415628282742078090712160255690262568\
685090613/500000000000000000000000000000000000000000000000000000000000000000000\
0000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 53 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 54 Test 1 - Weifeng
>> input polynomial
x+211/10
>> basis
[(x-22/5)*(x-87/10)*(x-1267/100)*(x-392/25)*(x-2627/100), -(x-22/5)*(x-87/10)*(x-1267/100)*(x-392/25)*(x-2627/100)]
memory used=10499.2MB, alloc=270.7MB, time=49.82
>> Time taken
1.082000
">> Sums of squares multipliers", [x+211/10-61/8707227*x^2*(x-22/5)*(x-87/10)*(
x-1267/100)*(x-392/25)*(x-2627/100)+61/8707227*(x+1)^2*(x-22/5)*(x-87/10)*(x-\
1267/100)*(x-392/25)*(x-2627/100), 61/8707227*x^2, 61/8707227*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 54 Test 1 - Weifeng

>> Test
Batch: 54 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+211/10
>> basis
[(x-22/5)*(x-87/10)*(x-1267/100)*(x-392/25)*(x-2627/100), -(x-22/5)*(x-87/10)*(x-1267/100)*(x-392/25)*(x-2627/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.455892
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 54 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 54 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+211/10
>> basis
[(x-22/5)*(x-87/10)*(x-1267/100)*(x-392/25)*(x-2627/100), -(x-22/5)*(x-87/10)*(x-1267/100)*(x-392/25)*(x-2627/100), -x^2+7991929/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.208532
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20061
time= 0.123000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [211/10*(1/
25000000000000000000000000000000000000000000*9311988404827493260448133658979384\
28336303550902617123146572972176960712343720366865095^(1/2)-1926947016993580038\
96947624426061016391474149892730799147103395377456925708118389391859/7859318213\
6744043118182248081786003351584019696180885193570758851735484121809998963414018\
000000000000000000000000000000000000000000*x*9311988404827493260448133658979384\
28336303550902617123146572972176960712343720366865095^(1/2)+5129502541157213100\
756105708018245939546974474130349072197162641953400713664552275929939/279359652\
1448247978134440097693815285008910652707851369439718916530882137031161100595285\
0000000000000000000000000000000000000000000000*x^2*9311988404827493260448133658\
97938428336303550902617123146572972176960712343720366865095^(1/2)-3509882260124\
7649726344732671614106143761943818126234127999031661456398677841384195539/93119\
8840482749326044813365897938428336303550902617123146572972176960712343720366865\
0950000000000000000000000000000000000000000000000*x^3*9311988404827493260448133\
65897938428336303550902617123146572972176960712343720366865095^(1/2))^2+211/10*
(1/1243737107313974482345234075894263503038817111692062508188257258828714036227\
6432335960268348500000000000000000000000000000000000000000000*x*386511631391260\
3887376356024289977711349873011250459103775055563685827471781482486641720432509\
4921579467203119967131993090091764225808649440127448597486364639405340865211106\
8317846983507747902194862203990478304386067952544177909782727629408222919376671\
7351517117326899717^(1/2)-40260342540213755536334445135957429430961470570392928\
8254182037457451259767115071071965855118511775422274550891917951133383226248006\
90175587000928337497368820520448078750944027/6106028931931443739931052171074214\
3939176508866515941607820782996616547737464178303976626105995136776409483601843\
8104156241576054120199833177368856200416502992185479703177043156156372050154663\
8149481895584175424740409992799019111891431744205733323486125357846946803949000\
000000000000000000000000000000000000000000*x^2*38651163139126038873763560242899\
7771134987301125045910377505556368582747178148248664172043250949215794672031199\
6713199309009176422580864944012744859748636463940534086521110683178469835077479\
0219486220399047830438606795254417790978272762940822291937667173515171173268997\
17^(1/2)+8422094268094092371354111605727379439051288743298684656996544118815772\
9407734805073737649444189679250574003872795685253132856561861555227922818598634\
66794976446760609505791955799/5861787774654185990333810084231245818160944851185\
5303943507951676751885827965611171817561061755331305353104257770057998999191301\
1955391839850274101952399842872498060515049961429910117168148477262350261976080\
8407750793593087058347415774474437503990546680343533068931791040000000000000000\
0000000000000000000000000000000*x^3*3865116313912603887376356024289977711349873\
0112504591037750555636858274717814824866417204325094921579467203119967131993090\
0917642258086494401274485974863646394053408652111068317846983507747902194862203\
9904783043860679525441779097827276294082229193766717351517117326899717^(1/2))^2
+211/10*(1/93229902634163592742780964492368472944273688396722112530101539259277\
3363146695446967716632425365462682768634749290441711050504065623404057301253068\
1099745237824311405198434703179660000000000000000000000000000000000000000000000\
0*x^2*2798908799919380497746638345898807018842474509167519750645309473544943763\
9718574578210619598838864643769063395809015592991041799655466464317849800608043\
6833249842093174698126471265386283377575118644200863506654181223898483168160988\
0345550664804935040356372397340938581668909219457627989006664009941526214666461\
2148599923280211435237265124343221301975957330335533224934048876775377134228540\
6619247333728839570618966650181669297464421742457378414893205^(1/2)-84366430098\
1572196030401174231232075315923683722331131418545792440499267977873512654136255\
3371585559895351896541847818007969752357272033361860158473371265397891353940227\
2023936723287749536463136726970193363570849113634394118072451842882741530617111\
11766122907806051527/2239127039935504398197310676719045615073979607334015800516\
2475788359550111774859662568495679071091715015250716647212474392833439724373171\
4542798404864349466599873674539758501177012309026702060094915360690805323344979\
1187865345287904276440531843948032285097917872750865335127375566102391205331207\
9532209717331689718879938624169148189812099474577041580765864268426579947239101\
4203017073828325295397866983071656495173320145335437971537393965902731914564000\
00000000000000000000000000000000000000000000*x^3*279890879991938049774663834589\
8807018842474509167519750645309473544943763971857457821061959883886464376906339\
5809015592991041799655466464317849800608043683324984209317469812647126538628337\
7575118644200863506654181223898483168160988034555066480493504035637239734093858\
1668909219457627989006664009941526214666461214859992328021143523726512434322130\
1975957330335533224934048876775377134228540661924733372883957061896665018166929\
7464421742457378414893205^(1/2))^2+62444148952323996873483305889199150013141464\
3221041556018142821643498870228229355790297361864373007635378703783927305436621\
8991102608676427516938759567557924326480887304477616103617058382448834001552779\
6048491163657047207465840128850439179309365528037712195225159510541344310063336\
7100110157192100986968710744266027662168138406291354170320778120500194099289951
/110671545378637633183188896350942337050632904330281161699263144064600655479415\
7295504138712283589303910028322579706780220966757836975638094949388942329403316\
7960887758733355452348132687434182607709752914179771818387391837877084676724857\
5490776851674842996117476503097399603200000000000000000000000000000000000000000\
000000000000000000000000000000000000000000000000000000*x^6, 2548557707738618057\
61548306530681898366579348281045575998021124743954065726592499/2500000000000000\
00000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 54 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 55 Test 1 - Weifeng
>> input polynomial
x+27/100
>> basis
[(x-523/100)*(x-661/100)*(x-1213/100)*(x-1271/100)*(x-2111/100), (-x+523/100)*(x-661/100)*(x-1213/100)*(x-1271/100)*(x-2111/100)]
memory used=10752.6MB, alloc=271.4MB, time=51.09
>> Time taken
0.807000
">> Sums of squares multipliers", [x+27/100-(x-523/100)*(x-661/100)*(x-1213/100
)*(x-1271/100)*(x-2111/100)*(156250/21648535803*(x-523/100)*(x-661/100)*(x-1213
/100)*(x-1271/100)*(x-2111/100)-266875000/503454321)^2-(-x+523/100)*(x-661/100)
*(x-1213/100)*(x-1271/100)*(x-2111/100)*(156250/21648535803*(-x+523/100)*(x-661
/100)*(x-1213/100)*(x-1271/100)*(x-2111/100)-266875000/503454321)^2, (156250/
21648535803*(x-523/100)*(x-661/100)*(x-1213/100)*(x-1271/100)*(x-2111/100)-\
266875000/503454321)^2, (156250/21648535803*(-x+523/100)*(x-661/100)*(x-1213/
100)*(x-1271/100)*(x-2111/100)-266875000/503454321)^2]
>> Degree size
15
>> Succeeds Weifeng Batch: 55 Test 1 - Weifeng

>> Test
Batch: 55 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+27/100
>> basis
[(x-523/100)*(x-661/100)*(x-1213/100)*(x-1271/100)*(x-2111/100), (-x+523/100)*(x-661/100)*(x-1213/100)*(x-1271/100)*(x-2111/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -9.605545
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 55 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 55 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+27/100
>> basis
[(x-523/100)*(x-661/100)*(x-1213/100)*(x-1271/100)*(x-2111/100), (-x+523/100)*(x-661/100)*(x-1213/100)*(x-1271/100)*(x-2111/100), -x^2+5340721/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 5.200390
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19897
time= 0.119000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [(3/
100000000000000000000000000000000000000000000*187023099042537555776172369651305\
87281465530453000613278219026157282957342001709027703079^(1/2)-7597557531054903\
94504557373971161180079087714571408758601321681739179650953209507975997/1122138\
5942552253346570342179078352368879318271800367966931415694369774405201025416621\
8474000000000000000000000000000000000000000000*x*187023099042537555776172369651\
30587281465530453000613278219026157282957342001709027703079^(1/2)+3684009065903\
27982876248939127150336631110367808783673067355796414524846059273866202211/7013\
3662140951583416064638619239702305495739198752299793321348089811090032506408853\
8865462500000000000000000000000000000000000000000*x^2*1870230990425375557761723\
6965130587281465530453000613278219026157282957342001709027703079^(1/2)-54854231\
007599963709656361056652709617580699706618820475118527527458086347030892980123/
4675577476063438894404309241282646820366382613250153319554756539320739335500427\
256925769750000000000000000000000000000000000000000000*x^3*18702309904253755577\
617236965130587281465530453000613278219026157282957342001709027703079^(1/2))^2+
(1/2805346485638063336642585544769588092219829567950091991732853923592443601300\
256354155461850000000000000000000000000000000000000000000*x*3287349411914623787\
1288415830985141859508553759768034097252494400830309278956451175564351097036928\
4513907612934008212077045656481766510851441498581264462659401351306200662500470\
6926813131884636553299741406872569884809612986564875884906845779894259018125667\
457211943^(1/2)-164020225448058604944681462711145172421782422264398191359712560\
4097019978842625480651467076564053407175800083039892131652149944184389707419451\
28936991689531127631182912778898359/4931024117871935680693262374647771278926283\
0639652051145878741601245463918434676763346526645555392677086141940101231811556\
8484722649766277162247871896693989102026959300993750706039021969782695482994961\
2110308854827214419479847313827360268669841388527188501185817914500000000000000\
000000000000000000000000000000*x^2*32873494119146237871288415830985141859508553\
7597680340972524944008303092789564511755643510970369284513907612934008212077045\
6564817665108514414985812644626594013513062006625004706926813131884636553299741\
406872569884809612986564875884906845779894259018125667457211943^(1/2)+560844468\
7391346039145991811013288270248448224311403249313997304456468589844828078012754\
4042709859314910754419299504403000097064590864862193895553854025314381718601014\
4073574007729/65746988238292475742576831661970283719017107519536068194504988801\
6606185579129023511287021940738569027815225868016424154091312963533021702882997\
1625289253188027026124013250009413853626263769273106599482813745139769619225973\
1297517698136915597885180362513349144238860000000000000000000000000000000000000\
0000000000000*x^3*3287349411914623787128841583098514185950855375976803409725249\
4400830309278956451175564351097036928451390761293400821207704565648176651085144\
1498581264462659401351306200662500470692681313188463655329974140687256988480961\
2986564875884906845779894259018125667457211943^(1/2))^2+(1/17577237404064890779\
4133389916911384071854758096607850984809680986422786286472335375296651377653889\
1621233062441605338452800724512819928884537937355547107011273449547119735324170\
0000000000000000000000000000000000000000000000*x^2*3557687478749099458260308665\
6004277082496943012881641546250341432879478536086955481526699545440986521576499\
3218663603299128091574966808060827494162749349792984326211031987793455373019252\
1516512310456055689356279695453159441386906628339574897054114615491540549071727\
8412942100094697376113833539611522263665642330626958153507576245009015261879986\
7007212222893870153269620677307046229568235122499730269674880916980597920659550\
392214793711832480013^(1/2)-849528302392448695865092087461518106463669682263248\
4184150554486757848159631055440567834760466854648497862495559129323937581116527\
6175949019387970151037715812554212064630222149340828268845977128234011940771801\
8602331484852075759633570485669046981478963165921048602997/35576874787490994582\
6030866560042770824969430128816415462503414328794785360869554815266995454409865\
2157649932186636032991280915749668080608274941627493497929843262110319877934553\
7301925215165123104560556893562796954531594413869066283395748970541146154915405\
4907172784129421000946973761138335396115222636656423306269581535075762450090152\
6187998670072122228938701532696206773070462295682351224997302696748809169805979\
20659550392214793711832480013000000000000000000000000000000000000000000000000*x
^3*3557687478749099458260308665600427708249694301288164154625034143287947853608\
6955481526699545440986521576499321866360329912809157496680806082749416274934979\
2984326211031987793455373019252151651231045605568935627969545315944138690662833\
9574897054114615491540549071727841294210009469737611383353961152226366564233062\
6958153507576245009015261879986700721222289387015326962067730704622956823512249\
9730269674880916980597920659550392214793711832480013^(1/2))^2+14081260107619701\
9275942381554686943498058243375789729102589872482816156895468644567934157461680\
4457691249090586950105999315114334751740074831467985263345832844299790170540654\
2717044127715691761790859659792196168506928100424101925128556337452810005003744\
4211872915204873059166309634056649920968830220934071658423686352437167399871187\
185517683524642755175157/809612431570470324594467670166335313327993894716184542\
8484817627624389723414369939718996437464381046072042349707756293202767904441927\
7502883653134558635959734603684118820942587805112904176633761444436491789114190\
7982406587934879613269743125387760729369118424803383915600000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000*x
^6, 110213981365614939697868802266592245000097646978483720698621519037933503772\
45129/1000000000000000000000000000000000000000000000000000000000000000000000000\
000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 55 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 56 Test 1 - Weifeng
>> input polynomial
x+1317/100
>> basis
[(x-473/100)*(x-139/20)*(x-669/50)*(x-374/25)*(x-2373/100), (-x+473/100)*(x-139/20)*(x-669/50)*(x-374/25)*(x-2373/100)]
memory used=10992.0MB, alloc=271.4MB, time=52.34
>> Time taken
1.165000
">> Sums of squares multipliers", [x+1317/100-77/5656205*x^2*(x-473/100)*(x-139
/20)*(x-669/50)*(x-374/25)*(x-2373/100)-77/5656205*(x+1)^2*(-x+473/100)*(x-139/
20)*(x-669/50)*(x-374/25)*(x-2373/100), 77/5656205*x^2, 77/5656205*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 56 Test 1 - Weifeng

>> Test
Batch: 56 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+1317/100
>> basis
[(x-473/100)*(x-139/20)*(x-669/50)*(x-374/25)*(x-2373/100), (-x+473/100)*(x-139/20)*(x-669/50)*(x-374/25)*(x-2373/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.216994
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 56 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 56 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+1317/100
>> basis
[(x-473/100)*(x-139/20)*(x-669/50)*(x-374/25)*(x-2373/100), (-x+473/100)*(x-139/20)*(x-669/50)*(x-374/25)*(x-2373/100), -x^2+6620329/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.357000
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20306
time= 0.124000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1317/100*(7/
50000000000000000000000000000000000000000000*1115968542200100835066974165095141\
06810633018711342462570078821860536958144816059813359^(1/2)-1749089626857142350\
56584462282700821139902030969294521238994972809777769601618765748942061/1028811\
3990542729598482434828012105506872257994998661624335566587322902171370592554193\
566210000000000000000000000000000000000000000000*x*1115968542200100835066974165\
09514106810633018711342462570078821860536958144816059813359^(1/2)+5996249688395\
0920764879131044727527589561622119988134201453863867903648015765536697186799/46\
8706787724042350728129149339959248604658678587638342794331051814255224208227451\
21610780000000000000000000000000000000000000000000000*x^2*111596854220010083506\
697416509514106810633018711342462570078821860536958144816059813359^(1/2)-530430\
7094541861892401665612429547100002196686099835825873853952589359327104908239730\
3/19529449488501764613672047889164968691860778274484930949763793825593967675342\
81046733782500000000000000000000000000000000000000000000*x^3*111596854220010083\
506697416509514106810633018711342462570078821860536958144816059813359^(1/2))^2+
1317/100*(1/4516482041848258293733788889497314317516921259804412453083313731834\
75405323169013129097556619000000000000000000000000000000000000000000000*x*11160\
2044704301582434772580945938966917243777580681210759948852959957292585813691589\
1265709111648066158489586677995544579065601027705483412977397228264813422374936\
8769773646186149918495390751897581770057739727338257130279325796997454449563068\
237004166743349575332571414531213^(1/2)-969307172645702191294727901537556391541\
0536016117759892021529642992683495643664556137309571711945537940735029573481401\
7332394837241626500473758714540155965225078832208913294387689/53385943935998479\
0690256081973739932861530598905308753065814558578383404169040438125662412103521\
8539710314651534830623271156633617725547078023995852747399059196736769140012981\
9851546333304280147885460412877966766150281518414974247504200643378810270501505\
7724560328017551607000000000000000000000000000000000000000000000*x^2*1116020447\
0430158243477258094593896691724377758068121075994885295995729258581369158912657\
0911164806615848958667799554457906560102770548341297739722826481342237493687697\
7364618614991849539075189758177005773972733825713027932579699745444956306823700\
4166743349575332571414531213^(1/2)+45641314204575682424714257997727019396886340\
5065454535876457351083791424667863480932868319172004293827888527588846260085535\
317584452746726840834966366835451250222929860178505683311/111220716533330164727\
1366837445291526794855414386059902220446997038298758685500912761796691882337195\
7729822190697563798481576320036928223079216658026557081373326534935708360379135\
7388194383916974761375860162430762813086496697863015633751340372521396878137025\
950068336989918125000000000000000000000000000000000000000000000*x^3*11160204470\
4301582434772580945938966917243777580681210759948852959957292585813691589126570\
9111648066158489586677995544579065601027705483412977397228264813422374936876977\
3646186149918495390751897581770057739727338257130279325796997454449563068237004\
166743349575332571414531213^(1/2))^2+1317/100*(1/155672683987773953386708220829\
0108894195809787320583774154452476612247108877807977891491061731865733820628875\
8230873213482695134390142127515599703919765042801619182950148008325276942010000\
0000000000000000000000000000000000000000000*x^2*1599486792969677552113947105768\
4162686640683095852126374118676864277271928630074814549516790519951557923110975\
7468701186005477189222981952614616340079840815971613732823884373463276836508530\
8571099408240358205471596286631020074284252285588897860826159293478062424856646\
2414141872998747147795123077053327156408667824739628712643135082628639201772373\
9935113936167880145041916584847699492307801978586526300252756665021892423324444\
5876002874474069542579538892833^(1/2)-16214851140432323251010428145912047356838\
5235142830789604469002020114674395944239472102334323327933572761825994108732401\
7794663224842502994341045645479842210834586797202203391738244701381407760056076\
336984594941245622427944731078839489624851668480875417576508353067312379/666452\
8304040323133808112940701734452766951289938385989216115360115529970262531172728\
9653293833131491346295732278625494168948828842909146922756808366600339988172388\
6766184889430320152118878571291420100149252279831786096258364285105118995374108\
6775663722825260103569359339225780416144644914634615438886315170278260308178630\
2679729510952663340718224972964140069950060434131910353208121794917491077719291\
7719819437591218430518519115001197697528976074807872013750000000000000000000000\
0000000000000000000000*x^3*1599486792969677552113947105768416268664068309585212\
6374118676864277271928630074814549516790519951557923110975746870118600547718922\
2981952614616340079840815971613732823884373463276836508530857109940824035820547\
1596286631020074284252285588897860826159293478062424856646241414187299874714779\
5123077053327156408667824739628712643135082628639201772373993511393616788014504\
1916584847699492307801978586526300252756665021892423324444587600287447406954257\
9538892833^(1/2))^2+57125600367528008501817356078992404253136047331290289680719\
1885678446409094149424800693825430810355183719393792899083618034111469232652203\
4461602579242499522185429921292462009954331751529551302073381496638652597310697\
5213199511661183217549510451131178240358860085598489066137524464777826849881598\
551403739528927522815390546563870027579244448245632691586669327/401354632359810\
8568818836030673353465632869814590182681872825918724896639960950532605660002238\
8704879280764453988407282632754037432538006547731438601929249406371825025935791\
9910953105319722983772810513763402972894149865943552744406114162750268386846947\
9024000383373364625910156250000000000000000000000000000000000000000000000000000\
0000000000000000000000000000000000000000*x^6, 176788722872062457922287907350449\
72834770611340100006782302438402005207492265010453/2500000000000000000000000000\
000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 56 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 57 Test 1 - Weifeng
>> input polynomial
x+2479/100
>> basis
[(x-581/100)*(x-853/100)*(x-1353/100)*(x-428/25)*(x-1737/100)*(x-3371/100)*(x-3471/100), -(x-581/100)*(x-853/100)*(x-1353/100)*(x-428/25)*(x-1737/100)*(x-3371/100)*(x-3471/100)]
memory used=11204.3MB, alloc=271.4MB, time=53.55
>> Time taken
1.110000
">> Sums of squares multipliers", [x+2479/100-4/122955891*x^2*(x-581/100)*(x-\
853/100)*(x-1353/100)*(x-428/25)*(x-1737/100)*(x-3371/100)*(x-3471/100)+4/
122955891*(x+1)^2*(x-581/100)*(x-853/100)*(x-1353/100)*(x-428/25)*(x-1737/100)*
(x-3371/100)*(x-3471/100), 4/122955891*x^2, 4/122955891*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 57 Test 1 - Weifeng

>> Test
Batch: 57 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+2479/100
>> basis
[(x-581/100)*(x-853/100)*(x-1353/100)*(x-428/25)*(x-1737/100)*(x-3371/100)*(x-3471/100), -(x-581/100)*(x-853/100)*(x-1353/100)*(x-428/25)*(x-1737/100)*(x-3371/100)*(x-3471/100)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 1.168586
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 57 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 57 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+2479/100
>> basis
[(x-581/100)*(x-853/100)*(x-1353/100)*(x-428/25)*(x-1737/100)*(x-3371/100)*(x-3471/100), -(x-581/100)*(x-853/100)*(x-1353/100)*(x-428/25)*(x-1737/100)*(x-3371/100)*(x-3471/100), -x^2+12752041/10000]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 1.147912
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 57 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 58 Test 1 - Weifeng
>> input polynomial
x+82/25
>> basis
[(x-221/50)*(x-529/50)*(x-293/25), (-x+221/50)*(x-529/50)*(x-293/25)]
>> Time taken
0.502000
">> Sums of squares multipliers", [x+82/25-1311/647543*x^2*(x-221/50)*(x-529/50
)*(x-293/25)-1311/647543*(x+1)^2*(-x+221/50)*(x-529/50)*(x-293/25), 1311/647543
*x^2, 1311/647543*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 58 Test 1 - Weifeng

>> Test
Batch: 58 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+82/25
>> basis
[(x-221/50)*(x-529/50)*(x-293/25), (-x+221/50)*(x-529/50)*(x-293/25)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -39.643246
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 58 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 58 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+82/25
>> basis
[(x-221/50)*(x-529/50)*(x-293/25), (-x+221/50)*(x-529/50)*(x-293/25), -x^2+117649/625]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 2.347563
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9677
time= 0.117000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [82/25*(1/
2500000000000000000000000000000000000000000*20023583096278672729470443265585525\
818599488923647441823621348913680925697182935571191^(1/2)-266429908113545688013\
67097660447560534915879366446178222316400306862833933849398224627/8209669069474\
2558190828817388900655856257904586954511476847530546091795358450035841883100000\
0000000000000000000000000000000000000*x*200235830962786727294704432655855258185\
99488923647441823621348913680925697182935571191^(1/2)+2808970760068132995749478\
91694499606909696282286441283931859273547519313195108446080695199/1501768732220\
9004547102832449189144363949616692735581367716011685260694272887201678393250000\
0000000000000000000000000000000000000000000*x^2*2002358309627867272947044326558\
5525818599488923647441823621348913680925697182935571191^(1/2))^2+82/25*(1/61572\
5180210569186431216130416754918921934284402158836076356479095688465188375268814\
1232500000000000000000000000000000000000000000000*x*230239244100142033832509468\
7804802840461877218492628246505276129447214234457240543502866003744082532906132\
7459397613682237923565621459106743786463264496822398256974623430279909513574070\
2530669716449311809387052608263117882530331600234085591670597045063129087365191\
7^(1/2)-24572109015334244365665373493396037448934314354208549568531377163757084\
9679244285227675433885141543439626039706712361687053116426040352729835437624375\
48629757143228088977534227/2302392441001420338325094687804802840461877218492628\
2465052761294472142344572405435028660037440825329061327459397613682237923565621\
4591067437864632644968223982569746234302799095135740702530669716449311809387052\
6082631178825303316002340855916705970450631290873651917000000000000000000000000\
000000000000000000000*x^2*23023924410014203383250946878048028404618772184926282\
4650527612944721423445724054350286600374408253290613274593976136822379235656214\
5910674378646326449682239825697462343027990951357407025306697164493118093870526\
082631178825303316002340855916705970450631290873651917^(1/2))^2+696289266845879\
4337906449970186463460736171962338523776443725470756392738606281648582138423743\
0337483797968472427103638990543616401519531117385218190473940256900145579238907\
9616719782775318777127977683670313612271265227721273163715383865747129297020363\
9248578204672534951321/26949383922200985552311133622996015465892658471196158683\
9566797534723783234632282489880973547130894130360566602699733428540588208217820\
7092725891739746115525453285258988007488548132812500000000000000000000000000000\
0000000000000000000000000000000000000000000000000000000000000000*x^4, 149342169\
705485525426011946265894404427055038619790819505778725537665152740212001/781250\
00000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 58 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 59 Test 1 - Weifeng
>> input polynomial
x+701/100
>> basis
[(x-469/100)*(x-122/25)*(x-1219/100), (-x+469/100)*(x-122/25)*(x-1219/100)]
memory used=11460.3MB, alloc=273.6MB, time=54.85
>> Time taken
0.817000
">> Sums of squares multipliers", [x+701/100-1385/204096*x^2*(x-469/100)*(x-122
/25)*(x-1219/100)-1385/204096*(x+1)^2*(-x+469/100)*(x-122/25)*(x-1219/100), 
1385/204096*x^2, 1385/204096*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 59 Test 1 - Weifeng

>> Test
Batch: 59 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+701/100
>> basis
[(x-469/100)*(x-122/25)*(x-1219/100), (-x+469/100)*(x-122/25)*(x-1219/100)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -22.099119
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 59 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 59 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+701/100
>> basis
[(x-469/100)*(x-122/25)*(x-1219/100), (-x+469/100)*(x-122/25)*(x-1219/100), -x^2+2013561/10000]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 1.606687
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9862
time= 0.120000secs
>> Time taken
0.007000
">> Sums of squares multipliers", [701/100*(1/
10000000000000000000000000000000000000000000*2421328963854409025301743724767488\
35747702740762697425156777603415396438883902570347695^(1/2)-1911078112372372864\
9327908857556343934302869934152618926171866883276484244170048271122421/16973516\
0366194072673652235106200933859139621274650895034901099994192903657615701813734\
1950000000000000000000000000000000000000000000*x*242132896385440902530174372476\
748835747702740762697425156777603415396438883902570347695^(1/2)+151664300718455\
2975997741674911656819787053399203662542784143438441310699479176935441043493/24\
2132896385440902530174372476748835747702740762697425156777603415396438883902570\
3476950000000000000000000000000000000000000000000000000*x^2*2421328963854409025\
30174372476748835747702740762697425156777603415396438883902570347695^(1/2))^2+
701/100*(1/23796869483340408988846043361889370927051374902706055483893134219185\
8450927977213942855341390000000000000000000000000000000000000000000000*x*342825\
1876386889915583151378778706824688450675429682857863157995801306633907055720502\
7021412328405436383575591504952733392301466853499929597940576229527697460767929\
8161386217817886267439091019401788656549966396332692732656866752473072596193281\
6082802243945297042308022364253^(1/2)-57164800909817895655964403470308566295276\
0961030939375954777067932465768884567264718644783621672058657645745526269482348\
02771266269928625962170022848849698343333541911971411543447/2445258114398637600\
2732891432087780489931887841866496846384864449367379699765019404441527398237093\
7492036915773929762720344518308512838299557350757699912250076804064309119984178\
2355687867981593450703684379218233471417493986210787967707533475617748075780274\
81957368617857650000000000000000000000000000000000000000000000*x^2*342825187638\
6889915583151378778706824688450675429682857863157995801306633907055720502702141\
2328405436383575591504952733392301466853499929597940576229527697460767929816138\
6217817886267439091019401788656549966396332692732656866752473072596193281608280\
2243945297042308022364253^(1/2))^2+47548081912403370312258001553627584550225836\
3083609965905174499736964506506149190257734022274124436707241169076505891778502\
1062595457052453807971451313245827880342001481604354017088758376002758772612011\
1844578919948998145646466129209406752432176725096760426086655956864336143/72031\
5728669042582111203789925967701608637501086112920581688386087226836195985469144\
2547481598531198183479585173256494401828110251606288341470289474359634174815181\
5391886200393553763500000000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000000*x^4, 42470439941378079546733662145562\
85113414449547163648712167613088805251675216005541/2500000000000000000000000000\
000000000000000000000000000000000000000000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 59 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 60 Test 1 - Weifeng
>> input polynomial
x+121/10
>> basis
[(x-73/10)*(x-473/50)*(x-1351/100)*(x-462/25)*(x-253/10), -(x-73/10)*(x-473/50)*(x-1351/100)*(x-462/25)*(x-253/10)]
>> Time taken
0.770000
">> Sums of squares multipliers", [x+121/10-155/20531059*x^2*(x-73/10)*(x-473/
50)*(x-1351/100)*(x-462/25)*(x-253/10)+155/20531059*(x+1)^2*(x-73/10)*(x-473/50
)*(x-1351/100)*(x-462/25)*(x-253/10), 155/20531059*x^2, 155/20531059*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 60 Test 1 - Weifeng

>> Test
Batch: 60 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+121/10
>> basis
[(x-73/10)*(x-473/50)*(x-1351/100)*(x-462/25)*(x-253/10), -(x-73/10)*(x-473/50)*(x-1351/100)*(x-462/25)*(x-253/10)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.480318
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 60 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 60 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+121/10
>> basis
[(x-73/10)*(x-473/50)*(x-1351/100)*(x-462/25)*(x-253/10), -(x-73/10)*(x-473/50)*(x-1351/100)*(x-462/25)*(x-253/10), -x^2+74529/100]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.597679
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19948
time= 0.127000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [121/10*(1/
25000000000000000000000000000000000000000000*1964387115271483127146346172986172\
807443615207254077386055046881586884434076051138496303^(1/2)-660944938049582306\
1222054365893660035681421683246854921455280336177689659248312279159647/11884542\
0473924729192353943465663454850338720038871681856330336336006508261601093879026\
3315000000000000000000000000000000000000000000*x*196438711527148312714634617298\
6172807443615207254077386055046881586884434076051138496303^(1/2)+45840252713175\
830203175085699333731650674889936743703541191684884145501376357162791329/982193\
5576357415635731730864930864037218076036270386930275234407934422170380255692481\
5150000000000000000000000000000000000000000000*x^2*1964387115271483127146346172\
986172807443615207254077386055046881586884434076051138496303^(1/2)-832924870977\
522955082184461350105461793473748496052642697081744894249537893568342737/785754\
8461085932508585384691944691229774460829016309544220187526347537736304204553985\
2120000000000000000000000000000000000000000000*x^3*1964387115271483127146346172\
986172807443615207254077386055046881586884434076051138496303^(1/2))^2+121/10*(1
/118845420473924729192353943465663454850338720038871681856330336336006508261601\
09387902633150000000000000000000000000000000000000000000*x*93152837590639854283\
4054414649312526959306841216498773293671899158513349442347635215517762005713174\
5427050547082655033560877821277081583009226728910668235543031721934484877889758\
4543146745152660946424108767224581403930310619611806956067490851459062235443160\
79757702^(1/2)-1387592877682488187410779065157838038459603773138693733552175456\
8494675189761264569341979944734767961678532529642419461272511433542046968064034\
52239428715189778069015526355179/1863056751812797085668108829298625053918613682\
4329975465873437983170266988846952704310355240114263490854101094165310067121755\
6425541631660184534578213364710860634438689697557795169086293490305321892848217\
5344491628078606212392236139121349817029181244708863215951540400000000000000000\
00000000000000000000000000*x^2*931528375906398542834054414649312526959306841216\
4987732936718991585133494423476352155177620057131745427050547082655033560877821\
2770815830092267289106682355430317219344848778897584543146745152660946424108767\
22458140393031061961180695606749085145906223544316079757702^(1/2)+3238884782744\
2060334810802139059499713568988109680221186124618561169876073281440110843208185\
6913779339230724949143741841183024763813235291084995955394916332083307006862596\
749686651/186305675181279708566810882929862505391861368243299754658734379831702\
6698884695270431035524011426349085410109416531006712175564255416316601845345782\
1336471086063443868969755779516908629349030532189284821753444916280786062123922\
3613912134981702918124470886321595154040000000000000000000000000000000000000000\
0000000000*x^3*9315283759063985428340544146493125269593068412164987732936718991\
5851334944234763521551776200571317454270505470826550335608778212770815830092267\
2891066823554303172193448487788975845431467451526609464241087672245814039303106\
1961180695606749085145906223544316079757702^(1/2))^2+121/10*(1/2371040740046951\
0611053559746351412140651603085833919799395309808582424121637100896599838206619\
2171797234257983732026033241849363212388109413920977336387199791823839152421462\
391700000000000000000000000000000000000000000000000*x^2*15669372098796494216146\
6533553867367881594565212287573391504445485673474075068207224909129009095684570\
8029229032276478878620634970402266859468569496049612457873833205065160669169168\
5990210472347841504039439396205079017628969446902900814445470171548332226170166\
4827129254124501915081710547584257710948311933438168546897169097911296571585902\
5626279056713615263174690961763860815762748281454567782873216306995544893884971\
712358550739601025748637253^(1/2)-184144995502467567000268604975249607063529672\
4059706576730225931398071794795829395770567364287293783806426496702935837395423\
8976530319240299830646341778334178715992874528357215096393891750300309395555133\
951644162801300320308697026086966244691228436795292253972258457/125354976790371\
9537291732268430938943052756521698300587132035563885387792600545657799273032072\
7654765664233832258211831028965079763218134875748555968396899662990665640521285\
3533533487921683778782732032315515169640632141031755575223206515563761372386657\
8093613318617034032996015320653684380674061687586495467505348375177352783290372\
5726872205010232453708922105397527694110886526101986251636542262985730455964359\
1510797736988684059168082059890980240000000000000000000000000000000000000000000\
000*x^3*15669372098796494216146653355386736788159456521228757339150444548567347\
4075068207224909129009095684570802922903227647887862063497040226685946856949604\
9612457873833205065160669169168599021047234784150403943939620507901762896944690\
2900814445470171548332226170166482712925412450191508171054758425771094831193343\
8168546897169097911296571585902562627905671361526317469096176386081576274828145\
4567782873216306995544893884971712358550739601025748637253^(1/2))^2+31432831364\
6761572564911187156198743440699329663033024177496256981572278880011166403496426\
6249725357493549394542385126522976674392697956624459041164384365432293377617155\
0673618212908520563936044199869846124706557626428606928358275511352094606634697\
3115704792004220326588500772680682257109412726494039255612604459710960931978200\
099286401785682200348948096861/528691787842876498551780041089545492255667293419\
3390466970586382140887950924311458113103980752828838597716336022330280190215208\
5086096578740036420051368830078651394648110760091268673603843264716690497296510\
1835548728720629524857678617726219388046837981005697632452807200000000000000000\
0000000000000000000000000000000000000000000000000000000000000000000000000000000\
00000*x^6, 
299877479559185674407502638094801741044308774001904767861194888212190615596521/
156250000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 60 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 61 Test 1 - Weifeng
>> input polynomial
x+609/100
>> basis
[(x-201/100)*(x-211/100)*(x-511/100)*(x-141/20)*(x-1003/100), -(x-201/100)*(x-211/100)*(x-511/100)*(x-141/20)*(x-1003/100)]
memory used=11699.2MB, alloc=273.6MB, time=56.11
>> Time taken
1.061000
">> Sums of squares multipliers", [x+609/100-773/736743*x^2*(x-201/100)*(x-211/
100)*(x-511/100)*(x-141/20)*(x-1003/100)+773/736743*(x+1)^2*(x-201/100)*(x-211/
100)*(x-511/100)*(x-141/20)*(x-1003/100), 773/736743*x^2, 773/736743*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 61 Test 1 - Weifeng

>> Test
Batch: 61 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+609/100
>> basis
[(x-201/100)*(x-211/100)*(x-511/100)*(x-141/20)*(x-1003/100), -(x-201/100)*(x-211/100)*(x-511/100)*(x-141/20)*(x-1003/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.875843
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 61 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 61 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+609/100
>> basis
[(x-201/100)*(x-211/100)*(x-511/100)*(x-141/20)*(x-1003/100), -(x-201/100)*(x-211/100)*(x-511/100)*(x-141/20)*(x-1003/100), -x^2+1447209/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.228225
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19879
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [609/100*(1/
125000000000000000000000000000000000000000000*201634328355944723643413350946499\
75776771518561046796230409029507510044477571239628773495^(1/2)-3607993059952262\
905881340455749940256075000438954130273288210751995401028584553944200419/767470\
6623048146043677420670401147030033659252298436815199436856296010679275553083701\
911534375000000000000000000000000000000000000000*x*2016343283559447236434133509\
4649975776771518561046796230409029507510044477571239628773495^(1/2)+72853918121\
303277562302502535587662818324950076660977644906779071363156041286430153579/967\
8447761085346734883840845431988372850328909302462190596334163604821349234195021\
81127760000000000000000000000000000000000000000000*x^2*201634328355944723643413\
35094649975776771518561046796230409029507510044477571239628773495^(1/2)-2084353\
436789157204809174216932438979959028007919392076280076933148207850580883981867/
6452298507390231156589227230287992248566885939534974793730889442403214232822796\
68120751840000000000000000000000000000000000000000000*x^3*201634328355944723643\
41335094649975776771518561046796230409029507510044477571239628773495^(1/2))^2+
609/100*(1/24559061193754067339767746145283670496107709607354997808638197940147\
2341736817698678461169100000000000000000000000000000000000000000000*x*539045434\
7147480744967074225700256681179816875003825856160351711452385266061741611165006\
6907184028949605518750790934815250961507120679845303556774598140239019787100180\
0825426564050207300730279955905956545514929092425861440577521133355205882185904\
0422265504691622322485^(1/2)-46215523581316113003187216418986781662708677484159\
4816435977771386883108279966016616422340521116768871920033535912392074467070467\
931666145099188875436563311002183061606348653211/646854521657697689396048907084\
0308017415780250004591027392422053742862319274089933398008028862083473952662250\
0949121778301153808544815814364268129517768286823744520216099051187686024876087\
6335947087147854617914910911033728693025360026247058623084850671860562994678698\
200000000000000000000000000000000000000000000*x^2*53904543471474807449670742257\
0025668117981687500382585616035171145238526606174161116500669071840289496055187\
5079093481525096150712067984530355677459814023901978710018008254265640502073007\
3027995590595654551492909242586144057752113335520588218590404222655046916223224\
85^(1/2)+2858527419005454965429053757629068710609485290554704186640019416529001\
5310348817702725875646352124285972193055419218893196827385296665123588000453066\
5851366017666645882231033591/86247269554359691919473187611204106898877070000061\
2136985656273832381642569878657786401070514944463193688300012654957044015384113\
9308775248569083935702438243165936028813206825024803316811684479294495304728238\
8654788137830492403381336832941149744646756248075065957159760000000000000000000\
00000000000000000000000000*x^3*539045434714748074496707422570025668117981687500\
3825856160351711452385266061741611165006690718402894960551875079093481525096150\
7120679845303556774598140239019787100180082542656405020730073027995590595654551\
49290924258614405775211333552058821859040422265504691622322485^(1/2))^2+609/100
*(1/320805751149579324129025506334963609369459918315478363726693869256224038388\
3612918989675867059206248569000845334316902644330333153770829088735208499533341\
06166540544825220729903523600000000000000000000000000000000000000000000*x^2*133\
4729029428303160707211880434376577362944421665264237581803555910164564085283576\
3057971200461158219801544351233395400088765098702057935770882382818364855537282\
7545080259561547664921358564344718728239471976220217254818183160654963238969676\
5415365509984162226566202859497403815089283341223917570446127478003488257191894\
1149503310699930895030052310200827019861909324014138788371956424575071313071960\
5770738658241972313589583550328052235352809629066^(1/2)-22920447428888151711912\
1117061735010425975176709697122576643685188138312347709705983258331855662379006\
8638305618328022458238507801913686250112475863023377437378780190896417525602371\
0090794213982967036821909683204300275382549425357016960379790053704607298037539\
96273/8898193529522021071381412536229177182419629477768428250545357039401097093\
9018905087053141336407721465343629008222636000591767324680386238472549218789099\
0369152183633868397076984432809057095631458188263146508134781698787887737699754\
9264645102769103399894414843774685729982692100595222274826117136307516520023255\
0479459607663355404666205966867015401338846799079395493427591922479709497167142\
0871464038471591054946482090597223668853681569018730860440000000000000000000000\
0000000000000000000000*x^3*1334729029428303160707211880434376577362944421665264\
2375818035559101645640852835763057971200461158219801544351233395400088765098702\
0579357708823828183648555372827545080259561547664921358564344718728239471976220\
2172548181831606549632389696765415365509984162226566202859497403815089283341223\
9175704461274780034882571918941149503310699930895030052310200827019861909324014\
1387883719564245750713130719605770738658241972313589583550328052235352809629066
^(1/2))^2+143593080602164231691699251734276113656602359004138992296936112792291\
4310222401636098413790809016150157055712661732515309793835236376527198987891823\
2972953244583607278110424077079646782923863870322466182713433549210804649251908\
6435248173775928322160520438837846562702174857130894311232245019727521367679447\
1421969719117208864240012870796551767323031/10651013278572068752945692371071871\
4170560429785621052662540131364477695273738085667088172946606993737425051745941\
3787166064786607231979156230762011720616237218628144202003797359837937570203405\
1626335751798611451070953225200230157743062066755792582910594676044049335936000\
0000000000000000000000000000000000000000000000000000000000000000000000000000000\
000000000*x^6, 3689072689065695198194497760409010537167489712176242858373019490\
6929784877424729/39062500000000000000000000000000000000000000000000000000000000\
000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 61 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 62 Test 1 - Weifeng
>> input polynomial
x+731/100
>> basis
[(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100), -(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100)]
memory used=11990.8MB, alloc=305.7MB, time=57.61
>> Time taken
1.231000
">> Sums of squares multipliers", [x+731/100-286/10117365*x^2*(x-199/100)*(x-63
/20)*(x-523/50)*(x-611/50)*(x-1889/100)+286/10117365*(x+1)^2*(x-199/100)*(x-63/
20)*(x-523/50)*(x-611/50)*(x-1889/100), 286/10117365*x^2, 286/10117365*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 62 Test 1 - Weifeng

>> Test
Batch: 62 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+731/100
>> basis
[(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100), -(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.612888
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 62 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 62 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+731/100
>> basis
[(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100), -(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100), -x^2+4363921/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.260784
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20009
time= 0.115000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [731/100*(3/
100000000000000000000000000000000000000000000*159225780920424375125172542662224\
6308432524040342993313463107595386717298853852064230885^(1/2)-45555245076473285\
2647420184110464245283823724611298368993320136005618526826036607019581/17459106\
8779245327324751693029129307719626261023609216821229747834153551819324878842916\
540250000000000000000000000000000000000000000*x*1592257809204243751251725426622\
246308432524040342993313463107595386717298853852064230885^(1/2)+169143952170089\
892754362858628628048846330635116251670945831695436668466829987017148191/636903\
1236816975005006901706488985233730096161371973253852430381546869195415408256923\
54000000000000000000000000000000000000000000000*x^2*159225780920424375125172542\
6622246308432524040342993313463107595386717298853852064230885^(1/2)-13621945111\
3556083035470634207752127436400613924197080819691821581375657173005269428363/19\
1070937104509250150207051194669557011902884841159197615572911446406075862462247\
70770620000000000000000000000000000000000000000000000*x^3*159225780920424375125\
1725426622246308432524040342993313463107595386717298853852064230885^(1/2))^2+
731/100*(1/13967285502339626185980135442330344617570100881888737345698379826732\
2841455459903074333232200000000000000000000000000000000000000000000*x*156058096\
9189056823015793941217982683021809216271618639697191201753271200758244632438401\
5457701026458586610471316897069852278583896513594474361166830914035542147315333\
2501823126260663169038410674191238326976098252236768860403714319017076524706931\
0340172528240427372733^(1/2)-23750159499267343905806530315295322327278384332321\
9087434216840591916894430654528104464995440292264228254872658313709138895798203\
5390180684847278366448291519987426022292428840443/31211619383781136460315878824\
3596536604361843254323727939438240350654240151648926487680309154020529171732209\
4263379413970455716779302718894872233366182807108429463066650036462525213263380\
7682134838247665395219650447353772080742863803415304941386206803450564808547454\
66000000000000000000000000000000000000000000000*x^2*156058096918905682301579394\
1217982683021809216271618639697191201753271200758244632438401545770102645858661\
0471316897069852278583896513594474361166830914035542147315333250182312626066316\
9038410674191238326976098252236768860403714319017076524706931034017252824042737\
2733^(1/2)+19753335555160782353300333531054196645749439463657748683915016349294\
3188678858172862936494971564073151546470101790436310828345890510369386836666168\
73053659087283602093782550703/9363485815134340938094763647307896098130855297629\
7118381831472105196272045494677946304092746206158751519662827901382419113671503\
3790815668461670009854842132528838919995010938757563979014230464045147429961856\
5895134206131624222859141024591482415862041035169442564236398000000000000000000\
00000000000000000000000000*x^3*156058096918905682301579394121798268302180921627\
1618639697191201753271200758244632438401545770102645858661047131689706985227858\
3896513594474361166830914035542147315333250182312626066316903841067419123832697\
60982522367688604037143190170765247069310340172528240427372733^(1/2))^2+731/100
*(1/294031712735448676897448593765428517035675923355964144955975504604958891432\
7137434618941428150388934396263077144663394672800216695981927832286757854720423\
5830362865344223613042780974000000000000000000000000000000000000000000000*x^2*
1710011370582499472435766231666104028435221662527797788804878531711212284597231\
5132430171606763904096558252994313292456134923311014315083100717109448282672472\
8283255668159360865966919569302225965958543887301946184077205647299581370890072\
4099738503317773827834979329212693747076706436072720893350771720681411467495679\
8972444301079050012705392129806419794453566829695891119146407839160262952484787\
0790341294444635002576666031677102589372105150090435458^(1/2)-36907671698603235\
6874652867768265340740629647647919802132032905336621053515054424626519027649864\
1141915438713540883263337480579346447304287319009421242443787820235450758941496\
2642864567866694212530780361845259496799787890100952319969233646140180305416074\
4750323897673/22800151607766659632476883088881387045802955500370637184065047089\
4828304612964201765735621423518721287443373257510566081798977480190867774676228\
1259771022996377110075575458144879558927590696346212780585164025949121029408630\
6610849452009654663180044236984371133057722835916627689419147636278578010289609\
0854862332757319632590681054000169405228397418930592714224395945214921952104522\
1368393664638277204550592595133367688880422361367858294735334539139440000000000\
00000000000000000000000000000000000*x^3*171001137058249947243576623166610402843\
5221662527797788804878531711212284597231513243017160676390409655825299431329245\
6134923311014315083100717109448282672472828325566815936086596691956930222596595\
8543887301946184077205647299581370890072409973850331777382783497932921269374707\
6706436072720893350771720681411467495679897244430107905001270539212980641979445\
3566829695891119146407839160262952484787079034129444463500257666603167710258937\
2105150090435458^(1/2))^2+20199667769919266544329411971156860820848755055113096\
0137565556371804723414133069566554144358978964811166915733199015863951029102228\
7947955116711378503475501617842319903972479708038650835394752418199988842042480\
5809131982173568653159588721061639420444874198447384619418997929529651658136960\
00024159862163818324071788152432798404344959100277506490551959/2791554183878488\
9833522315673589547562918970399420032943749284029516050222526102600178993504342\
1647393693492220048030767318985427337867247910526049430502073016256848349480498\
6081913553433783340495884049952360072336637716514795027099472972970363710838960\
3085445029635361600000000000000000000000000000000000000000000000000000000000000\
0000000000000000000000000000000*x^6, 441646628900258344473786043626328156984589\
20821038078570517630067294112556844269339/1000000000000000000000000000000000000\
0000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 62 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 63 Test 1 - Weifeng
>> input polynomial
x+1131/100
>> basis
[(x-619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5), (-x+619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5)]
memory used=12267.6MB, alloc=305.7MB, time=59.07
>> Time taken
1.123000
">> Sums of squares multipliers", [x+1131/100-109/5370347*x^2*(x-619/100)*(x-\
193/25)*(x-197/20)*(x-93/5)*(x-98/5)-109/5370347*(x+1)^2*(-x+619/100)*(x-193/25
)*(x-197/20)*(x-93/5)*(x-98/5), 109/5370347*x^2, 109/5370347*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 63 Test 1 - Weifeng

>> Test
Batch: 63 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+1131/100
>> basis
[(x-619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5), (-x+619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.303632
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 63 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 63 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+1131/100
>> basis
[(x-619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5), (-x+619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5), -x^2+10609/25]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.547303
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19730
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1131/100*(3/
6250000000000000000000000000000000000000000*29912639261668118467698278429417468\
289164123037014214030848578080099022773866746991365^(1/2)-140992238379227649490\
1184569865467901437044989271239515497368062511071969282992215954143/12686698126\
8549907451125323388766837381417336830736535258336531782219980339662340677126806\
25000000000000000000000000000000000000000*x*29912639261668118467698278429417468\
289164123037014214030848578080099022773866746991365^(1/2)+148092123548667866441\
178598561683669906483460342932112910479789054847902292835558047/149563196308340\
5923384913921470873414458206151850710701542428904004951138693337349568250000000\
0000000000000000000000000000000000*x^2*2991263926166811846769827842941746828916\
4123037014214030848578080099022773866746991365^(1/2)-48206087152355890279187015\
381176612428922308009400084154122428904568594430327093203/179475835570008710806\
1896705765048097349847382220852841850914684805941366432004819481900000000000000\
00000000000000000000000000000*x^3*299126392616681184676982784294174682891641230\
37014214030848578080099022773866746991365^(1/2))^2+1131/100*(1/5074679250741996\
2980450129355506734952566934732294614103334612712887992135864936270850722500000\
000000000000000000000000000000000000*x*2878174506593457075029566517838644016082\
1478176434113555826745898158958021521700335669600685046673137947432339048237208\
2839897187380791210908630444416029614866605385969298234113702026329248007174893\
313797170950825458433313462840359196861230767229330918872774762^(1/2)-383375381\
4366267279824166377960331630195614232408045203873196072226234975076665829792761\
0420627455985171697435887733440982011333030573718351571636494049868958508095391\
5261/20558389332810407678782617984561742972015341554595795397019104212970684301\
0869288111925719178904808128195945278915980059171355133843422293506164603154306\
8677618609899780701672240728759494628622677809384265506791610417380810448859708\
54900879119449522084909124830000000000000000000000000000000000000000000*x^2*287\
8174506593457075029566517838644016082147817643411355582674589815895802152170033\
5669600685046673137947432339048237208283989718738079121090863044441602961486660\
5385969298234113702026329248007174893313797170950825458433313462840359196861230\
767229330918872774762^(1/2)+184033409768860375521180669839992769462692697240549\
6301886075251394822048817326352816892972489154954102349198160056267571989738892\
724997873548957893573376660382570475853366645399/345380940791214849003547982140\
6372819298577381172093626699209507779074962582604040280352082205600776553691880\
6857884649940787662485694945309035653329923553783992646316315788093644243159509\
7608609871976556605140990550119976155408431036233476920675197102647329714400000\
00000000000000000000000000000000000000000000*x^3*287817450659345707502956651783\
8644016082147817643411355582674589815895802152170033566960068504667313794743233\
9048237208283989718738079121090863044441602961486660538596929823411370202632924\
8007174893313797170950825458433313462840359196861230767229330918872774762^(1/2)
)^2+1131/100*(1/343640511841346986355475112071194607705797610930494539942638294\
5618022918313061375329840359854672408900134231949758407844918783182832456815531\
7178152925859576019612940284287710000000000000000000000000000000000000000000000
*x^2*90594799303680608875576564856297792169817143357552634085484550933683267318\
6345921443469264149265917125632582738732791568770598014607804671952288835837946\
1003432170115390133586537282155436612074379104080804131446998488959004794338227\
9257517179827324756170342430751937534185327982465321794341690173366404438459849\
4998011256170243492158905707858309508152245183288282395210296344966222594712919\
84532107791255079344900834267157274644301572677^(1/2)-5540073805889335614804668\
1999538817316150108011109580147723023708622174401255875993724891912053400674220\
7323474445467163685639496042175894100641655881873154586729427462585068583194278\
7051262509515427236125992003205877403401145927245223880086031989124491202589719
/362379197214722435502306259425191168679268573430210536341938203734733069274538\
3685773877056597063668502530330954931166275082392058431218687809155343351784401\
3728680461560534346149128621746448297516416323216525787993955836019177352911703\
0068719309299024681369723007750136741311929861287177366760693465617753839397999\
2045024680973968635622831433238032608980733153129580841185379864890378851679381\
2843116502031737960333706862909857720629070800000000000000000000000000000000000\
00000000000*x^3*905947993036806088755765648562977921698171433575526340854845509\
3368326731863459214434692641492659171256325827387327915687705980146078046719522\
8883583794610034321701153901335865372821554366120743791040808041314469984889590\
0479433822792575171798273247561703424307519375341853279824653217943416901733664\
0443845984949980112561702434921589057078583095081522451832882823952102963449662\
2259471291984532107791255079344900834267157274644301572677^(1/2))^2+12531786685\
2231794307484175576085813558752294151131659259518095950343786835176638688002083\
1669728870966833809710122152558545341860228675915680163761200692389983776462244\
5937695728767552704993453752028108989648659432425715808555758117353257482341770\
9671996604420771167232074367664253268750959416327156949850779674894973709590122\
8411923096255634063055448381283/19684558276017525999557266111911159192107330648\
8597206364079886751473461993971025623330125180008580200089604969210712230711910\
7922162607126045059004098020516360780730500342811394408856966288017743066150758\
3201779468316234433718954295710900553741136750242581591872960000000000000000000\
0000000000000000000000000000000000000000000000000000000000000000000000000000000\
00*x^6, 24636002375092905559284274841619606925211998175765431826110696913499924\
97692480891/6250000000000000000000000000000000000000000000000000000000000000000\
00000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 63 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 64 Test 1 - Weifeng
>> input polynomial
x+27/100
>> basis
[(x-383/100)*(x-207/50)*(x-44/5)*(x-21/2)*(x-1383/100), -(x-383/100)*(x-207/50)*(x-44/5)*(x-21/2)*(x-1383/100)]
>> Time taken
0.600000
">> Sums of squares multipliers", [x+27/100-(x-383/100)*(x-207/50)*(x-44/5)*(x-\
21/2)*(x-1383/100)*(200000000/5435773860219*(x-383/100)*(x-207/50)*(x-44/5)*(x-\
21/2)*(x-1383/100)-981800000000/1811924620073)^2+(x-383/100)*(x-207/50)*(x-44/5
)*(x-21/2)*(x-1383/100)*(-200000000/5435773860219*(x-383/100)*(x-207/50)*(x-44/
5)*(x-21/2)*(x-1383/100)-981800000000/1811924620073)^2, (200000000/
5435773860219*(x-383/100)*(x-207/50)*(x-44/5)*(x-21/2)*(x-1383/100)-\
981800000000/1811924620073)^2, (-200000000/5435773860219*(x-383/100)*(x-207/50)
*(x-44/5)*(x-21/2)*(x-1383/100)-981800000000/1811924620073)^2]
>> Degree size
15
>> Succeeds Weifeng Batch: 64 Test 1 - Weifeng

>> Test
Batch: 64 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+27/100
>> basis
[(x-383/100)*(x-207/50)*(x-44/5)*(x-21/2)*(x-1383/100), -(x-383/100)*(x-207/50)*(x-44/5)*(x-21/2)*(x-1383/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -14.708335
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 64 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 64 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+27/100
>> basis
[(x-383/100)*(x-207/50)*(x-44/5)*(x-21/2)*(x-1383/100), -(x-383/100)*(x-207/50)*(x-44/5)*(x-21/2)*(x-1383/100), -x^2+2505889/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 3.770149
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19733
time= 0.115000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [(1/
25000000000000000000000000000000000000000000*3707207767971743971958521610554374\
958952015458339105930419810706493234665943604765462110^(1/2)-136817181309834894\
0713825633190003980247212329648053880859904025266143178241614327759541/14828831\
0718869758878340864422174998358080618333564237216792428259729386637744190618484\
400000000000000000000000000000000000000000000*x*3707207767971743971958521610554\
374958952015458339105930419810706493234665943604765462110^(1/2)+470749256039816\
587295841461973188024992805390985592779892151569216108935616991068197821/278040\
5825978807978968891207915781219214011593754329447814858029869925999457703574096\
58250000000000000000000000000000000000000000000*x^2*370720776797174397195852161\
0554374958952015458339105930419810706493234665943604765462110^(1/2)-27363047638\
0510924473144225368528827771797814766815527737511368681997271189346566803/37072\
0776797174397195852161055437495895201545833910593041981070649323466594360476546\
2110000000000000000000000000000000000000000000*x^3*3707207767971743971958521610\
554374958952015458339105930419810706493234665943604765462110^(1/2))^2+(1/444864\
9321566092766350225932665249950742418550006927116503772847791881599132325718554\
53200000000000000000000000000000000000000000000*x*11440526619386261797067137314\
4588049743571133001659196659188689255103774111753948259532451897417497178141039\
0878126979249598105661259637199181031905821229668597467783774281040505389007459\
45966974347710243905358609018046381529349649999147029795876588618890836516898^(
1/2)-12400763432778661145911996106882773310389389480331360429199134619562232018\
0275979347926894147172792430632375534146326257863284037008032528469456372175958\
9328490630282131959439/28601316548465654492667843286147012435892783250414799164\
7971723137759435279384870648831129743543742945352597719531744812399526415314909\
2997952579764553074171493669459435702601263472518648649174358692756097633965225\
4511595382337412499786757448969147154722709129224500000000000000000000000000000\
00000000000000*x^2*114405266193862617970671373144588049743571133001659196659188\
6892551037741117539482595324518974174971781410390878126979249598105661259637199\
1810319058212296685974677837742810405053890074594596697434771024390535860901804\
6381529349649999147029795876588618890836516898^(1/2)+45932456705379957677864976\
3633690146623831407930437565109157357662606003569276328440505858837443229021418\
5586254573099511164698134838905274270050980232380634288119450130285084663/23834\
4304570547120772232027384558436965773193753456659706643102614799529399487392207\
3592747862864524544604980996097873436662720127624244164960483137127561809578057\
8828630855010528937655405409786322439634146949710212092996151947843749822297874\
1409559622689242743537500000000000000000000000000000000000000000000000*x^3*1144\
0526619386261797067137314458804974357113300165919665918868925510377411175394825\
9532451897417497178141039087812697924959810566125963719918103190582122966859746\
7783774281040505389007459459669743477102439053586090180463815293496499991470297\
95876588618890836516898^(1/2))^2+(1/7715056273771719000962430210511135025620359\
5045705959263696109581679915092171582756933227085950677597486495365090524368751\
6133805294940620969992946613095046042173792895112560295000000000000000000000000\
0000000000000000000000*x^2*6033138196328450618535993775973867619138185081239891\
6724624385759814889882380477059016678703921682553135530933972630724069719772622\
0419882290625665924615141114804704219418474135347448247605439584752038331288139\
2349347828519523861199903032614575198489158814041590135656568209511256970170333\
5093717827887146858486167291474831428201546513592641040878738883863163087821835\
490031534169110629869605036351714209428114618737993580306689221600677681573^(1/
2)-2988372037343622308462845600752517347121445073430960609696916441304742400561\
1942330938085098091599009302083610103480979204195839571063566914833051225186588\
5815645904234786295519555758249910219701584236072392769816258690822930359271252\
7108734641561267159877020679639/37707113727052816365849961099836672619613656757\
7493229528902410998843061764877981618854241899510515957097068337328942025435748\
5788877624264316410412028844631967529401371365463345921551547533997404700239570\
5508702183423928247024132499393953841094990557242587759938347853551309445356063\
5645844335736424294667865538545571717696426259665709954006505492118024144769298\
8864718126970885569414366850314771982138089257163671124598769168076350042355098\
31250000000000000000000000000000000000000000000*x^3*603313819632845061853599377\
5973867619138185081239891672462438575981488988238047705901667870392168255313553\
0933972630724069719772622041988229062566592461514111480470421941847413534744824\
7605439584752038331288139234934782851952386119990303261457519848915881404159013\
5656568209511256970170333509371782788714685848616729147483142820154651359264104\
0878738883863163087821835490031534169110629869605036351714209428114618737993580\
306689221600677681573^(1/2))^2+412929332334243800563659908732676804472579162330\
9047196377266108506833142348940950370244683962098539428803564320507875962908075\
0474041262252271379345096256638901259303442402830130987283197718309882120560772\
6993612302324304737339159375387150958090472005213203835981320000461313288541987\
781050661413504306328320163801192008355890162477509825340498320115611/916400810\
6924665007544678379011887758384200467935061138290625605870298295611607456176151\
7741788069396442372648510034773698777367191320376782619750271745676861134180949\
3773473161369284545913431576106406679288243141453060008317620830918471556137608\
7304113234773495716726562500000000000000000000000000000000000000000000000000000\
0000000000000000000000000000000000000000*x^6, 135163641142333668487988365849740\
68756908528405375509903037613146730932361604361/2500000000000000000000000000000\
0000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 64 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 65 Test 1 - Weifeng
>> input polynomial
x+39/50
>> basis
[(x-491/50)*(x-999/100)*(x-1361/100)*(x-2519/100)*(x-3239/100), (-x+491/50)*(x-999/100)*(x-1361/100)*(x-2519/100)*(x-3239/100)]
memory used=12571.0MB, alloc=307.2MB, time=60.57
>> Time taken
1.236000
">> Sums of squares multipliers", [x+39/50-21/61058296*x^2*(x-491/50)*(x-999/
100)*(x-1361/100)*(x-2519/100)*(x-3239/100)-21/61058296*(x+1)^2*(-x+491/50)*(x-\
999/100)*(x-1361/100)*(x-2519/100)*(x-3239/100), 21/61058296*x^2, 21/61058296*(
x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 65 Test 1 - Weifeng

>> Test
Batch: 65 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+39/50
>> basis
[(x-491/50)*(x-999/100)*(x-1361/100)*(x-2519/100)*(x-3239/100), (-x+491/50)*(x-999/100)*(x-1361/100)*(x-2519/100)*(x-3239/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.623929
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 65 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 65 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+39/50
>> basis
[(x-491/50)*(x-999/100)*(x-1361/100)*(x-2519/100)*(x-3239/100), (-x+491/50)*(x-999/100)*(x-1361/100)*(x-2519/100)*(x-3239/100), -x^2+11826721/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 8.563149
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 65 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 66 Test 1 - Weifeng
>> input polynomial
x+719/100
>> basis
[(x-601/100)*(x-9)*(x-2451/100), (-x+601/100)*(x-9)*(x-2451/100)]
>> Time taken
0.515000
">> Sums of squares multipliers", [x+719/100-877/1870840*x^2*(x-601/100)*(x-9)*
(x-2451/100)-877/1870840*(x+1)^2*(-x+601/100)*(x-9)*(x-2451/100), 877/1870840*x
^2, 877/1870840*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 66 Test 1 - Weifeng

>> Test
Batch: 66 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+719/100
>> basis
[(x-601/100)*(x-9)*(x-2451/100), (-x+601/100)*(x-9)*(x-2451/100)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -27.754845
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 66 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 66 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+719/100
>> basis
[(x-601/100)*(x-9)*(x-2451/100), (-x+601/100)*(x-9)*(x-2451/100), -x^2+7027801/10000]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 1.835882
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9862
time= 0.117000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [719/100*(1/
10000000000000000000000000000000000000000000*2946518780829378017752219249946117\
82287813315652379436850704594535652145715109967336799^(1/2)-8275937640388801767\
2623815181856505803895174033145380709711948889405688693517747811977267/10592735\
0170816139738192282035562935732468886977030407547828301735566946384582033257579\
24050000000000000000000000000000000000000000000*x*29465187808293780177522192499\
4611782287813315652379436850704594535652145715109967336799^(1/2)+14756612716355\
9495084708494134796845374581735056201546506613456273550124670463705595935069/57\
5491949380737894092230322255101137280885382133553587599032411202445597099824154\
954685546875000000000000000000000000000000000000000000*x^2*29465187808293780177\
5221924994611782287813315652379436850704594535652145715109967336799^(1/2))^2+
719/100*(1/95202205966021005589700313479462188489556412170606078783610686184840\
7930631431023902493423993750000000000000000000000000000000000000000000*x*270519\
0557037387970487513018565294067389394614083795635125528356432020107426209989809\
5631023921890466737944003224860595103975152360569938176293445956475569128403400\
5623600029893260951270677768112057963084480972415746482794461211123474492539877\
20003280315966535916840237159723^(1/2)-2058943004918636770430474196315162752195\
6672508251420962302198390177352259304575567149380741356165437491095572135534596\
109886536325585189123289784423486382371159954844764848298577/587880423556456008\
8854991782348083421830221258005466870491847088908249538043745631540253612639492\
8865477103623141647677120947392994979872601472196532674654747051896215142565606\
1502414965833119158679509484703086786653517894778362142460215011902816482969314\
293635188635195578125000000000000000000000000000000000000000000*x^2*27051905570\
3738797048751301856529406738939461408379563512552835643202010742620998980956310\
2392189046673794400322486059510397515236056993817629344595647556912840340056236\
0002989326095127067776811205796308448097241574648279446121112347449253987720003\
280315966535916840237159723^(1/2))^2+505670484966130399235028843472232392838380\
7672963620967577562996097055180149991530048650970051744958473738235612169685455\
2316015185575784928193477343242775305228520067006142027734111550390133207364445\
2626861740896598780636672441954954491416301290558257707256663607550667331369/33\
8735684884243315018063394045852257962980138572961975997686543319489824899229633\
9331299482043578127523558138177916261104707294614934843829934811087747876373584\
5136669217923753946525001525878906250000000000000000000000000000000000000000000\
000000000000000000000000000000000000000000*x^4, 1727716385196809453468710589101\
4538092539990017446702190392427155495089788063014199/10000000000000000000000000\
000000000000000000000000000000000000000000000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 66 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 67 Test 1 - Weifeng
>> input polynomial
x+217/50
>> basis
[(x-119/25)*(x-667/100)*(x-487/50)*(x-481/20)*(x-501/20), -(x-119/25)*(x-667/100)*(x-487/50)*(x-481/20)*(x-501/20)]
memory used=12850.8MB, alloc=307.2MB, time=62.05
>> Time taken
1.086000
">> Sums of squares multipliers", [x+217/50-43/5104339*x^2*(x-119/25)*(x-667/
100)*(x-487/50)*(x-481/20)*(x-501/20)+43/5104339*(x+1)^2*(x-119/25)*(x-667/100)
*(x-487/50)*(x-481/20)*(x-501/20), 43/5104339*x^2, 43/5104339*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 67 Test 1 - Weifeng

>> Test
Batch: 67 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+217/50
>> basis
[(x-119/25)*(x-667/100)*(x-487/50)*(x-481/20)*(x-501/20), -(x-119/25)*(x-667/100)*(x-487/50)*(x-481/20)*(x-501/20)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.718186
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 67 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 67 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+217/50
>> basis
[(x-119/25)*(x-667/100)*(x-487/50)*(x-481/20)*(x-501/20), -(x-119/25)*(x-667/100)*(x-487/50)*(x-481/20)*(x-501/20), -x^2+271441/400]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.095402
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20242
time= 0.123000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [217/50*(3/
20000000000000000000000000000000000000000000*2595435971979056956101703429505909\
69919780518298415486528668183087222811320039398672654^(1/2)-2062604266166875902\
1665862529611209027709828870969218775534521621836918219050728612433253/67585152\
7103346431368883573043338885671108469649073926920651948759128200677382594143591\
016000000000000000000000000000000000000000000*x*2595435971979056956101703429505\
90969919780518298415486528668183087222811320039398672654^(1/2)+1232306658460803\
01572265344038527591813344279121898965578814218896263835502959515431832751/5190\
8719439581139122034068590118193983956103659683097305733636617444562264007879734\
530800000000000000000000000000000000000000000000000*x^2*25954359719790569561017\
0342950590969919780518298415486528668183087222811320039398672654^(1/2)-33133817\
8946423130074384292204839445607418732571526306970594725768466064416522879631891\
89/6229046332749736694644088230814183278074732439161971676688036394093347471680\
94556814369600000000000000000000000000000000000000000000000*x^3*259543597197905\
695610170342950590969919780518298415486528668183087222811320039398672654^(1/2))
^2+217/50*(1/168962881775836607842220893260834721417777117412268481730162987189\
782050169345648535897754000000000000000000000000000000000000000000000*x*3885340\
7410077490592244006094314775844328428711435092480104281335459088022199636750061\
1671137883178711154061172021930569433422873653465754171073667112608852319983755\
1622913896265691381060273154746287397481023260453161757290551972264393150597176\
571846726474362826332637^(1/2)-145271183695720462646746492350984116710410828748\
1511168109992283876533995453343397122701164382422299266034254994787825775504825\
3721733586116764382105127693274821822979302062400723/31082725928061992473795204\
8754518206754627429691480739840834250683672704177597094000489336910306542968923\
2489376175444555467382989227726033368589336900870818559870041298331117012553104\
8482185237970299179848186083625294058324415778115145204777412574773811794902610\
661096000000000000000000000000000000000000000000000*x^2*38853407410077490592244\
0060943147758443284287114350924801042813354590880221996367500611671137883178711\
1540611720219305694334228736534657541710736671126088523199837551622913896265691\
3810602731547462873974810232604531617572905519722643931505971765718467264743628\
26332637^(1/2)+4995082619258553988013951747845362121459363378207606207370995509\
4851331741213322055316939626321466285771987315305486244689116548153722183662668\
084839901254152998566976601702275201/466240888920929887106928073131777310131941\
1445372211097612513760255090562663956410007340053654598144533848734064263166833\
2010744838415890500528840053513062278398050619474966755188296572723277856955448\
7697722791254379410874866236671727178071661188621607176923539159916440000000000\
0000000000000000000000000000000000000*x^3*3885340741007749059224400609431477584\
4328428711435092480104281335459088022199636750061167113788317871115406117202193\
0569433422873653465754171073667112608852319983755162291389626569138106027315474\
6287397481023260453161757290551972264393150597176571846726474362826332637^(1/2)
)^2+217/50*(1/35927751172024833865309626209673046535154894315496001927829554819\
4063422731811755516460370799726754451308479240883763614438317356094651244290264\
2608669679787183484918604671906809143720000000000000000000000000000000000000000\
0000000*x^2*4051818371477610717971839724896025350247677629483829778626055141180\
1639653056067431134298796891263869078010584316485800691758743068045271349131649\
1810180000785792702734460156181305359212061873388053541539384915488059983294492\
1099691207126617683892924972999449453593073588287154781658885466076206485854982\
6756649288970453787606618423419199820983324268764933534874821840507706666970420\
173718653800977759249607062354939139575310032351068788100409546517226926^(1/2)-\
9574825695560409705508250105030443735827960711922724149154674944229793378282352\
2243270277791210766454758283213186707630686813522685306085612715662203983426870\
9458959189594043556000990564310790968845144101464619513371982763815246294900600\
93150734208748095536671477298309/6036228486372604421559537765208231434260972259\
9386663368730802848121623319264160046382568040061473175535211298795509572725152\
6898592853204456337417966748604522596205191002094869728654319645248995238050710\
4430770771843326547368491160085104830813993184317317615573323014656666152374910\
8163367988178560223205596498009639409739451200630792104016362494255143290182308\
8593527116672878516501656888697221270156418727185920881036503687632790596470769\
60218275198400000000000000000000000000000000000000000000000*x^3*405181837147761\
0717971839724896025350247677629483829778626055141180163965305606743113429879689\
1263869078010584316485800691758743068045271349131649181018000078579270273446015\
6181305359212061873388053541539384915488059983294492109969120712661768389292497\
2999449453593073588287154781658885466076206485854982675664928897045378760661842\
3419199820983324268764933534874821840507706666970420173718653800977759249607062\
354939139575310032351068788100409546517226926^(1/2))^2+106553912946150553983288\
3287569040487142093650831675401805405572712325243310530320943529696804185164775\
2017882151165375321391982035275462460326876808230605086365531834444904371609747\
2344176497368369725536269533174537998484410976339501170037283508933403296700587\
4895161839877971210520291979557770052880340807273535636170700006577869693891091\
863596001308880689/172810486458897092319300532244704139302517278021450125299411\
1068195899825255387102943326916908866151980855673652867405952741772717480011152\
6088351369003412099832675622020385879931632626978435164980519555293567908135840\
4110673606579508630590705315424482008885245569254989120000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000*x^6, 22\
56943031682471284577644361366301186685988260587200368337446720614012783690633/
781250000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 67 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 68 Test 1 - Weifeng
>> input polynomial
x+483/100
>> basis
[(x-707/100)*(x-209/25)*(x-181/20)*(x-2461/100)*(x-2561/100), -(x-707/100)*(x-209/25)*(x-181/20)*(x-2461/100)*(x-2561/100)]
memory used=13152.0MB, alloc=307.2MB, time=63.58
>> Time taken
1.373000
">> Sums of squares multipliers", [x+483/100-79/16992290*x^2*(x-707/100)*(x-209
/25)*(x-181/20)*(x-2461/100)*(x-2561/100)+79/16992290*(x+1)^2*(x-707/100)*(x-\
209/25)*(x-181/20)*(x-2461/100)*(x-2561/100), 79/16992290*x^2, 79/16992290*(x+1
)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 68 Test 1 - Weifeng

>> Test
Batch: 68 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+483/100
>> basis
[(x-707/100)*(x-209/25)*(x-181/20)*(x-2461/100)*(x-2561/100), -(x-707/100)*(x-209/25)*(x-181/20)*(x-2461/100)*(x-2561/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.764671
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 68 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 68 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+483/100
>> basis
[(x-707/100)*(x-209/25)*(x-181/20)*(x-2461/100)*(x-2561/100), -(x-707/100)*(x-209/25)*(x-181/20)*(x-2461/100)*(x-2561/100), -x^2+7080921/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.374895
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20430
time= 0.126000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [483/100*(1/
5000000000000000000000000000000000000000000*22219605484431706774294243312136502\
8196281609165120758159133030119065520377613707714139^(1/2)-82390290921736724565\
87266869901426709470637675933179805197305830956870160313546989923053/2146413889\
7961028743968239039523861723760803445350665238172250709501729268477484165185827\
4000000000000000000000000000000000000000000*x*222196054844317067742942433121365\
028196281609165120758159133030119065520377613707714139^(1/2)+481082328064888074\
591783531188960343902052970806658701496358559148976969935008547906742453/177756\
8438754536541943539464970920225570252873320966065273064240952524163020909661713\
11200000000000000000000000000000000000000000000000*x^2*222196054844317067742942\
433121365028196281609165120758159133030119065520377613707714139^(1/2)-499301858\
4603892855281526369808705827856489904804264919954479235961321377621712994116794\
47/8887842193772682709717697324854601127851264366604830326365321204762620815104\
548308565560000000000000000000000000000000000000000000000000*x^3*22219605484431\
7067742942433121365028196281609165120758159133030119065520377613707714139^(1/2)
)^2+483/100*(1/2146413889796102874396823903952386172376080344535066523817225070\
95017292684774841651858274000000000000000000000000000000000000000000000*x*55620\
6580899586803573507100135963564824504931712717501167832831148710267951008139943\
0992328782725851440699218482630906771035646235793646144200643511701921990396752\
5964421852217640661410042220312403753412524961152914880673799544699358844273411\
22682289649983997862438357^(1/2)-9354789187166650501810272622188340468636912709\
3053319376981039992608413061230937212822492241436308429000058882985934406849984\
618674878485591618259824317186009274515582729286360557/278103290449793401786753\
5500679817824122524658563587505839164155743551339755040699715496164391362925720\
3496092413154533855178231178968230721003217558509609951983762982210926108820330\
7050211101562018767062624805764574403368997723496794221367056134114482499199893\
121917850000000000000000000000000000000000000000000000*x^2*55620658089958680357\
3507100135963564824504931712717501167832831148710267951008139943099232878272585\
1440699218482630906771035646235793646144200643511701921990396752596442185221764\
0661410042220312403753412524961152914880673799544699358844273411226822896499839\
97862438357^(1/2)+2014295788203848542700173954988312249225377528575340207835924\
3263405825118053834218225964553662568085141437757529418091656517766229925629620\
317748768060164421443074297771657280324009/278103290449793401786753550067981782\
4122524658563587505839164155743551339755040699715496164391362925720349609241315\
4533855178231178968230721003217558509609951983762982210926108820330705021110156\
2018767062624805764574403368997723496794221367056134114482499199893121917850000\
0000000000000000000000000000000000000000000000*x^3*5562065808995868035735071001\
3596356482450493171271750116783283114871026795100813994309923287827258514406992\
1848263090677103564623579364614420064351170192199039675259644218522176406614100\
4222031240375341252496115291488067379954469935884427341122682289649983997862438\
357^(1/2))^2+483/100*(1/1001289750692101378019908224199532616228711992463651309\
5374859019901616791065801773866122940773915719933324364917568688373640176120469\
1955796352412687100195870100162631123685116513852000000000000000000000000000000\
000000000000000000*x^2*30727315987760171631742239389208357103305530525773674852\
9894691380397247622708635144678370451452757201299381096522787697218690270563727\
1117052195139824862898396500020494857571123318825397173647625855242538669114236\
8738681990506866463571231290263545521767528925954540093306595640460051851551512\
2100452310713449827806372301034544502243492651072724775355551573699894297986107\
7201188511694917942575114555400970255259479494583029849738042507408972540004604\
70253^(1/2)-3300892452933548804867648807095773059184439139029766826992389614705\
6113754753524570398989318094853978068352006091959585966004104276620883753161557\
4138392733552563265105496208347441657348412569117474897658091876299944794249297\
69820877710410518682142812560625854561347822570081/6145463197552034326348447877\
8416714206611061051547349705978938276079449524541727028935674090290551440259876\
2193045575394437380541127454223410439027964972579679300004098971514224663765079\
4347295251710485077338228473747736398101373292714246258052709104353505785190908\
0186613191280920103703103024420090462142689965561274460206908900448698530214544\
9550711103147399788595972215440237702338983588515022911080194051051895898916605\
9699476085014817945080009209405060000000000000000000000000000000000000000000000\
0000*x^3*3072731598776017163174223938920835710330553052577367485298946913803972\
4762270863514467837045145275720129938109652278769721869027056372711170521951398\
2486289839650002049485757112331882539717364762585524253866911423687386819905068\
6646357123129026354552176752892595454009330659564046005185155151221004523107134\
4982780637230103454450224349265107272477535555157369989429798610772011885116949\
1794257511455540097025525947949458302984973804250740897254000460470253^(1/2))^2
+268506669541932591442192147716703660398696346680950257543798934870321649098551\
4984219446194607620575299841726697262217061042457071044890780273595366676414614\
1273414280972332088986156761056728102118548883963025105560043574295659725124161\
1399845154072097132010264904684880427874924708085527795395892300053986439647430\
062947096308856416328563387575149773051974767377913/438396235120341353176244992\
3947933103478611110178201112487322039253421330302911308619272932106680306540182\
5333950872846365999525268841339830821105817339318851639288573466757557042817931\
8110237387272155486834856799045819772617810831819144219412711268111820812642624\
6155758332500000000000000000000000000000000000000000000000000000000000000000000\
0000000000000000000000000000000000*x^6, 239156914924398418529656151170891427157\
210741987777587902921457205770214895457667/250000000000000000000000000000000000\
00000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 68 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 69 Test 1 - Weifeng
>> input polynomial
x+891/100
>> basis
[(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100), -(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100)]
memory used=13428.8MB, alloc=307.2MB, time=65.06
>> Time taken
1.161000
">> Sums of squares multipliers", [x+891/100-134/12066281*x^2*(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100)+134/12066281*(x+1)^2*(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100), 134/12066281*x^2, 134/12066281*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 69 Test 1 - Weifeng

>> Test
Batch: 69 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+891/100
>> basis
[(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100), -(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.123884
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 69 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 69 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+891/100
>> basis
[(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100), -(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100), -x^2+7327849/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.515157
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20425
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [891/100*(3/1000000000000000000000000000000000000000000000*239571505329291828706298372982598555981607330260205952613946286738366814207636203493789090^(1/2)-694967607829434406424137419752232879046536467364990385059500975019152582324119933852278721/2561498534980788232527742203929943760555345575142122045348313697806617977508046287755592950280000000000000000000000000000000000000000000*x*239571505329291828706298372982598555981607330260205952613946286738366814207636203493789090^(1/2)+1238975532744921364532148205134921366463770766295169013702103976667851306162317472784103/67379485873863326823646417401355843869827061635682924172672393145165666495897682232628181562500000000000000000000000000000000000000000*x^2*239571505329291828706298372982598555981607330260205952613946286738366814207636203493789090^(1/2)-63169629850457162134149725000570406723114835707381311171076010146960595051858926331109/179678628996968871529723779736948916986205497695154464460459715053775110655727152620341817500000000000000000000000000000000000000000000*x^3*239571505329291828706298372982598555981607330260205952613946286738366814207636203493789090^(1/2))^2+891/100*(1/64037463374519705813193555098248594013883639378553051133707842445165449437701157193889823757000000000000000000000000000000000000000000000*x*181814813683669362929833812753128792787511214042017696070883874655309224192921430348488120259533616875045778614035836156676642710052516066564989800207182109727317828457216127712732141220530977543857259483555178514534067468450581513090182926572974079174480897430336553349918^(1/2)-505244922046433111327414105590150802335937012012173305890269358830301930225432426790394568046498189051722175810029278492334943455910232769002897162337434285733902667013412932756017/409083330788256066592126078694539783771900231594539816159488717974445754434073218284098270583950637968853001881580631352522446097618161149771227050466159746886465114028736287353647317746194699473678833837999151657701651804013808404452911584789191678142582019218257245037315500000000000000000000000000000000000000000000*x^2*181814813683669362929833812753128792787511214042017696070883874655309224192921430348488120259533616875045778614035836156676642710052516066564989800207182109727317828457216127712732141220530977543857259483555178514534067468450581513090182926572974079174480897430336553349918^(1/2)+147140948463910779552976699014725303782271388314247997162457157986714424345294708049303724519362791722931238874180978291210522316257328050155427822128911540316557683766837072337388923/5454444410510080887895014382593863783625336421260530882126516239659276725787642910454643607786008506251373358421075084700299281301575481996949694006215463291819534853716483831381964236615929326315717784506655355436022024053517445392705487797189222375234426922910096600497540000000000000000000000000000000000000000000000000*x^3*181814813683669362929833812753128792787511214042017696070883874655309224192921430348488120259533616875045778614035836156676642710052516066564989800207182109727317828457216127712732141220530977543857259483555178514534067468450581513090182926572974079174480897430336553349918^(1/2))^2+891/100*(1/379458344667835806396843353431081975987087419540255903685465706897157756717977437776114370615122216407538572674471297306861910696243298886961952140517732679462922243833360154084934345100000000000000000000000000000000000000000000000*x^2*12866272618506385075731420913792836785006241507711402022029865064692707032320946139580691573131228955191516158090008235401335906667307578500218681331632885201422412873760500716580378839118548133407690130746230723503970426730378690447561403996247345811601285619561990112747958058421179766530125753789520932338840257813638213959005650079807274431000361103187710537134529022137735096903439084187502510578194863151460322149027188361429110386314888319475768012613^(1/2)-65016212661871206476154705823734169074945109407611834922864623729159511726978627167285833718963114486934757684404662870207050939054432287212256911165723295957849763819276886017023595738818917093196135325892424308313929110231311378797964955247343935068078405740112632176763/643313630925319253786571045689641839250312075385570101101493253234635351616047306979034578656561447759575807904500411770066795333365378925010934066581644260071120643688025035829018941955927406670384506537311536175198521336518934522378070199812367290580064280978099505637397902921058988326506287689476046616942012890681910697950282503990363721550018055159385526856726451106886754845171954209375125528909743157573016107451359418071455519315744415973788400630650000000000000000000000000000000000000000000000*x^3*12866272618506385075731420913792836785006241507711402022029865064692707032320946139580691573131228955191516158090008235401335906667307578500218681331632885201422412873760500716580378839118548133407690130746230723503970426730378690447561403996247345811601285619561990112747958058421179766530125753789520932338840257813638213959005650079807274431000361103187710537134529022137735096903439084187502510578194863151460322149027188361429110386314888319475768012613^(1/2))^2+1962987461330877171532917842447778153637109249994932119841008736315004900100607782064837342750958469914116816479082761637180955491898815152207278416671470909933442834484386136897718500260441819483516702699886287732124131865405513480744256242813844735747676463059249352344477345656646111485436975767879672248052800156923404148425495964941416855018995815181380593741253/67813886816847090768491574748087507140650808147236710881595071065074066233319142189445826972270488988412763724867796806159878464649535571589870741320053050245384222001228486913569948055276169868287885733341852703258701991815337954822037487541864924185758454926029709298705260000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 11965301106742465720848609437453748912534712853433758378702501854802698541894838411/2500000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 69 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 70 Test 1 - Weifeng
>> input polynomial
x+313/50
>> basis
[(x-76/25)*(x-109/10)*(x-341/20)*(x-2027/100)*(x-2127/100), (-x+76/25)*(x-109/10)*(x-341/20)*(x-2027/100)*(x-2127/100)]
>> Time taken
0.811000
">> Sums of squares multipliers", [x+313/50-48/5200379*x^2*(x-76/25)*(x-109/10)*(x-341/20)*(x-2027/100)*(x-2127/100)-48/5200379*(x+1)^2*(-x+76/25)*(x-109/10)*(x-341/20)*(x-2027/100)*(x-2127/100), 48/5200379*x^2, 48/5200379*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 70 Test 1 - Weifeng

>> Test
Batch: 70 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+313/50
>> basis
[(x-76/25)*(x-109/10)*(x-341/20)*(x-2027/100)*(x-2127/100), (-x+76/25)*(x-109/10)*(x-341/20)*(x-2027/100)*(x-2127/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.458240
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 70 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 70 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+313/50
>> basis
[(x-76/25)*(x-109/10)*(x-341/20)*(x-2027/100)*(x-2127/100), (-x+76/25)*(x-109/10)*(x-341/20)*(x-2027/100)*(x-2127/100), -x^2+4959529/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.485626
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20068
time= 0.117000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [313/50*(3/25000000000000000000000000000000000000000000*117832449890748217643571649129035593600262073386858549819834143463784093901798770705863^(1/2)-3050828849715976267189550009178581465112487629692579246181638600339955241681056664137551/553223352237062881836568892660822111953230434551300891404121303562466320868945228464026785000000000000000000000000000000000000000000*x*117832449890748217643571649129035593600262073386858549819834143463784093901798770705863^(1/2)+16054329453921768521998999242520205433084838495833315511552934453370592299680410083911/84839363921338716703371587372905627392188692838538155870280583293924547609295114908221360000000000000000000000000000000000000000000*x^2*117832449890748217643571649129035593600262073386858549819834143463784093901798770705863^(1/2)+8183279732564800315708434510538717126639445341857265630664273630755705071976703550799/2827978797377957223445719579096854246406289761284605195676019443130818253643170496940712000000000000000000000000000000000000000000000*x^3*117832449890748217643571649129035593600262073386858549819834143463784093901798770705863^(1/2))^2+313/50*(1/3463178185004013640296921268056746420827222520291143580189799360301039168639597130184807674100000000000000000000000000000000000000000000*x*321398743318045700611810029757009568097976961292366800100832477895356937037227095201660731341382456763894821885364059390275316497901521631041187115893684427539223502085475432332077302600199248514663260767553082537553938833637524836912710330903128425069361175822049034185^(1/2)-41656237807223856813111299959505803584615914321398425952955275605925668615527732882053183257187160342796096331220677844420016787376542231715644621796165090638950732068108506759/2640427831914569881794879295128330545761563351557554724698760658200102631980870704532128326857546427088136373316546357382453535811148968214852290317702564899911466470807192050195066840165945446491984798638044493690538977181869213630501499751828531105088316369145085630000000000000000000000000000000000000000000000*x^2*321398743318045700611810029757009568097976961292366800100832477895356937037227095201660731341382456763894821885364059390275316497901521631041187115893684427539223502085475432332077302600199248514663260767553082537553938833637524836912710330903128425069361175822049034185^(1/2)+1434018500452432054219736297749886628073779217121186487839990462974170779363912106298640510157696475753613995863570107494251557684082065383191882089491402872179226810806303507129/11001782632977374507478663729701377274006513964823144686244836075833760966586961268883868028573110112867234888818943155760223065879787367561884542990427353749631110295029966875812778500691439360383269994325185390377245738257788390127089582299285546271201318204771190125000000000000000000000000000000000000000000000000*x^3*321398743318045700611810029757009568097976961292366800100832477895356937037227095201660731341382456763894821885364059390275316497901521631041187115893684427539223502085475432332077302600199248514663260767553082537553938833637524836912710330903128425069361175822049034185^(1/2))^2+313/50*(1/357960463152563383036868517330597507807966190730631741160319120314884514761666786250209556720838982561880935775506868302044989719834351769687952055479576450600036120474523120383850000000000000000000000000000000000000000000000*x^2*22564333721500095835674323906290337541079430911646628716148096186740809701248983080428200490887029788099104044661222947142675533421308015379892192367276997840805060809708260320934304533844165960153173219845081293999528184270867041799788345000995445404984858273539487060093537376914567316798657643869142563427980007111705123416603430880374536143061943541401783363717740253958876975994748705107651202950316401268040726517598768313643689907452361797^(1/2)-1272489991101807237212702091219804206405635075904234682908774300427462469497721574317489364374803608985667607055406123612295302784854228549886768907293507832447450139725627638219935042506444130012847226919906607847596065013690453336360562548128397371699071682519184011/9401805717291706598197634960954307308783096213186095298395040077808670708853742950178416871202929078374626685275509561309448138925545006408288413486365415767002108670711775133722626889101735816730488841602117205833136743446194600749911810417081435585410357613974786275038973907047736381999440684945476068094991669629877134756918096200156056726275809808917409734882391772482865406664478627128188001229298500528350302715666153464018204128105150748750000000000000000000000000000000000000000000000*x^3*22564333721500095835674323906290337541079430911646628716148096186740809701248983080428200490887029788099104044661222947142675533421308015379892192367276997840805060809708260320934304533844165960153173219845081293999528184270867041799788345000995445404984858273539487060093537376914567316798657643869142563427980007111705123416603430880374536143061943541401783363717740253958876975994748705107651202950316401268040726517598768313643689907452361797^(1/2))^2+70896470895776517979302568575117256554146852710039562985549189727873389074366161329495441688549717691160111138004229667439573873624284374276456711742117370217215554890173903371703686812045328249962233422725228659144728628643174229697793538023302885284258559028935789865656204776690397582750622167814070774264866711585802370834425166141747214835334106339681452157/554025820624212016877194325464680693068272648372668283520356690119747764357236508019094450272463457490394413806972305156799070145361863502036804692573336114199492937344476788989062456563376582077930068728676483202391466831860167693838125383086002549017988273740246875957031250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 4463973324226183818192967867005885324457045222696044279894736958218832634090209793/5000000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 70 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 71 Test 1 - Weifeng
>> input polynomial
x+181/20
>> basis
[(x-81/20)*(x-189/20)*(x-1611/100)*(x-504/25)*(x-529/25), (-x+81/20)*(x-189/20)*(x-1611/100)*(x-504/25)*(x-529/25)]
memory used=13706.4MB, alloc=307.2MB, time=66.55
>> Time taken
1.171000
">> Sums of squares multipliers", [x+181/20-101/9087434*x^2*(x-81/20)*(x-189/20)*(x-1611/100)*(x-504/25)*(x-529/25)-101/9087434*(x+1)^2*(-x+81/20)*(x-189/20)*(x-1611/100)*(x-504/25)*(x-529/25), 101/9087434*x^2, 101/9087434*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 71 Test 1 - Weifeng

>> Test
Batch: 71 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+181/20
>> basis
[(x-81/20)*(x-189/20)*(x-1611/100)*(x-504/25)*(x-529/25), (-x+81/20)*(x-189/20)*(x-1611/100)*(x-504/25)*(x-529/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.077277
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 71 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 71 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+181/20
>> basis
[(x-81/20)*(x-189/20)*(x-1611/100)*(x-504/25)*(x-529/25), (-x+81/20)*(x-189/20)*(x-1611/100)*(x-504/25)*(x-529/25), -x^2+306916/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.447516
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19881
time= 0.115000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [181/20*(1/5000000000000000000000000000000000000000000*43418146707567254284126497825263933265470491530096981234950183503675515103111023174078^(1/2)-3206935753687684002692728616770131623491679080981870170218147230041014178741005034888197/314347382162786921017075844254910876842006358677902144141039328566610729346523807780324720000000000000000000000000000000000000000000*x*43418146707567254284126497825263933265470491530096981234950183503675515103111023174078^(1/2)+32632291658592511431920552873286006824479294172043428591870960950754921051240635003853/65127220061350881426189746737895899898205737295145471852425275255513272654666534761117000000000000000000000000000000000000000000000*x^2*43418146707567254284126497825263933265470491530096981234950183503675515103111023174078^(1/2)-337987799220776021812539737649825943771229714326008164497809988280744263405275735229/108545366768918135710316244563159833163676228825242453087375458759188787757777557935195000000000000000000000000000000000000000000000*x^3*43418146707567254284126497825263933265470491530096981234950183503675515103111023174078^(1/2))^2+181/20*(1/94828126952440721173484546350231447847338584867833813482546864117594236686201348680397957200000000000000000000000000000000000000000000*x*230949221886405027644220801896275005309441062349267179553143862904559694195063554236766349770163217000639846980301590090644562322937763410222664213232325364248966076476335486275634952300876305935188136684125904637027619530138168480892357479526898627653765853941249986^(1/2)-4759348315968551127966018633555100773077385472565481357877574353180449649058166107766045738935041161658068096572516466825378656200574034591233398213404947778390775428422021323/5741831483363660908281732643830041568466766743490067999940040790444854275567878420251097093733339649187178516084846162474588566039889145558022038450527426182985344442781821481990924228474825285681473011483793209207868993843214133502848666618072065328408543330031077000000000000000000000000000000000000000000000*x^2*230949221886405027644220801896275005309441062349267179553143862904559694195063554236766349770163217000639846980301590090644562322937763410222664213232325364248966076476335486275634952300876305935188136684125904637027619530138168480892357479526898627653765853941249986^(1/2)+108452244633348808358717472173619317432346401617955174102672024527239058150244073638259380982606536746016202476028785893229016519698361569614539525296832312108364058988363906763/5981074461837146779460138170656293300486215357802154166604209156713389870383206687761559472638895467903310954255048085911029756291551193289606290052632735607276400461231064043740546071327943005918201053628951259591530201920014722398800694393825068050425565968782371875000000000000000000000000000000000000000000000*x^3*230949221886405027644220801896275005309441062349267179553143862904559694195063554236766349770163217000639846980301590090644562322937763410222664213232325364248966076476335486275634952300876305935188136684125904637027619530138168480892357479526898627653765853941249986^(1/2))^2+181/20*(1/27398819630014675532911843287302401538982873060416923796380082947651572759085977650895398973184562664371948044684713923105821722149901826374001141672965208482200976727582097945681250000000000000000000000000000000000000000000*x^2*123941281070741322421086629201427785504024240479740419563749630641884191639783609236321863539641713828675471641789096063152156892030067714999691325171757313066444551719548498989611693209443788198113050260642717470404522819682029613965492636336507321319817028484121081921179668399902893661919292557131479168969479053270243768555351612640774220843424458788090052413552685017277936442204424602870643680006345491818200985816989454171233997769423837^(1/2)-10256549551324534447471824335576648202926595138200939364054854401812503036199671210419257237297412715486055538621768857543497288464975716694394426629654193132552595582226322302455393965421578802853748775977960102701226449092458222188222330071738678470251618098827597/5809747550190999488488435743816927445501136272487832167050763936338321483114856682952587353420705335719162733208863877960257354313909424140610530867426124049989588361853835890138048119192677571786549230967627381425212007172595138154632467328273780686866423210193175715055296956245448140402466838615538086045444330622042676651032106842536291602035521505691721206885282110184903270728332403259561422500297444928978171210171380664276593645441742359375000000000000000000000000000000000000000000*x^3*123941281070741322421086629201427785504024240479740419563749630641884191639783609236321863539641713828675471641789096063152156892030067714999691325171757313066444551719548498989611693209443788198113050260642717470404522819682029613965492636336507321319817028484121081921179668399902893661919292557131479168969479053270243768555351612640774220843424458788090052413552685017277936442204424602870643680006345491818200985816989454171233997769423837^(1/2))^2+4527941901641130852910634358096302847648379470335896343644353904693280787149477888134939123009659048646335224146633568130284299025279821266060880305196500550122327886413790953969184827578935647146994232192693265760829368720893069761998666087362575122644884420483458016205762349994142284609142656224657023669399111899943333240094253644490958106506849281771219/37273309593171865526609546418285094914428753039891435307058187917903415167841524691964938846533816111150334768189105149270764377563696669363880202969272053251319528774342864289877301677240089646200857629469300968404495341474869060062009733365368609525473986403518984912109375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 282544991649179373849757943192959108313347977597496021143554956984462938064741/312500000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 71 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 72 Test 1 - Weifeng
>> input polynomial
x+408/25
>> basis
[(x-219/50)*(x-923/100)*(x-749/50)*(x-337/20)*(x-597/20)*(x-121/4)*(x-125/4), -(x-219/50)*(x-923/100)*(x-749/50)*(x-337/20)*(x-597/20)*(x-121/4)*(x-125/4)]
memory used=13972.9MB, alloc=307.2MB, time=68.01
>> Time taken
1.235000
">> Sums of squares multipliers", [x+408/25-1/54603797*x^2*(x-219/50)*(x-923/100)*(x-749/50)*(x-337/20)*(x-597/20)*(x-121/4)*(x-125/4)+1/54603797*(x+1)^2*(x-219/50)*(x-923/100)*(x-749/50)*(x-337/20)*(x-597/20)*(x-121/4)*(x-125/4), 1/54603797*x^2, 1/54603797*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 72 Test 1 - Weifeng

>> Test
Batch: 72 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+408/25
>> basis
[(x-219/50)*(x-923/100)*(x-749/50)*(x-337/20)*(x-597/20)*(x-121/4)*(x-125/4), -(x-219/50)*(x-923/100)*(x-749/50)*(x-337/20)*(x-597/20)*(x-121/4)*(x-125/4)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 1.214750
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 72 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 72 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+408/25
>> basis
[(x-219/50)*(x-923/100)*(x-749/50)*(x-337/20)*(x-597/20)*(x-121/4)*(x-125/4), -(x-219/50)*(x-923/100)*(x-749/50)*(x-337/20)*(x-597/20)*(x-121/4)*(x-125/4), -x^2+16641/16]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 1.241528
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 72 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 73 Test 1 - Weifeng
>> input polynomial
x+233/100
>> basis
[(x-167/100)*(x-1117/100)*(x-913/50), (-x+167/100)*(x-1117/100)*(x-913/50)]
>> Time taken
0.528000
">> Sums of squares multipliers", [x+233/100-1179/704726*x^2*(x-167/100)*(x-1117/100)*(x-913/50)-1179/704726*(x+1)^2*(-x+167/100)*(x-1117/100)*(x-913/50), 1179/704726*x^2, 1179/704726*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 73 Test 1 - Weifeng

>> Test
Batch: 73 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+233/100
>> basis
[(x-167/100)*(x-1117/100)*(x-913/50), (-x+167/100)*(x-1117/100)*(x-913/50)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -49.686876
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 73 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 73 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+233/100
>> basis
[(x-167/100)*(x-1117/100)*(x-913/50), (-x+167/100)*(x-1117/100)*(x-913/50), -x^2+1026169/2500]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 1.716739
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9739
time= 0.116000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [233/100*(1/10000000000000000000000000000000000000000000*180395350436397898942616778718867951417898702745228116294998471902068135019806048122134^(1/2)-130535838698595702329494549665376569995735775686820851503483020292129560272333777670839/42032116651680710453629709441496232680370397739638151096734643953181875459614809212457222000000000000000000000000000000000000000000*x*180395350436397898942616778718867951417898702745228116294998471902068135019806048122134^(1/2)+42636487691779048469795029375145792621635498245984256211325329853815168475856608434780191/338241282068246060517406460097877408908560067647302718053122134816377753162136340229001250000000000000000000000000000000000000000000000*x^2*180395350436397898942616778718867951417898702745228116294998471902068135019806048122134^(1/2))^2+233/100*(1/12241853974802006919619652874835777768157878341669611506923965051364221227612813183128165907500000000000000000000000000000000000000000000*x*5152745647597712734972221961237327864692983744984483672260972521452401630579592162570217919339771551038040069015438462708691249248045235681034293954789995425963756258073477823130217047637761650013505601249449621077935106802631909756600243283708534557712210754117025006293^(1/2)-115949506991174176751486876813544407516274819318594127507513770730699993765025791789264768680469345689811172090045381477488176675915585792936086400618590431188132383375959449751/33172182280671970396816879578781080673989165740243457117559908936388851699010249973628012356264623719129013319841878515292003750523896367045285154215386236647835340717211230621009980993376147961460336488730362367454517854952565942639057360195548505736344704425646083731500000000000000000000000000000000000000000000*x^2*5152745647597712734972221961237327864692983744984483672260972521452401630579592162570217919339771551038040069015438462708691249248045235681034293954789995425963756258073477823130217047637761650013505601249449621077935106802631909756600243283708534557712210754117025006293^(1/2))^2+217999499306725428860166136183100496576258960054836450884902178771882138141837860346548035837173378703401030377650407578765734623582788986952480953422658173634969610598521447022816646840296072533038527571391390058826227928939982463561768616897044957956816918500120340273068473/2219654162019445213628057902547628212622392554635513969098264932054316849880361269700606427627040592692217731192148205356588441276604974654513803294781632813839164621083420143653359140625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^4, 3875992944603008653898883051625784919462668017258526759694232693781132176330497/9765625000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 73 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 74 Test 1 - Weifeng
>> input polynomial
x+1777/100
>> basis
[(x-163/100)*(x-177/25)*(x-317/20)*(x-2213/100)*(x-743/25), -(x-163/100)*(x-177/25)*(x-317/20)*(x-2213/100)*(x-743/25)]
memory used=14249.3MB, alloc=307.2MB, time=69.52
>> Time taken
1.220000
">> Sums of squares multipliers", [x+1777/100-23/4228525*x^2*(x-163/100)*(x-177/25)*(x-317/20)*(x-2213/100)*(x-743/25)+23/4228525*(x+1)^2*(x-163/100)*(x-177/25)*(x-317/20)*(x-2213/100)*(x-743/25), 23/4228525*x^2, 23/4228525*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 74 Test 1 - Weifeng

>> Test
Batch: 74 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+1777/100
>> basis
[(x-163/100)*(x-177/25)*(x-317/20)*(x-2213/100)*(x-743/25), -(x-163/100)*(x-177/25)*(x-317/20)*(x-2213/100)*(x-743/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.522534
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 74 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 74 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+1777/100
>> basis
[(x-163/100)*(x-177/25)*(x-317/20)*(x-2213/100)*(x-743/25), -(x-163/100)*(x-177/25)*(x-317/20)*(x-2213/100)*(x-743/25), -x^2+628849/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.091731
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19974
time= 0.117000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [1777/100*(1/25000000000000000000000000000000000000000000*697187065062752482206714470444848441151562985846731914374750150843146840927868993053774^(1/2)-17741747914922353892628533873404389463039948684513356777071441776471731725490680475840217/30972535365412779022033290349512391998158185646241065296098275451206798408220580016413909950000000000000000000000000000000000000000000*x*697187065062752482206714470444848441151562985846731914374750150843146840927868993053774^(1/2)+40681168669926633655658936445466858980522603971770549767241817126855674626480350563081/1307225746992660904137589632084090827159180598462622339452656532830900326739754361975826250000000000000000000000000000000000000000000*x^2*697187065062752482206714470444848441151562985846731914374750150843146840927868993053774^(1/2)-471394785107451910525244788616749960616341001692143279099082365845048749610498440677/1161978441771254137011190784074747401919271643077886523957916918071911401546448321756290000000000000000000000000000000000000000000000*x^3*697187065062752482206714470444848441151562985846731914374750150843146840927868993053774^(1/2))^2+1777/100*(1/91730325573897513870255261585139200967878493155617288385277725794657467952346617815279196635250000000000000000000000000000000000000000000*x*88965320506937586806703450118327265885574915414414232089201291115813027489413707874170676946925407816968287670688879247300350000393842630774961610322275825748286821009226678853473228003810483028559056812307337732827741580537539821466579189516397033586420813234548311810398^(1/2)-142702715520374642132093753460412781135823055352481282839729916615086173606459307466103661945268434760927106977243344130749671192452731375826155944656167843971637122169644192199/225292032797534688030481443743653740284235857830536884862918294890916501802116874188952192606170137972063756059707347559286198650406466988456571326083422181129595213585548708407782513234185241209069080278774912660509193647956628698142716011718506838007255857937798200983000000000000000000000000000000000000000000000*x^2*88965320506937586806703450118327265885574915414414232089201291115813027489413707874170676946925407816968287670688879247300350000393842630774961610322275825748286821009226678853473228003810483028559056812307337732827741580537539821466579189516397033586420813234548311810398^(1/2)+1426081259801389602433090491754655615582623963950772194150033081263334298138763164762322953757043178955229956257929276424110524129767242625546634578505411921128321320703674687/156452800553843533354501002599759541864052679048983947821471038118692015140358940408994578198729262480599830597018991360615415729448935408650396754224598736895552231656631047505404523079295306395186861304704800458686940033303214373710219452582296415282816568012359861793750000000000000000000000000000000000000000000*x^3*88965320506937586806703450118327265885574915414414232089201291115813027489413707874170676946925407816968287670688879247300350000393842630774961610322275825748286821009226678853473228003810483028559056812307337732827741580537539821466579189516397033586420813234548311810398^(1/2))^2+1777/100*(1/5455446982452710872954064602310653788305669060917169693391515014656595596317410502384369115926911984286960870294915650498848660070851754778749200680663971327244105520719075991126255000000000000000000000000000000000000000000000*x^2*701415032429761287636796315853677711550484428840806488405914819256008550326509601478909007473530007303526330534949139750933751761706862078461883282120922216877334009944628828676407444287111025011135135551474029717259550606241300280779021450141872822221348028062024830236895233410675641351961931100838550375909452227599821853193559072346146555431096804218257068968510701540666891814212103205239690822510206984945789662221393679273388096978349612454^(1/2)-1091884306006638653293464005772466661936089390794910947227082006843265293528366142428693349288230982592209028289078467553609981800051818733521135175517541377716401710898051306340723397310634883435367667098784452977289723154671070094455593810278870559593277523741421/175353758107440321909199078963419427887621107210201622101478704814002137581627400369727251868382501825881582633737284937733437940426715519615470820530230554219333502486157207169101861071777756252783783887868507429314887651560325070194755362535468205555337007015506207559223808352668910337990482775209637593977363056899955463298389768086536638857774201054564267242127675385166722953553025801309922705627551746236447415555348419818347024244587403113500000000000000000000000000000000000000000000*x^3*701415032429761287636796315853677711550484428840806488405914819256008550326509601478909007473530007303526330534949139750933751761706862078461883282120922216877334009944628828676407444287111025011135135551474029717259550606241300280779021450141872822221348028062024830236895233410675641351961931100838550375909452227599821853193559072346146555431096804218257068968510701540666891814212103205239690822510206984945789662221393679273388096978349612454^(1/2))^2+7764409741945015890815853459176900561185787761776376194705670914969142720674882161132045734285674029155499991688635512310353282223770543119473927847891677392975592471831627972671185604826410296596043667545980017078459645151024634882025559626382838124660025035663605559947586764457560439224487034076308154095004035487378376326110301877128172875393742308129/361607359590136703862082277828264333844955323495177265289949513012348916495608138359497076991092409133749396067983701042304455934095799809593469283949215194403002016941092934404441427538442324427446562569712712638059593077866366373485163067976228232513659605190329099125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 6058991341698680628051541583472179182608679614341016819030242973403405156880257/250000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 74 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 75 Test 1 - Weifeng
>> input polynomial
x+781/100
>> basis
[(x-839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50), (-x+839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50)]
memory used=14538.1MB, alloc=307.2MB, time=71.04
>> Time taken
1.167000
">> Sums of squares multipliers", [x+781/100-48/55200479*x^2*(x-839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50)-48/55200479*(x+1)^2*(-x+839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50), 48/55200479*x^2, 48/55200479*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 75 Test 1 - Weifeng

>> Test
Batch: 75 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+781/100
>> basis
[(x-839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50), (-x+839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.993299
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 75 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 75 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+781/100
>> basis
[(x-839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50), (-x+839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50), -x^2+3143529/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.937822
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 75 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 76 Test 1 - Weifeng
>> input polynomial
x+349/100
>> basis
[(x-191/100)*(x-47/10)*(x-162/25)*(x-799/100)*(x-293/25), -(x-191/100)*(x-47/10)*(x-162/25)*(x-799/100)*(x-293/25)]
memory used=14823.2MB, alloc=307.2MB, time=72.52
>> Time taken
1.227000
">> Sums of squares multipliers", [x+349/100-846/2784269*x^2*(x-191/100)*(x-47/10)*(x-162/25)*(x-799/100)*(x-293/25)+846/2784269*(x+1)^2*(x-191/100)*(x-47/10)*(x-162/25)*(x-799/100)*(x-293/25), 846/2784269*x^2, 846/2784269*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 76 Test 1 - Weifeng

>> Test
Batch: 76 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+349/100
>> basis
[(x-191/100)*(x-47/10)*(x-162/25)*(x-799/100)*(x-293/25), -(x-191/100)*(x-47/10)*(x-162/25)*(x-799/100)*(x-293/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -4.341776
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 76 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 76 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+349/100
>> basis
[(x-191/100)*(x-47/10)*(x-162/25)*(x-799/100)*(x-293/25), -(x-191/100)*(x-47/10)*(x-162/25)*(x-799/100)*(x-293/25), -x^2+117649/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.547286
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19940
time= 0.113000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [349/100*(1/125000000000000000000000000000000000000000000*33440185698842090750120802095021299598144262825508810275667912825260573632635873513882395^(1/2)-356315916500494169641776353668060015904904832528686070886641175685824876709704523030134197/233412496177917793435843198623248671195046954522051495724162031520318803955798397126899117100000000000000000000000000000000000000000000*x*33440185698842090750120802095021299598144262825508810275667912825260573632635873513882395^(1/2)+69064080100974617570276376643845841689730402184510731298686464279188622073914781131139/334401856988420907501208020950212995981442628255088102756679128252605736326358735138823950000000000000000000000000000000000000000000*x^2*33440185698842090750120802095021299598144262825508810275667912825260573632635873513882395^(1/2)-5216230649224963671113874677876464537011333613347661686316709962395504554068831378409/668803713976841815002416041900425991962885256510176205513358256505211472652717470277647900000000000000000000000000000000000000000000*x^3*33440185698842090750120802095021299598144262825508810275667912825260573632635873513882395^(1/2))^2+349/100*(1/81460961166093309909109276319513786247071387128195972007732549000591262580573640597287791867900000000000000000000000000000000000000000000*x*1400596171789000970954731291795758705550041447871540090114680021303004030588697362419113377586977952081321011168405368939716124240275998583057417228082043262828749409325646046289915041195490944337310914932875297049981750132809441707805523057326048869749308357264312179287037^(1/2)-374700434244953401195785722379803912509489380982934154816426581069420055481941377452286689775008057370869279953685280043468492363189025244423689461966081065768225410864434751963/200658477333667760881766660715724742915478717460106030102389687865759889769154349916778420857733230957209313920974981223455032126114039911612810491129232559144519972682757313222050865500786668243167752855712793273636353887221983052694201011078230497098754778977695154625650000000000000000000000000000000000000000000*x^2*1400596171789000970954731291795758705550041447871540090114680021303004030588697362419113377586977952081321011168405368939716124240275998583057417228082043262828749409325646046289915041195490944337310914932875297049981750132809441707805523057326048869749308357264312179287037^(1/2)+778187954276197069136792524244927526241825489799970291491837122467719351151401479727691196243499732414076419322933550208180270043776190785995987741441261766296504772314516457623/10032923866683388044088333035786237145773935873005301505119484393287994488457717495838921042886661547860465696048749061172751606305701995580640524556461627957225998634137865661102543275039333412158387642785639663681817694361099152634710050553911524854937738948884757731282500000000000000000000000000000000000000000000*x^3*1400596171789000970954731291795758705550041447871540090114680021303004030588697362419113377586977952081321011168405368939716124240275998583057417228082043262828749409325646046289915041195490944337310914932875297049981750132809441707805523057326048869749308357264312179287037^(1/2))^2+349/100*(1/161188732891937205806146131983146780104163538038431226317730775416389092535735053573176266567412393003476781828258514534992909231340577551622731285950066849476944752021874462717719031250000000000000000000000000000000000000000*x^2*41016907173518985649897728289671320498350486413062155509623085775205081086611416349463059663424421666052732292049434043907702636742396168161308212972341137210319956721741160178441052828815985365326849576614604755187266572177631067841662719417721758086220400927130519884459980918377049172599163214400438923215890914089353390135525979866309654673575419685167275955682218775698281636981628059195493995397318646185521495635090723517188631921739211813^(1/2)-36585749979067785464713836851559693351089605847828642481605834294984637287515491731798295776758995328813583657051861726042515580019432626921729673172439538077705026210009993696227146559748736193494811239724257230220749007583760342548715325088110070501337857378680291/82033814347037971299795456579342640996700972826124311019246171550410162173222832698926119326848843332105464584098868087815405273484792336322616425944682274420639913443482320356882105657631970730653699153229209510374533144355262135683325438835443516172440801854261039768919961836754098345198326428800877846431781828178706780271051959732619309347150839370334551911364437551396563273963256118390987990794637292371042991270181447034377263843478423626000000000000000000000000000000000000000000000*x^3*41016907173518985649897728289671320498350486413062155509623085775205081086611416349463059663424421666052732292049434043907702636742396168161308212972341137210319956721741160178441052828815985365326849576614604755187266572177631067841662719417721758086220400927130519884459980918377049172599163214400438923215890914089353390135525979866309654673575419685167275955682218775698281636981628059195493995397318646185521495635090723517188631921739211813^(1/2))^2+7103508145284425472175601082708044981692722982621292664959962804889353524321379249438081293489838357474543054458555786311409833782685557283923892332433328278318325260721516761335936648175297595859536399235188769059377490912850214255044786432485959243614476120103126152828262036648584318201585833724903687802395510362814614003154934417877915838854042537/238561032060185129421994280066204054036446105818381885159987372187469235991354454761333167979617721633953890490688721910566244202278206089243401908917523925463009895680922827760176555167057321205361671410171992809347113573078206561531450249586676560991935328490642710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 948691654034414157678020097556479800848037220199029586747956320943166207451250781/400000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 76 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 77 Test 1 - Weifeng
>> input polynomial
x+339/25
>> basis
[(x-26/25)*(x-51/10)*(x-917/100)*(x-1423/100)*(x-473/25), (-x+26/25)*(x-51/10)*(x-917/100)*(x-1423/100)*(x-473/25)]
>> Time taken
0.815000
">> Sums of squares multipliers", [x+339/25-303/5607274*x^2*(x-26/25)*(x-51/10)*(x-917/100)*(x-1423/100)*(x-473/25)-303/5607274*(x+1)^2*(-x+26/25)*(x-51/10)*(x-917/100)*(x-1423/100)*(x-473/25), 303/5607274*x^2, 303/5607274*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 77 Test 1 - Weifeng

>> Test
Batch: 77 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+339/25
>> basis
[(x-26/25)*(x-51/10)*(x-917/100)*(x-1423/100)*(x-473/25), (-x+26/25)*(x-51/10)*(x-917/100)*(x-1423/100)*(x-473/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.181589
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 77 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 77 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+339/25
>> basis
[(x-26/25)*(x-51/10)*(x-917/100)*(x-1423/100)*(x-473/25), (-x+26/25)*(x-51/10)*(x-917/100)*(x-1423/100)*(x-473/25), -x^2+273529/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.076697
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19870
time= 0.115000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [339/25*(1/125000000000000000000000000000000000000000000*17108350083530858782195801556618480644587459278539568200179682543790487230842310093672535^(1/2)-4068311403667555230567708200056542158711328434721608843900073278491753047070819474730809/28998653391584805635821883638468324692575743477124568099304561911724875856277715608774946825000000000000000000000000000000000000000000*x*17108350083530858782195801556618480644587459278539568200179682543790487230842310093672535^(1/2)+102132159144703863405868220126445453241996881717627424011463120941830714386528717939813/8554175041765429391097900778309240322293729639269784100089841271895243615421155046836267500000000000000000000000000000000000000000000*x^2*17108350083530858782195801556618480644587459278539568200179682543790487230842310093672535^(1/2)-706843725353048222812534274179265077261935188414539145570055764534656984246635437991/2851391680588476463699300259436413440764576546423261366696613757298414538473718348945422500000000000000000000000000000000000000000000*x^3*17108350083530858782195801556618480644587459278539568200179682543790487230842310093672535^(1/2))^2+339/25*(1/289986533915848056358218836384683246925757434771245680993045619117248758562777156087749468250000000000000000000000000000000000000000000*x*1682747082496501616785609913944599770493706531196299824983394924597057086445884627513515376459167938235163047684824890673713073771254834226037743038789953541818056108607500094516751449012551138615147768515841286743473070215259598524774800393673017501029658475698314377^(1/2)-33090508711080730288216503189742681648119745796870997322139315430774754984243015404091681706202603676256936847252239081050092491484648398045513926409560800308656177709899796461/105171692656031351049100619621537485655856658199768739061462182787316067902867789219594711028697996139697690480301555667107067110703427139127358939924372096363628506787968755907296965563284446163446735532240080421467066888453724907798425024604563593814353654731144648562500000000000000000000000000000000000000000*x^2*1682747082496501616785609913944599770493706531196299824983394924597057086445884627513515376459167938235163047684824890673713073771254834226037743038789953541818056108607500094516751449012551138615147768515841286743473070215259598524774800393673017501029658475698314377^(1/2)+100616511691050002437913441661284273372407106628201691379345663928360531872533291417670949346357703884448215460898359649092536701506241171375819783366098591454874326961286423/14022892354137513473213415949538331420780887759969165208194957704975475720382371895945961470493066151959692064040207422280942281427123618550314525323249612848483800905062500787639595408437926155126231404298677389528942251793829987706456669947275145841913820630819286475000000000000000000000000000000000000000000*x^3*1682747082496501616785609913944599770493706531196299824983394924597057086445884627513515376459167938235163047684824890673713073771254834226037743038789953541818056108607500094516751449012551138615147768515841286743473070215259598524774800393673017501029658475698314377^(1/2))^2+339/25*(1/3688433734727239810178787132218245921784540776986825537376288198288609588072602983156005389111611751616258212593184223083725567532648706499227472445396162659560838466345101278323082500000000000000000000000000000000000000000000*x^2*1540756259228622729299932728313258923697142333828919978779455692164068080968457476044684310386947219341209651710349119236607159314642721280747454859952681041110361888729279063049675183819004623608351570803836469097316897211771933325801958224001032039572896797294481607620448665242484033325806626181713083136389061811812628482131737374033646452787011928025368002220842040850731910343089487309570702530748755361807124544773970660551441918596739030485^(1/2)-3566721134409898743597341270731785857670057491666338493468976285871725520391537784430564473806377808274233491811819458353045332211089897427027324887654602567502630557101905863107045590275954000319601835287972535869398096855191018277101435079654932435949970716029023/256792709871437121549988788052209820616190388971486663129909282027344680161409579340780718397824536556868275285058186539434526552440453546791242476658780173518393648121546510508279197303167437268058595133972744849552816201961988887633659704000172006595482799549080267936741444207080672220967771030285513856064843635302104747021956229005607742131168654670894667036807006808455318390514914551595117088458125893634520757462328443425240319766123171747500000000000000000000000000000000000000000000*x^3*1540756259228622729299932728313258923697142333828919978779455692164068080968457476044684310386947219341209651710349119236607159314642721280747454859952681041110361888729279063049675183819004623608351570803836469097316897211771933325801958224001032039572896797294481607620448665242484033325806626181713083136389061811812628482131737374033646452787011928025368002220842040850731910343089487309570702530748755361807124544773970660551441918596739030485^(1/2))^2+45513679050936165527097553940206537528958724198563240230746311271785673429428795787654085702951967086577299199177399925458508592987130848807367038020559514014452146340388682070793096800862779761145828348179035894740904665667408918598576712914416736363180621327873286635558741151553893970604436822213280661179419876492675784401924118421882544851738337/326348774057988183113055008001014612679489094417352131817962794695002927162613129756704345577433048507671243025510163945276047599671624738135992315527592888186310724271540368567162791799063609947492219453382832075111323935434086758520860467287232787126398674936204701562500000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 8770845571552620850127965846675915680077659787220100563682157838244089694829307411/2500000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 77 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 78 Test 1 - Weifeng
>> input polynomial
x+302/25
>> basis
[(x-178/25)*(x-429/50)*(x-857/50)*(x-399/20)*(x-3023/100), -(x-178/25)*(x-429/50)*(x-857/50)*(x-399/20)*(x-3023/100)]
memory used=15100.2MB, alloc=307.2MB, time=74.02
>> Time taken
1.498000
">> Sums of squares multipliers", [x+302/25-48/11204977*x^2*(x-178/25)*(x-429/50)*(x-857/50)*(x-399/20)*(x-3023/100)+48/11204977*(x+1)^2*(x-178/25)*(x-429/50)*(x-857/50)*(x-399/20)*(x-3023/100), 48/11204977*x^2, 48/11204977*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 78 Test 1 - Weifeng

>> Test
Batch: 78 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+302/25
>> basis
[(x-178/25)*(x-429/50)*(x-857/50)*(x-399/20)*(x-3023/100), -(x-178/25)*(x-429/50)*(x-857/50)*(x-399/20)*(x-3023/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.567176
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 78 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 78 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+302/25
>> basis
[(x-178/25)*(x-429/50)*(x-857/50)*(x-399/20)*(x-3023/100), -(x-178/25)*(x-429/50)*(x-857/50)*(x-399/20)*(x-3023/100), -x^2+10387729/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.578809
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20140
time= 0.129000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [302/25*(1/50000000000000000000000000000000000000000000*9994339853930614170811241107250928031675338359301973543988303803720110462063558947163855^(1/2)-8365830132613087235112327283685809251830587913323541282399558452730888028117618109201769/3018290635887045479584994814389780265565952184509196010284467748723473359543194802043484210000000000000000000000000000000000000000000*x*9994339853930614170811241107250928031675338359301973543988303803720110462063558947163855^(1/2)+24062125334751341461493741662294294752560958032188011226506567171849421129522418152507999/149915097808959212562168616608763920475130075389529603159824557055801656930953384207457825000000000000000000000000000000000000000000000*x^2*9994339853930614170811241107250928031675338359301973543988303803720110462063558947163855^(1/2)-44527817486796263747234503595326953461823070849353755638751045235231211800102889955061/16657233089884356951352068512084880052792230598836622573313839672866850770105931578606425000000000000000000000000000000000000000000000*x^3*9994339853930614170811241107250928031675338359301973543988303803720110462063558947163855^(1/2))^2+302/25*(9/7596031433649064456955570282880947001674312997681476625882577167620741288183706918476101928500000000000000000000000000000000000000000000*x*37378555420554864257800496059912507925298152975404695656971118234237187556538578467567686180201142419100705038467243111017599422738951371982787927784560678436211185851952939943414369562051258338552324234957930101727682674425389915251674565945678894075983380412632844457^(1/2)-377017336899814286623458267615775591014069240063632078555023045751830134442733452732737147513208613383705664208983327861870450543237613467830629241749165680951722301682449763487/5012687067988317888877218842471710499915811905642020444064007577770218861058981549458580431450815456866154152509679953629843631195124273395042751904883137339955473599351304859961198567096278022223076594423166122913811749384861892608254370598675480828070618896396126491750000000000000000000000000000000000000000000*x^2*37378555420554864257800496059912507925298152975404695656971118234237187556538578467567686180201142419100705038467243111017599422738951371982787927784560678436211185851952939943414369562051258338552324234957930101727682674425389915251674565945678894075983380412632844457^(1/2)+93332096207418186003837051987038197810919724182520697755695551319519027921278562946028238261651529696712497362780213747835524567800250136407121521654857801879569920229966499270931/69620653722059970678850261700995979165497387578361395056444549691253039736930299298035839325705770234252141007078888244858939322154503797153371554234488018610492688879879234166127757876337194753098286033655085040469607630345304064003532924981603900389869706894390645718750000000000000000000000000000000000000000000000*x^3*37378555420554864257800496059912507925298152975404695656971118234237187556538578467567686180201142419100705038467243111017599422738951371982787927784560678436211185851952939943414369562051258338552324234957930101727682674425389915251674565945678894075983380412632844457^(1/2))^2+302/25*(1/24911552627113753141215748426154635807419959920121909132156757809050692388621685378698745642429787113206977828428261559631406633325645951923821405861769890628840556132486906422485125000000000000000000000000000000000000000000000*x^2*21472219710723036524729247519451540485155669948610802232415903012490288431281254700855119160556842226781673940336592336843861249180207768647951416887323961672941253140552373229855974445476922053048142393761836110875454540443707690232607511168354140749507011035614519843170206260078841264769977975148798009506445093962358913418802451761829706921006505010000862091954485272831419588719496145995648603742272254529954177487774560765187354561007846343338^(1/2)-4152284906463246372971201341206165260590433069000581839241833364300847873385506206473618434160861335549577179292241617344847060362858523199117014692565012089019780565076277351450954284592897835162267238498147526463908055184211719520931866648736343876535145151534156119/3450892453509059441474343351340426149400018384598164644495412984150224926455915934066001293660921072161340454696952339849906272189676248532706477714034208126008415683303059983369710178737362472811308598997437946390698051142738735930240492866342629763313626773580904974795211720369813774695175031720342537242107247243950539656593251176008345755161759733750138550492685133133621005329919023463586382744293755192314064239106625837262253411590546733750750000000000000000000000000000000000000000000000*x^3*21472219710723036524729247519451540485155669948610802232415903012490288431281254700855119160556842226781673940336592336843861249180207768647951416887323961672941253140552373229855974445476922053048142393761836110875454540443707690232607511168354140749507011035614519843170206260078841264769977975148798009506445093962358913418802451761829706921006505010000862091954485272831419588719496145995648603742272254529954177487774560765187354561007846343338^(1/2))^2+2416069526451597438967588094600400528553923517657746826308358719276176042404037172984292532447689505681892579108082912855308954781623925635216874749673920861171878719180797902071341802743718525170856053255195747060433771716369131035884308506573598810947570184549837789870205967581228519332969470792001506546886514729554514568450335478125383085582400378764389/7609448793864556530421405423651691148593338478177478983238156830475183798781017593591122231165839227295348685007771490335963596746329312364775205971622052353904636368494461768221815665982831903314392099571523163471933276234862584240227392259773270490512715936510091834313964843750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 282301559200272404252057231397376391224959453886238905485668240946741589141508239/12500000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 78 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 79 Test 1 - Weifeng
>> input polynomial
x+677/100
>> basis
[(x-343/100)*(x-116/25)*(x-427/50)*(x-561/50)*(x-611/50), (-x+343/100)*(x-116/25)*(x-427/50)*(x-561/50)*(x-611/50)]
memory used=15379.1MB, alloc=307.2MB, time=75.53
>> Time taken
1.442000
">> Sums of squares multipliers", [x+677/100-29/195555*x^2*(x-343/100)*(x-116/25)*(x-427/50)*(x-561/50)*(x-611/50)-29/195555*(x+1)^2*(-x+343/100)*(x-116/25)*(x-427/50)*(x-561/50)*(x-611/50), 29/195555*x^2, 29/195555*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 79 Test 1 - Weifeng

>> Test
Batch: 79 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+677/100
>> basis
[(x-343/100)*(x-116/25)*(x-427/50)*(x-561/50)*(x-611/50), (-x+343/100)*(x-116/25)*(x-427/50)*(x-561/50)*(x-611/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.685893
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 79 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 79 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+677/100
>> basis
[(x-343/100)*(x-116/25)*(x-427/50)*(x-561/50)*(x-611/50), (-x+343/100)*(x-116/25)*(x-427/50)*(x-561/50)*(x-611/50), -x^2+436921/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.506648
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20078
time= 0.119000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [677/100*(3/62500000000000000000000000000000000000000000*784419599248080293514372705818709783409159871881364722867913954100430649266738131324671^(1/2)-23613218338531027395688828984832462076018289892309142403116204338875524944465689564106081/3982890515182127690319227413794498925260009249477629380361833101944936621651862861801017002500000000000000000000000000000000000000000*x*784419599248080293514372705818709783409159871881364722867913954100430649266738131324671^(1/2)+14604115941873340235324546902658904893504360053546116827976092075138020504493552011079/11295642229172356226606966963789420881091902155091652009297960939046201349441029091075262400000000000000000000000000000000000000000*x^2*784419599248080293514372705818709783409159871881364722867913954100430649266738131324671^(1/2)-6672740514472809687747935629329821637369064918855581787653826788475672405477163986367/94130351909769635221724724698245174009099184625763766744149674492051677912008575758960520000000000000000000000000000000000000000000*x^3*784419599248080293514372705818709783409159871881364722867913954100430649266738131324671^(1/2))^2+677/100*(1/10785667515113201785384467836555503089604105047585420362019844040066888371433244629757154042770000000000000000000000000000000000000000000*x*18201260543024324367904699783886950091422802868948837070103859132775147106732793798074942619914701454361774874599049814163972569440237489650384718640422000520093228887140529324518010553634058959559927630466002448097576599846418042890267920728708936124002630715787182619413^(1/2)-82844176324029293405099969392935908466578773280128236247047764891394178600288347111123939667788173780432218372358497244584820832447730313501833613910754332126792334927779882083/3780727125351249060910780512716547055548495795341108143254586692092326531586852478366748605502961435774925541714167474323203312522205903961721345729408188808180369737450719255923700493507813207072547744511494230817905035972529597166091471717097037138017533152743829476890625000000000000000000000000000000000000000*x^2*18201260543024324367904699783886950091422802868948837070103859132775147106732793798074942619914701454361774874599049814163972569440237489650384718640422000520093228887140529324518010553634058959559927630466002448097576599846418042890267920728708936124002630715787182619413^(1/2)+1000410701585169706026652049740526264463043140816352960705253961715965387700633339645902145644206481664252409944537335090287325815809648552160677426877126340418006109649653718942479/806555120074933132994299842712863371850345769672769737227645160979696326738528528718239702507298439631984115565689061188950040004737259511833887088940413612411812210656153441263722771948333484175476852162452102574486407674139647395432847299647367922777073739252016955070000000000000000000000000000000000000000000000000*x^3*18201260543024324367904699783886950091422802868948837070103859132775147106732793798074942619914701454361774874599049814163972569440237489650384718640422000520093228887140529324518010553634058959559927630466002448097576599846418042890267920728708936124002630715787182619413^(1/2))^2+677/100*(1/4556361801187034597977844991718196991192024784125649850770397603146820864581440269825117680332259337341648943768225248283075057131145350519974184524578811398169972707074943621511630000000000000000000000000000000000000000000000*x^2*8233669288366653609850208675385534530672674420156932734775229979953280105560992506199366014306152201481085571994611956823515007351085032473285108545375061317860833736626216415327910286315066371556937776452153890461875212132777916437164947343886360658715616538793777739916329644146703378552163369312441637333116334207164861169931481454869436016881319226174581275819830115134208387193189444853287244745130116217411097002702739407463214782644169501617^(1/2)-8942286151541316778104110524946202378047081301948569707843783735451022067276496539941071520119083216136371763658643616785810987622767881990464375565659918198899962175610706935542828626432425970203440084209815254907307546562382674434559575033532856724219824390698227469/514604330522915850615638042211595908167042151259808295923451873747080006597562031637460375894134512592567848249663247301469687959442814529580319284085941332366302108539138525957994392894691648222308611028259618153867200758298619777322809208992897541169726033674611108744770602759168961159510210582027602333319770887947803823120717590929339751055082451635911329738739382195888024199574340303330452796570632263588193562668921212966450923915260593851062500000000000000000000000000000000000000000000*x^3*8233669288366653609850208675385534530672674420156932734775229979953280105560992506199366014306152201481085571994611956823515007351085032473285108545375061317860833736626216415327910286315066371556937776452153890461875212132777916437164947343886360658715616538793777739916329644146703378552163369312441637333116334207164861169931481454869436016881319226174581275819830115134208387193189444853287244745130116217411097002702739407463214782644169501617^(1/2))^2+419827914148777539951842161809167868006439027656498031407314026351755522827109232562498572822070968464403079218646039746145943910585021211443155528047194025622943513802885492790522652973042505317106974405397329190370710465296449659750989186430715848803364995868117342407880385009585620299324120706045826153661424901632545581249071204460251998498084175996213284407/542121300785745184375312159244888282066219418306769615974940073481274345557329758362796175261355253491199304368186811663789362783522858343162585257571524749933186270393243577272556911632822686185068455192493737764588061840313728440727538094897459487869550960933370231770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 40386516238664536020293132458984116779074821305244680698617745532515419371941557/39062500000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 79 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 80 Test 1 - Weifeng
>> input polynomial
x+501/50
>> basis
[(x-269/50)*(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100), -(x-269/50)*(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100)]
memory used=15657.8MB, alloc=307.2MB, time=77.07
>> Time taken
1.362000
">> Sums of squares multipliers", [x+501/50-58/7017061*x^2*(x-269/50)*(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100)+58/7017061*(x+1)^2*(x-269/50)*(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100), 58/7017061*x^2, 58/7017061*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 80 Test 1 - Weifeng

>> Test
Batch: 80 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+501/50
>> basis
[(x-269/50)*(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100), -(x-269/50)*(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.413701
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 80 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 80 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+501/50
>> basis
[(x-269/50)*(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100), -(x-269/50)*(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100), -x^2+6869641/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.536928
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20264
time= 0.121000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [501/50*(1/2500000000000000000000000000000000000000000*16259026422788559285511441784984394615496794853403419120991839197901406995273797353655^(1/2)-17886505771313117479703956393009285939478999667198841204848376980779599325839055575945969/407288611890853410102061616713859085118194711077755648980845571907430245231608623709057750000000000000000000000000000000000000000000*x*16259026422788559285511441784984394615496794853403419120991839197901406995273797353655^(1/2)+54222241366089697906584695311110715179377270385139755635761290499445726337397439926631719/19510831707346271142613730141981273538596153824084102945190207037481688394328556824386000000000000000000000000000000000000000000000000*x^2*16259026422788559285511441784984394615496794853403419120991839197901406995273797353655^(1/2)-218699408537907555028816267554293479820219196232967104336796245351538880493771351927641/4335740379410282476136384475995838564132478627574245098931157119440375198739679294308000000000000000000000000000000000000000000000000*x^3*16259026422788559285511441784984394615496794853403419120991839197901406995273797353655^(1/2))^2+501/50*(1/272068792743090077948177159964857868858954066999940773519204842034163403814714560637650577000000000000000000000000000000000000000000000*x*3655036455639037580793274336816535151722468254395470420988432026749869529860206174274596462695654318635902742479583156309088968330699518338739350024658859067580987104262745811634624682185793342729320568254019293605434210956159532025598960401708078337874212162398478397^(1/2)-1855596805328604096883614646305233600974828529262559623150643844811836191628441420260320435785293877239799621800257361149760712560894384853318844223459414875896987980366416891239/6565933752644977690047798209850063146806829199512821115548081485179406341066238636421430771309558656232160615232784113130099943109041050907915000044297351618408958869933076308325673081770886244423929164528178371746289001717651853938201725272529482044085411070176907300000000000000000000000000000000000000000000000*x^2*3655036455639037580793274336816535151722468254395470420988432026749869529860206174274596462695654318635902742479583156309088968330699518338739350024658859067580987104262745811634624682185793342729320568254019293605434210956159532025598960401708078337874212162398478397^(1/2)+11315358871298838023645153485081372825225521632243647841864097223927508976089676584972778836087621134910334446045608630218542561085299847165086331180271320947202272397428712104631/1823870486845827136124388391625017540779674777642450309874467079216501761407288510117064103141544071175600170897995586980583317530289180807754166678971486560669155241648076752312686967158579512339980323480049547707302500477125514982833812575702633901134836408382474250000000000000000000000000000000000000000000000000*x^3*3655036455639037580793274336816535151722468254395470420988432026749869529860206174274596462695654318635902742479583156309088968330699518338739350024658859067580987104262745811634624682185793342729320568254019293605434210956159532025598960401708078337874212162398478397^(1/2))^2+501/50*(1/241816253669444813302640791527283435345698621091774729982864437951614082264222206070275699324123568272826715030138415389646419542165277119607637705312394291056568406881540193609898000000000000000000000000000000000000000000000000*x^2*5907262794246515291534077763064025357482110489448152112878426270496529996644442395396318384094485376353743102152228160782971178162907991468109959196835478215482270241608905302868997852767173465181019136003535903471798675705348169394444145404136241888673298993372880699639445351772997922564365794024076361814911038998438365839992629629662524863809788337192167841376288878744626176135033407898893740076769666948594792914208832165659413513120304968317553^(1/2)-32490334359101668186844881303190413885294862584816921375644313312606268340196736249971553462755960562031379058807380944994536303447486943083630343458780781973022322264112802846885497908686575726256312097162634856405300477328617854372658251338801802837611331748528552953913/196908759808217176384469258768800845249403682981605070429280875683217666554814746513210612803149512545124770071740938692765705938763599715603665306561182607182742341386963510095633261758905782172700637866784530115726622523511605646481471513471208062955776633112429356654648178392433264085478859800802545393830367966614612194666420987655417495460326277906405594712542962624820872537834446929963124669225655564953159763806961072188647117104010165610585100000000000000000000000000000000000000000000000000*x^3*5907262794246515291534077763064025357482110489448152112878426270496529996644442395396318384094485376353743102152228160782971178162907991468109959196835478215482270241608905302868997852767173465181019136003535903471798675705348169394444145404136241888673298993372880699639445351772997922564365794024076361814911038998438365839992629629662524863809788337192167841376288878744626176135033407898893740076769666948594792914208832165659413513120304968317553^(1/2))^2+5965511263743180358491087866110954144436418077008510854159257974039203026516243885809780289506600380663747496507249633551383927838285941578250905618025237717731949737386763514161054541779214205881479716946507677951882551188532567081489026609962452149119573457556194757586404260999238275486210958777763923334269718319831272209925165516492912496875663733755070246765839/152679532098407792760459443363404610335901855090007841008406683196706741668561102429671218024927897925850715306997388859728930647953605032619195041992991812923382361478585987063855406878880196049000913148746878010093035729009865932755684866977753872212792370781009734023740625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 7356035714631108039729645136707174215759906068952137014071081509779635178906155781/1250000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 80 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 81 Test 1 - Weifeng
>> input polynomial
x+97/50
>> basis
[(x-204/25)*(x-553/50)*(x-251/20)*(x-341/25)*(x-366/25), (-x+204/25)*(x-553/50)*(x-251/20)*(x-341/25)*(x-366/25)]
memory used=15952.4MB, alloc=307.2MB, time=78.60
>> Time taken
1.334000
">> Sums of squares multipliers", [x+97/50-79/23730696*x^2*(x-204/25)*(x-553/50)*(x-251/20)*(x-341/25)*(x-366/25)-79/23730696*(x+1)^2*(-x+204/25)*(x-553/50)*(x-251/20)*(x-341/25)*(x-366/25), 79/23730696*x^2, 79/23730696*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 81 Test 1 - Weifeng

>> Test
Batch: 81 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+97/50
>> basis
[(x-204/25)*(x-553/50)*(x-251/20)*(x-341/25)*(x-366/25), (-x+204/25)*(x-553/50)*(x-251/20)*(x-341/25)*(x-366/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.768937
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 81 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 81 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+97/50
>> basis
[(x-204/25)*(x-553/50)*(x-251/20)*(x-341/25)*(x-366/25), (-x+204/25)*(x-553/50)*(x-251/20)*(x-341/25)*(x-366/25), -x^2+152881/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 5.206207
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19530
time= 0.117000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [97/50*(1/312500000000000000000000000000000000000000*1196812398196643385806996218079093441342283786127443394155481585117491429871380436905^(1/2)-1538624133893683054312880396235079933761058988945758328976230128338900153516495328939/1451135032813430105290982914420900797627519090679525115413521421954958358719048779747312500000000000000000000000000000000000000*x*1196812398196643385806996218079093441342283786127443394155481585117491429871380436905^(1/2)+904726301188043825239774919445442629144059032996319340109864127317091097373762952953/5984061990983216929034981090395467206711418930637216970777407925587457149356902184525000000000000000000000000000000000000000000*x^2*1196812398196643385806996218079093441342283786127443394155481585117491429871380436905^(1/2)-239038390332717641924054375797498858765714712704255817478382465031667939702713909083/39893746606554779526899873935969781378076126204248113138516052837249714329046014563500000000000000000000000000000000000000000000*x^3*1196812398196643385806996218079093441342283786127443394155481585117491429871380436905^(1/2))^2+97/50*(1/29022700656268602105819658288418015952550381813590502308270428439099167174380975594946250000000000000000000000000000000000000000*x*1332708132359890889695271798532655563016961513446466144620501072029912713066510366306951147160593164739489349848656277002651958541488909321963355601074751433614126066408109357325958059045975616516204937721585269804785277747604341628169156592370378170600097^(1/2)-184649214806926207261852428407617988160833280684524227394514814154149656904960391613228884056180049816097425458215829800269150134290308754195954669036154144078390655565593/33317703308997272242381794963316389075424037836161653615512526800747817826662759157673778679014829118487233746216406925066298963537222733049083890026868785840353151660202733933148951476149390412905123443039631745119631943690108540704228914809259454265002425000000000000000000000000000000000000000000*x^2*1332708132359890889695271798532655563016961513446466144620501072029912713066510366306951147160593164739489349848656277002651958541488909321963355601074751433614126066408109357325958059045975616516204937721585269804785277747604341628169156592370378170600097^(1/2)+38455885790268219367818046156661732773183600713741865413615643092796686315678003217279784385292204984488336781013672362814048595420075736567338555885090162476720412511685529281/166588516544986361211908974816581945377120189180808268077562634003739089133313795788368893395074145592436168731082034625331494817686113665245419450134343929201765758301013669665744757380746952064525617215198158725598159718450542703521144574046297271325012125000000000000000000000000000000000000000000000000*x^3*1332708132359890889695271798532655563016961513446466144620501072029912713066510366306951147160593164739489349848656277002651958541488909321963355601074751433614126066408109357325958059045975616516204937721585269804785277747604341628169156592370378170600097^(1/2))^2+97/50*(1/208790262529033658682588840101506693993292047613199654483679448240613545566397553902066760598975624372278819263838883279619311485997821554720655259863485745244168676914013887500000000000000000000000000000000000000000000*x^2*40409619725512240280244923976264248321142796979654087321400060400692203142753949658420229812325384599523376246745986949147114185562347952661344665390478009607280804756625811235533740859172754054079237730342975592095564823458975709964989472106772993089953839488986139236552920693688412517197465659115383139423469195097287157215245979304587281250465152838211532243965787373663459062861462149099650937058706868013858866361121345732415693^(1/2)-2904480679566921753751652751853744152075371447914864227594534997918062367613722872457316809990902127355784460063807815263421170647822000002727507293876653312239613869009319060080942400948207006455875919556003895409101060542064334175490892571635827083660732611121/10102404931378060070061230994066062080285699244913521830350015100173050785688487414605057453081346149880844061686496737286778546390586988165336166347619502401820201189156452808883435214793188513519809432585743898023891205864743927491247368026693248272488459872246534809138230173422103129299366414778845784855867298774321789303811494826146820312616288209552883060991446843415864765715365537274912734264676717003464716590280336433103923250000000000000000000000000000000000000000000000*x^3*40409619725512240280244923976264248321142796979654087321400060400692203142753949658420229812325384599523376246745986949147114185562347952661344665390478009607280804756625811235533740859172754054079237730342975592095564823458975709964989472106772993089953839488986139236552920693688412517197465659115383139423469195097287157215245979304587281250465152838211532243965787373663459062861462149099650937058706868013858866361121345732415693^(1/2))^2+549460308387757762295528275603279586303178029314167615405101866528729913279077659289483565344529594623872468890205849557546690958506271819762262237147186526611753056466889428363126745827004868568963389768446254235915253359845683614239446468025471059032796072712406027672182313503348621389046641233311091062724109482384911530884335930242867102289880638220757/1890055541153794200597701868014915417611092454974402196595074763942194303091271346697174127031692795993558632882975211121351404826390161657720751611470684095978971651020853553631065322089548190660693811163914227298629409559310177499527817267520535192191727288096093750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 268333038912104105331277445100347779581538200120927729373084668840547182148584793/50000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 81 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 82 Test 1 - Weifeng
>> input polynomial
x+933/100
>> basis
[(x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100)*(x-1479/100), (-x+437/100)*(x-128/25)*(x-119/20)*(x-1379/100)*(x-1479/100)]
memory used=16229.6MB, alloc=307.2MB, time=80.19
>> Time taken
1.469000
">> Sums of squares multipliers", [x+933/100-847/6404360*x^2*(x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100)*(x-1479/100)-847/6404360*(x+1)^2*(-x+437/100)*(x-128/25)*(x-119/20)*(x-1379/100)*(x-1479/100), 847/6404360*x^2, 847/6404360*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 82 Test 1 - Weifeng

>> Test
Batch: 82 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+933/100
>> basis
[(x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100)*(x-1479/100), (-x+437/100)*(x-128/25)*(x-119/20)*(x-1379/100)*(x-1479/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.012820
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 82 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 82 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+933/100
>> basis
[(x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100)*(x-1479/100), (-x+437/100)*(x-128/25)*(x-119/20)*(x-1379/100)*(x-1479/100), -x^2+2493241/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.454727
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20377
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [933/100*(1/25000000000000000000000000000000000000000000*3173987108343475850148884717175223957712746574004880124572097059382186050423651739954919^(1/2)-704180928126776864212720319379598339141123633845494452412893414872493171975125702154851509/59226599441689259363778188822489679050919851070931063124515331128071591700905341467558788540000000000000000000000000000000000000000000*x*3173987108343475850148884717175223957712746574004880124572097059382186050423651739954919^(1/2)+102958701158601318751173221017012848744812695138841023919525540028363172485390270933058787/74390322851800215237864485558794311508892497828239377919658524829269985556804337655193414062500000000000000000000000000000000000000000*x^2*3173987108343475850148884717175223957712746574004880124572097059382186050423651739954919^(1/2)-1901754108580869372110951077408295972465639466077124673371457221481340562138997734828869/39674838854293448126861058964690299471409332175061001557151213242277325630295646749436487500000000000000000000000000000000000000000000*x^3*3173987108343475850148884717175223957712746574004880124572097059382186050423651739954919^(1/2))^2+933/100*(1/2302434053295669957766877090474286273104509210382445078965533497603783127372695149551347904492500000000000000000000000000000000000000000000*x*958220352761493384707925610618301961409385572978073652333710938126850513868104481477712105575289289981645711472979368796698250774700122776548306539359248230027848168351251699197021274762281608142639685007040697047874769713631251588718426658305103288349970278577783335009736777^(1/2)-58822555926209413308703406333454824587445860871821835622701210450177289745921097487734265921505398685088263122639814706786733829014764060609831191832406868680735084264942773435023/1155410393201157618216952102835573104593310578349767265675696468802472484567650098244829709294962970235103349846840074915632939037017832929921591486365653010483739752835110569771327903652268820107684507645145535025572471519651830693792315102457921971483083133333340034175727625000000000000000000000000000000000000000000*x^2*958220352761493384707925610618301961409385572978073652333710938126850513868104481477712105575289289981645711472979368796698250774700122776548306539359248230027848168351251699197021274762281608142639685007040697047874769713631251588718426658305103288349970278577783335009736777^(1/2)+878859955985406892506693383230613690688685698611803546565704970119083647163234938130749091535327676822043936177567182053892406380308488222815223082581001268734449826402671605733959/492975101099160583772566230543177857959812513429234033354963826689054926748864041917794009299184200633644095934651765297336720655794275383433212367516011951139728961209647176435766572224968029912612056595262094944244254515051447762684721110382046707832782136888891747914977120000000000000000000000000000000000000000000000*x^3*958220352761493384707925610618301961409385572978073652333710938126850513868104481477712105575289289981645711472979368796698250774700122776548306539359248230027848168351251699197021274762281608142639685007040697047874769713631251588718426658305103288349970278577783335009736777^(1/2))^2+933/100*(1/4681992499692444417349513019718486614217196908818514632772516337535261747418479273639317959953717838030339141795340281451303734980472274117068258568252501643955246311243232135579055534500000000000000000000000000000000000000000000000*x^2*746218809063133767398482851540409082102162378094972860572319093106301805347234145579624096476912198710521937176457528887295278170087637141027612061048499505127851287097854167978313308662198702101507881413742014674024102197210556070159957520444978476629437595805042767911321138010727800193557050421152996514715686474868987978037370048121484494987336772223434905014610485730872412820600282075427202399287751027587474433977399933870052894367450641253363697047141^(1/2)-119823257981701833262756969905246135490630909491031547668236051592715058022790932224967615953579146079264848538063927097014233571569671670793738900063574610689798921179744078734073934940251511466239170166499680283874246041828872822630402416645916525883405770169600543709099/6218490075526114728320690429503409017518019817458107171435992442552515044560284546496867470640934989254349476470479407394127318084063642841896767175404162542732094059148784733152610905518322517512565678447850122283534184976754633917999646003708153971911979965042023065927676150089398334946308753509608304289297387290574899816978083734345704124894473101861957541788420714423936773505002350628560019994064591896562286949811666115583774119728755343778030808726175000000000000000000000000000000000000000000000*x^3*746218809063133767398482851540409082102162378094972860572319093106301805347234145579624096476912198710521937176457528887295278170087637141027612061048499505127851287097854167978313308662198702101507881413742014674024102197210556070159957520444978476629437595805042767911321138010727800193557050421152996514715686474868987978037370048121484494987336772223434905014610485730872412820600282075427202399287751027587474433977399933870052894367450641253363697047141^(1/2))^2+155663637328029320096447630732607783824965659009995233625793990805135233417033429557024830562920641135209945307963469223622393144811042451270511408543625024175697027133122263646174639045523828547111325843284194357819127798230128583227403056749965641390542223113015213510864915869708470116065302308606731832933206611419650705936026105115701026843487906730101818619/204007177641475241289784929831679859289221046344862242841163380701778561738956597627435241093580450131046540941887185232605648404057754463358174701538393570912879814434960922404489202127283108259406108332614631302717972687959378205159853957199086807391103078333956384951547107840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 69804733821432909031234941119535213489484859621989857937778899515714510681683025237/10000000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 82 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 83 Test 1 - Weifeng
>> input polynomial
x+1251/100
>> basis
[(x-169/100)*(x-29/4)*(x-743/50)*(x-399/25)*(x-2303/100), -(x-169/100)*(x-29/4)*(x-743/50)*(x-399/25)*(x-2303/100)]
memory used=16504.8MB, alloc=307.2MB, time=81.71
>> Time taken
1.364000
">> Sums of squares multipliers", [x+1251/100-439/18794660*x^2*(x-169/100)*(x-29/4)*(x-743/50)*(x-399/25)*(x-2303/100)+439/18794660*(x+1)^2*(x-169/100)*(x-29/4)*(x-743/50)*(x-399/25)*(x-2303/100), 439/18794660*x^2, 439/18794660*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 83 Test 1 - Weifeng

>> Test
Batch: 83 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+1251/100
>> basis
[(x-169/100)*(x-29/4)*(x-743/50)*(x-399/25)*(x-2303/100), -(x-169/100)*(x-29/4)*(x-743/50)*(x-399/25)*(x-2303/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.223506
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 83 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 83 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+1251/100
>> basis
[(x-169/100)*(x-29/4)*(x-743/50)*(x-399/25)*(x-2303/100), -(x-169/100)*(x-29/4)*(x-743/50)*(x-399/25)*(x-2303/100), -x^2+6265009/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.135094
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20276
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1251/100*(1/50000000000000000000000000000000000000000000*2940092009621653155303436219971574026019800438766633498752205947685629403188994392093351^(1/2)-41989397879190177651970614842194795398536056252178542268966617481868318138388332610290779/91951377600917202432114967779610977663769258722426462673475241013868059584735799612719552525000000000000000000000000000000000000000000*x*2940092009621653155303436219971574026019800438766633498752205947685629403188994392093351^(1/2)+1584958417794439127645933422670631104207122337552200876607983314778328712799031157204077/58801840192433063106068724399431480520396008775332669975044118953712588063779887841867020000000000000000000000000000000000000000000000*x^2*2940092009621653155303436219971574026019800438766633498752205947685629403188994392093351^(1/2)-20237077851027286087671048457179117902430462678196832273721411138744259396448968852843/58801840192433063106068724399431480520396008775332669975044118953712588063779887841867020000000000000000000000000000000000000000000000*x^3*2940092009621653155303436219971574026019800438766633498752205947685629403188994392093351^(1/2))^2+1251/100*(1/3678055104036688097284598711184439106550770348897058506939009640554722383389431984508782101000000000000000000000000000000000000000000000*x*232705249870384626579439150100325053719402024940705499135318322292571927264145805691396196931497579864012768530302213010598644430401866631124644885220223538194992576274069005688214898324334512651192798214781513426997215516101275617280645472724700931104799555688183311877^(1/2)-4169903343170937985954429241791731250957914431958245911838267083922406832354840068254836145569118177758213260895862395077147527797830629172901374687557552085048161832921792751177/232705249870384626579439150100325053719402024940705499135318322292571927264145805691396196931497579864012768530302213010598644430401866631124644885220223538194992576274069005688214898324334512651192798214781513426997215516101275617280645472724700931104799555688183311877000000000000000000000000000000000000000000000*x^2*232705249870384626579439150100325053719402024940705499135318322292571927264145805691396196931497579864012768530302213010598644430401866631124644885220223538194992576274069005688214898324334512651192798214781513426997215516101275617280645472724700931104799555688183311877^(1/2)+41477572852070883576592768145647364005493283026812186351444396902257109352226979229593356239497106278678762387380536683535156328844243795899118189351244989432085595151731964537647/145440781168990391612149468812703158574626265587940936959573951432857454540091128557122623082185987415007980331438883131624152769001166644452903053262639711371870360171293128555134311452709070406995498884238445891873259697563297260800403420452938081940499722305114569923125000000000000000000000000000000000000000000000*x^3*232705249870384626579439150100325053719402024940705499135318322292571927264145805691396196931497579864012768530302213010598644430401866631124644885220223538194992576274069005688214898324334512651192798214781513426997215516101275617280645472724700931104799555688183311877^(1/2))^2+1251/100*(1/23744690551401864706353510250705074567440068691756952253656151666708494018116184502611014706260552678928449098022078678571492347340281080070364796550778690608743823463323851494330428100000000000000000000000000000000000000000000000*x^2*38006566083665751927578525540899940331886318888048869122035795673588039326870194253127889066106667150467359796451162261065489320085138804102250418758755048227912703309647184904118672582112597944551410733018721433545580310866198780671323572767192850519049588537216128258468108257287553662871611697790946286724268067898554954241247465940829212977766486312850797623697147986172700746781203506999393094301187062219369931806196110728841768845936269910145043097^(1/2)-2297389384703855691311803795299226496706007455484295558791572676037167028446433745072608780367111635458893170911043874313487515182905460430372388538607434069346288302469335022780504896905362517247087031669938024892561510804776299760405206079937544722062365543817924381421/1266885536122191730919284184696664677729543962934962304067859855786267977562339808437596302203555571682245326548372075368849644002837960136741680625291834940930423443654906163470622419403753264818380357767290714451519343695539959355710785758906428350634986284573870941948936941909585122095720389926364876224142268929951831808041582198027640432592216210428359920789904932872423358226040116899979769810039568740645664393539870357628058961531208997004834769900000000000000000000000000000000000000000000000*x^3*38006566083665751927578525540899940331886318888048869122035795673588039326870194253127889066106667150467359796451162261065489320085138804102250418758755048227912703309647184904118672582112597944551410733018721433545580310866198780671323572767192850519049588537216128258468108257287553662871611697790946286724268067898554954241247465940829212977766486312850797623697147986172700746781203506999393094301187062219369931806196110728841768845936269910145043097^(1/2))^2+439805957125538633347683162149718041514671167881330862665586806781535593990151615681882555626749822734500500213669293301076351184843811312371196620757249014314535752077944416869787712518890849833676163585217793003042876433639260903733531078683879575099269388758999456525171566452157386991735147417826340444494762257495761077544457476641820633113598173663937273271/6252477725196305648080531949334913408661041788903995412951662060507939738841309701704292103145952853827861118009873436626512576041448583962584955560274232839897562735954047720730064500813369901338773235322158020231667835886926456819204534928016920402660328383369212513622539062500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 723997632050955716987586295018755520103639588687180143949719434733345520934978699/156250000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 83 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 84 Test 1 - Weifeng
>> input polynomial
x+177/50
>> basis
[(x-263/50)*(x-493/50)*(x-759/50)*(x-2059/100)*(x-2159/100), (-x+263/50)*(x-493/50)*(x-759/50)*(x-2059/100)*(x-2159/100)]
memory used=16781.7MB, alloc=307.2MB, time=83.25
>> Time taken
1.415000
">> Sums of squares multipliers", [x+177/50-92/26381467*x^2*(x-263/50)*(x-493/50)*(x-759/50)*(x-2059/100)*(x-2159/100)-92/26381467*(x+1)^2*(-x+263/50)*(x-493/50)*(x-759/50)*(x-2059/100)*(x-2159/100), 92/26381467*x^2, 92/26381467*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 84 Test 1 - Weifeng

>> Test
Batch: 84 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+177/50
>> basis
[(x-263/50)*(x-493/50)*(x-759/50)*(x-2059/100)*(x-2159/100), (-x+263/50)*(x-493/50)*(x-759/50)*(x-2059/100)*(x-2159/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.077809
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 84 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 84 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+177/50
>> basis
[(x-263/50)*(x-493/50)*(x-759/50)*(x-2059/100)*(x-2159/100), (-x+263/50)*(x-493/50)*(x-759/50)*(x-2059/100)*(x-2159/100), -x^2+5103081/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.485880
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20199
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [177/50*(1/50000000000000000000000000000000000000000000*11960476588751373324789473910906251067324010952215457267618437928927817633046316863239991^(1/2)-10624314000191084059502633378131251082651896806069479347768573816966814599945390596177333/4234008712417986156975473764460812877832699877084271872736927026840447442098396169586956814000000000000000000000000000000000000000000*x*11960476588751373324789473910906251067324010952215457267618437928927817633046316863239991^(1/2)+1000516682908384276376775650835386545775849847934761022862602217283638977500083221180451/7176285953250823994873684346543750640394406571329274360571062757356690579827790117943994600000000000000000000000000000000000000000000*x^2*11960476588751373324789473910906251067324010952215457267618437928927817633046316863239991^(1/2)-21910826771283631913026691129582613361364465586077876093723816337399891649185432500753/11960476588751373324789473910906251067324010952215457267618437928927817633046316863239991000000000000000000000000000000000000000000000*x^3*11960476588751373324789473910906251067324010952215457267618437928927817633046316863239991^(1/2))^2+177/50*(1/211700435620899307848773688223040643891634993854213593636846351342022372104919808479347840700000000000000000000000000000000000000000000*x*4341628152685303480387105820044765030030397936780099488235276184696018493415503327755315558568125735505662608116099820146832255435788004029370781307569365099047007038842902748105107946860706056073640873453760423759349962742433722854098912220531181307967344193455675733^(1/2)-1302511868802966825316561647749299879753852373689217449231791873952099565776549596713261750615206332010470260328036316356595267421989728650665273391060896328984600709558967786769/3256221114513977610290329365033573772522798452585074616176457138522013870061627495816486668926094301629246956087074865110124191576841003022028085980677023824285255279132177061078830960145529542055230655090320317819512472056825292140574184165398385980975508145091756799750000000000000000000000000000000000000000000*x^2*4341628152685303480387105820044765030030397936780099488235276184696018493415503327755315558568125735505662608116099820146832255435788004029370781307569365099047007038842902748105107946860706056073640873453760423759349962742433722854098912220531181307967344193455675733^(1/2)+4261785958511828290299785148631312871178565361779112659150621556758347723901958069738174048440738469111541165097259814476284049216233611692930049386070872983074247917659817123421571/434162815268530348038710582004476503003039793678009948823527618469601849341550332775531555856812573550566260811609982014683225543578800402937078130756936509904700703884290274810510794686070605607364087345376042375934996274243372285409891222053118130796734419345567573300000000000000000000000000000000000000000000000000*x^3*4341628152685303480387105820044765030030397936780099488235276184696018493415503327755315558568125735505662608116099820146832255435788004029370781307569365099047007038842902748105107946860706056073640873453760423759349962742433722854098912220531181307967344193455675733^(1/2))^2+177/50*(1/108899376721372414040587787704498933415274258095158249270247657327443044939480820253437611178159006758195297951962923883859047284074627805083805192246658504410799091866424222014808900000000000000000000000000000000000000000000000*x^2*5162370128013041071673655495575117805339462615314048742718980330593492008140727436287859339567377286385925670183458735092064302588859875024716734666399379549110611732430310136826003452040243748006840499922495246473098762913562736182982826660684732214150567683868574279390362765161544890327388025202641505308740746757564787294141555489014824476230772953509866301999427709559993256026240511411833430021614446709923126464407062897702474514148103972019813^(1/2)-553957932957040632492737565724219145524113298833391740796247592799953322528461858993777368847228798277946275071368766021097793446237658234828896473588862202996229441838602503846978402571777481330657941900991211838603897359281312107495225492026749808409267974669557751011/1290592532003260267918413873893779451334865653828512185679745082648373002035181859071964834891844321596481417545864683773016075647214968756179183666599844887277652933107577534206500863010060937001710124980623811618274690728390684045745706665171183053537641920967143569847590691290386222581847006300660376327185186689391196823535388872253706119057693238377466575499856927389998314006560127852958357505403611677480781616101765724425618628537025993004953250000000000000000000000000000000000000000000000*x^3*5162370128013041071673655495575117805339462615314048742718980330593492008140727436287859339567377286385925670183458735092064302588859875024716734666399379549110611732430310136826003452040243748006840499922495246473098762913562736182982826660684732214150567683868574279390362765161544890327388025202641505308740746757564787294141555489014824476230772953509866301999427709559993256026240511411833430021614446709923126464407062897702474514148103972019813^(1/2))^2+236192669585576315190578044819164436810229660699037716048176357234590880352680690204283748658607589827498126236703478805938327421294463845298527756832042610971462497154126097233575436898483493749873837283998970015805771389316713677916594871763481149077585293741284647501084435382354266174240650160718179206649034140083837766057503511954994222034448190868440519236207/2370247784439285377065528199245282283420862637997277431252767672564564127962556671421602535638111080171272543347863443987709927662289950752047555510716005851627003979117991156415569532185860086270982557467134381438868024513581171104339802467668049969043612023121782280358500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 242656215543643836951812627086992483002644769648524898210018452519332230014126233/50000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 84 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 85 Test 1 - Weifeng
>> input polynomial
x+14/5
>> basis
[(x-6/5)*(x-158/25)*(x-679/100)*(x-1397/100)*(x-1771/100), (-x+6/5)*(x-158/25)*(x-679/100)*(x-1397/100)*(x-1771/100)]
memory used=17057.2MB, alloc=307.2MB, time=84.78
>> Time taken
1.541000
">> Sums of squares multipliers", [x+14/5-244/4041933*x^2*(x-6/5)*(x-158/25)*(x-679/100)*(x-1397/100)*(x-1771/100)-244/4041933*(x+1)^2*(-x+6/5)*(x-158/25)*(x-679/100)*(x-1397/100)*(x-1771/100), 244/4041933*x^2, 244/4041933*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 85 Test 1 - Weifeng

>> Test
Batch: 85 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+14/5
>> basis
[(x-6/5)*(x-158/25)*(x-679/100)*(x-1397/100)*(x-1771/100), (-x+6/5)*(x-158/25)*(x-679/100)*(x-1397/100)*(x-1771/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -4.424097
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 85 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 85 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+14/5
>> basis
[(x-6/5)*(x-158/25)*(x-679/100)*(x-1397/100)*(x-1771/100), (-x+6/5)*(x-158/25)*(x-679/100)*(x-1397/100)*(x-1771/100), -x^2+3884841/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.428572
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19867
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [14/5*(1/50000000000000000000000000000000000000000000*3824779719034523056315953781484410745096236261634867056162988139159980300833424038202551^(1/2)-166462801704200583296506522222511707983658798932706496369402385491051257602578213172433/133867290166208306971058382351954376078368269157220346965704584870599310529169841337089285000000000000000000000000000000000000000000*x*3824779719034523056315953781484410745096236261634867056162988139159980300833424038202551^(1/2)+1717757739478947480493815527885801877608297121127464587425071101822206849441880235921889/14342923946379461461184826680566540294110885981130751460611205521849926128125340143259566250000000000000000000000000000000000000000000*x^2*3824779719034523056315953781484410745096236261634867056162988139159980300833424038202551^(1/2)-28166395153539577953161287692788762882047771909263807948839054859719164398300185626729/9561949297586307640789884453711026862740590654087167640407470347899950752083560095506377500000000000000000000000000000000000000000000*x^3*3824779719034523056315953781484410745096236261634867056162988139159980300833424038202551^(1/2))^2+14/5*(1/20080093524931246045658757352793156411755240373583052044855687730589896579375476200563392750000000000000000000000000000000000000000000*x*34049543427012474193883210099752197761737202035277557558279114939524853622161615496147132035121523148858415993562995132456980750393970752284586593172325165443929391160685629819701716134816908233679556843616352874090614182481382734133322289245940583745122464275730983^(1/2)-90206765864524863652409827396457000162619409421612155119844080600082956372409674820363608104645322259771159856170012535551331888466488424613268851332398352783980722520691580519/17024771713506237096941605049876098880868601017638778779139557469762426811080807748073566017560761574429207996781497566228490375196985376142293296586162582721964695580342814909850858067408454116839778421808176437045307091240691367066661144622970291872561232137865491500000000000000000000000000000000000000000000*x^2*34049543427012474193883210099752197761737202035277557558279114939524853622161615496147132035121523148858415993562995132456980750393970752284586593172325165443929391160685629819701716134816908233679556843616352874090614182481382734133322289245940583745122464275730983^(1/2)+79072006997871424624104067212212161206959068814342010672550551915353004247757502297145575833999112971464039720797249431481895851710800868394425890992672819734862541038535737919/544792694832199587102131361596035164187795232564440920932465839032397657954585847938354112561944370381734655897007922119311692006303532036553385490757202647102870258570970077115227458157070531738872909497861645985449826919702123746133156627935049339921959428411695728000000000000000000000000000000000000000000000*x^3*34049543427012474193883210099752197761737202035277557558279114939524853622161615496147132035121523148858415993562995132456980750393970752284586593172325165443929391160685629819701716134816908233679556843616352874090614182481382734133322289245940583745122464275730983^(1/2))^2+14/5*(1/89023541035737064160637933956492760790035923358204631487254032300353660036640544332344747975696662067201907695809610572360143041710139907890372722039200896202226947258968527068330000000000000000000000000000000000000000000000*x^2*5272549466572859286941523204400754261098369217874360707113717799188801812446081037658327637270661058842445727381243893042512062815603132058868154630130317447498401526173603238089502462987969044595166674963722936036336663730066614785611253823096239860977871996329264058442425699429373605252480974932067337397386213318861137557823987483897426447026410700073070774448086471596517948043723351442578896155685670709243778175135380299290762407844899901^(1/2)-64243426469947914370476061816010408709719404252076394196548617401250633221302834003514752706046553097755863882852269323125586674380718665293048865479309395692168617161544872825864681584027294324851994356496948173284767538619380477797009243110877596134332087710657001/105450989331457185738830464088015085221967384357487214142274355983776036248921620753166552745413221176848914547624877860850241256312062641177363092602606348949968030523472064761790049259759380891903333499274458720726733274601332295712225076461924797219557439926585281168848513988587472105049619498641346747947724266377222751156479749677948528940528214001461415488961729431930358960874467028851577923113713414184875563502707605985815248156897998020000000000000000000000000000000000000000000000*x^3*5272549466572859286941523204400754261098369217874360707113717799188801812446081037658327637270661058842445727381243893042512062815603132058868154630130317447498401526173603238089502462987969044595166674963722936036336663730066614785611253823096239860977871996329264058442425699429373605252480974932067337397386213318861137557823987483897426447026410700073070774448086471596517948043723351442578896155685670709243778175135380299290762407844899901^(1/2))^2+634828126206022367107916241998903655733002193100574251504525966687359000387215518522327636183587882934996859021782167288034368359387161208864273621528630572478380998334577211858040677551270475353065397806333853751304913787430617606735987181615202637680523005800698354941362929376932983446564873512524040851620742014877756341881432012220707130234738920603/3411444273517290129413111911674608685858183942184563958349613628277201005218536358979818819532584181523204772927106382532693530426407231607870176513798066082938559902601632123727548732126329816860549949798311871152128033926899708324708753625243459726533257290334111470720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 29700127694218850715411184178189819881004454071837569045303987238266200982242247/62500000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 85 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 86 Test 1 - Weifeng
>> input polynomial
x+104/25
>> basis
[(x-167/50)*(x-671/100)*(x-222/25)*(x-1629/100)*(x-2659/100)*(x-1361/50)*(x-1411/50), -(x-167/50)*(x-671/100)*(x-222/25)*(x-1629/100)*(x-2659/100)*(x-1361/50)*(x-1411/50)]
memory used=17265.9MB, alloc=307.2MB, time=86.09
>> Time taken
1.331000
">> Sums of squares multipliers", [x+104/25-3/116152723*x^2*(x-167/50)*(x-671/100)*(x-222/25)*(x-1629/100)*(x-2659/100)*(x-1361/50)*(x-1411/50)+3/116152723*(x+1)^2*(x-167/50)*(x-671/100)*(x-222/25)*(x-1629/100)*(x-2659/100)*(x-1361/50)*(x-1411/50), 3/116152723*x^2, 3/116152723*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 86 Test 1 - Weifeng

>> Test
Batch: 86 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+104/25
>> basis
[(x-167/50)*(x-671/100)*(x-222/25)*(x-1629/100)*(x-2659/100)*(x-1361/50)*(x-1411/50), -(x-167/50)*(x-671/100)*(x-222/25)*(x-1629/100)*(x-2659/100)*(x-1361/50)*(x-1411/50)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 1.591673
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 86 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 86 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+104/25
>> basis
[(x-167/50)*(x-671/100)*(x-222/25)*(x-1629/100)*(x-2659/100)*(x-1361/50)*(x-1411/50), -(x-167/50)*(x-671/100)*(x-222/25)*(x-1629/100)*(x-2659/100)*(x-1361/50)*(x-1411/50), -x^2+2134521/2500]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 1.802887
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 35799
time= 0.125000secs
>> Time taken
0.011000
">> Sums of squares multipliers", [104/25*(1/125000000000000000000000000000000000000000000*53734789558410231045497805123898658817899003347356831684526950873263491272312468113872846^(1/2)-21258124957142125194406626881118083867433101274146677556473544828480111111171350857780989/13971045285186660071829429332213651292653740870312776237977007227048507730801241709606939960000000000000000000000000000000000000000000*x*53734789558410231045497805123898658817899003347356831684526950873263491272312468113872846^(1/2)+33021815602975930366292676058370738748866521099703211514254955804643751491493613372753/268673947792051155227489025619493294089495016736784158422634754366317456361562340569364230000000000000000000000000000000000000000000*x^2*53734789558410231045497805123898658817899003347356831684526950873263491272312468113872846^(1/2)-10925881209069207920403351467544464674993631671601935310637956549416402381411632776601/4298783164672818483639824409911892705431920267788546534762156069861079301784997449109827680000000000000000000000000000000000000000000*x^3*53734789558410231045497805123898658817899003347356831684526950873263491272312468113872846^(1/2)-1891208572931200654023812494148967940415615601204339799157060875347573207734402555309/537347895584102310454978051238986588178990033473568316845269508732634912723124681138728460000000000000000000000000000000000000000000000*x^4*53734789558410231045497805123898658817899003347356831684526950873263491272312468113872846^(1/2))^2+104/25*(1/69855226425933300359147146661068256463268704351563881189885036135242538654006208548034699800000000000000000000000000000000000000000000*x*714341864224424095522915746794519600061445511286100544356648618008407847190610010423677755925737662427637160674390376884508323083771002313681185102714477727607969909856105820220350766362732318020465631043207785420572242938381720959424015191419348231132469756113173042^(1/2)-51199927717817842740928711242048477752789009425777028890590354033653767496784632834544209392288192022096801079888802578619977325723283865061210397209985302040252409117147861049/35717093211221204776145787339725980003072275564305027217832430900420392359530500521183887796286883121381858033719518844225416154188550115684059255135723886380398495492805291011017538318136615901023281552160389271028612146919086047971200759570967411556623487805658652100000000000000000000000000000000000000000000*x^2*714341864224424095522915746794519600061445511286100544356648618008407847190610010423677755925737662427637160674390376884508323083771002313681185102714477727607969909856105820220350766362732318020465631043207785420572242938381720959424015191419348231132469756113173042^(1/2)+1694958192192560840758829749763876963004956071226106986959508552857433734485351426823848785450428340586005153284684788669719250731358292146584781777319141349201795194056926584847/35717093211221204776145787339725980003072275564305027217832430900420392359530500521183887796286883121381858033719518844225416154188550115684059255135723886380398495492805291011017538318136615901023281552160389271028612146919086047971200759570967411556623487805658652100000000000000000000000000000000000000000000000*x^3*714341864224424095522915746794519600061445511286100544356648618008407847190610010423677755925737662427637160674390376884508323083771002313681185102714477727607969909856105820220350766362732318020465631043207785420572242938381720959424015191419348231132469756113173042^(1/2)-20422937934038297910975193663299320631197410592772252217964164363313721935844282037592855000019227017784424413793589443536220958988196620618809550118246677854908418507749426453/44646366514026505970182234174657475003840344455381284022290538625525490449413125651479859745358603901727322542149398555281770192735687644605074068919654857975498119366006613763771922897670769876279101940200486588785765183648857559964000949463709264445779359757073315125000000000000000000000000000000000000000000000*x^4*714341864224424095522915746794519600061445511286100544356648618008407847190610010423677755925737662427637160674390376884508323083771002313681185102714477727607969909856105820220350766362732318020465631043207785420572242938381720959424015191419348231132469756113173042^(1/2))^2+104/25*(1/33234607881358111838339661645642565633234238124981332688872034767630411401863229985689334870347028143816869646240979916207091116005417125000462160336747506417990566777552330024317500000000000000000000000000000000000000000000*x^2*900648325342193645602209093884060318928495550345956456808469582797606199312110363533346580346262504661822485439034126586866760140077008961947070611194277565591516634560255571360541746038755317882768530864551353393535844513733140289390246425270371825612132095237211670625685725202409468489405793642766685500934267370526120586718816714898473530550195559585373158855242235594734191708817166386792427271559141871494084564375247213301235157858391445^(1/2)-47168044876055362019297176370606725270879939215237066074136063603525239829379741587030359179082014511740107888867837815154820851121290169204054403429995960294277104657310904558587924938647445130806023209172453794415344930215813721005478971473589226404688435896443941/18012966506843872912044181877681206378569911006919129136169391655952123986242207270666931606925250093236449708780682531737335202801540179238941412223885551311830332691205111427210834920775106357655370617291027067870716890274662805787804928505407436512242641904744233412513714504048189369788115872855333710018685347410522411734376334297969470611003911191707463177104844711894683834176343327735848545431182837429881691287504944266024703157167828900000000000000000000000000000000000000000000000*x^3*900648325342193645602209093884060318928495550345956456808469582797606199312110363533346580346262504661822485439034126586866760140077008961947070611194277565591516634560255571360541746038755317882768530864551353393535844513733140289390246425270371825612132095237211670625685725202409468489405793642766685500934267370526120586718816714898473530550195559585373158855242235594734191708817166386792427271559141871494084564375247213301235157858391445^(1/2)+40029192356322734883093820894803444572585610557070076772771745155091760577805568734748222216675242561311796858233894200829330160985352037145613775093414812717784560363590343497609240768792326376617723227571727928998688279670287391277817054695123812621817052032396739/720518660273754916481767275107248255142796440276765165446775666238084959449688290826677264277010003729457988351227301269493408112061607169557656488955422052473213307648204457088433396831004254306214824691641082714828675610986512231512197140216297460489705676189769336500548580161927574791524634914213348400747413896420896469375053371918778824440156447668298527084193788475787353367053733109433941817247313497195267651500197770640988126286713156000000000000000000000000000000000000000000000000*x^4*900648325342193645602209093884060318928495550345956456808469582797606199312110363533346580346262504661822485439034126586866760140077008961947070611194277565591516634560255571360541746038755317882768530864551353393535844513733140289390246425270371825612132095237211670625685725202409468489405793642766685500934267370526120586718816714898473530550195559585373158855242235594734191708817166386792427271559141871494084564375247213301235157858391445^(1/2))^2+104/25*(1/677492817545309041394257927718239596813979405216866144564884949963136705272010996820498859544171112299734730055009977198304461775823582026252452883485339986272080667412205044721500309915602426280106103112767431524906735230676690726370686996206798742595042717908130350000000000000000000000000000000000000000000000*x^3*194179629997972905608442626254065977946035904549254813122151906857786656757806681747467880822889042728336331816445706150998713561933647103585936211157556411179651266562071456933273381862149784152075758012513385616414800187779607786157467251020374637295413678995589369244663816630812624448356911183882391763719118079944997162298899037043859265169131585314255353820885729009066306897146155261174974141684875789939984629578103492129229592957263866711981872752187299643655669105311231012235076841286735404077074443341235774196581703880139404292199799195714515377574732576107374293747014952406547174265476230719347552937617^(1/2)-84346313671251338305348887214330614534263623167400036563815888508334312766199528324185358904012287226302295508968363589568080526941626035182665105983082047485109285882479104613616505804443117278635130764550846179636641907477712426665136875470449333677926966884894856674391695946930822833543038786296343532575356043228203559937920789762120472455667392507/1553437039983783244867541010032527823568287236394038504977215254862293254062453453979743046583112341826690654531565649207989708495469176828687489689260451289437210132496571655466187054897198273216606064100107084931318401502236862289259738008162997098363309431964714953957310533046500995586855289471059134109752944639559977298391192296350874121353052682514042830567085832072530455177169242089399793133479006319519877036624827937033836743658110933695854982017498397149245352842489848097880614730293883232616595546729886193572653631041115234337598393565716123020597860608858994349976119619252377394123809845754780423500936000000000000000000000000000000000000000000000000*x^4*194179629997972905608442626254065977946035904549254813122151906857786656757806681747467880822889042728336331816445706150998713561933647103585936211157556411179651266562071456933273381862149784152075758012513385616414800187779607786157467251020374637295413678995589369244663816630812624448356911183882391763719118079944997162298899037043859265169131585314255353820885729009066306897146155261174974141684875789939984629578103492129229592957263866711981872752187299643655669105311231012235076841286735404077074443341235774196581703880139404292199799195714515377574732576107374293747014952406547174265476230719347552937617^(1/2))^2+18169794093488300688481687304190045222242527391543674137659708916109600872318008707207836684895344492275978549231695182262701055397426969599795801457849268619572435886709148970298061428444580294560413290413295839542560109401936276409279368249550607075839385073864110452080429502175232150741813181244612131136773968802570058357238607689690641151283677389037148577606744103273497141176484091684655379491270732795651367407432984283368904594053/573230077040592841307604520127961712594171943485561768213711000043727673245286870511031348434873929797748356070743746972899530637954685401772897016530101764995506844121667977885625638982763180377667294228141893648161769837046140702418478999854201586947562023243376997166169659325848806259200639126344717112076487911804580492519370762292934007834900897240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^8, 292834461667097618311679124240859359596160736443810473429340994341970663301082973/781250000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
8
>> Succeeds RealCertify Batch: 86 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 87 Test 1 - Weifeng
>> input polynomial
x+897/50
>> basis
[(x-74/25)*(x-583/100)*(x-42/5)*(x-356/25)*(x-117/5), -(x-74/25)*(x-583/100)*(x-42/5)*(x-356/25)*(x-117/5)]
memory used=17532.9MB, alloc=307.2MB, time=87.62
>> Time taken
1.406000
">> Sums of squares multipliers", [x+897/50-91/11305858*x^2*(x-74/25)*(x-583/100)*(x-42/5)*(x-356/25)*(x-117/5)+91/11305858*(x+1)^2*(x-74/25)*(x-583/100)*(x-42/5)*(x-356/25)*(x-117/5), 91/11305858*x^2, 91/11305858*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 87 Test 1 - Weifeng

>> Test
Batch: 87 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+897/50
>> basis
[(x-74/25)*(x-583/100)*(x-42/5)*(x-356/25)*(x-117/5), -(x-74/25)*(x-583/100)*(x-42/5)*(x-356/25)*(x-117/5)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.168496
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 87 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 87 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+897/50
>> basis
[(x-74/25)*(x-583/100)*(x-42/5)*(x-356/25)*(x-117/5), -(x-74/25)*(x-583/100)*(x-42/5)*(x-356/25)*(x-117/5), -x^2+16129/25]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.155283
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19795
time= 0.125000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [897/50*(3/12500000000000000000000000000000000000000000*21688834819930265918159002742965687477805667669491014572642607906315158133595842411127^(1/2)-696161193062502883331526898599134064572573130281032589150280265206115342409514760057679/72955818125540431982207345476650831253468814623250400268726572344867613171883014910428446250000000000000000000000000000000000000000*x*21688834819930265918159002742965687477805667669491014572642607906315158133595842411127^(1/2)+2593082401031521166097131657764361000675227248128775858607534084845689156358410676343/3253325222989539887723850411444853121670850150423652185896391185947273720039376361669050000000000000000000000000000000000000000000*x^2*21688834819930265918159002742965687477805667669491014572642607906315158133595842411127^(1/2)-4796384963746904375360327691199883824017136150446566041866273020837280893992663647/271110435249128323976987534287071093472570845868637682158032598828939476669948030139087500000000000000000000000000000000000000000*x^3*21688834819930265918159002742965687477805667669491014572642607906315158133595842411127^(1/2))^2+897/50*(1/1459116362510808639644146909533016625069376292465008005374531446897352263437660298208568925000000000000000000000000000000000000000000*x*52310578941078871769500523684690916950464403224953864657291418822981158883708226712956740044838734189338205616393989227808898141817881861611316187138288200545492789512998217041980369973934139772581972101883303152145946934090003728262589648345560394980887678881007^(1/2)-118603667012674662928982140132361831063661162729789052083882282747807445949767806315538046386854229961616453899582104195109646906696272039326045928278552767052679986529846537/1961646710290457691356269638175909385642415120935769924648428205861793458139058501735877751681452532100182710614774596042833680318170569810424357017685807520455979606737433139074263874022530241471823953820623868205473010028375139809847111812958514811783287958037762500000000000000000000000000000000000000000*x^2*52310578941078871769500523684690916950464403224953864657291418822981158883708226712956740044838734189338205616393989227808898141817881861611316187138288200545492789512998217041980369973934139772581972101883303152145946934090003728262589648345560394980887678881007^(1/2)+73039285109630498894548402303430746729191131752494505734896570794749763460206460294436989495378517312592296172473395207532197790005733909335311446224396668342708471166619731529/52310578941078871769500523684690916950464403224953864657291418822981158883708226712956740044838734189338205616393989227808898141817881861611316187138288200545492789512998217041980369973934139772581972101883303152145946934090003728262589648345560394980887678881007000000000000000000000000000000000000000000000000*x^3*52310578941078871769500523684690916950464403224953864657291418822981158883708226712956740044838734189338205616393989227808898141817881861611316187138288200545492789512998217041980369973934139772581972101883303152145946934090003728262589648345560394980887678881007^(1/2))^2+897/50*(1/36178000829954493434296327431977821360972595570911770120303003354510315032843116726328913520241458451500594165710093364738152194857501232293901226052409021690179420946806487436615000000000000000000000000000000000000000000000*x^2*57697184273419025714414902827856659049899887601629483831981904482099405447198345440363276715738670501737702461163384062905196773491387452363866612917965180548694690541513153299303236909317120673323123250317829085347183522572701144943857168674075038060316913858428962610981223190448225527039776304996149194618130818572912053405751184842893660752357037105068581626218275101438138414834119688084158226490819343167245381584721013901742572099851613^(1/2)-51926829216206723509777164611519610667525534981947752175948039914675496965312915264260942968293353304504932120069056422152474200046074393547589064803920318211620601297719551413701150935578495241686997955796634238920415036951261825877220163905428440037293634946467/48080986894515854762012419023213882541583239668024569859984920401749504539331954533636063929782225418114752050969486719087663977909489543636555510764970983790578908784594294416086030757764267227769269375264857571122652935477250954119880973895062531716930761548690802175817685992040187939199813587496790995515109015477426711171459320702411383960297530920890484688515229251198448679028433073403465188742349452639371151320600844918118810083209677500000000000000000000000000000000000000000000*x^3*57697184273419025714414902827856659049899887601629483831981904482099405447198345440363276715738670501737702461163384062905196773491387452363866612917965180548694690541513153299303236909317120673323123250317829085347183522572701144943857168674075038060316913858428962610981223190448225527039776304996149194618130818572912053405751184842893660752357037105068581626218275101438138414834119688084158226490819343167245381584721013901742572099851613^(1/2))^2+577254050913678017443332655408636102298051310999955333836217734214539664551805532785004005599722839308682011763755829815278620498351061668232865345991476640073994421509058940254374424810277008932666088977486987237338157265634020047705458462700425648061323631245623766576065766863469114009848801193484419450946167902340518518055102918206909889049531559/398703514219939832321294701815904489840301921247568150780561307296032788080036138682264499856228577292748569885649082711315174123750440289537619868826077671906123135997142745504462234199710943332503556575712058363109341518755624415987173423542216048728836266418011550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 2075256235307987693429717290747614145763460716310509987460288909014156292533868177/312500000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 87 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 88 Test 1 - Weifeng
>> input polynomial
x+129/50
>> basis
[(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25), -(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25)]
>> Time taken
0.864000
">> Sums of squares multipliers", [x+129/50-81/76891316*x^2*(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25)+81/76891316*(x+1)^2*(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25), 81/76891316*x^2, 81/76891316*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 88 Test 1 - Weifeng

>> Test
Batch: 88 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+129/50
>> basis
[(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25), -(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.823445
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 88 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 88 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+129/50
>> basis
[(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25), -(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25), -x^2+638401/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 2.131786
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20054
time= 0.136000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [129/50*(1/25000000000000000000000000000000000000000000*1744942214505981192250941917238152313468475150160228534024844315438027856144266182131414^(1/2)-22675908945874390600662254109654556825831535642431085718272540358520490191437098901749801/5627438641781789345009287683093041210935832359266737022230122917287639836065258437373810150000000000000000000000000000000000000000000*x*1744942214505981192250941917238152313468475150160228534024844315438027856144266182131414^(1/2)+936641281108368580218247863219090582880736838811218396931206744090889614735528045276689/3271766652198714735470516094821535587753390906550428501296583091446302230270499091496401250000000000000000000000000000000000000000000*x^2*1744942214505981192250941917238152313468475150160228534024844315438027856144266182131414^(1/2)-23130281289865409919756261399539453118481597880524782068530405239259316589710568743249/4362355536264952980627354793095380783671187875400571335062110788595069640360665455328535000000000000000000000000000000000000000000000*x^3*1744942214505981192250941917238152313468475150160228534024844315438027856144266182131414^(1/2))^2+129/50*(1/28137193208908946725046438415465206054679161796333685111150614586438199180326292186869050750000000000000000000000000000000000000000000*x*74144546274704282453379472420219728458002106291046523400430660049535156290160186790091449627726345545623928140821515293311175319861882569059421859883636646178489223241867199998586332504368585292477445409937072712331273634021510887816502464497111445191868500326469318^(1/2)-154186129109729966818309369189620189368484253989318506034862538215560770865522625530321046939059996185216871925055700491113091377215498827436326222057555001899537478628141832863/55608409706028211840034604315164796343501579718284892550322995037151367217620140092568587220794759159217946105616136469983381489896411926794566394912727484633866917431400399998939749378276438969358084057452804534248455225516133165862376848372833583893901375244851988500000000000000000000000000000000000000000000*x^2*74144546274704282453379472420219728458002106291046523400430660049535156290160186790091449627726345545623928140821515293311175319861882569059421859883636646178489223241867199998586332504368585292477445409937072712331273634021510887816502464497111445191868500326469318^(1/2)+10104157512560404216051954182515435114223251444030107673238367829326011601341642172866503152704134672821901824061028786679418252752759062458833071902374939669892049293832300660591/185361365686760706133448681050549321145005265727616308501076650123837890725400466975228624069315863864059820352053788233277938299654706422648554649709091615446223058104667999996465831260921463231193613524842681780828184085053777219541256161242778612979671250816173295000000000000000000000000000000000000000000000000*x^3*74144546274704282453379472420219728458002106291046523400430660049535156290160186790091449627726345545623928140821515293311175319861882569059421859883636646178489223241867199998586332504368585292477445409937072712331273634021510887816502464497111445191868500326469318^(1/2))^2+129/50*(1/1062277960529708631579799591937030183793716876039708414366518997707480374514394209082122564394173601892499618586185626029736146538559010630600629466344795719249913823882440771263425000000000000000000000000000000000000000000000*x^2*217999405801908666570772564815230100094318040659463021241215937015284572961208271397268756173235543685916190300343518422776282802310653428876373123875841572784632121808149321879434206920709067803531662217395400738802057113268024104055595753809256092491494237768497249669869437642561661938117037881075265385889880162267518392779812727439991816365803017756972901602990004703108760194294465133782037611578565431915068674044528557007805898472949308093^(1/2)-962791233810034386698701488196189732765276326366050855121248596488478730326886386814962428663759009348325032480947025258085812008011713589650711702058943569362748857323313590933646585720079655762615016528560197750679857140010785718794365706882377128254162817550854781/32699910870286299985615884722284515014147706098919453186182390552292685944181240709590313425985331552887428545051527763416442420346598014331455968581376235917694818271222398281915131038106360170529749332609310110820308566990203615608339363071388413873724135665274587450480415646384249290717555682161289807883482024340127758916971909115998772454870452663545935240448500705466314029144169770067305641736784814787260301106679283551170884770942396213950000000000000000000000000000000000000000000000*x^3*217999405801908666570772564815230100094318040659463021241215937015284572961208271397268756173235543685916190300343518422776282802310653428876373123875841572784632121808149321879434206920709067803531662217395400738802057113268024104055595753809256092491494237768497249669869437642561661938117037881075265385889880162267518392779812727439991816365803017756972901602990004703108760194294465133782037611578565431915068674044528557007805898472949308093^(1/2))^2+20860105437421128290174847241519286935497627411728924942656615742191811773829936399652084392454358764416452777670279120225717942076145059628479427583085520102586790182602699074894065969294878659948813425528260674183298620863849384160450122293129378013610668460033798252649056035105096207677629277528951841450329972453796102577776239528064215167468604664201363/9619631138604124949342395740844877788297881326639223769016737639419176812218529049435888355365373036848573641814701896835275628568279783913911914982653652490196675148451827758837996602165147517187807332938354363881058838765801931761387461222718911060036019185843884979375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 242712491866849835550528348979068822041916667637343527166750280167489263901201/320000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 88 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 89 Test 1 - Weifeng
>> input polynomial
x+511/50
>> basis
[(x-269/50)*(x-699/100)*(x-1089/100)*(x-623/25)*(x-648/25), -(x-269/50)*(x-699/100)*(x-1089/100)*(x-623/25)*(x-648/25)]
memory used=17804.2MB, alloc=307.2MB, time=89.14
>> Time taken
1.315000
">> Sums of squares multipliers", [x+511/50-111/9180959*x^2*(x-269/50)*(x-699/100)*(x-1089/100)*(x-623/25)*(x-648/25)+111/9180959*(x+1)^2*(x-269/50)*(x-699/100)*(x-1089/100)*(x-623/25)*(x-648/25), 111/9180959*x^2, 111/9180959*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 89 Test 1 - Weifeng

>> Test
Batch: 89 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+511/50
>> basis
[(x-269/50)*(x-699/100)*(x-1089/100)*(x-623/25)*(x-648/25), -(x-269/50)*(x-699/100)*(x-1089/100)*(x-623/25)*(x-648/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.365475
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 89 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 89 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+511/50
>> basis
[(x-269/50)*(x-699/100)*(x-1089/100)*(x-623/25)*(x-648/25), -(x-269/50)*(x-699/100)*(x-1089/100)*(x-623/25)*(x-648/25), -x^2+452929/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.525386
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20180
time= 0.140000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [511/50*(3/6250000000000000000000000000000000000000000*18066368081371987028359681492476759017019999401963044704301391681460053436853744709951^(1/2)-3181450889533939813555586959450800743124021837803880617858050651760726722338940828862171/36927656358324341485967188970622495430788878777612463375592044596904349224929054187139844000000000000000000000000000000000000000000*x*18066368081371987028359681492476759017019999401963044704301391681460053436853744709951^(1/2)+30577828819134619899416869444045236517249449785642380923692081513965010606212946495665643/5081166022885871351726160419759088473536874831802106323084766410410640029115115699673718750000000000000000000000000000000000000000000*x^2*18066368081371987028359681492476759017019999401963044704301391681460053436853744709951^(1/2)-16123496917160398284574317033326663741732283610869298598900560143754066603052216538825911/135497760610289902712697611193575692627649995514722835282260437610950400776403085324632500000000000000000000000000000000000000000000000*x^3*18066368081371987028359681492476759017019999401963044704301391681460053436853744709951^(1/2))^2+511/50*(1/69239355671858140286188479319917178932729147708023368829235083619195654796741976600887207500000000000000000000000000000000000000000000*x*374173066370983600063906426036779009550363786792633938941480113658174830925396472312794205747534010716653343081834922225002964522501351684958255734764000746169993519119055035831574717367588268858749407539791661636134395681075386515960016364983977010788622138732978913^(1/2)-3594595941545403737420690046968005307647542089831383367843099286470675030860327132635617535917275022354925582777362899090328840204264656270117171856187908023753069786397600475557/3507872497227971250599122744094803214534660501180943177576376065545389039925591927932445678883131350468625091392202395859402792398450172046483647513412506995343689241741140960921012975321140020550775695685546827838759959510081748587125153421724784476143332550621677309375000000000000000000000000000000000000000000*x^2*374173066370983600063906426036779009550363786792633938941480113658174830925396472312794205747534010716653343081834922225002964522501351684958255734764000746169993519119055035831574717367588268858749407539791661636134395681075386515960016364983977010788622138732978913^(1/2)+3891720431427468242878398485125470555435797797672298792665694166121693263525778662947804353489215706030515999893153906690177192547549361878657753423013183593725627375211631044851/187086533185491800031953213018389504775181893396316969470740056829087415462698236156397102873767005358326671540917461112501482261250675842479127867382000373084996759559527517915787358683794134429374703769895830818067197840537693257980008182491988505394311069366489456500000000000000000000000000000000000000000000000*x^3*374173066370983600063906426036779009550363786792633938941480113658174830925396472312794205747534010716653343081834922225002964522501351684958255734764000746169993519119055035831574717367588268858749407539791661636134395681075386515960016364983977010788622138732978913^(1/2))^2+511/50*(1/7766635732048205150129985245795156634982028482936376503869574422422357280063283211046436261662229919548061469929975249394547467088826296565858710714859340463341963457146176939569523625000000000000000000000000000000000000000000000*x^2*914529012219332803473330190600219129867463595352727375678381958631708216055443920800410225045985674156258424603354424851054775638386010199376154544376722148645435485954612502640355504428999901213941433953741932633651595223000716020886703606161391250017529541411396053559073481720031119262464654441867923761703831506352521834113883813294692667675910868666850021417038271204425295485373233934657273577880236077762244216639913594250902392026944598438253106^(1/2)-624120446473965048133872033017581981683064599678224835374164464162266844942324280885611640978572906938371509826058781079752407467028994599793771925928972467138722407064827407679631192328916575573951268116185742777461611618994437094787436692506682870196140341092080876793/90249573574276263500657584598705835184289170594019148915629798549181731847576702710566798524274902054893923480594186662933037069577566795991067882668755475195273238745520970655298240568651306040849483613856111773057723212796123291534872066397505715462256204744545663180171725169739913085111643530447492476483930740758472549419133271048818355362754362039491778429312987289910391001846042822499073050448707507673905679273675683643181157107922164319564451250000000000000000000000000000000000000000000000*x^3*914529012219332803473330190600219129867463595352727375678381958631708216055443920800410225045985674156258424603354424851054775638386010199376154544376722148645435485954612502640355504428999901213941433953741932633651595223000716020886703606161391250017529541411396053559073481720031119262464654441867923761703831506352521834113883813294692667675910868666850021417038271204425295485373233934657273577880236077762244216639913594250902392026944598438253106^(1/2))^2+22331199457885020180801727135599667649916218885378172184055319818753893409563248036575659130356570506083731781216853650147843375839615850174602983082409329067368810062007594429949455584445233372936504281338260974034323856494886037135431430053492692160201088541978575082059869865303833922925386616302366649725818249381005925306961917574383292105807453891729/255325848317299215338578918422357907902477306190205450966565777943100513211476593637475792181928088740013482041909355841035563618088393686402738813334380779389030245357945276099595828161026158566332665726138358538253463174327492315624096831867218398063226721953357620916528320312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 40865849679578265209330811670019983050190128781473932533007753427834848408889039/781250000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 89 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 90 Test 1 - Weifeng
>> input polynomial
x+429/50
>> basis
[(x-78/25)*(x-82/25)*(x-204/25)*(x-121/10)*(x-1983/100), (-x+78/25)*(x-82/25)*(x-204/25)*(x-121/10)*(x-1983/100)]
memory used=18094.2MB, alloc=307.2MB, time=90.71
>> Time taken
1.252000
">> Sums of squares multipliers", [x+429/50-315/20914604*x^2*(x-78/25)*(x-82/25)*(x-204/25)*(x-121/10)*(x-1983/100)-315/20914604*(x+1)^2*(-x+78/25)*(x-82/25)*(x-204/25)*(x-121/10)*(x-1983/100), 315/20914604*x^2, 315/20914604*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 90 Test 1 - Weifeng

>> Test
Batch: 90 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+429/50
>> basis
[(x-78/25)*(x-82/25)*(x-204/25)*(x-121/10)*(x-1983/100), (-x+78/25)*(x-82/25)*(x-204/25)*(x-121/10)*(x-1983/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.219366
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 90 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 90 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+429/50
>> basis
[(x-78/25)*(x-82/25)*(x-204/25)*(x-121/10)*(x-1983/100), (-x+78/25)*(x-82/25)*(x-204/25)*(x-121/10)*(x-1983/100), -x^2+4765489/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.265455
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19967
time= 0.121000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [429/50*(1/125000000000000000000000000000000000000000000*21490293107874872516389618757075093734564391383665685978342688931617653343970005355084295^(1/2)-41876898345740846111314960510317497658907887063454449660746537140689377783375294184952417/92193357432783203095311464467852152121281239035925792847090135516639732845631322973311625550000000000000000000000000000000000000000000*x*21490293107874872516389618757075093734564391383665685978342688931617653343970005355084295^(1/2)+219228059288749103480282098748403965068133375740679411658635048872324845828569399241103/5157670345889969403933508501698022496295453932079764634802245343588236802552801285220230800000000000000000000000000000000000000000000*x^2*21490293107874872516389618757075093734564391383665685978342688931617653343970005355084295^(1/2)-2268098242446928227172669771598674593031625426598910888269709292193921822316419187/2149029310787487251638961875707509373456439138366568597834268893161765334397000535508429500000000000000000000000000000000000000000*x^3*21490293107874872516389618757075093734564391383665685978342688931617653343970005355084295^(1/2))^2+429/50*(1/184386714865566406190622928935704304242562478071851585694180271033279465691262645946623251100000000000000000000000000000000000000000000*x*1751494651766666104628614338016058650297980431464920760837874425022858219333139426286230787770181444832862676056569429388644446632311789287418721855031556873182558361361577512802772010574843706571421123448673209685713621766988618249966500502736472190663168945907789801^(1/2)-112530153522572177936268846653930838624820946718884487360382343188906207267168465499866696986738775955846685745749883363753539082978131423693402380374543909974121284438279418769/210179358211999932555433720561927038035757651775790491300544931002742986319976731154347694532421773379943521126788331526637333595877414714490246622603786824781907003363389301536332641268981244788570534813840785162285634612038634189995980060328376662879580273508934776120000000000000000000000000000000000000000000*x^2*1751494651766666104628614338016058650297980431464920760837874425022858219333139426286230787770181444832862676056569429388644446632311789287418721855031556873182558361361577512802772010574843706571421123448673209685713621766988618249966500502736472190663168945907789801^(1/2)+6074395030832176627282736584314863942577521583240923415976393719248910512169307175185699932846534138740449885337301731194070996275230424734620492146373944998439754923598571023443/437873662941666526157153584504014662574495107866230190209468606255714554833284856571557696942545361208215669014142357347161111658077947321854680463757889218295639590340394378200693002643710926642855280862168302421428405441747154562491625125684118047665792236476947450250000000000000000000000000000000000000000000000*x^3*1751494651766666104628614338016058650297980431464920760837874425022858219333139426286230787770181444832862676056569429388644446632311789287418721855031556873182558361361577512802772010574843706571421123448673209685713621766988618249966500502736472190663168945907789801^(1/2))^2+429/50*(1/12225249625317005723569250806472706684245660400044989080891524651571911573922423340788429877240173007116786622235561161177614565791463821904231652016885046246634068533879456282292170000000000000000000000000000000000000000000000*x^2*21890205425478945736025459327484941366028958732287669905962123766030261047369029013720558048317807879972376177812612410925739723089658435048789340861027992824094141882997645446310655239061891115809934878330442310079315615720334992231260213411595692914985242552526935813380363168274465830903765381686766697217511885233758799469894548276597082530500467092247600511907729719600287654709169245969070311260089563663113940626638999427872946048654204890553^(1/2)-27196137244906483910111664717528101343006125375200843415243288104755238936446832072358328171206943008006905737439147424006124502075350989286614945381159914790876381624722252955984916994311792479396339835987331635802170259722594453553301354764419592815995573225560829/7296735141826315245341819775828313788676319577429223301987374588676753682456343004573519349439269293324125392604204136975246574363219478349596446953675997608031380627665881815436885079687297038603311626110147436693105205240111664077086737803865230971661747517508978604460121056091488610301255127228922232405837295077919599823298182758865694176833489030749200170635909906533429218236389748656356770420029854554371313542212999809290982016218068296851000000000000000000000000000000000000000000000*x^3*21890205425478945736025459327484941366028958732287669905962123766030261047369029013720558048317807879972376177812612410925739723089658435048789340861027992824094141882997645446310655239061891115809934878330442310079315615720334992231260213411595692914985242552526935813380363168274465830903765381686766697217511885233758799469894548276597082530500467092247600511907729719600287654709169245969070311260089563663113940626638999427872946048654204890553^(1/2))^2+9751968314156057612695456323293421836670146021612462647476693953545525930438668369868233376348104167055825193661416103337634577889330416926833328148828444654332195590921595388664336126271848113589503765898347419244088981420139020634629744448592899701780630138483985014226959910302803600831341762029751269645350200411411965315676779018110625482210160501/5086855933503940934836651200689988043481250683922544641423434860854502793629334067484381854425317072864764305826821630006241876167483812414852246042767485542951159818076396876071375070060911463747090653542951767559110856114249660415044730802176716595186826565928426934375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 70454595224304329397634974027059378246561901745208623993825264949516491243485669/19531250000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 90 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 91 Test 1 - Weifeng
>> input polynomial
x+613/100
>> basis
[(x-227/100)*(x-359/50)*(x-299/20)*(x-636/25)*(x-1553/50), -(x-227/100)*(x-359/50)*(x-299/20)*(x-636/25)*(x-1553/50)]
memory used=18388.0MB, alloc=307.2MB, time=92.31
>> Time taken
1.365000
">> Sums of squares multipliers", [x+613/100-56/11340039*x^2*(x-227/100)*(x-359/50)*(x-299/20)*(x-636/25)*(x-1553/50)+56/11340039*(x+1)^2*(x-227/100)*(x-359/50)*(x-299/20)*(x-636/25)*(x-1553/50), 56/11340039*x^2, 56/11340039*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 91 Test 1 - Weifeng

>> Test
Batch: 91 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+613/100
>> basis
[(x-227/100)*(x-359/50)*(x-299/20)*(x-636/25)*(x-1553/50), -(x-227/100)*(x-359/50)*(x-299/20)*(x-636/25)*(x-1553/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.343345
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 91 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 91 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+613/100
>> basis
[(x-227/100)*(x-359/50)*(x-299/20)*(x-636/25)*(x-1553/50), -(x-227/100)*(x-359/50)*(x-299/20)*(x-636/25)*(x-1553/50), -x^2+2732409/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.370311
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20043
time= 0.119000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [613/100*(1/125000000000000000000000000000000000000000000*23627723482557458992522234527171181083715876512663980407575609317284315372713042120309115^(1/2)-2487673215059920424968240858403091720769116531527034159373110954413598507543493606785547/6583542952185328346552786256889060911053560137392281813565385687043311510669588554431585225000000000000000000000000000000000000000000*x*23627723482557458992522234527171181083715876512663980407575609317284315372713042120309115^(1/2)+31770565299104905134989585055979986095475680112189811620021429632406526961641994470301/1476732717659841187032639657948198817732242282041498775473475582330269710794565132519319687500000000000000000000000000000000000000000*x^2*23627723482557458992522234527171181083715876512663980407575609317284315372713042120309115^(1/2)-922896179718724810171515556817067700531162253939472038897949902162427029242031771023/2953465435319682374065279315896397635464484564082997550946951164660539421589130265038639375000000000000000000000000000000000000000000*x^3*23627723482557458992522234527171181083715876512663980407575609317284315372713042120309115^(1/2))^2+613/100*(1/20178559148448031382184289877364971692379161821107343758577907130787749780202288919332808714625000000000000000000000000000000000000000000*x*13414972909340286725457953554996371157179153508068697935080101044924711503408669737759017664721350122371268146080991571968277040487811938921297846438382091818276098483381942954701775113392654656980644790348465990131553246958184366322491543241474138757177499765849683035703^(1/2)-8335900674117728137934069260804729950810781623301119837753652118770148725332411779643159802651189808267773124006694681697947994719272579659222964515648380696514799028169000937/2735516498641983426887837184950320382785308627257075435375224519764419148329663486492458740766996354480274907439027645181133164862930656386887815342247571741084033132826660472002808954606985044245645348766000405818016567487394854470328618116124416549179751175744225741375000000000000000000000000000000000000000000*x^2*13414972909340286725457953554996371157179153508068697935080101044924711503408669737759017664721350122371268146080991571968277040487811938921297846438382091818276098483381942954701775113392654656980644790348465990131553246958184366322491543241474138757177499765849683035703^(1/2)+1983945735498256538812575034543626877430677560057605277272020160570755378503538210060510693403780173601082757846936034120717777247673284763563969515719318376628256361140659739507/41032747479629751403317557774254805741779629408856131530628367796466287224944952297386881111504945317204123611585414677716997472943959845803317230133713576116260496992399907080042134319104775663684680231490006087270248512310922817054929271741866248237696267636163386120625000000000000000000000000000000000000000000000*x^3*13414972909340286725457953554996371157179153508068697935080101044924711503408669737759017664721350122371268146080991571968277040487811938921297846438382091818276098483381942954701775113392654656980644790348465990131553246958184366322491543241474138757177499765849683035703^(1/2))^2+613/100*(1/34279431724988111282225199565047569794430180860056113168872485752243502436186095709472994696291643178406858779624195158844849269688184026726237458441888744553484163294328990810994337500000000000000000000000000000000000000000000*x^2*72621787101325280546280706228442342288085115995097310442592620179503586185191913563772499559965416573406393004075955007383197633344823383073710831607116765652844443294742807426834696738063261929327761671258840604133116408475293174342931428189350965211298688463138164742354045546792822139953360714184338411719008071063572557752901868196580855625452921201078044198375467074855443830392017669080878134330979237144235202401930687740764263967888421209938^(1/2)-433752165790560049813282514245381286773394232413110262051984741197196496096462085030507176225811570332311476048375843397197640015017401868788885198045340193812718985640073653637296122413947834600723989472093651024792028028845151643089156636882569621597347450101828707/453886169383283003414254413927764639300531974969358190266203876121897413657449459773578122249783853583789956275474718796144985208405146144210692697544479785330277770592142546417716854612895387058298510445367753775831977552970582339643321426183443532570616802894613529639712784667455138374708504463652115073243800444147328485955636676228630347659080757506737776239846669217846523939950110431755488339568620232151470015012066798379776649799302632562112500000000000000000000000000000000000000000000*x^3*72621787101325280546280706228442342288085115995097310442592620179503586185191913563772499559965416573406393004075955007383197633344823383073710831607116765652844443294742807426834696738063261929327761671258840604133116408475293174342931428189350965211298688463138164742354045546792822139953360714184338411719008071063572557752901868196580855625452921201078044198375467074855443830392017669080878134330979237144235202401930687740764263967888421209938^(1/2))^2+77981517457206644225995902073403780286515069981619891062665758026064881312681051765438137565187952780385765787747809553261423819144154890319888976788144082068498854832602064661665729103177978686757356460261462610411497124438260235119667901821232833450882945063220795269154148043721488978996880280812732591009692508793849035254983300417377207124520224883563623/4654959210058660107036106730574185700260181856947024714978234661604310035650382625619248495918506613070935016643902358077986939293386914931122382904343259226820137132949568822942473873858142632664931440917486482619064328734306794204881835693436744394970334725342272212617187500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 253152170239396202448116716695777285673340151632628094826133024358114486898752717/156250000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 91 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 92 Test 1 - Weifeng
>> input polynomial
x+184/25
>> basis
[(x-76/25)*(x-251/50)*(x-139/10), (-x+76/25)*(x-251/50)*(x-139/10)]
>> Time taken
0.628000
">> Sums of squares multipliers", [x+184/25-265/91758*x^2*(x-76/25)*(x-251/50)*(x-139/10)-265/91758*(x+1)^2*(-x+76/25)*(x-251/50)*(x-139/10), 265/91758*x^2, 265/91758*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 92 Test 1 - Weifeng

>> Test
Batch: 92 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+184/25
>> basis
[(x-76/25)*(x-251/50)*(x-139/10), (-x+76/25)*(x-251/50)*(x-139/10)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -19.439119
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 92 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 92 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+184/25
>> basis
[(x-76/25)*(x-251/50)*(x-139/10), (-x+76/25)*(x-251/50)*(x-139/10), -x^2+25281/100]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 1.413034
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 9499
time= 0.120000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [184/25*(1/5000000000000000000000000000000000000000000*46704479103253483264700824486424097218211364324556881071533390023386654803298918355655^(1/2)-411408876183905230851513718573049499041687282142712014122419000004771644028277332501/21484060387496602301762379263755084720377227589296165292905359410757861209517502443601300000000000000000000000000000000000000000*x*46704479103253483264700824486424097218211364324556881071533390023386654803298918355655^(1/2)+2362661262597558380877195684888934358615659122450202962112037536342775112005420673185533/2335223955162674163235041224321204860910568216227844053576669501169332740164945917782750000000000000000000000000000000000000000000000*x^2*46704479103253483264700824486424097218211364324556881071533390023386654803298918355655^(1/2))^2+184/25*(1/107420301937483011508811896318775423601886137946480826464526797053789306047587512218006500000000000000000000000000000000000000000000*x*613551510312603391704937871572909085818684652288057285807195561964455489528431897522150611751116819635643019747967935401372544650034337618953114123203777180891671056438772038161215229852943771980581447985698265031209504512417485828478690963953664122936355443077^(1/2)-1005938783048832428714298732977143813400857639950187826858813571035270821830950484499393125029966902983570125673278589921155038485432657707440885737341833271219717212363989/2045171701042011305683126238576363619395615507626857619357318539881518298428106325073835372503722732118810065826559784671241815500114458729843713744012590602972236854795906793870717432843145906601938159952327550104031681708058286094928969879845547076454518143590000000000000000000000000000000000000000000*x^2*613551510312603391704937871572909085818684652288057285807195561964455489528431897522150611751116819635643019747967935401372544650034337618953114123203777180891671056438772038161215229852943771980581447985698265031209504512417485828478690963953664122936355443077^(1/2))^2+139429900915576521314730448502680599775998963950704857053105058938132756106164377028912630670576398170945905963248702149637048403480943899129864618208191407927652664670909984052818409282372094044958261065584482697070922988603897521145869098924469425490630377915007/855266144766705881647653128844799673817623472425663516615662081502183197599137762538443120888349313941889554716671388693657393953755764553813957516489045893932490115233052062070312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^4, 81013948901298569549027018502189214803579615143600240788173289602391193783133527/78125000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
4
>> Succeeds RealCertify Batch: 92 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 93 Test 1 - Weifeng
>> input polynomial
x+991/100
>> basis
[(x-619/100)*(x-651/100)*(x-151/20)*(x-261/20)*(x-22), -(x-619/100)*(x-651/100)*(x-151/20)*(x-261/20)*(x-22)]
memory used=18653.7MB, alloc=307.2MB, time=93.81
>> Time taken
1.320000
">> Sums of squares multipliers", [x+991/100-46/4169241*x^2*(x-619/100)*(x-651/100)*(x-151/20)*(x-261/20)*(x-22)+46/4169241*(x+1)^2*(x-619/100)*(x-651/100)*(x-151/20)*(x-261/20)*(x-22), 46/4169241*x^2, 46/4169241*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 93 Test 1 - Weifeng

>> Test
Batch: 93 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+991/100
>> basis
[(x-619/100)*(x-651/100)*(x-151/20)*(x-261/20)*(x-22), -(x-619/100)*(x-651/100)*(x-151/20)*(x-261/20)*(x-22)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.624772
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 93 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 93 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+991/100
>> basis
[(x-619/100)*(x-651/100)*(x-151/20)*(x-261/20)*(x-22), -(x-619/100)*(x-651/100)*(x-151/20)*(x-261/20)*(x-22), -x^2+576]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.453997
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19614
time= 0.124000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [991/100*(1/20000000000000000000000000000000000000000000*689329677123693113521541793852040858780996071082345719888941170539047993508899999387710^(1/2)-17272193794371795979566963290155586506536347028067023099844253265167940625470384764235031/5465005680236639003998783341658979928415736851540836867279525600033572492538559195145764880000000000000000000000000000000000000000000*x*689329677123693113521541793852040858780996071082345719888941170539047993508899999387710^(1/2)+4226057058970553785016492717190967271754243927897727219998668314162931673127161351/13786593542473862270430835877040817175619921421646914397778823410780959870177999987754200000000000000000000000000000000000000000*x^2*689329677123693113521541793852040858780996071082345719888941170539047993508899999387710^(1/2)-270579719039159148661140796478330444732944278413833419761384306811232919085996851/34466483856184655676077089692602042939049803554117285994447058526952399675444999969385500000000000000000000000000000000000000000*x^3*689329677123693113521541793852040858780996071082345719888941170539047993508899999387710^(1/2))^2+991/100*(1/5415820629114509252962794291584049109059995219876969335474009869633270340105712162389452996080000000000000000000000000000000000000000000*x*1148853392096601072196510911367711996365525352610952523975096182530125336048484437167147608745797102804891905924971755046532651361105067829915547070819816212757708720505901992249599015241020534649574595377138813199869295544826536377222029243481893620893633536335078161890^(1/2)-2315873513997003605067514393733826287856872649368648565405354017728456389679730898444193977636242211091607899661699503602544898184738519527862792247285697579237468449204883/115928697487043498708023300844370534446571680384556258726044014382454625231935866515352937310373067891512805845103103435573425969839058307761407373442968336302493311857305952800161353707469276957575640300417640080713349701798843226763070559382633059625997329599906979000000000000000000000000000000000000000000*x^2*1148853392096601072196510911367711996365525352610952523975096182530125336048484437167147608745797102804891905924971755046532651361105067829915547070819816212757708720505901992249599015241020534649574595377138813199869295544826536377222029243481893620893633536335078161890^(1/2)+737878429750485284219396073210103595952213794772166306921987731577513331867846244184191989501243895694231020645210742959595009768542039416570782720604734535041483457612718457/1358539423676291000484648056769967200545761879506518656945828293544390139436748435726792234105934389353665693497301993385626085584051464544078992657534785191044843498327804134376890863759405589346589534770519219695859566817955194063629733117765231167492156206248909910156250000000000000000000000000000000000000000*x^3*1148853392096601072196510911367711996365525352610952523975096182530125336048484437167147608745797102804891905924971755046532651361105067829915547070819816212757708720505901992249599015241020534649574595377138813199869295544826536377222029243481893620893633536335078161890^(1/2))^2+991/100*(7/1272774861767649937168594529669693510203511148923317242197755084883566165195137755033885407394191012563460064317474467822867147508497763094190669444971997571321369320345001882979250000000000000000000000000000000000000000000*x^2*3025647113767513087359071138715545347577975693108327100101171053889718736176921291604325641349584887623177377150413506159503832515424482293799691311452480417340480426151762209342394759691047273895914688656203272033574488952740953027189977586592023206612863234986014801733692705706367094798978926205030554625466557823450163327428506924954149887415845577820821084627067764474271363570464395447180705066026229423844969877514693036408375955063^(1/2)-10344942632018899718124763100942503726954133325792783164877352291410071713736957320166754288111171482360089113067537276606712661972535767322099766630140280587860056893036094645813293264900357538029431564982686271422974795041542118061810659094036509434662570551/46042456079070851329377169502193081376186586634257151523278689950495719898344454437457129324884987420352699217506292485035927886104285600123038780826450788959529049963178990142166876777907241124503049609985701965728307440585188415631151832839443831404978353575874138287251845521618629703462722790076551918213621532095980746286955540162345759156328084879882059983455379024608477271724458191587532468396051317319379976396962720119257894968350000000000000000000000000000000000000000000*x^3*3025647113767513087359071138715545347577975693108327100101171053889718736176921291604325641349584887623177377150413506159503832515424482293799691311452480417340480426151762209342394759691047273895914688656203272033574488952740953027189977586592023206612863234986014801733692705706367094798978926205030554625466557823450163327428506924954149887415845577820821084627067764474271363570464395447180705066026229423844969877514693036408375955063^(1/2))^2+3060971155133071754856816587236881892711166678495940865246374645599982914298157633742832250638924706149280275996637767694309358834947268831036475779995692218178392853464434095180353490920284426891928190031464970052600110324496766152526639546006971755662185251511489305239842399203646791245171065911092593430678288847146286664304726954180336111079/3560963063011003213203377830676897401528466001734278294959562593593286463219857045909720439147833549364915125749341999147855094210457492606189943029212714600486352376301459442583194551648717216677818576543654720253659777957214758735437851367267410928105004854879062500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 959333120857091064789572586901629066612175208696107464633335147241185943474395791/625000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 93 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 94 Test 1 - Weifeng
>> input polynomial
x+1951/100
>> basis
[(x-399/100)*(x-333/50)*(x-881/100)*(x-2481/100)*(x-2581/100), -(x-399/100)*(x-333/50)*(x-881/100)*(x-2481/100)*(x-2581/100)]
memory used=18939.9MB, alloc=307.2MB, time=95.38
>> Time taken
1.397000
">> Sums of squares multipliers", [x+1951/100-412/9490217*x^2*(x-399/100)*(x-333/50)*(x-881/100)*(x-2481/100)*(x-2581/100)+412/9490217*(x+1)^2*(x-399/100)*(x-333/50)*(x-881/100)*(x-2481/100)*(x-2581/100), 412/9490217*x^2, 412/9490217*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 94 Test 1 - Weifeng

>> Test
Batch: 94 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+1951/100
>> basis
[(x-399/100)*(x-333/50)*(x-881/100)*(x-2481/100)*(x-2581/100), -(x-399/100)*(x-333/50)*(x-881/100)*(x-2481/100)*(x-2581/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.577155
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 94 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 94 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+1951/100
>> basis
[(x-399/100)*(x-333/50)*(x-881/100)*(x-2481/100)*(x-2581/100), -(x-399/100)*(x-333/50)*(x-881/100)*(x-2481/100)*(x-2581/100), -x^2+7187761/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.204514
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20626
time= 0.119000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1951/100*(1/250000000000000000000000000000000000000000000*107731977646713282591971266649745963739542907883116823846205851979993450558346742772620001^(1/2)-880628766707353189195143434520858981915713274508432051698395674514940343393577403960930811/2101850883887376143369359412336543752558482132799609233239476172129672220393344951493816219510000000000000000000000000000000000000000000*x*107731977646713282591971266649745963739542907883116823846205851979993450558346742772620001^(1/2)+4122371787543100593048372372871633760496705270745985434896974475513076048652334130118280239/129278373176055939110365519979695156487451489459740188615447022375992140670016091327144001200000000000000000000000000000000000000000000000*x^2*107731977646713282591971266649745963739542907883116823846205851979993450558346742772620001^(1/2)-2599593441112572404377361666048993111514303539699409330989381272144346687115906680623849/3917526459880483003344409696354398681437923923022429958043849162908852747576245191731636400000000000000000000000000000000000000000000000*x^3*107731977646713282591971266649745963739542907883116823846205851979993450558346742772620001^(1/2))^2+1951/100*(1/1366903691488090285237873404489532287080532880364012538016739337274996833995805333454811814754670000000000000000000000000000000000000000000000*x*82199638967587923878861218944002771980037148387506496662888473060366291209429381550343737647268830051056660060213775202074567428397158490886916683720117174895417835395378985735197867272429991449471161437426526277278413512837946710651977281606749396388328045559253928591715741797757^(1/2)-106455809661581173534140816646339952204675999359610961106549994646246817753392267691918125364517448509603692855870757079505732077294578047365213180600886651904401041937011372172107221/1895942467217558469784087571747885565915772259066013505807268727686562329279509056773689489557712635724013174120768777085266803832840662270584956825938120384568837823061022223518146605463531325077499879387080308804473914955257612495817005470171052197578043080556856374488574259815000000000000000000000000000000000000000000000*x^2*82199638967587923878861218944002771980037148387506496662888473060366291209429381550343737647268830051056660060213775202074567428397158490886916683720117174895417835395378985735197867272429991449471161437426526277278413512837946710651977281606749396388328045559253928591715741797757^(1/2)+567462866357500042994255532743222826284705005932485282140187267494705540564835952490551203054630338057835756318180378889222060932730491262935361449170662787140188609227947917698187/478773350307464260046486760542395344928225317945963006516987052446101598302906327468103406453967837304043730838577974011431011068899157139036605259075282925396171167439652076645996617541295789160984818027040482021331796705873134468640657947012891969085364414282034438002165217125000000000000000000000000000000000000000000000*x^3*82199638967587923878861218944002771980037148387506496662888473060366291209429381550343737647268830051056660060213775202074567428397158490886916683720117174895417835395378985735197867272429991449471161437426526277278413512837946710651977281606749396388328045559253928591715741797757^(1/2))^2+1951/100*(1/2164883320793159480967672710036206371989389256747262674108545111917506023317807935868487842541574527550871249376125341338177590448611000390103873663244558669488235054306611169415466075935600000000000000000000000000000000000000000000000*x^2*30900808407097043740528780437052992246083609545229858012273453208658872536193177557319815967742978266805227778183960187378418744257461477632891038031205960494424851805610843506054391697787538261767913945823390500005973841817558267946367802991078522545719835666447750089358748875761761240922441453428980747597578913921203844825446568637343262617154497843033510637683287159622765445846097520462897919432471420016121099370452183919838950625892199091405832917883296999^(1/2)-323172148720805311824156482913777584952202244914842652163730654955909618677038211459011485531120757175959881124918333302099232626667615816473890357589187523383319569577830609016240382109978817345817905311491770128448095513760384090088714829670775237783480231991882560479057631/12360323362838817496211512174821196898433443818091943204909381283463549014477271022927926387097191306722091111273584074951367497702984591053156415212482384197769940722244337402421756679115015304707165578329356200002389536727023307178547121196431409018287934266579100035743499550304704496368976581371592299039031565568481537930178627454937305046861799137213404255073314863849106178338439008185159167772988568006448439748180873567935580250356879636562333167153318799600000000000000000000000000000000000000000000000*x^3*30900808407097043740528780437052992246083609545229858012273453208658872536193177557319815967742978266805227778183960187378418744257461477632891038031205960494424851805610843506054391697787538261767913945823390500005973841817558267946367802991078522545719835666447750089358748875761761240922441453428980747597578913921203844825446568637343262617154497843033510637683287159622765445846097520462897919432471420016121099370452183919838950625892199091405832917883296999^(1/2))^2+2610617523432094417335603003134554182307282381742449450247590605339506271701007494881256328682265244520925095982992471199793434254322814703462187693770329748126944065201688658893036046949495961139432352281878268588422125398562059298716130720402556403050656888192912197195762665655831321287016595406913518402293421895622611679035929952065857946004720384866471402540829/963472048329543904798421727080795626405892775892438774339557138908203497054800743566539462428103890211821767164410049107427751817579357929391788214651492747483157505521218521280567274604432581190655919965197867208560097332280666835730796817849227343805771420391991864386911036918750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 5876858824596367605034010670900899462990544916082738495348201541955456320112464391/400000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 94 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 95 Test 1 - Weifeng
>> input polynomial
x+533/100
>> basis
[(x-357/100)*(x-449/50)*(x-111/10)*(x-677/50)*(x-1519/50), -(x-357/100)*(x-449/50)*(x-111/10)*(x-677/50)*(x-1519/50)]
memory used=19221.9MB, alloc=307.2MB, time=96.92
>> Time taken
1.361000
">> Sums of squares multipliers", [x+533/100-37/39076703*x^2*(x-357/100)*(x-449/50)*(x-111/10)*(x-677/50)*(x-1519/50)+37/39076703*(x+1)^2*(x-357/100)*(x-449/50)*(x-111/10)*(x-677/50)*(x-1519/50), 37/39076703*x^2, 37/39076703*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 95 Test 1 - Weifeng

>> Test
Batch: 95 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+533/100
>> basis
[(x-357/100)*(x-449/50)*(x-111/10)*(x-677/50)*(x-1519/50), -(x-357/100)*(x-449/50)*(x-111/10)*(x-677/50)*(x-1519/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.704186
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 95 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 95 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+533/100
>> basis
[(x-357/100)*(x-449/50)*(x-111/10)*(x-677/50)*(x-1519/50), -(x-357/100)*(x-449/50)*(x-111/10)*(x-677/50)*(x-1519/50), -x^2+2621161/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.642253
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20226
time= 0.133000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [533/100*(1/250000000000000000000000000000000000000000000*126317902399516191812289154372037812721583916001012606187454594974123566115890665812557035^(1/2)-52960508816615724270159488167985817454563768148298518930944073327777295257383079714352179/168318604947355325589875298200740385451510568071349297744783247803019651849424312195232249137500000000000000000000000000000000000000000*x*126317902399516191812289154372037812721583916001012606187454594974123566115890665812557035^(1/2)+308090054950145950126346178892857490744927502709875384011561429517255076053126649286571/15158148287941943017474698524644537526590069920121512742494551396894827933906879897506844200000000000000000000000000000000000000000000*x^2*126317902399516191812289154372037812721583916001012606187454594974123566115890665812557035^(1/2)-17668760229446954594692155232976685780017776220407507846712426225465343325525654653277/50527160959806476724915661748815125088633566400405042474981837989649426446356266325022814000000000000000000000000000000000000000000000*x^3*126317902399516191812289154372037812721583916001012606187454594974123566115890665812557035^(1/2))^2+533/100*(1/4039646518736527814157007156817769250836253633712383145874797947272471644386183492685573979300000000000000000000000000000000000000000000*x*899200797898416889035994996135036612741917288958120855481230681209890550596517789852291454551794442863624801042458838543704461783147306665958016431652256461307156371541867196986856081982970465928115043533786986417021125646897198932951598692172035771888239373007068955033^(1/2)-15500051340544301233871417504068119288223524324779940805465458161521010105334550456446243057991607140061221883616913530900340338942933756434754405866958095821470991693728889109861/899200797898416889035994996135036612741917288958120855481230681209890550596517789852291454551794442863624801042458838543704461783147306665958016431652256461307156371541867196986856081982970465928115043533786986417021125646897198932951598692172035771888239373007068955033000000000000000000000000000000000000000000000*x^2*899200797898416889035994996135036612741917288958120855481230681209890550596517789852291454551794442863624801042458838543704461783147306665958016431652256461307156371541867196986856081982970465928115043533786986417021125646897198932951598692172035771888239373007068955033^(1/2)+27515465019827776001245354115525976573302871257849304652126694351177451315080477083441711813272522143464369674269081296812857485972683208724986770143783435641854056756059062883049/87812577919767274319921386341312169213077860249816489793088933711903374081691190415262837358573676060900859476802620951533638846010479166597462542153540670049526989408385468455747664256149459563292484720096385392287219301454804583296054559782425368348460876270221577639941406250000000000000000000000000000000000000000*x^3*899200797898416889035994996135036612741917288958120855481230681209890550596517789852291454551794442863624801042458838543704461783147306665958016431652256461307156371541867196986856081982970465928115043533786986417021125646897198932951598692172035771888239373007068955033^(1/2))^2+533/100*(1/444909619310352848935238108563925268128307856160717636149041459868960260377263764096538384598590522975407175338231557454866843846325881366059353342853960295004445604856522238297461487500000000000000000000000000000000000000000000*x^2*16830705284369397923850387777843851334103039225123902600554020435050113351259315392843161908994161133698073472863230035853535529008831890331850592539619214140842304785282067381981795106902257417473856266815628635034501966342564365878145088024656676007750029679325443688490733141083975935304749027908650061330860347693004921459356587851948498896253069487718963643656443380907945150826812910570090662711535584574783177030787666681439065259403850963634993^(1/2)-579883129876184414679937033092045647258167236628917731025672427748348192228902053989232478928624527786032321705562887545973082326359910796122070939475171556790630119904248900765236220996985172865982919095656409086746740463550342906223170058874549956372291822632569956247/8415352642184698961925193888921925667051519612561951300277010217525056675629657696421580954497080566849036736431615017926767764504415945165925296269809607070421152392641033690990897553451128708736928133407814317517250983171282182939072544012328338003875014839662721844245366570541987967652374513954325030665430173846502460729678293925974249448126534743859481821828221690453972575413406455285045331355767792287391588515393833340719532629701925481817496500000000000000000000000000000000000000000000000*x^3*16830705284369397923850387777843851334103039225123902600554020435050113351259315392843161908994161133698073472863230035853535529008831890331850592539619214140842304785282067381981795106902257417473856266815628635034501966342564365878145088024656676007750029679325443688490733141083975935304749027908650061330860347693004921459356587851948498896253069487718963643656443380907945150826812910570090662711535584574783177030787666681439065259403850963634993^(1/2))^2+25572090346448638374598678188881256300127889777970455671695590703202926317655213499967641013073396709747826513933664370940084359437298462472139928763687275971483883105771306401024325445137010631642952796538228192104566352465278928198416377664668626021405871322976874828766867773612937349884440523639564140770240658318023824362286924820663697552498874225158193/66497155486411276346715760555921685187030725055567762339258051722884414354827912468904300696714131225841511679152450107106749615520410249290360977445322097736648200875226005807988446215023520570081218942465563937651535699101199197810130015325715186408605099224768302472234375000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 10675167055695812843412913689144951971456803602417901606037990535455026984319189573/2500000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 95 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 96 Test 1 - Weifeng
>> input polynomial
x+189/10
>> basis
[(x-29/10)*(x-303/25)*(x-929/50)*(x-2429/100)*(x-2529/100), (-x+29/10)*(x-303/25)*(x-929/50)*(x-2429/100)*(x-2529/100)]
memory used=19544.5MB, alloc=339.2MB, time=98.77
>> Time taken
1.576000
">> Sums of squares multipliers", [x+189/10-151/9692527*x^2*(x-29/10)*(x-303/25)*(x-929/50)*(x-2429/100)*(x-2529/100)-151/9692527*(x+1)^2*(-x+29/10)*(x-303/25)*(x-929/50)*(x-2429/100)*(x-2529/100), 151/9692527*x^2, 151/9692527*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 96 Test 1 - Weifeng

>> Test
Batch: 96 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+189/10
>> basis
[(x-29/10)*(x-303/25)*(x-929/50)*(x-2429/100)*(x-2529/100), (-x+29/10)*(x-303/25)*(x-929/50)*(x-2429/100)*(x-2529/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.643443
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 96 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 96 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+189/10
>> basis
[(x-29/10)*(x-303/25)*(x-929/50)*(x-2429/100)*(x-2529/100), (-x+29/10)*(x-303/25)*(x-929/50)*(x-2429/100)*(x-2529/100), -x^2+6911641/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.153443
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20050
time= 0.115000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [189/10*(21/250000000000000000000000000000000000000000000*172636382203942975514977673953706684602268680391290750853444151155172554163307296547655^(1/2)-23032249921112258433770253192851448445816489389450041315821536182327387932150497506416937/13703876019348993396378927758445236623728087849460659802746396718697597349483333199952853900000000000000000000000000000000000000000000*x*172636382203942975514977673953706684602268680391290750853444151155172554163307296547655^(1/2)+20411782083765218690138634954826834018927237195335515602831286601071625930897198865219/435043683153936298297743738363340845197717074586052692150679260911034836491534387300090600000000000000000000000000000000000000000000*x^2*172636382203942975514977673953706684602268680391290750853444151155172554163307296547655^(1/2)+365090531122276520013094294528836742474318687085490783975726368095414678237513603559/483381870171040331441937487070378716886352305095614102389643623234483151657260430333434000000000000000000000000000000000000000000000*x^3*172636382203942975514977673953706684602268680391290750853444151155172554163307296547655^(1/2))^2+189/10*(1/13703876019348993396378927758445236623728087849460659802746396718697597349483333199952853900000000000000000000000000000000000000000000*x*1684143509820141761847488519565413535272702214794839081126655552203054398819750048972474433251757034082944548183387388924599453150523250189770927333154017678345625328576881615975757871948002167579042635400655026002088746997610451323010305385895244835976275425562338^(1/2)-75066210355224672126217828135208432362814245009778897759364881407401158661301176870238908096112541715894051185215283361735323633127626026352896917623815923342829400122234439509/26525260279667232749097944183155263180545059883018715527744824947198106781411063271316472323715173286806376633888351375562441387120741190488892105497175778433943598925085885451618186483181034139369921507560316659532897765212364608337412309827850106166626337952606823500000000000000000000000000000000000000000000*x^2*1684143509820141761847488519565413535272702214794839081126655552203054398819750048972474433251757034082944548183387388924599453150523250189770927333154017678345625328576881615975757871948002167579042635400655026002088746997610451323010305385895244835976275425562338^(1/2)-565361078069808978634063404316735953472954618433674435381646190858553671229135950133179145357481053493208781580295127454979627486454152553406652262619821709083786240876688907359/1178900456874099233293241963695789474690891550356387356788658886542138079173825034280732103276229923858061183728371172247219617205366275132839649133207812374841937730003817131183030510363601517305329844780458518201462122898327315926107213770126671385183392797893636600000000000000000000000000000000000000000000000000*x^3*1684143509820141761847488519565413535272702214794839081126655552203054398819750048972474433251757034082944548183387388924599453150523250189770927333154017678345625328576881615975757871948002167579042635400655026002088746997610451323010305385895244835976275425562338^(1/2))^2+189/10*(1/7316578442155614355400824130105875409150854135496443479175825461510951700578462536519197801380191711273627024726206241265036680345836932179911392988051626226846036660719538934909700000000000000000000000000000000000000000000000*x^2*1814007235826573810308739156214551974853442856927913250025447394532342940956150596163975902918423650528499384410197321580844225681642752292546190509140173913972367276366191723283823574124109237653429790398001223659660164341310733511678203372254013344467588223204762355068398304108137681792006616909731212089967438908186766553611256772522702014553746689631641682239786523789193740103622637841602520114277679331057270413707337429294347681295774476453^(1/2)-58493467619575000509231989710813586302897890861401385564511150532562586412849960920060372714194121473556210622233934591666555326408160502532858521559200070544346752313531014405367907439721237426808771014919253798575849240869354718691072646097416645456531635120909909/10425328941532033392578960667899723993410591131769616379456594221450246787104313771057332775393239370853444737989639779200254170584153748807736727064023988011335444117047078869447261920253501365824309140218397837124483703110981227078610364208356398531422920823015875603841369563839871734436819637412248345344640453495326244560984234324843115026170957986388745300228658182696515747721969182997715632840676317994582013871881249593645676329286060209500000000000000000000000000000000000000000000000*x^3*1814007235826573810308739156214551974853442856927913250025447394532342940956150596163975902918423650528499384410197321580844225681642752292546190509140173913972367276366191723283823574124109237653429790398001223659660164341310733511678203372254013344467588223204762355068398304108137681792006616909731212089967438908186766553611256772522702014553746689631641682239786523789193740103622637841602520114277679331057270413707337429294347681295774476453^(1/2))^2+9846743758813093526109754058916612100525187125289979550976765239300802929064125703222565839540947575125127416651593498713945422287904411382855528328478234072605726300309648530778518052841382106620855015481282920432252962271369171556427629613172054850536424608695732122884498000352598854285121192163325248052173165344754118089718607805443369578282727084665915491/170986955565976556537152818053957287858865716855833123961053409214609304156519464990652018872522789027857580254566344915878330992306026198970307486033578798915581399750144723247697270302046305691502004150543474917331388750017046015839964484917268589813019838891349056200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 7560804372703939342401625435641499186296117932456476891232296504398555265281934029/1000000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 96 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 97 Test 1 - Weifeng
>> input polynomial
x+19/10
>> basis
[(x-36/5)*(x-15/2)*(x-157/20)*(x-1869/100)*(x-119/5), (-x+36/5)*(x-15/2)*(x-157/20)*(x-1869/100)*(x-119/5)]
>> Time taken
0.755000
">> Sums of squares multipliers", [x+19/10-329/80265431*x^2*(x-36/5)*(x-15/2)*(x-157/20)*(x-1869/100)*(x-119/5)-329/80265431*(x+1)^2*(-x+36/5)*(x-15/2)*(x-157/20)*(x-1869/100)*(x-119/5), 329/80265431*x^2, 329/80265431*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 97 Test 1 - Weifeng

>> Test
Batch: 97 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+19/10
>> basis
[(x-36/5)*(x-15/2)*(x-157/20)*(x-1869/100)*(x-119/5), (-x+36/5)*(x-15/2)*(x-157/20)*(x-1869/100)*(x-119/5)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -3.311391
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 97 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 97 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+19/10
>> basis
[(x-36/5)*(x-15/2)*(x-157/20)*(x-1869/100)*(x-119/5), (-x+36/5)*(x-15/2)*(x-157/20)*(x-1869/100)*(x-119/5), -x^2+16641/25]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 4.105543
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19279
time= 0.121000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [19/10*(1/100000000000000000000000000000000000000000*128267792230680138087375966577298336763915080377202114797910322259873541500821251146^(1/2)-1952941549652832649930309400867606527556360612723221011375474186103117410904624123159/974835220953169049464057345987467359405754610866736072464118449175038915406241508709600000000000000000000000000000000000000000*x*128267792230680138087375966577298336763915080377202114797910322259873541500821251146^(1/2)+7255563098725850288117446745071820864197403805928330904090322321305609257344303893273/48100422086505051782765987466486876286468155141450793049216370847452578062807969179750000000000000000000000000000000000000000000*x^2*128267792230680138087375966577298336763915080377202114797910322259873541500821251146^(1/2)-2024745668836011881631940354236799378954820767040067566793813354135579449800723291/626307579251367861754765461803214534980054103404307201161671495409538776859478765361328125000000000000000000000000000000000000*x^3*128267792230680138087375966577298336763915080377202114797910322259873541500821251146^(1/2))^2+19/10*(1/73112641571487678709804300949060051955431595815005205434808883688127918655468113153220000000000000000000000000000000000000000000*x*1360401205795716833113884066102202227773893955923378500745826136227557689025257197191294782270870029672891747867740027172163358851046877919947531328646731625596854295390353821919669840743787908068626288101636271860140026719632503153275464677739123962997702^(1/2)-38479434037727154913688244839459757800855191606941484844208377485383568266106135463553178817573777557643267095303725870286408350634502955187577325307195709005211611080389/34010030144892920827847101652555055694347348898084462518645653405688942225631429929782369556771750741822293696693500679304083971276171947998688283216168290639921357384758845547991746018594697701715657202540906796503500667990812578831886616943478099074942550000000000000000000000000000000000000000000*x^2*1360401205795716833113884066102202227773893955923378500745826136227557689025257197191294782270870029672891747867740027172163358851046877919947531328646731625596854295390353821919669840743787908068626288101636271860140026719632503153275464677739123962997702^(1/2)+458412736000988046464664720810075030009866992202316313829352761106655776814350899980118326462798338274806166817972183079899694232653661231005467186172648744958007469145453/17713557367131729597837032110705758174139244217752324228461277815462990742516369755094984144151953511365777967027864937137543735039672889582650147508420984708292373637895232056245701051351405052976904792990055623178906597911881551474940946324728176601532578125000000000000000000000000000000000000000000*x^3*1360401205795716833113884066102202227773893955923378500745826136227557689025257197191294782270870029672891747867740027172163358851046877919947531328646731625596854295390353821919669840743787908068626288101636271860140026719632503153275464677739123962997702^(1/2))^2+19/10*(1/13257431796958193868232096980989486901873743842466461096144277326206362503161756881778204536622366791496673515232643639914483489292753152690319646273765696847028605170172608750000000000000000000000000000000000000000000*x^2*49170596318381061741143988767958182377585742203620949397939838078071777607836917877329974809099170669294795608967625813735384804725005881996749564180940616858485110990401046486601601215782223173735632664315612412817317172701507740110689052865436361665278476976550392908642987847008575378706709514108642780686658556426468994111731472186919552152537148695855849613758015933713218114947960596661030285151167249916333536234220250211622^(1/2)-217251656552070353905396863556550895612802398642683642663534745719719858231543262240134650314529490935460843231895733804672715022203923722202771445663582309748669014585770716682009111400649813728111521139011755701068588967783907761547688569484535288857815663/76829056747470408970537482449934659964977722193157733434280996996987152512245184183328085639217454170773118139011915333961538757382821690619921194032719713841382985922501635135315001899659723708961926037993144395027058082346105843922951645102244315101997620275859988919754668510950899029229233615794754344822903994416357803299580425292061800238339294837274765021496899896426903304606188432282859820548698827994271150365969140955659375000000000000000000000000000000000000000000*x^3*49170596318381061741143988767958182377585742203620949397939838078071777607836917877329974809099170669294795608967625813735384804725005881996749564180940616858485110990401046486601601215782223173735632664315612412817317172701507740110689052865436361665278476976550392908642987847008575378706709514108642780686658556426468994111731472186919552152537148695855849613758015933713218114947960596661030285151167249916333536234220250211622^(1/2))^2+517164989737235056166080901840042121815180863632026086866016488056652046577360111374411682494976914876665988716327381934759634676738864258176766583617144338263551961815262967352916708912892455846533289884344479311421145485410842783575824725196062548682411453717154480583626698539173934446746744198103617129715869759590559064629508160630843971/848901697693434868611253157571964679089402588307904755419617923038456203213632231606273377537528829391323877649827136791872651362728961722827709163086105556346486940050183107374142254293124017844694133363024854152019855598242171482906387089201380414186830683471679687500000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 3839088696692380016186044053038710412165655030262214808825320212603058611849411/400000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 97 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 98 Test 1 - Weifeng
>> input polynomial
x+231/20
>> basis
[(x-181/20)*(x-242/25)*(x-1203/100)*(x-1829/100)*(x-2993/100), (-x+181/20)*(x-242/25)*(x-1203/100)*(x-1829/100)*(x-2993/100)]
memory used=19874.3MB, alloc=339.2MB, time=100.61
>> Time taken
1.408000
">> Sums of squares multipliers", [x+231/20-11/3745803*x^2*(x-181/20)*(x-242/25)*(x-1203/100)*(x-1829/100)*(x-2993/100)-11/3745803*(x+1)^2*(-x+181/20)*(x-242/25)*(x-1203/100)*(x-1829/100)*(x-2993/100), 11/3745803*x^2, 11/3745803*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 98 Test 1 - Weifeng

>> Test
Batch: 98 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+231/20
>> basis
[(x-181/20)*(x-242/25)*(x-1203/100)*(x-1829/100)*(x-2993/100), (-x+181/20)*(x-242/25)*(x-1203/100)*(x-1829/100)*(x-2993/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.560058
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 98 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 98 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+231/20
>> basis
[(x-181/20)*(x-242/25)*(x-1203/100)*(x-1829/100)*(x-2993/100), (-x+181/20)*(x-242/25)*(x-1203/100)*(x-1829/100)*(x-2993/100), -x^2+10195249/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.656615
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 20252
time= 0.132000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [231/20*(3/50000000000000000000000000000000000000000000*786334761046674685934940402022283059501534035443867690907337877825902035290968570825069^(1/2)-66090941805237501403244651708580955319293982378649105365396137793999214012480240351192239/10898599788106911147058273972028843204691261731252006195975702986667002209132824391635456340000000000000000000000000000000000000000000*x*786334761046674685934940402022283059501534035443867690907337877825902035290968570825069^(1/2)+449393345945976185249881483439537190702628573631677409868009784392299371006265678821163/1132322055907211547746314178912087605682209011039169474906566544069298930818994741988099360000000000000000000000000000000000000000000*x^2*786334761046674685934940402022283059501534035443867690907337877825902035290968570825069^(1/2)-27349678142993437705025577833915008143696423158700518619246427525996462779691191725149/3774406853024038492487713929706958685607363370130564916355221813564329769396649139960331200000000000000000000000000000000000000000000*x^3*786334761046674685934940402022283059501534035443867690907337877825902035290968570825069^(1/2))^2+231/20*(1/108985997881069111470582739720288432046912617312520061959757029866670022091328243916354563400000000000000000000000000000000000000000000*x*516845866541464744907096152127291554983518241011353839126475794740964342667889116752253894324870678698068077603096819725376388707620424524822255766489580580135717137294105229611760028607172040301912779429645677490115582866156619201741160041757140569839169485697787945^(1/2)-155181782254525319898931623712579177966309595082492433225104330634362519073170724911518452425601908998582234701342291521269826573047328269517358111361841151429146690055543427959/232580639943659135208193268457281199742583208455109227606914107633433954200550102538514252446191805414130634921393568876419374918429191036170015094920311261061072711782347353325292012873227418135860750743340554870552012289770478640783522018790713256427626268564004575250000000000000000000000000000000000000000000*x^2*516845866541464744907096152127291554983518241011353839126475794740964342667889116752253894324870678698068077603096819725376388707620424524822255766489580580135717137294105229611760028607172040301912779429645677490115582866156619201741160041757140569839169485697787945^(1/2)+100637862077955443278876577953845708493615328427024988530834539848569002669681438605524370104935806771109566850587939028149930053916120645104841301974809004700688362220616598459790263/7752687998121971173606442281909373324752773615170307586897136921114465140018336751283808414873060180471021164046452295880645830614306367872333836497343708702035757059411578444176400429107580604528691691444685162351733742992349288026117400626357108547587542285466819175000000000000000000000000000000000000000000000000000*x^3*516845866541464744907096152127291554983518241011353839126475794740964342667889116752253894324870678698068077603096819725376388707620424524822255766489580580135717137294105229611760028607172040301912779429645677490115582866156619201741160041757140569839169485697787945^(1/2))^2+231/20*(1/394370865039847463485888096665093991885076060922513352416991159622223810661278973584841270635492516776115948616805540446623638155491147974099106289216076242410704244537726714249243000000000000000000000000000000000000000000000000*x^2*5374720426521170438675559473342399544075236104481188069502243270544296595148508252863940084965121610443107840031859243696258129568347296577512223910156080635132748373981195634756922362108944060197004204586439768204002409261677277600703536351490211877892087901613211996496949204421758182309712475527015199143750446659682780437884950073523709684972590970010456770958077421049529577463716664355622186244198394917308183215804568225163244004756596435836737^(1/2)-1030201376519416691813541660203615591134241788128592609395061289671790411911297170600841224893633075964855776988842976953883420338300576548611571906605254507745513917755006079772821158770670455256014025903079641489070269572532195531960751284733543070924242288220036023171/13436801066302926096688898683355998860188090261202970173755608176360741487871270632159850212412804026107769600079648109240645323920868241443780559775390201587831870934952989086892305905272360150492510511466099420510006023154193194001758840878725529694730219754033029991242373011054395455774281188817537997859376116649206951094712375183809274212431477425026141927395193552623823943659291660889055465610495987293270458039511420562908110011891491089591842500000000000000000000000000000000000000000000000*x^3*5374720426521170438675559473342399544075236104481188069502243270544296595148508252863940084965121610443107840031859243696258129568347296577512223910156080635132748373981195634756922362108944060197004204586439768204002409261677277600703536351490211877892087901613211996496949204421758182309712475527015199143750446659682780437884950073523709684972590970010456770958077421049529577463716664355622186244198394917308183215804568225163244004756596435836737^(1/2))^2+6557191411459620629177818498590521167561337859252343395600017641579619787001156635979703606657640547751415440150758356279040762846069866372234352240898965657669551123975134532370268603556052927307122058329328835513493507377956412101347629383171719649405625801758501989521455177381161478754743470181669944097490100563117511729282494907330680995041752476545482781799/34071485136066691531128959447144855806501528861581362335933360999756547362763641201613156608659954170210532191140394425823291971110790432425192373235887937362369825041816525518287018330591284988534332592303416715349871321952524066298536425629932160588215307283682932149647500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 2524917665448392040951942134290898123523916184394476826385502269740053701393375599/500000000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 98 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 99 Test 1 - Weifeng
>> input polynomial
x+103/25
>> basis
[(x-99/50)*(x-109/25)*(x-113/25)*(x-241/25)*(x-573/50), -(x-99/50)*(x-109/25)*(x-113/25)*(x-241/25)*(x-573/50)]
memory used=20198.2MB, alloc=339.2MB, time=102.44
>> Time taken
1.416000
">> Sums of squares multipliers", [x+103/25-357/786931*x^2*(x-99/50)*(x-109/25)*(x-113/25)*(x-241/25)*(x-573/50)+357/786931*(x+1)^2*(x-99/50)*(x-109/25)*(x-113/25)*(x-241/25)*(x-573/50), 357/786931*x^2, 357/786931*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 99 Test 1 - Weifeng

>> Test
Batch: 99 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+103/25
>> basis
[(x-99/50)*(x-109/25)*(x-113/25)*(x-241/25)*(x-573/50), -(x-99/50)*(x-109/25)*(x-113/25)*(x-241/25)*(x-573/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -3.792036
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 99 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 99 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+103/25
>> basis
[(x-99/50)*(x-109/25)*(x-113/25)*(x-241/25)*(x-573/50), -(x-99/50)*(x-109/25)*(x-113/25)*(x-241/25)*(x-573/50), -x^2+452929/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.474051
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19963
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [103/25*(3/125000000000000000000000000000000000000000000*3403607033097741725775717351115417444341071309522752553000890722722739049499939313456979^(1/2)-1922486829871189130077566014503026669400556514505572179224881249138490700988779396987533/438214405511334247193623608956109995958912931101054391198864680550552652623117186607586046250000000000000000000000000000000000000000*x*3403607033097741725775717351115417444341071309522752553000890722722739049499939313456979^(1/2)+132238366115832768754468972011020723637604068649731982610210108268579293048021106963313/204216421985864503546543041066925046660464278571365153180053443363364342969996358807418740000000000000000000000000000000000000000000*x^2*3403607033097741725775717351115417444341071309522752553000890722722739049499939313456979^(1/2)-3585406812224770871182058974061546401891182312802487130918939421794512877947679931751/136144281323909669031028694044616697773642852380910102120035628908909561979997572538279160000000000000000000000000000000000000000000*x^3*3403607033097741725775717351115417444341071309522752553000890722722739049499939313456979^(1/2))^2+103/25*(1/17528576220453369887744944358244399838356517244042175647954587222022106104924687464303441850000000000000000000000000000000000000000000*x*62629415493641758018090779287323268172430993862063180736605955651464692590478392980309404845811280936930856114778520707213549405590186058103405661812312866824141350854024122486388768347873945308401015462064391841459311754182408594995087970689036846431349744510431497^(1/2)-171712103465275302246018466248521621044577568390195536765744054329968098021985734741163645509066816801726557563924392282116241502892052680222359195950463943528632800459356126483/18788824648092527405427233786196980451729298158618954220981786695439407777143517894092821453743384281079256834433556212164064821677055817431021698543693860047242405256207236745916630504362183592520304638619317552437793526254722578498526391206711053929404923353129449100000000000000000000000000000000000000000000*x^2*62629415493641758018090779287323268172430993862063180736605955651464692590478392980309404845811280936930856114778520707213549405590186058103405661812312866824141350854024122486388768347873945308401015462064391841459311754182408594995087970689036846431349744510431497^(1/2)+37109065443547904644488700314085297878451056447965860525036829832743283455289889937422180090733544091492599492680493618311145154831609104709555687669426265491093905959464602232067/93944123240462637027136168930984902258646490793094771104908933477197038885717589470464107268716921405396284172167781060820324108385279087155108492718469300236212026281036183729583152521810917962601523193096587762188967631273612892492631956033555269647024616765647245500000000000000000000000000000000000000000000000*x^3*62629415493641758018090779287323268172430993862063180736605955651464692590478392980309404845811280936930856114778520707213549405590186058103405661812312866824141350854024122486388768347873945308401015462064391841459311754182408594995087970689036846431349744510431497^(1/2))^2+103/25*(1/276013424366915844787089408769689503353914408227941081225273870779434449102519591606813408794445695496793438564161313125721208685234393036373807861635350572835726744248053960299645000000000000000000000000000000000000000000000*x^2*91759238629234581196333683334507757262042196493629061019084826682725633197255219190745252609737491209139987223987252198042161173171200749742736457978424681998620327224174830391812104789865610234891153236050302487432356433221683378256142512648811573350316392753978609523358398229522306381192636153415566097754715902645028808544147645373805393980731077335330478203823122337014612906185931192152780961568485404399974482951152828912109441642932394477^(1/2)-729455996297610694332155828081998204303393551491294609762918859536229992999498979173783882027192212714125679776674709301411654969238897722715464361321811272210916635184659759575340604406268664397901545083782040099480601482533021538441883359786111198195830672923724041/2752777158877037435890010500035232717861265894808871830572544800481768995917656575722357578292124736274199616719617565941264835195136022492282093739352740459958609816725244911754363143695968307046734597081509074622970692996650501347684275379464347200509491782619358285700751946885669191435779084602466982932641477079350864256324429361214161819421932320059914346114693670110438387185577935764583428847054562131999234488534584867363283249287971834310000000000000000000000000000000000000000000000*x^3*91759238629234581196333683334507757262042196493629061019084826682725633197255219190745252609737491209139987223987252198042161173171200749742736457978424681998620327224174830391812104789865610234891153236050302487432356433221683378256142512648811573350316392753978609523358398229522306381192636153415566097754715902645028808544147645373805393980731077335330478203823122337014612906185931192152780961568485404399974482951152828912109441642932394477^(1/2))^2+16406526021723989364222096120378391364837420870924603649744764162085823025361186106780686825644214769395389947656273664389302538960469067215780924773111484608253730376843401984041882948843339699134306537035896834166824874196281892142348624704671435670243907407525093253402041805040011662699563389339278631760403306844820878248099048135454228525116701039971/280500333529055677540280581384773083483935366877262407247844365993955086770181311961697271682814402668482620260399632843221222451623080364173560500438047047114372466558605340638520990593059316965862427065491942443750224811045960574139036479554379377418217991115796690943750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 32656853279590254772667839078581957074249454813199442496414482105661215056997943/9765625000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 99 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 100 Test 1 - Weifeng
>> input polynomial
x+122/25
>> basis
[(x-73/25)*(x-247/50)*(x-259/25)*(x-366/25)*(x-391/25), (-x+73/25)*(x-247/50)*(x-259/25)*(x-366/25)*(x-391/25)]
>> Time taken
0.910000
">> Sums of squares multipliers", [x+122/25-349/5894391*x^2*(x-73/25)*(x-247/50)*(x-259/25)*(x-366/25)*(x-391/25)-349/5894391*(x+1)^2*(-x+73/25)*(x-247/50)*(x-259/25)*(x-366/25)*(x-391/25), 349/5894391*x^2, 349/5894391*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 100 Test 1 - Weifeng

>> Test
Batch: 100 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
x+122/25
>> basis
[(x-73/25)*(x-247/50)*(x-259/25)*(x-366/25)*(x-391/25), (-x+73/25)*(x-247/50)*(x-259/25)*(x-366/25)*(x-391/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.315109
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 100 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 100 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
x+122/25
>> basis
[(x-73/25)*(x-247/50)*(x-259/25)*(x-366/25)*(x-391/25), (-x+73/25)*(x-247/50)*(x-259/25)*(x-366/25)*(x-391/25), -x^2+173056/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 1.598363
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 19688
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [122/25*(1/6250000000000000000000000000000000000000000*68445727973294561065328183627152869109791045146023920715448677145607809294501919879271^(1/2)-6842471065440568907482871251260511967688385693567599329775597025495570685681800461303/835037881274193644997003840251265003139450750781491832728473861176415273392923422527106200000000000000000000000000000000000000000*x*68445727973294561065328183627152869109791045146023920715448677145607809294501919879271^(1/2)+2258400691913302007814143826498570028099265013751141836817879934197753863269964852237/1711143199332364026633204590678821727744776128650598017886216928640195232362547996981775000000000000000000000000000000000000000000*x^2*68445727973294561065328183627152869109791045146023920715448677145607809294501919879271^(1/2)-94477025232192425313374279332035118307930910314502879118115429410314645048391677279/1711143199332364026633204590678821727744776128650598017886216928640195232362547996981775000000000000000000000000000000000000000000*x^3*68445727973294561065328183627152869109791045146023920715448677145607809294501919879271^(1/2))^2+122/25*(1/104379735159274205624625480031408125392431343847686479091059232647051909174115427815888275000000000000000000000000000000000000000000*x*635882281562697451279110468385673152428552288813501215571112136703157855408977576823803900223090927173606245994906123022032972990294184065457181076568564408183388354949213264741925957453642641196657993734613236083273182309950629563997533010429228622987886787653^(1/2)-31389863098938235205337011499871677486331277423652676870373448468682565376278355871981693146117682427886867971349280829777357438566882274519477044546684992033719783267599221/15897057039067436281977761709641828810713807220337530389277803417578946385224439420595097505577273179340156149872653075550824324757354601636429526914214110204584708873730331618548148936341066029916449843365330902081829557748765739099938325260730715574697169691325000000000000000000000000000000000000000000*x^2*635882281562697451279110468385673152428552288813501215571112136703157855408977576823803900223090927173606245994906123022032972990294184065457181076568564408183388354949213264741925957453642641196657993734613236083273182309950629563997533010429228622987886787653^(1/2)+17193779233383445731280862564758541407190209882274877802233951567921763273276616834880107162558269487245266018239534983633060358225242225827235687027824676161997677011503240759/186293637176571518929426895034865181375552428363330434249349258799753277951848899460098798893483670070392454881320153229111222555750249237926908518525946603959977057114027323654861120347746867538083396601937471508771440129868348505077402249149188073140982457320214843750000000000000000000000000000000000000000*x^3*635882281562697451279110468385673152428552288813501215571112136703157855408977576823803900223090927173606245994906123022032972990294184065457181076568564408183388354949213264741925957453642641196657993734613236083273182309950629563997533010429228622987886787653^(1/2))^2+122/25*(1/87096690563014304661705785581948582586538246566235628369534643789584186924057427714809092096044539687330296373098942021282943447771063930100583716167059310247861202968425772278125000000000000000000000000000000000000000000*x^2*4046644420925242011020858618797082603724546844140309372150245148209104356400901907082702448394855462154402682442260715840252829376110116859456632278062762349007052807700153233425785141398089805859985830254963353423167659372392405843314592509380265245153276109416111563558845192215404688940753959639908503538531053416769467960422108042142367087532551907941167737100781428637582088048751365174101413319827198683746361168517285985533454816607^(1/2)-6278946400889035306200997986149851456155276585369110933678516870032313614914199154487308875452259426043272280000361770510748414379320782533371726998221742748508660915904257561371190427217472629898440672907640446895017781813127910175618055199664819455522176175801/8430509210260920856293455455827255424426139258625644525313010725435634075835212306422296767489282212821672255088043158000526727866896076790534650579297421560431360016041985902970385711246020428874970479697840319631599290359150845506905401061208885927402658561283565757414260817115426435293237415916476049038606361284936391584212725087796598099026149808210766118959961309661629350101565344112711277749639997257804919101077679136528030867931250000000000000000000000000000000000000000000*x^3*4046644420925242011020858618797082603724546844140309372150245148209104356400901907082702448394855462154402682442260715840252829376110116859456632278062762349007052807700153233425785141398089805859985830254963353423167659372392405843314592509380265245153276109416111563558845192215404688940753959639908503538531053416769467960422108042142367087532551907941167737100781428637582088048751365174101413319827198683746361168517285985533454816607^(1/2))^2+16604199929944647764667114602861725068967056631392708126577087088701784740483822656580449971555794099775497208313153382597653413176636860627652851064332898298963058992731208686353589348557743802308221605235053304918928776863731290474782279781416275487903793004832767333399204061658136639424980718730932369183284545803797797873647909456189832795777382224019/39878240427122100701962618505985326851054509115396647091564465804286523203115901530735229220955466139588828328247069883134457123340096416276890889223107210123313729703967382880887817297082347978378387859513085221893537361382968091388046853276812231255883537226368621826171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000*x^6, 108087971001508030276530183480560734219797929546708521148100282228518871912537781/312500000000000000000000000000000000000000000000000000000000000000000000000000000]
>> Degree size
6
>> Succeeds RealCertify Batch: 100 Test 1 - RealCertify with Archimedean polynomial
memory used=20475.4MB, alloc=339.2MB, time=103.67
