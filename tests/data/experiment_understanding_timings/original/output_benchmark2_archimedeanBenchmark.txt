                                       1

                                       8

                                [SemiAlgebraic]

bound_info1 := proc(x, ineq, eps)
local i1, i2, j1, j2;
    if nops(ineq) = 2 then
        i1 := simplify(op(ineq[1])[1]);
        i2 := simplify(op(ineq[1])[2]);
        j1 := simplify(op(ineq[2])[1]);
        j2 := simplify(op(ineq[2])[2]);
        if evalb(i1 = x) then
            if evalb(j1 = x) then
                return [min(i2, j2) + eps, max(i2, j2) - eps]
            else return [min(i2, j1) + eps, max(i2, j1) - eps]
            end if
        else
            if evalb(j1 = x) then
                return [min(i1, j2) + eps, max(i1, j2) - eps]
            else return [min(i1, j1) + eps, max(i1, j1) - eps]
            end if
        end if
    else
        i1 := simplify(op(ineq[1])[1]);
        j1 := simplify(op(ineq[1])[2]);
        if type(ineq[1], `=`) then
            if evalb(i1 = x) then return [j1, j1]
            else return [i1, i1]
            end if
        end if;
        if type(ineq[1], `<=`) then
            if evalb(i1 = x) then return [-infinity, j1 - eps]
            else return [i1 + eps, infinity]
            end if
        end if
    end if
end proc

gen_nat_gens := proc(basis, x)
local S, intervals, size, i, out;
    S := SolveTools:-SemiAlgebraic(map(f -> 0 <= f, basis), [x]);
    intervals := map(ineq -> bound_info1(x, ineq, 0), S);
    size := nops(intervals);
    out := [];
    if size = 0 then return out end if;
    out := [x - intervals[1][1]];
    for i to size - 1 do
        out := [op(out), (x - intervals[i][2])*(x - intervals[i + 1][1])]
    end do;
    out := [op(out), -x + intervals[size][2]];
    return out
end proc

                                   [Generate]

genRandomPoint := proc(lowerbound, upperbound, _denominator)
    return RandomTools:-Generate(rational(range = lowerbound .. upperbound,
        denominator = _denominator))
end proc

intervalsGenerator := proc(
x, num_isolated_points, lowerbound, upperbound, _denominator)
local i, _lowerbound, _uppperbound, a, b;
    _lowerbound := lowerbound;
    _uppperbound := upperbound;
    return [seq(
        if evalb(modp(rand(), 2) = 0) then
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            b := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := max(a, b);
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            if evalb(a = b) then [a] else [min(a, b), max(a, b)] end if
        else
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := a;
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            [a]
        end if, i = 1 .. num_isolated_points)]
end proc

getIsolatedPoints := proc(intervals)
local isolated_points, i;
    isolated_points := [];
    for i to nops(intervals) do
        isolated_points := [op(isolated_points), op(intervals[i])]
    end do;
    return isolated_points
end proc

uniformBasisGenerator := proc(x, intervals, k)
local i, g1, g2;
    g1 := 1;
    g2 := -1;
    for i to nops(intervals) do
        if nops(intervals[i]) = 1 then
            g2 := g2*(x - intervals[i][1])^(k + 1)
        else
            g1 := g1*(x - intervals[i][1])^k*(x - intervals[i][2])^k;
            g2 := g2*(x - intervals[i][1])^k*(x - intervals[i][2])^k
        end if
    end do;
    if evalb(g1 = 1) then return [x^2, g2] end if;
    return [g1, g2]
end proc

linearBasisGenerator :=

    proc(x, intervals) return uniformBasisGenerator(x, intervals, 1) end proc

                                   [Generate]

genRandomPoint := proc(lowerbound, upperbound, _denominator)
    return RandomTools:-Generate(rational(range = lowerbound .. upperbound,
        denominator = _denominator))
end proc

intervalsGenerator := proc(
x, num_isolated_points, lowerbound, upperbound, _denominator)
local i, _lowerbound, _uppperbound, a, b;
    _lowerbound := lowerbound;
    _uppperbound := upperbound;
    return [seq(
        if evalb(modp(rand(), 2) = 0) then
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            b := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := max(a, b);
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            if evalb(a = b) then [a] else [min(a, b), max(a, b)] end if
        else
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := a;
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            [a]
        end if, i = 1 .. num_isolated_points)]
end proc

getIsolatedPoints := proc(intervals)
local isolated_points, i;
    isolated_points := [];
    for i to nops(intervals) do
        isolated_points := [op(isolated_points), op(intervals[i])]
    end do;
    return isolated_points
end proc

basisNoBoundedPoly := proc(x, intervals, k)
local i, max_point, count_num_roots, g1, g2;
    count_num_roots := 0;
    g1 := 1;
    g2 := -1;
    for i to nops(intervals) do
        if nops(intervals[i]) = 1 then
            max_point := intervals[i][1];
            count_num_roots := count_num_roots + 1;
            g1 := g1*(x - intervals[i][1])^k;
            g2 := g2*(x - intervals[i][1])^k
        else
            max_point := intervals[i][2];
            count_num_roots := count_num_roots + 2;
            g1 := g1*(x - intervals[i][1])^k*(x - intervals[i][2])^k;
            g2 := g2*(x - intervals[i][1])^k*(x - intervals[i][2])^k
        end if
    end do;
    if evalb(count_num_roots mod 2 = 0) then
        g1 := g1*(x - max_point - 1)^k; g2 := g2*(x - max_point - 1)^k
    end if;
    return [g1, g2]
end proc

linearBasisNoBoundedPoly :=

    proc(x, intervals) return basisNoBoundedPoly(x, intervals, 1) end proc

                                   [Generate]

genRandomPoint := proc(lowerbound, upperbound, _denominator)
    return RandomTools:-Generate(rational(range = lowerbound .. upperbound,
        denominator = _denominator))
end proc

intervalsGenerator := proc(
x, num_isolated_points, lowerbound, upperbound, _denominator)
local i, _lowerbound, _uppperbound, a, b;
    _lowerbound := lowerbound;
    _uppperbound := upperbound;
    return [seq(
        if evalb(modp(rand(), 2) = 0) then
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            b := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := max(a, b);
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            if evalb(a = b) then [a] else [min(a, b), max(a, b)] end if
        else
            a := genRandomPoint(_lowerbound, _uppperbound, _denominator);
            _lowerbound := a;
            if 1/_denominator <= abs(_lowerbound - _uppperbound) then
                _uppperbound := _uppperbound + _lowerbound
            end if;
            [a]
        end if, i = 1 .. num_isolated_points)]
end proc

getIsolatedPoints := proc(intervals)
local isolated_points, i;
    isolated_points := [];
    for i to nops(intervals) do
        isolated_points := [op(isolated_points), op(intervals[i])]
    end do;
    return isolated_points
end proc

strictlyLeftPolynomial := proc(x, isolated_points, _denominator)
local lowerbound, upperbound, rational_point;
    lowerbound := isolated_points[1];
    upperbound := isolated_points[nops(isolated_points)];
    rational_point := genRandomPoint(lowerbound, upperbound, _denominator);
    return x - lowerbound + rational_point
end proc

strictlyRightPolynomial := proc(x, isolated_points, _denominator)
local lowerbound, upperbound, rational_point;
    lowerbound := isolated_points[1];
    upperbound := isolated_points[nops(isolated_points)];
    rational_point := genRandomPoint(lowerbound, upperbound, _denominator);
    return -x + rational_point + upperbound
end proc

inbetweenPolynomial := proc(x, isolated_points, _denominator)
local num_isolated_points, choice, a, b;
    num_isolated_points := nops(isolated_points);
    choice := 1 + (rand() mod (num_isolated_points - 1));
    a := genRandomPoint(isolated_points[choice],
        isolated_points[choice + 1], _denominator);
    b := genRandomPoint(isolated_points[choice],
        isolated_points[choice + 1], _denominator);
    while evalb(a = b) do
        a := genRandomPoint(isolated_points[choice],
            isolated_points[choice + 1], _denominator);
        b := genRandomPoint(isolated_points[choice],
            isolated_points[choice + 1], _denominator)
    end do;
    return (x - a)*(x - b)
end proc

getArchimedeanPolynomial := proc(x, isolated_points, offset)
local max_point;
    max_point := max(abs(isolated_points[1]),
        abs(isolated_points[nops(isolated_points)])) + offset;
    return expand(-(x - max_point)*(x + max_point))
end proc

                                [SemiAlgebraic]

                    [SemiAlgebraicSetTools, PolynomialRing]

                              [Maximize, Minimize]

                                     [Text]

                           [Open, Close, WriteString]

_pwd := "/Users/typesarespaces/Documents/GithubProjects/phd-thesis/Documents\
    /Seminars/BeihangUniversity-Fall2021/Weifeng-Notes/Weifeng-Certificates/\
    tests"

  "/Users/typesarespaces/Documents/GithubProjects/phd-thesis/Documents/Seminars/BeihangUniversity-Fall2021/Weifeng-Notes/Weifeng-Certificates/tests"

                            "/Users/typesarespaces"

univsos1 := proc(f)
local s, X;
    X := op(indets(f));
    s := SOSDecomp(expand(f), X, 0);
    return HornerToList1(s)
end proc

Warning, (in SOSDecomp) `s` is implicitly declared local
|univsos/univsos1.mm:54|
SOSDecomp := proc(f, X, prec::integer := 64)
local g, h, S, SEVEN, SODD, newF, s;
    if degree(f) = 0 and f < 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if degree(f) = 0 and 0 <= f then return [[0, [0, 0, f]]] end if;
    if f = 0 then return [[0, [0, 0, 0]]] end if;
    if lcoeff(f, X) < 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if irem(degree(f), 2) = 1 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    else
        if degree(f, X) = 2 then return [[0, SOSDecompDegree2(f, X)]]
        end if;
        g := gcd(f, diff(f, X), 'newF');
        if degree(g) = 1 then
            newF := quo(newF, g, X);
            if degree(newF) = 2 then
                return [[g, [0, 0, 0]], [0, SOSDecompDegree2(newF, X)]]
            else return [[g, [0, 0, 0]], op(SOSDecompSQF(newF, X, prec))]
            end if
        end if;
        S := sqrfree(f);
        SEVEN := map(
            _e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
            ;
        SEVEN := [op(SEVEN), op(map(
            _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if,
            S[2]))];
        SEVEN := remove(member, SEVEN, [1]);
        SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
        if nops(SEVEN) = 0 then return SOSDecompSQF(f, X, prec)
        else
            g := mul(s, s in SEVEN);
            h := S[1]*mul(s, s in SODD);
            return [[g, [0, 0, 0]], op(SOSDecomp(h, X, prec))]
        end if
    end if
end proc

SOSDecompSQF := proc(f, X, prec::integer := 64)
local g, h, content_h, SOS_h, SOS_g;
    g := ConstructGPolynomial(f, X, 10);
    h := expand(f - g[1]*g[2]^2);
    if h <> 0 then
        SOS_g := g;
        SOS_h := SOSDecomp(h, X, prec);
        return [[1, SOS_g], op(SOS_h)]
    else SOS_g := g; return [[0, SOS_g]]
    end if
end proc

SOSDecompDegree2 := proc(f, X)
local a, b, c, mycouple;
    if f = 0 then return [f, 0, 0] end if;
    if degree(f) = 0 and 0 < f then return [0, 0, f] end if;
    if degree(f) = 1 or degree(f) = 0 and f < 0 or coeff(f, X, 2) < 0 or
    0 < coeff(f, X, 1)^2 - 4*coeff(f, X, 2)*coeff(f, X, 0) then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    c, b, a := seq(coeff(f, X, i), i = 0 .. 2);
    return [a, X + 1/2*b/a, c - 1/4*b^2/a]
end proc

ConstructGPolynomial := proc(f, X, myprec := 10)
local i, inv_roots1, smallest, sf, sdf, g, t, df, values, mymin, minimizer,
a, b, c, newt, _interval, count, mybound, boo;
    df := numer(diff(f, X));
    inv_roots1 := map(s -> rhs(s),
        RootFinding[Isolate](df, X, digits = myprec, output = interval));
    values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
    mymin := min(op(values));
    for i to nops(inv_roots1) do
        if subs(X = inv_roots1[i][1], f) = mymin then
            minimizer := inv_roots1[i]; _interval := inv_roots1[i]
        end if
    end do;
    if myprec = 0 then t := round(minimizer[1])
    else
        if minimizer[1] < 0 then t := ceil(minimizer[1])
        else t := floor(minimizer[1])
        end if
    end if;
    sf := subs(X = t, f);
    if sf = 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, diff(f, X));
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + 1/4*t^2*sdf^2/sf;
    b := sdf - 1/2*sdf^2*t/sf;
    boo := CheckTvalue(t, a, b, c, f, X);
    if boo then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
    if 0 < minimizer[1] - t then mybound := floor(log[2](minimizer[1] - t))
    else mybound := myprec
    end if;
    count := mybound;
    t := t + 2^mybound;
    sf := subs(X = t, f);
    sdf := subs(X = t, diff(f, X));
    while boo = false and 0 <= sf and t < minimizer[2] and sdf <= 0 do
        a := 1/4*sdf^2/sf;
        c := sf - sdf*t + 1/4*t^2*sdf^2/sf;
        b := sdf - 1/2*sdf^2*t/sf;
        boo := CheckTvalue(t, a, b, c, f, X);
        if boo = true then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
        newt := t + 2^count;
        sf := subs(X = newt, f);
        sdf := subs(X = newt, diff(f, X));
        while minimizer[2] <= newt or sf <= 0 do
            count := count - 1; newt := t + 2^count
        end do;
        t := newt
    end do;
    return ConstructGPolynomialRec(f, X, 2*myprec)
end proc

getcoeffs := proc(f, X)
local c, nc, dc, lcmf;
    c := PolynomialTools:-CoefficientVector(f, X);
    nc, dc := MTM[numden](c);
    lcmf := ilcm(op(convert(dc, list)));
    return Vector(lcmf*c)
end proc

ConstructGPolynomialRec := proc(f, X, myprec, useNewton::boolean := false,
aNewton::rational := 0, bNewton::rational := 0)
local mid, fcoeffs, newaNewton, newbNewton, dfa, dfb, i, inv_roots1,
smallest, sf, sdf, g, t, df, values, mymin, minimizer, a, b, c, _interval;
    df := convert(diff(f, X), horner);
    if useNewton then
        mid := 1/2*aNewton + 1/2*bNewton;
        fcoeffs := getcoeffs(diff(f, X), X);
        newaNewton, newbNewton :=
            MyUnivariateNewton(fcoeffs, aNewton, bNewton, mid);
        if 0 < newaNewton then t := newbNewton else t := newaNewton end if
    else
        inv_roots1 := fgbrs:-rs_isolate_uni(primpart(diff(f, X)), X,
            precision = myprec, verbose = 0);
        values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
        mymin := min(op(values));
        for i to nops(inv_roots1) do
            if subs(X = inv_roots1[i][1], f) = mymin then
                minimizer := inv_roots1[i]; _interval := inv_roots1[i]
            end if
        end do;
        newaNewton := minimizer[1];
        newbNewton := minimizer[2];
        t := minimizer[1]
    end if;
    sf := subs(X = t, f);
    if sf = 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, df);
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + t^2*a;
    b := sdf - 2*t*a;
    if CheckTvalue(t, a, b, c, f, X) then
        return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if;
    return ConstructGPolynomialRec(f, X, 2*myprec, false, newaNewton,
        newbNewton)
end proc

NaiveBolzano := proc(f, X)
local df, inv_roots1, values, mymin, i, minimizer, _interval, t1, t2;
    df := convert(diff(f, X), horner);
    inv_roots1 := fgbrs:-rs_isolate_uni(primpart(diff(f, X)), X,
        precision = 2, verbose = 0);
    values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
    mymin := min(op(values));
    for i to nops(inv_roots1) do
        if subs(X = inv_roots1[i][1], f) = mymin then
            minimizer := inv_roots1[i]; _interval := inv_roots1[i]
        end if
    end do;
    t1 := minimizer[1];
    t2 := minimizer[2];
    return BolzanoRec(f, df, X, t1, t2)
end proc

BolzanoRec := proc(f, df, X, t1, t2)
local t, sf, sdf, a, c, b;
    t := 1/2*t1 + 1/2*t2;
    sf := subs(X = t, f);
    if sf = 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, df);
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + t^2*a;
    b := sdf - 2*a*t;
    if sdf = 0 then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
    if 0 < sdf then
        if CheckTvalue(t, a, b, c, f, X) then
            return [1/sf, 1/2*sdf*(X - t) + sf, 0]
        end if;
        return BolzanoRec(f, df, X, t1, t)
    end if;
    if CheckTvalue(t, a, b, c, f, X) then
        return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if;
    return BolzanoRec(f, df, X, t, t2)
end proc

ConFrac := proc(t, f, df, X, sf, sdf, myprec)
local newt, newsf, newsdf, a, b, c;
    newt := confrac2rat(convert(t, confrac, myprec));
    lprint(newt);
    newsf := subs(X = t, f);
    newsdf := subs(X = t, df);
    a := 1/4*newsdf^2/newsf;
    c := newsf - newsdf*newt + newt^2*a;
    b := newsdf - 2*a*newt;
    if CheckTvalue(newt, a, b, c, f, X) then
        return [1/newsf, 1/2*newsdf*(X - newt) + newsf, 0]
    else return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if
end proc

SmallerApprox := proc(t, f, df, X, sf, sdf)
local newt, newsf, newsdf, a, b, c, myprec;
    myprec := floor(1/8*BitRat(t));
    if 0 < t then newt := BinaryApproximationDown(t, myprec)
    else newt := BinaryApproximationUp(t, myprec)
    end if;
    newsf := subs(X = t, f);
    newsdf := subs(X = t, df);
    a := 1/4*newsdf^2/newsf;
    c := newsf - newsdf*newt + newt^2*a;
    b := newsdf - 2*a*newt;
    if CheckTvalue(newt, a, b, c, f, X) then
        lprint("After rounding ", newt);
        return [1/newsf, 1/2*newsdf*(X - newt) + newsf, 0]
    else return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if
end proc

Warning, (in CheckTvalue) `s` is implicitly declared local
|univsos/univsos1.mm:370|
CheckTvalue := proc(t, a, b, c, f, X)
local F, S, SODD, newg, g, newF, s;
    if a = 0 and b <> 0 or a = 0 and b = 0 and c < 0 then return false
    end if;
    if a <> 0 and 0 < b^2 - 4*a*c then return false end if;
    F := f - a*X^2 - b*X - c;
    g := gcd(F, diff(F, X), 'newF');
    if degree(g) = 1 then
        newF := quo(newF, g, X);
        if 0 < nops(fgbrs:-rs_isolate_uni(numer(newF), X, precision = 1))
        then return false
        else return true
        end if
    else
        S := sqrfree(F);
        SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
        SODD := mul(s, s in SODD);
        if 0 < nops(fgbrs:-rs_isolate_uni(SODD, X, precision = 1)) then
            return false
        else return true
        end if
    end if
end proc

Warning, (in oldCheckTvalue) `s` is implicitly declared local
|univsos/univsos1.mm:402|
oldCheckTvalue := proc(t, g, f, X)
local a, b, c, F, S, SODD, newg, s;
    a, b, c := coeff(g, X, 2), coeff(g, X, 1), coeff(g, X, 0);
    if a = 0 and b <> 0 or a = 0 and b = 0 and c < 0 then return false
    end if;
    if a <> 0 and 0 < b^2 - 4*c*a then return false end if;
    F := normal(f - g);
    S := sqrfree(F);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    SODD := mul(s, s in SODD);
    if 0 < nops(fgbrs:-rs_isolate_uni(primpart(SODD), X, precision = 1))
    then return false
    else return true
    end if
end proc

MyNewtonIterator := proc(_interval, pol)
local a, b, c, X, newa;
    a := _interval[1];
    b := _interval[2];
    X := op(1, indets(pol));
    newa := a - subs({X = a}, pol)/subs({X = a}, diff(pol, X));
    return [newa, b]
end proc

BolzanoIterator := proc(_interval, pol)
local a, b, c, X, sc;
    a := _interval[1];
    b := _interval[2];
    c := 1/2*a + 1/2*b;
    X := op(1, indets(pol));
    sc := eval(pol, X = c);
    if sc = 0 then return [a, c] end if;
    if sign(sc) = sign(eval(pol, X = a)) then return [c, b]
    else return [a, c]
    end if
end proc

Warning, (in UnivariateSumOfSquaresDecItv) `i` is implicitly declared local
|univsos/univsos1.mm:468|
Warning, (in UnivariateSumOfSquaresDecItv) `c` is implicitly declared local
|univsos/univsos1.mm:476|
Warning, (in UnivariateSumOfSquaresDecItv) `si` is implicitly declared local
|univsos/univsos1.mm:479|
Warning, (in UnivariateSumOfSquaresDecItv) `r` is implicitly declared local
|univsos/univsos1.mm:484|
Warning, (in UnivariateSumOfSquaresDecItv) `j` is implicitly declared local
|univsos/univsos1.mm:484|
Warning, (in UnivariateSumOfSquaresDecItv) `t` is implicitly declared local
|univsos/univsos1.mm:485|
UnivariateSumOfSquaresDecItv := proc(f, a, b)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time();
    sosq := SOSDecomp(q, y, 2);
    tcmp := time() - ti;
    lprint(tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

HornerToList := proc(sos)
local hd, tl, p, c, q, d;
    if nops(sos) = 0 then return [] end if;
    if nops(sos) = 1 then
        p, c, q, d := sos[1][1], op(sos[1][2]);
        if c = 0 and d = 0 then return [[1, p]] end if;
        if c = 0 then return [[1, p], [d, 1]] end if;
        if d = 0 then return [[1, p], [c, q]] end if;
        return [[1, p], [c, q], [d, 1]]
    end if;
    hd, tl := HdTailList(sos);
    p, c, q, d := hd[1], op(hd[2]);
    if c = 0 and d = 0 then return [op(MulPolList2(p, HornerToList(tl)))]
    end if;
    if c = 0 then return [op(MulPolList2(p, HornerToList(tl))), [d, 1]]
    end if;
    if d = 0 then return [op(MulPolList2(p, HornerToList(tl))), [c, q]]
    end if;
    return [op(MulPolList2(p, HornerToList(tl))), [c, q], [d, 1]]
end proc

Warning, (in HdTailList) `i` is implicitly declared local
|univsos/univsos1.mm:507|
HdTailList :=

    proc(l) local i; return l[1], [seq(l[i], i = 2 .. nops(l))] end proc

       MulPolList2 := proc(p, l) map(el -> [el[1], p*el[2]], l) end proc

              MulPolList := proc(p, l) map(el -> p*el, l) end proc

HornerToList1 := proc(l)
local l1;
    l1 := HornerToList(l);
    return foldr((a, b) -> [op(a), op(b)], [], op(l1))
end proc

SOSCHECK := proc(f, sos)
local res;
    res := expand(f - foldr(
        (_e, a) -> _e[1]^2*a + _e[2][1]*_e[2][2]^2 + _e[2][3], 1, op(sos)))
        ;
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

SOSCHECK2 := proc(f, sos)
local s, i, res;
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    res := expand(f - s);
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

          soscheck1 := proc(f, sos) return SOSCHECK2(f, sos) end proc

Warning, (in univsos2) `se` is implicitly declared local
|univsos/univsos2.mm:23|
Warning, (in univsos2) `so` is implicitly declared local
|univsos/univsos2.mm:24|
univsos2 := proc(p, id::integer := 2, iter::boolean := false)
local x, S, s, c, SEVEN, SODD, q, n, m, t, e, r, k, ok, l, a, p_can, p_cnj,
s1, s2, u, v, i, j, sqs, cfs, sos, rfloat, gp, gproots, se, so;
    x := op(indets(p));
    S := sqrfree(p);
    c := lcoeff(p);
    if c < 0 then
        lprint(p);
        lprint(c);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    n := degree(q, x);
    m := floor(1/2*n);
    if 2*m <> n then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if n = 0 then lprint(q, " * (", s, ")^2") end if;
    t := q;
    if id = 2 then t := sum(x^(2*i), i = 0 .. m)
    else if id = 1 then t := sum(x^j, j = 0 .. n) end if
    end if;
    e := max(1, c);
    printf("Perturbation loop\n");
    while q - e*t <> 0 and 0 < nops(realroot(q - e*t)) do e := 1/2*e end do
    ;
    printf("  epsilon = ");
    lprint(e);
    e := 1/2*e;
    r := q - e*t;
    k := 1;
    ok := false;
    printf("Root isolation loop\n");
    while not ok do
        k := 2*k;
        l := lcoeff(r, x);
        printf("  precision of root isolation = %d\n", k);
        gproots := true;
        gp := true;
        if gp then s1, s2 := gpsquares(r, x, k, iter)
        else
            a := polroots(r, x, gproots, iter);
            p_can := mul(x - a[2*i - 1], i = 1 .. 1/2*degree(r));
            p_cnj := mul(x - a[2*i], i = 1 .. 1/2*degree(r));
            s1 := convert(evalc(Re(1/2*p_can + 1/2*p_cnj)), rational, k);
            s2 := convert(evalc(Re(-1/2*I*(p_can - p_cnj))), rational, k)
        end if;
        u := r - l*(s1^2 + s2^2);
        v := expand(e*t + u);
        ok := true;
        for i from 0 to m do
            ok := ok and
                1/4*abs(coeff(v, x, 2*i + 1)) + abs(coeff(v, x, 2*i - 1))
                 <= coeff(v, x, 2*i)
        end do
    end do;
    sqs := [s1, s2];
    cfs := [l, l];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    for i to 2*m + 3 do sos := [op(sos), cfs[i], s*sqs[i]] end do;
    return sos
end proc

Warning, (in UnivariateSumOfSquaresDecItv2) `i` is implicitly declared local
|univsos/univsos2.mm:129|
Warning, (in UnivariateSumOfSquaresDecItv2) `c` is implicitly declared local
|univsos/univsos2.mm:137|
Warning, (in UnivariateSumOfSquaresDecItv2) `si` is implicitly declared local
|univsos/univsos2.mm:140|
Warning, (in UnivariateSumOfSquaresDecItv2) `r` is implicitly declared local
|univsos/univsos2.mm:145|
Warning, (in UnivariateSumOfSquaresDecItv2) `j` is implicitly declared local
|univsos/univsos2.mm:145|
Warning, (in UnivariateSumOfSquaresDecItv2) `t` is implicitly declared local
|univsos/univsos2.mm:146|
UnivariateSumOfSquaresDecItv2 := proc(f, a, b)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time[real]();
    sosq := univsos2(expand(q), y, 2);
    tcmp := time[real]() - ti;
    printf("%fms\n", 1000*tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

gpsquares := proc(r, x, k, iter)
local fd, ok, prec, cmd, status;
    fd := fopen("univsos/in.gp", WRITE, TEXT);
    writeline(fd, "r =", StringTools:-SubstituteAll(
        StringTools:-SubstituteAll(convert(r, string), "\n", ""), "\\", ""))
        ;
    writeline(fd, "x =", convert(x, string));
    writeline(fd, "k =", convert(k, string));
    fclose(fd);
    ok := true;
    if iter then
        prec := 1000000000;
        while ok do
            if FileTools:-Exists("univsos/out.mm") then
                FileTools:-Remove("univsos/out.mm")
            end if;
            cmd := sprintf("gp -q -s %d univsos/gpsquares.gp", prec);
            ssystem(cmd);
            try read "univsos/out.mm"
            catch:
                prec := 10*prec;
                printf("   Issue with PARI/GP root isolation: trying wit\
                    h stack precision = %d\n", prec)
            finally ok := false
            end try
        end do
    else
        if FileTools:-Exists("univsos/out.mm") then
            FileTools:-Remove("univsos/out.mm")
        end if;
        ssystem("gp -q univsos/gpsquares.gp");
        read "univsos/out.mm"
    end if;
    return s1gp, s2gp
end proc

polroots := proc(r, x, gproots)
local fd, a, rfloat;
    rfloat := r;
    if gproots then
        fd := fopen("univsos/in.gp", WRITE, TEXT);
        writeline(fd, "r =", convert(rfloat, string));
        fclose(fd);
        if FileTools:-Exists("univsos/out.mm") then
            FileTools:-Remove("univsos/out.mm")
        end if;
        ssystem("gp -q  univsos/mypolroots.gp");
        ssystem("sed -i 's/0\\.E/0\\.0E/g' univsos/out.mm");
        ssystem("sed -i 's/ E/E/g' univsos/out.mm");
        read "univsos/out.mm";
        return agp
    else
        a := [fsolve([r = 0], x, complex, fulldigits)];
        return map(sol -> rhs(sol[1]), a)
    end if
end proc

SOSCHECK2 := proc(f, sos)
local s, i, res;
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    res := expand(f - s);
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

          soscheck2 := proc(f, sos) return SOSCHECK2(f, sos) end proc

Warning, (in univsos3) `se` is implicitly declared local
|univsos/univsos3.mm:21|
Warning, (in univsos3) `so` is implicitly declared local
|univsos/univsos3.mm:22|
univsos3 := proc(p, prec::integer := 10)
local S, s, c, SEVEN, SODD, q, n, m, t, e, r, ok, l, a, p_can, p_cnj, s1,
s2, u, v, i, j, sqs, cfs, sos, rfloat, gp, eigs, eigs2, soslist, soslist2,
sumsos, cnd, maxq, k, obj_plus_r0, id, x, se, so;
    x := op(indets(p));
    id := 2;
    S := sqrfree(p);
    c := lcoeff(p);
    if c < 0 then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    maxq := 1;
    q := q/maxq;
    n := degree(q, x);
    m := floor(1/2*n);
    if 2*m <> n then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if n = 0 then lprint(q, " * (", s, ")^2") end if;
    t := q;
    if id = 2 then t := sum(x^(2*i), i = 0 .. m)
    else if id = 1 then t := sum(x^j, j = 0 .. n) end if
    end if;
    e := min(1, c);
    while
    degree(q - e*t, x) <= 0 or q - e*t <> 0 and 0 < nops(realroot(q - e*t))
    do e := 1/2*e
    end do;
    e := 1/2*e;
    r := q - e*t;
    ok := false;
    k := prec;
    while not ok do
        k := k + 1;
        eigs, soslist, eigs2, soslist2, obj_plus_r0 := sossdp(r, x, k);
        sumsos :=
            obj_plus_r0 + sum(eigs[j]*soslist[j]^2, j = 1 .. nops(soslist))
            ;
        u := r - sumsos;
        v := expand(e*t + u + obj_plus_r0);
        ok := true;
        for i from 0 to m do
            cnd := coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
                 - abs(coeff(v, x, 2*i - 1));
            if not (0 <= cnd) then
                printf("prec = %d\t idx = %d\t err = %8.3e\t", k, i,
                    evalf(cnd));
                lprint(cnd);
                ok := true;
                error "not enough precision";
                break
            end if
        end do
    end do;
    sqs := [op(soslist)];
    cfs := [op(eigs)];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    for i to nops(sqs) do sos := [op(sos), maxq*cfs[i], s*sqs[i]] end do;
    return sos
end proc

Warning, (in UnivariateSumOfSquaresDecItv3) `i` is implicitly declared local
|univsos/univsos3.mm:111|
Warning, (in UnivariateSumOfSquaresDecItv3) `c` is implicitly declared local
|univsos/univsos3.mm:120|
Warning, (in UnivariateSumOfSquaresDecItv3) `si` is implicitly declared local
|univsos/univsos3.mm:123|
Warning, (in UnivariateSumOfSquaresDecItv3) `r` is implicitly declared local
|univsos/univsos3.mm:128|
Warning, (in UnivariateSumOfSquaresDecItv3) `j` is implicitly declared local
|univsos/univsos3.mm:128|
Warning, (in UnivariateSumOfSquaresDecItv3) `t` is implicitly declared local
|univsos/univsos3.mm:129|
UnivariateSumOfSquaresDecItv3 := proc(f, a, b, k::integer := 1)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time[real]();
    sosq := univsos3(q, y, 2, k);
    tcmp := time[real]() - ti;
    printf("%fms\n", 1000*tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

sossdp := proc(r, x, precSVD::integer := 10, precSDP::integer := 200,
epsStar::integer := 3, epsDash::integer := 3, a::rational := 0,
b::rational := 1, itv::boolean := false)
local fd, n, nsdp, nblock, nloc, i, j, Y, Y2, v, e, mons, rfloat, eigs,
eivs, eigs2, eivs2, gmp, normeig, gpround, SVD, af, bf, lowerbnd;
    n := degree(r);
    nsdp := 1 + ceil(1/2*n);
    if itv then nblock := 2 else nblock := 1 end if;
    fd := fopen("univsos/in.dat-s", WRITE, TEXT);
    writeline(fd, convert(2*ceil(1/2*n), string));
    writeline(fd, convert(nblock, string));
    if not itv then writeline(fd, convert(nsdp, string))
    else nloc := ceil(1/2*n); fprintf(fd, "%d %d\n", nsdp, nloc)
    end if;
    rfloat := convert(r, float, 100);
    af := convert(a, float);
    bf := convert(b, float);
    for i to 2*ceil(1/2*n) do fprintf(fd, "%.100f ", coeff(rfloat, x, i))
    end do;
    fprintf(fd, "\n");
    writeline(fd, "0 1 1 1 -1");
    for j from 2 to nsdp do fprintf(fd, "%d 1 %d %d 1\n", j - 1, 1, j)
    end do;
    for i from 2 to nsdp do
        for j from i to nsdp do
            fprintf(fd, "%d 1 %d %d 1\n", i + j - 2, i, j)
        end do
    end do;
    if itv then
        for i to nloc do
            for j from i to nloc do
                fprintf(fd, "%d 2 %d %d %f\n", i + j - 2, i, j,
                    -sign(i + j - 3)*bf*af);
                fprintf(fd, "%d 2 %d %d %f\n", i + j - 1, i, j,
                    sign(i + j - 2)*(bf + af));
                fprintf(fd, "%d 2 %d %d %f\n", i + j, i, j,
                    -sign(i + j - 1))
            end do
        end do
    end if;
    fclose(fd);
    if FileTools:-Exists("univsos/out.dat-s") then
        FileTools:-Remove("univsos/out.dat-s")
    end if;
    if FileTools:-Exists("univsos/out.mm") then
        FileTools:-Remove("univsos/out.mm")
    end if;
    gmp := true;
    if not gmp then
        system("sdpa -ds univsos/in.dat-s -o univsos/out.dat-s -p univso\
            s/param.sdpa > /dev/null")
    else
        write_param(precSDP, epsStar, epsDash);
        system("sdpa_gmp -ds univsos/in.dat-s -o univsos/out.dat-s -p un\
            ivsos/param_gmp.sdpa > /dev/null")
    end if;
    system("echo $(grep objValPrimal univsos/out.dat-s) ';' 'yMat:=' $(s\
        ed -n '/yMat/,/main/{//!p}' univsos/out.dat-s) ';' >> univsos/ou\
        t.mm");
    system("sed -i 's/ =/ :=/g' univsos/out.mm");
    system("sed -i 's/{/[/g' univsos/out.mm");
    system("sed -i 's/}/]/g' univsos/out.mm");
    system("sed -i 's/] \\[/], \\[/g' univsos/out.mm");
    read "univsos/out.mm";
    lowerbnd := coeff(r, x, 0) + convert(objValPrimal, rational, exact);
    SVD := true;
    Y := Matrix(yMat[1]);
    eigs, eivs := eigseivs_(Y, x, nsdp, precSVD, SVD);
    if itv then
        Y2 := Matrix(yMat[2]);
        eigs2, eivs2 := eigseivs_(Y2, x, nloc, precSVD, SVD)
    else eigs2 := Vector(1, 0); eivs2 := Vector(1, 0)
    end if;
    return convert(eigs, list), convert(eivs, list), convert(eigs2, list),
        convert(eivs2, list), lowerbnd
end proc

checkrational_ := proc(U)
local v;
    for v in U do
        if not type(convert(v, rational), realcons) then
            lprint(v);
            error "Non Rational Cholesky factor, retry with gmp = true"
        end if
    end do;
    return
end proc

eigseivs_ := proc(Y, x, nmat, precSVD, SVD)
local ti, tf, v, e, mons, eigs, eivs, gpround, normeig, U, S, V, Ysvd,
Yexact, tcmp;
    mons := Vector(nmat, j -> x^(j - 1));
    normeig := false;
    gpround := false;
    Yexact := convert(Y, rational, exact);
    if not SVD then
        ti := time[real]();
        lprint("starting Cholesky");
        U := LUDecomposition(Yexact, method = 'Cholesky');
        checkrational_(U);
        tcmp := time[real]() - ti;
        lprint(tcmp);
        lprint("ending Cholesky");
        S := IdentityMatrix(nmat)
    else
        Digits := precSVD;
        ti := time[real]();
        U, S, V := MTM[svd](Yexact);
        tcmp := time[real]() - ti;
        lprint(tcmp);
        Digits := 10
    end if;
    eigs := Diagonal(S);
    eivs := Transpose((Transpose(mons)) . U);
    return eigs, eivs
end proc

write_param := proc(precSDP, epsStar, epsDash)
local fd;
    fd := fopen("univsos/my_param_gmp.sdpa", WRITE, TEXT);
    fprintf(fd, "300\tunsigned int maxIteration;\n");
    fprintf(fd, "1.0E-%d\tdouble 0.0 < epsilonStar;\n", epsStar);
    fprintf(fd, "1.0E5   double 0.0 < lambdaStar;\n");
    fprintf(fd, "2.0   \tdouble 1.0 < omegaStar;\n");
    fprintf(fd, "-1.0E5  double lowerBound;\n");
    fprintf(fd, "1.0E5   double upperBound;\n");
    fprintf(fd, "0.1     double 0.0 <= betaStar <  1.0;\n");
    fprintf(fd,
        "0.3     double 0.0 <= betaBar  <  1.0, betaStar <= betaBar;\n");
    fprintf(fd, "0.9     double 0.0 < gammaStar  <  1.0;\n");
    fprintf(fd, "1.0E-%d\tdouble 0.0 < epsilonDash;\n", epsDash);
    fprintf(fd, "%d     precision\n", precSDP);
    fclose(fd)
end proc

      printpol := proc(p) lprint(sort(evalf(expand(p)), x, plex)) end proc

Warning, (in sositv3) `se` is implicitly declared local
|univsos/univsos3.mm:324|
Warning, (in sositv3) `so` is implicitly declared local
|univsos/univsos3.mm:325|
sositv3 := proc(f, a, b, prec::integer := 10, precSVD::integer := 10,
precSDP::integer := 200, epsStar::integer := 3, epsDash::integer := 3)
local bitsos, n, cf, q, sosq, clist, soslist, soslist2, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, sos2, h, S, c, SEVEN, SODD, s, ds,
dq, p1, p2, m, t, e, r, k, ok, eigs, eigs2, sumsos, sumsos2, u, v, i, sqs,
cfs, id, cnd, maxp1, obj_plus_r0, x, se, so;
    x := op(indets(p));
    n := degree(f);
    id := 2;
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    h := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    S := sqrfree(h);
    c := lcoeff(f);
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    ds := degree(s, y);
    dq := 1/2*degree(q, y);
    p1 := add(coeff(q, y, 2*i)*(b - x)^(dq - i)*(x - a)^i, i = 0 .. dq)/
        (b - a)^dq;
    p2 := add(coeff(s, y, 2*i)*(b - x)^(ds - i)*(x - a)^i, i = 0 .. ds)/
        (b - a)^ds;
    p1 := expand(p1);
    maxp1 := 1;
    p1 := p1/maxp1;
    n := degree(p1, x);
    m := ceil(1/2*n);
    if n = 0 then lprint(p1, " * (", p2, ")^2") end if;
    t := p1;
    if id = 3 then t := sum(abs(coeff(p1, x, i))*x^i, i = 0 .. n)
    else
        if id = 2 then t := sum(x^(2*i), i = 0 .. m)
        else if id = 1 then t := sum(x^j, j = 0 .. n) end if
        end if
    end if;
    e := 1/2^prec;
    r := p1 - e*t;
    k := prec;
    ok := false;
    while not ok do
        eigs, soslist, eigs2, soslist2, obj_plus_r0 :=
            sossdp(r, x, precSVD, precSDP, epsStar, epsDash, a, b, true);
        sumsos :=
            obj_plus_r0 + sum(eigs[j]*soslist[j]^2, j = 1 .. nops(soslist))
            ;
        sumsos2 := (b - x)*(x - a)*
            sum(eigs2[j]*soslist2[j]^2, j = 1 .. nops(soslist2));
        u := r - sumsos - sumsos2;
        v := expand(e*t + u + obj_plus_r0);
        ok := true;
        for i from 0 to m do
            cnd := coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
                 - abs(coeff(v, x, 2*i - 1));
            if not (0 <= cnd) then
                printf("prec = %d\t idx = %d\t err = %8.3e\t", k, i,
                    evalf(cnd));
                ok := true;
                error "not enough precision";
                break
            end if
        end do;
        break
    end do;
    sqs := [op(soslist)];
    cfs := [op(eigs)];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    sos2 := [];
    for i to nops(sqs) do sos := [op(sos), maxp1*cfs[i], p2*sqs[i]] end do;
    for i to nops(eigs2) do
        sos2 := [op(sos2), maxp1*eigs2[i], p2*soslist2[i]]
    end do;
    return sos, sos2
end proc

          "/Users/typesarespaces/Documents/GithubProjects/RealCertify"

                               stack_level := -1

getSOSPoly := proc(poly, x)
local fd, _log_time_0, s, i, sos;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "getSOSPoly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    sos := univsos1(poly, x);
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "getSOSPoly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return s
end proc

Ord := proc(f, t, point)
local fd, _log_time_0, g, T;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Ord", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    g := subs(t = T + point, f);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Ord", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return ldegree(expand(g), T)
end proc

Eps := proc(f, t, point)
local fd, _log_time_0, g;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Eps", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    g := subs(t = y + point, f);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Eps", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return tcoeff(expand(g), y)
end proc

Type_of_poly := proc(p, t, point)
local fd, _log_time_0, O, E, output;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    O := Ord(p, t, point);
    E := Eps(p, t, point);
    if type(O, even) and 0 < E then output := 0
    elif type(O, even) and E < 0 then output := 1
    elif type(O, odd) and 0 < E then output := 2
    elif type(O, odd) and E < 0 then output := 3
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return output
end proc

Type_of_P := proc(G, t, point)
local fd, _log_time_0, O_1, O_2, E_1, E_2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_P", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    O_1 := Ord(G[1], t, point);
    O_2 := Ord(G[2], t, point);
    E_1 := Eps(G[1], t, point);
    E_2 := Eps(G[2], t, point);
    if type(O_1, even) and E_1 < 0 then
        if O_1 <= O_2 or Type_of_poly(G[2], t, point) = 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 1
        elif O_2 < O_1 and Type_of_poly(G[2], t, point) <> 0 then
            if E_2 < 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 2
            elif 0 < E_2 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 3
            end if
        end if
    elif type(O_2, even) and E_2 < 0 then
        if O_2 <= O_1 or Type_of_poly(G[1], t, point) = 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 1
        elif O_1 < O_2 and Type_of_poly(G[1], t, point) <> 0 then
            if E_1 < 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 2
            elif 0 < E_1 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 3
            end if
        end if
    elif E_1*E_2 < 0 and O_1*O_2 <> 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return 4
    elif O_1 = 0 then
        if 0 < E_2 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 5
        elif E_2 < 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 6
        end if
    elif O_2 = 0 then
        if 0 < E_1 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 5
        elif E_1 < 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 6
        end if
    elif 0 < E_1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return 5
    elif E_1 < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return 6
    end if
end proc

Type_of_Point := proc(G, f, t, point)
local fd, _log_time_0, T_1, T_2, output;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_Point", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    T_1 := Type_of_poly(f, t, point);
    T_2 := Type_of_P(G, t, point);
    if T_1 = 1 and 1 <= T_2 and T_2 <= 3 then output := 1
    elif T_1 = 1 and T_2 = 4 then output := 2
    elif T_1 = 2 and 1 <= T_2 and T_2 <= 2 then output := 3
    elif T_1 = 2 and 3 <= T_2 and T_2 <= 5 then output := 4
    elif T_1 = 3 and (T_2 = 1 or T_2 = 3) then output := 5
    elif T_1 = 3 and (T_2 = 2 or T_2 = 4 or T_2 = 6) then output := 6
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_Point", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return output
end proc

Pre_poly := proc(g, f, t, S, point)
local fd, _log_time_0, h, i, d;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Pre_poly", " ", convert(stack_level, string), "\n"))
        ;
    FileTools:-Text:-Close(fd);
    h := 1;
    for i in S do
        if i <> point then
            if Ord(g, t, i) <= Ord(f, t, i) then
                d := 2*floor(1/2*Ord(f, t, i) - 1/2*Ord(g, t, i)) + 2;
                h := (t - i)^d*h
            end if
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Pre_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_case_1 := proc(g, f, t, point)
local fd, _log_time_0, m, n, c_1, c_2, h, a;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_1", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    c_2 := Eps(g, t, point);
    a := (abs(c_1) + 1)/abs(c_2);
    h := a*(t - point)^(m - n);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_1", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_case_2 := proc(g_1, g_2, f, t, point)
local fd, _log_time_0, m, n_1, n_2, c_1, c_2, h_1, h_2, a, g, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_2", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    h := 1;
    n_1 := Ord(g_1, t, point);
    n_2 := Ord(g_2, t, point);
    c_1 := Eps(g_1, t, point);
    c_2 := Eps(g_2, t, point);
    h_1 := (t - point)^(2*floor(1/2*m - 1/2*n_1))/abs(c_1);
    h_2 := (t - point)^(2*floor(1/2*m - 1/2*n_2))/abs(c_2);
    if 0 < c_1 then
        h_1 := 1/4*h_1*(t - point - 1)^2; h_2 := 1/4*h_2*(t - point + 1)^2
    elif c_1 < 0 then
        h_1 := 1/4*h_1*(t - point + 1)^2; h_2 := 1/4*h_2*(t - point - 1)^2
    end if;
    g := h_1*g_1 + h_2*g_2;
    h := Fixing_case_1(expand(g), f, t, point);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_2", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return [h*h_1, h*h_2]
end proc

Fixing_case_3 := proc(g, f, t, point)
local fd, _log_time_0, m, n, c, h_1, g_1, h_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_3", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c := Eps(g, t, point);
    h_1 := 1/4*(t - point - 1)^2/abs(c);
    g_1 := h_1*g + 1/4*(t - point)^n*(t - point + 1)^2;
    h_2 := Fixing_case_4(g_1, f, t, point);
    h := h_1*h_2;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_3", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_case_4 := proc(g, f, t, point)
local fd, _log_time_0, m, n, b_1, b_2, d, c_1, c_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_4", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    b_1 := Eps(g, t, point);
    c_2 := Eps(f - c_1*(t - point)^m, t, point);
    b_2 := Eps(g - b_1*(t - point)^n, t, point);
    if 0 < c_2/c_1 - b_2/b_1 then d := 0; h := c_1*(t - point)^(m - n)/b_1
    else
        d := 2/(c_2/c_1 - b_2/b_1 - 1);
        h := c_1*(t - point)^(m - n)*(x - point + d)^2/(b_1*d^2)
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_4", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_case_5 := proc(g, f, t, point)
local fd, _log_time_0, m, n, c, h_1, g_1, h_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_5", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c := Eps(g, t, point);
    h_1 := 1/4*(t - point + 1)^2/abs(c);
    g_1 := h_1*g + 1/4*(t - point)^n*(t - point - 1)^2;
    h_2 := Fixing_case_6(g_1, f, t, point);
    h := h_1*h_2;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_5", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_case_6 := proc(g, f, t, point)
local fd, _log_time_0, m, n, a, d, b_1, b_2, c_1, c_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_6", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    b_1 := Eps(g, t, point);
    c_2 := Eps(f - c_1*(t - point)^m, t, point);
    b_2 := Eps(g - b_1*(t - point)^n, t, point);
    if c_2/c_1 - b_2/b_1 < 0 then d := 0; h := c_1*(t - point)^(m - n)/b_1
    else
        d := 2/(c_2/c_1 - b_2/b_1 + 1);
        h := c_1*(t - point)^(m - n)*(x - point + d)^2/(b_1*d^2)
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_6", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_points := proc(f, g_1, g_2, t)
local
fd, _log_time_0, fixing, S, interval, flag, point, H_1, H_2, h_1, h_2, h, g
;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_points", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    S := map(proc(bound)
            interval := bound_info(t, bound, 0);
            ASSERT(evalb(interval[1] = interval[2]));
            return interval[1]
        end proc, SolveTools:-SemiAlgebraic([0 <= g_1, 0 <= g_2], [t]));
    H_1 := 0;
    H_2 := 0;
    for point in S do
        flag := Type_of_Point([g_1, g_2], f, t, point);
        if flag = 1 then
            if type(Ord(g_1, t, point), even) and Eps(g_1, t, point) < 0
             and Ord(g_1, t, point) <= Ord(g_2, t, point) then
                h := Pre_poly(g_1, f, t, S, point);
                H_1 := H_1 + h*Fixing_case_1(h*g_1, f, t, point)
            elif type(Ord(g_2, t, point), even) and Eps(g_2, t, point) < 0
             and Ord(g_2, t, point) <= Ord(g_1, t, point) then
                h := Pre_poly(g_2, f, t, S, point);
                H_2 := H_2 + h*Fixing_case_1(h*g_2, f, t, point)
            end if
        elif flag = 2 then
            h_1 := Pre_poly(g_1, f, t, S, point);
            h_2 := Pre_poly(g_2, f, t, S, point);
            fixing := Fixing_case_2(h_1*g_1, h_2*g_2, f, t, point);
            H_1 := H_1 + h_1*fixing[1];
            H_2 := H_2 + h_2*fixing[2]
        elif flag = 3 then
            if Type_of_poly(g_1, t, point) = 1 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_3(h_1*g, f, t, point)
            elif Type_of_poly(g_2, t, point) = 1 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_3(h_2*g, f, t, point)
            end if
        elif flag = 4 then
            if Type_of_poly(g_1, t, point) = 2 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_4(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 2 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_4(h_2*g, f, t, point)
            end if
        elif flag = 5 then
            if Type_of_poly(g_1, t, point) = 1 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_5(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 1 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_5(h_2*g, f, t, point)
            end if
        elif flag = 6 then
            if Type_of_poly(g_1, t, point) = 3 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_6(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 3 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_6(h_2*g, f, t, point)
            end if
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_points", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return [H_1, H_2]
end proc

bound_poly := proc(g_1, g_2, x)
local fd, _log_time_0, d, c, c_1, g, h1, h2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "bound_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    d := [degree(g_1, x), degree(g_2, x)];
    c := [coeff(g_1, x^d[1]), coeff(g_2, x^d[2])];
    c_1 := [
        if d[1] = 1 then subs(x = 0, g_1)/abs(c[1])
        else coeff(g_1/abs(c[1]), x^(d[1] - 1))
        end if,
        if d[2] = 1 then subs(x = 0, g_2)/abs(c[2])
        else coeff(g_2/abs(c[2]), x^(d[2] - 1))
        end if];
    if type(d[1], even) and c[1] < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return [g_1, 1, 0]
    elif type(d[2], even) and c[2] < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return [g_2, 0, 1]
    else
        if d[1] = d[2] then
            h1 := x^2/abs(c[1]);
            h2 :=
                (x + sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[2]);
            g := h1*g_1 + h2*g_2
        elif d[2] < d[1] then
            h1 := 1/abs(c[1]);
            h2 := x^(d[1] - d[2] - 2)*
                (x + sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[2])
        else
            h1 := x^(d[2] - d[1] - 2)*
                (x - sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[1]);
            h2 := 1/abs(c[2])
        end if
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return [expand(h1*g_1 + h2*g_2), h1, h2]
end proc

dot_product := proc(v1, v2)
local fd, _log_time_0, out, i;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "dot_product", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    out := 0;
    for i to min(nops(v1), nops(v2)) do out := out + v1[i]*v2[i] end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "dot_product", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return out
end proc

bound_info := proc(x, bound, eps)
local fd, _log_time_0, i1, i2, j1, j2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "bound_info", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    if nops(bound) = 2 then
        i1 := simplify(op(bound[1])[1]);
        i2 := simplify(op(bound[1])[2]);
        j1 := simplify(op(bound[2])[1]);
        j2 := simplify(op(bound[2])[2]);
        if evalb(i1 = x) then
            if evalb(j1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [min(i2, j2) + eps, max(i2, j2) - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [min(i2, j1) + eps, max(i2, j1) - eps]
            end if
        else
            if evalb(j1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [min(i1, j2) + eps, max(i1, j2) - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [min(i1, j1) + eps, max(i1, j1) - eps]
            end if
        end if
    else
        i1 := simplify(op(bound[1])[1]);
        j1 := simplify(op(bound[1])[2]);
        if type(bound[1], `=`) then
            if evalb(i1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [j1, j1]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [i1, i1]
            end if
        end if;
        if type(bound[1], `<=`) then
            if evalb(i1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [-infinity, j1 - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [i1 + eps, infinity]
            end if
        end if
    end if
end proc

averkov_lemma_7 := proc(x, f, basis, B_poly)
local fd, _log_time_0, _gamma, interval, lowerbound, upperbound, eps,
tobe_disjoint_set, N, g, term, semialgebraic_of_B, R, M, mu, m, N_list,
temp_bound_N, pos_coeff, _pos_coeff, T, semialgebraic_for_mu, N_top,
N_bottom, N_old, N_curr;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "averkov_lemma_7", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    R := RegularChains:-PolynomialRing([x]);
    semialgebraic_of_B := SolveTools:-SemiAlgebraic([0 <= B_poly], [x]);
    _gamma := 1/2*max(map(proc(g_i)
            map(proc(bound)
                    interval := bound_info(x, bound, 0);
                    lowerbound := convert(evalf(interval[1]), rational);
                    upperbound := convert(evalf(interval[2]), rational);
                    simplify(maximize(g_i, x = lowerbound .. upperbound))
                end proc, semialgebraic_of_B)
        end proc, basis));
    _gamma := ceil(evalf(_gamma));
    T := SolveTools:-SemiAlgebraic([0 <= B_poly, f < 0], [x]);
    eps := -1/2*min(map(proc(g_i)
            map(proc(bound)
                    interval := bound_info(x, bound, 0);
                    lowerbound := convert(evalf(interval[1]), rational);
                    upperbound := convert(evalf(interval[2]), rational);
                    simplify(maximize(g_i, x = lowerbound .. upperbound))
                end proc, T)
        end proc, basis));
    if eps = -infinity then eps := 1 end if;
    semialgebraic_for_mu := SolveTools:-SemiAlgebraic(
        [0 <= B_poly, op(map(g_i -> 0 <= g_i + 2*eps, basis))], [x]);
    mu := min(map(proc(bound)
            interval := bound_info(x, bound, 0);
            lowerbound := convert(evalf(interval[1]), rational);
            upperbound := convert(evalf(interval[2]), rational);
            simplify(minimize(f, x = lowerbound .. upperbound))
        end proc, semialgebraic_for_mu));
    mu := convert(evalf(mu), rational);
    M := -min(map(proc(bound)
            interval := bound_info(x, bound, 0);
            lowerbound := convert(evalf(interval[1]), rational);
            upperbound := convert(evalf(interval[2]), rational);
            simplify(minimize(f, x = lowerbound .. upperbound))
        end proc, semialgebraic_of_B));
    m := numelems(basis);
    N_list := [-infinity, 1];
    temp_bound_N :=
        ceil((log(mu) - log(2*m*_gamma))/(log(_gamma) - log(_gamma + eps)))
        ;
    if type(temp_bound_N, realcons) then
        if evalb(0 < 2*m*_gamma/mu) then
            _pos_coeff := 2*m*_gamma/mu; mu := _pos_coeff*mu
        end if;
        temp_bound_N := ceil(
            (log(mu) - log(2*m*_gamma))/(log(_gamma) - log(_gamma + eps)));
        N_list := N_list, [temp_bound_N, _pos_coeff]
    end if;
    temp_bound_N := ceil(
        (log(M) - log(2*eps))/(log(_gamma + 2*eps) - log(_gamma + eps)));
    if type(temp_bound_N, realcons) then
        if evalb(0 < evalf(2*eps/M)) then
            _pos_coeff := 2*eps/M; M := _pos_coeff*M
        end if;
        temp_bound_N := ceil(
            (log(M) - log(2*eps))/(log(_gamma + 2*eps) - log(_gamma + eps)))
            ;
        N_list := N_list, [temp_bound_N, _pos_coeff]
    end if;
    temp_bound_N :=
        ceil((log(M) - log(2*m*_gamma))/(log(_gamma) - log(_gamma + eps)));
    if type(temp_bound_N, realcons) then
        if evalb(0 < m*_gamma/M) then
            _pos_coeff := m*_gamma/M; M := _pos_coeff*M
        end if;
        temp_bound_N := ceil(
            (log(M) - log(2*m*_gamma))/(log(_gamma) - log(_gamma + eps)));
        N_list := N_list, [temp_bound_N, _pos_coeff]
    end if;
    N, pos_coeff :=
        op(foldl((x, y) -> if y[1] < x[1] then x else y end if, N_list));
    N := ceil(1/2*N);
    g := add(term, term in map(
        g_i -> g_i*((g_i - _gamma)/(_gamma + eps))^(2*N)/pos_coeff, basis))
        ;
    N_top := N;
    N_bottom := 0;
    N_old := N_top;
    do
        N_curr := iquo(N_top + N_bottom, 2);
        g := add(term, term in map(
            g_i -> g_i*((g_i - _gamma)/(_gamma + eps))^(2*N_curr)/pos_coeff
            , basis));
        if SolveTools:-SemiAlgebraic([0 <= B_poly, 0 <= g - f], [x]) = []
        then N_top := N_curr
        else N_bottom := N_curr
        end if;
        break if N_curr = N_old;
        N_old := N_curr
    end do;
    if N_top = 0 and RegularChains:-SemiAlgebraicSetTools:-IsEmpty([],
    [B_poly, -f], [], [], R) then N := -1
    else N := N_top
    end if;
    if N = -1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "averkov_lemma_7",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return map(g_i -> 0, basis)
    else
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "averkov_lemma_7",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return map(g_i -> ((g_i - _gamma)/(_gamma + eps))^(2*N)/pos_coeff,
            basis)
    end if
end proc

Lower_bound_poly := proc(x, poly, g)
local fd, _log_time_0, i, d_poly, c_poly, d_g, h, S, _point, G, C, eps,
_log_time_1, _log_time_2, opt_roots, _log_time_3;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Lower_bound_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    eps := 1/1000;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_1 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ",
        "Lower_bound_poly::expand(poly)", " ", convert(stack_level, string),
        "\n"));
    FileTools:-Text:-Close(fd);
    d_poly := degree(expand(poly), x);
    c_poly := coeff(poly, x^d_poly);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ",
        "Lower_bound_poly::expand(poly)", " ", convert(stack_level, string),
        "\nTime: ", convert(time() - _log_time_1, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    if type(d_poly, even) and evalb(0 < evala(c_poly)) then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Lower_bound_poly",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return [poly, 0]
    end if;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_2 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ",
        "Lower_bound_poly::SemiAlgebraic(g)", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    S := map(bound -> bound_info(x, bound, eps),
        SolveTools:-SemiAlgebraic([0 <= g], [x]));
    d_g := degree(expand(g), x);
    _point := S[1][1];
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ",
        "Lower_bound_poly::SemiAlgebraic(g)", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_2, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    if d_g <= d_poly then
        if type(d_poly - d_g, even) then
            h := (x - _point)^(d_poly - d_g + 2)
        else h := (x - _point)^(d_poly - d_g + 1)
        end if
    else h := 1
    end if;
    G := h*g;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_3 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ",
        "Lower_bound_poly::Minimization_problem", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    C := 1/2*min(seq(
        if evalb(S[i][1] = S[i][2]) then 1
        else minimize(simplify(poly/G), x = S[i][1] .. S[i][2])
        end if, i = 1 .. numelems(S)));
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ",
        "Lower_bound_poly::Minimization_problem", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_3, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    C := evalf(C);
    C := convert(C, rational);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Lower_bound_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return [poly - C*G, C*h]
end proc

findPositiveConstantAvoidExponent := proc(f, g)
local fd, _log_time_0, i, _args, curr_condition, conditions, pos_coeff, sol
;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ",
        "findPositiveConstantAvoidExponent", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    sol := solve({0 <= c*f - g, 0 < c}, {x}, 'parametric', 'real',
        'parameters' = {c});
    _args := op(sol);
    conditions := [];
    for i to 1/2*nops(sol) do
        if evalb(_args[2*i] = [[x = x]]) then
            conditions := [evalf(_args[2*i - 1]), op(conditions)];
            pos_coeff :=
                Optimization:-Minimize(c, map(`<=`@op, conditions))[1];
            if pos_coeff = 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ",
                    "findPositiveConstantAvoidExponent", " ",
                    convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 1
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ",
                    "findPositiveConstantAvoidExponent", " ",
                    convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 1/convert(pos_coeff, rational, exact)
            end if
        end if;
        curr_condition := _args[2*i - 1];
        conditions := [op(0, curr_condition)(
            seq(map(v -> -evalf(v + 1/100), [op(curr_condition)]))),
            op(conditions)]
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ",
        "findPositiveConstantAvoidExponent", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return 0
end proc

Last_step := proc(x, _poly, g)
local fd, _log_time_0, A, i, j, Ga, Ep, tobe_disjoint_set, N, N1, N2, poly,
_g, pos_coeff, semialgebraic_Ep_lifted, m, mu, interval, lowerbound,
upperbound, R, SemiAlg_poly, N_list, temp_bound_N, N_top, N_bottom, N_old,
N_curr;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Last_step", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    poly := _poly;
    pos_coeff := 1;
    R := RegularChains:-PolynomialRing([x]);
    A := RegularChains:-SemiAlgebraicSetTools:-IsEmpty([], [-poly], [], [],
        R);
    if evalb(A) then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return 0
    end if;
    pos_coeff := 1;
    Ga := convert(1/2*evalf(1.001*maximize(g)), rational);
    SemiAlg_poly := SolveTools:-SemiAlgebraic([poly <= 0], [x]);
    Ep := -1/2*max(map(proc(bound)
            interval := bound_info(x, bound, 0);
            lowerbound := interval[1];
            upperbound := interval[2];
            simplify(maximize(g, x = lowerbound .. upperbound))
        end proc, SemiAlg_poly));
    Ep := convert(evalf(Ep), rational);
    semialgebraic_Ep_lifted :=
        SolveTools:-SemiAlgebraic([0 <= g + 17/10*Ep], [x]);
    mu := min(map(proc(bound)
            interval := bound_info(x, bound, 0);
            lowerbound := convert(evalf(interval[1]), rational);
            upperbound := convert(evalf(interval[2]), rational);
            simplify(minimize(poly, x = lowerbound .. upperbound))
        end proc, semialgebraic_Ep_lifted));
    m := ceil(evalf(minimize(poly))) - 1;
    N_list := [];
    temp_bound_N := ceil((log(mu) - log(2*Ga))/(log(Ga) - log(Ga + Ep)));
    N_list := [op(N_list), temp_bound_N];
    temp_bound_N :=
        ceil((log(-m) - log(2*Ep))/(log(Ga + 2*Ep) - log(Ga + Ep)));
    N_list := [op(N_list), temp_bound_N];
    pos_coeff := convert(evalf(solve(
        (log(alpha*mu) - log(2*Ga))/(log(Ga) - log(Ga + Ep)) =
        (log(-alpha*m) - log(2*Ep))/(log(Ga + 2*Ep) - log(Ga + Ep)), alpha,
        'maxsols' = 1)), rational);
    N := ceil(1/2*subs(alpha = pos_coeff,
        (log(alpha*mu) - log(2*Ga))/(log(Ga) - log(Ga + Ep))));
    if N < 100 then
        N_top := N;
        N_bottom := 0;
        N_old := N_top;
        do
            N_curr := iquo(N_top + N_bottom, 2);
            _g := g*((g - Ga)/(Ga + Ep))^(2*N_curr)/pos_coeff;
            if RegularChains:-SemiAlgebraicSetTools:-IsEmpty([],
            [_g - _poly], [], [], R) then N_top := N_curr
            else N_bottom := N_curr
            end if;
            break if N_curr = N_old;
            N_old := N_curr
        end do;
        if N_top = 0 and RegularChains:-SemiAlgebraicSetTools:-IsEmpty([],
        [-_poly], [], [], R) then N := -1
        else N := N_top
        end if
    end if;
    if N = -1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return 0
    else
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return ((g - Ga)/(Ga + Ep))^(2*N)/pos_coeff
    end if
end proc

Sqf := proc(x, poly)
local fd, _log_time_0, L, h, f_u, i;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Sqf", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    L := sqrfree(poly);
    h := 1;
    f_u := L[1];
    for i to numelems(L[2]) do
        if type(L[2][i][2], even) then h := h*L[2][i][1]^L[2][i][2]
        else h := h*L[2][i][1]^(L[2][i][2] - 1); f_u := f_u*L[2][i][1]
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Sqf", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return [f_u, h]
end proc

find_certificate := proc(poly, QM_list, x)
local fd, _log_time_0, Sqm, Hs, f1, g, A, B, H2, f2, H3, f3, H4, F, s1, s2,
certificates, R;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "find_certificate", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    R := RegularChains:-PolynomialRing([x]);
    Hs := Fixing_points(poly, QM_list[1], QM_list[2], x);
    f1 := poly - QM_list[1]*Hs[1] - QM_list[2]*Hs[2];
    F := Sqf(x, f1);
    f1 := simplify(F[1]);
    if evalb(
    RegularChains:-SemiAlgebraicSetTools:-IsEmpty([], [-f1], [], [], R))
    then
        s1 := Hs[1];
        s2 := Hs[2];
        certificates := [poly - s1*QM_list[1] - s2*QM_list[2], s1, s2];
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "find_certificate",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return certificates
    end if;
    g := bound_poly(QM_list[1], QM_list[2], x);
    H2 := averkov_lemma_7(x, f1, QM_list, g[1]);
    f2 := f1 - QM_list[1]*H2[1] - QM_list[2]*H2[2];
    H3 := Lower_bound_poly(x, f2, g[1]);
    f3 := f2 - g[1]*H3[2];
    H4 := Last_step(x, f3, g[1]);
    s1 := Hs[1] + (H2[1] + (H3[2] + H4)*g[2])*F[2];
    s2 := Hs[2] + (H2[2] + (H3[2] + H4)*g[3])*F[2];
    certificates := [poly - s1*QM_list[1] - s2*QM_list[2], s1, s2];
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "find_certificate", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return certificates
end proc

bitsizeI := proc(integer)
    if integer = 0 then return 1 end if;
    return ceil(evalf(log(abs(integer), 2))) + 1
end proc

bitsizeR := proc(rat)
local d;
    d := denom(rat);
    if d = 1 then return bitsizeI(numer(rat))
    else return bitsizeI(numer(rat)) + bitsizeI(denom(rat))
    end if
end proc

bitsizeP := proc(poly, x)
local _sum;
    return add(_sum, _sum in map(bitsizeR, [coeffs(collect(poly, x))]))
end proc

_quickdegree := proc(f, x)
local _f, _exp;
    if type(f, `+`) then
        return max(map(_f -> _quickdegree(_f, x), convert(f, list, `+`)))
    end if;
    if type(f, `*`) then
        return foldl((x1, x2) -> x1 + x2, 0,
            op(map(_f -> _quickdegree(_f, x), convert(f, list, `*`))))
    end if;
    if type(f, `^`) then _f, _exp := op(f); return _exp*_quickdegree(_f, x)
    end if;
    if f = x then return 1 else return 0 end if
end proc

quickdegree := proc(f, x)
local output;
    output := _quickdegree(f, x); return output
end proc

checkWeifeng := proc(f, basis, x, test_name)
local st, H;
    printf("\n>> Test\n%s\n", test_name);
    printf(">> input polynomial\n%s\n", convert(f, string));
    printf(">> basis\n%s\n", convert(basis, string));
    st := time();
    H := find_certificate(f, basis, x);
    printf(">> Time taken\n%f\n", time() - st);
    lprint(">> Sums of squares multipliers", H);
    printf(">> Degree size\n%s\n", convert(foldl((_x, _y) -> max(_x, _y), 0,
        op(map(h -> quickdegree(h, x), H))), string));
    return
end proc

                                [SemiAlgebraic]

                    [SemiAlgebraicSetTools, PolynomialRing]

                              [Maximize, Minimize]

                                     [Text]

                           [Open, Close, WriteString]

_pwd := "/Users/typesarespaces/Documents/GithubProjects/phd-thesis/Documents\
    /Seminars/BeihangUniversity-Fall2021/Weifeng-Notes/Weifeng-Certificates/\
    tests"

  "/Users/typesarespaces/Documents/GithubProjects/phd-thesis/Documents/Seminars/BeihangUniversity-Fall2021/Weifeng-Notes/Weifeng-Certificates/tests"

                            "/Users/typesarespaces"

univsos1 := proc(f)
local s, X;
    X := op(indets(f));
    s := SOSDecomp(expand(f), X, 0);
    return HornerToList1(s)
end proc

Warning, (in SOSDecomp) `s` is implicitly declared local
|univsos/univsos1.mm:54|
SOSDecomp := proc(f, X, prec::integer := 64)
local g, h, S, SEVEN, SODD, newF, s;
    if degree(f) = 0 and f < 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if degree(f) = 0 and 0 <= f then return [[0, [0, 0, f]]] end if;
    if f = 0 then return [[0, [0, 0, 0]]] end if;
    if lcoeff(f, X) < 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if irem(degree(f), 2) = 1 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    else
        if degree(f, X) = 2 then return [[0, SOSDecompDegree2(f, X)]]
        end if;
        g := gcd(f, diff(f, X), 'newF');
        if degree(g) = 1 then
            newF := quo(newF, g, X);
            if degree(newF) = 2 then
                return [[g, [0, 0, 0]], [0, SOSDecompDegree2(newF, X)]]
            else return [[g, [0, 0, 0]], op(SOSDecompSQF(newF, X, prec))]
            end if
        end if;
        S := sqrfree(f);
        SEVEN := map(
            _e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
            ;
        SEVEN := [op(SEVEN), op(map(
            _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if,
            S[2]))];
        SEVEN := remove(member, SEVEN, [1]);
        SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
        if nops(SEVEN) = 0 then return SOSDecompSQF(f, X, prec)
        else
            g := mul(s, s in SEVEN);
            h := S[1]*mul(s, s in SODD);
            return [[g, [0, 0, 0]], op(SOSDecomp(h, X, prec))]
        end if
    end if
end proc

SOSDecompSQF := proc(f, X, prec::integer := 64)
local g, h, content_h, SOS_h, SOS_g;
    g := ConstructGPolynomial(f, X, 10);
    h := expand(f - g[1]*g[2]^2);
    if h <> 0 then
        SOS_g := g;
        SOS_h := SOSDecomp(h, X, prec);
        return [[1, SOS_g], op(SOS_h)]
    else SOS_g := g; return [[0, SOS_g]]
    end if
end proc

SOSDecompDegree2 := proc(f, X)
local a, b, c, mycouple;
    if f = 0 then return [f, 0, 0] end if;
    if degree(f) = 0 and 0 < f then return [0, 0, f] end if;
    if degree(f) = 1 or degree(f) = 0 and f < 0 or coeff(f, X, 2) < 0 or
    0 < coeff(f, X, 1)^2 - 4*coeff(f, X, 2)*coeff(f, X, 0) then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    c, b, a := seq(coeff(f, X, i), i = 0 .. 2);
    return [a, X + 1/2*b/a, c - 1/4*b^2/a]
end proc

ConstructGPolynomial := proc(f, X, myprec := 10)
local i, inv_roots1, smallest, sf, sdf, g, t, df, values, mymin, minimizer,
a, b, c, newt, _interval, count, mybound, boo;
    df := numer(diff(f, X));
    inv_roots1 := map(s -> rhs(s),
        RootFinding[Isolate](df, X, digits = myprec, output = interval));
    values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
    mymin := min(op(values));
    for i to nops(inv_roots1) do
        if subs(X = inv_roots1[i][1], f) = mymin then
            minimizer := inv_roots1[i]; _interval := inv_roots1[i]
        end if
    end do;
    if myprec = 0 then t := round(minimizer[1])
    else
        if minimizer[1] < 0 then t := ceil(minimizer[1])
        else t := floor(minimizer[1])
        end if
    end if;
    sf := subs(X = t, f);
    if sf = 0 then
        lprint(f);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, diff(f, X));
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + 1/4*t^2*sdf^2/sf;
    b := sdf - 1/2*sdf^2*t/sf;
    boo := CheckTvalue(t, a, b, c, f, X);
    if boo then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
    if 0 < minimizer[1] - t then mybound := floor(log[2](minimizer[1] - t))
    else mybound := myprec
    end if;
    count := mybound;
    t := t + 2^mybound;
    sf := subs(X = t, f);
    sdf := subs(X = t, diff(f, X));
    while boo = false and 0 <= sf and t < minimizer[2] and sdf <= 0 do
        a := 1/4*sdf^2/sf;
        c := sf - sdf*t + 1/4*t^2*sdf^2/sf;
        b := sdf - 1/2*sdf^2*t/sf;
        boo := CheckTvalue(t, a, b, c, f, X);
        if boo = true then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
        newt := t + 2^count;
        sf := subs(X = newt, f);
        sdf := subs(X = newt, diff(f, X));
        while minimizer[2] <= newt or sf <= 0 do
            count := count - 1; newt := t + 2^count
        end do;
        t := newt
    end do;
    return ConstructGPolynomialRec(f, X, 2*myprec)
end proc

getcoeffs := proc(f, X)
local c, nc, dc, lcmf;
    c := PolynomialTools:-CoefficientVector(f, X);
    nc, dc := MTM[numden](c);
    lcmf := ilcm(op(convert(dc, list)));
    return Vector(lcmf*c)
end proc

ConstructGPolynomialRec := proc(f, X, myprec, useNewton::boolean := false,
aNewton::rational := 0, bNewton::rational := 0)
local mid, fcoeffs, newaNewton, newbNewton, dfa, dfb, i, inv_roots1,
smallest, sf, sdf, g, t, df, values, mymin, minimizer, a, b, c, _interval;
    df := convert(diff(f, X), horner);
    if useNewton then
        mid := 1/2*aNewton + 1/2*bNewton;
        fcoeffs := getcoeffs(diff(f, X), X);
        newaNewton, newbNewton :=
            MyUnivariateNewton(fcoeffs, aNewton, bNewton, mid);
        if 0 < newaNewton then t := newbNewton else t := newaNewton end if
    else
        inv_roots1 := fgbrs:-rs_isolate_uni(primpart(diff(f, X)), X,
            precision = myprec, verbose = 0);
        values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
        mymin := min(op(values));
        for i to nops(inv_roots1) do
            if subs(X = inv_roots1[i][1], f) = mymin then
                minimizer := inv_roots1[i]; _interval := inv_roots1[i]
            end if
        end do;
        newaNewton := minimizer[1];
        newbNewton := minimizer[2];
        t := minimizer[1]
    end if;
    sf := subs(X = t, f);
    if sf = 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, df);
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + t^2*a;
    b := sdf - 2*t*a;
    if CheckTvalue(t, a, b, c, f, X) then
        return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if;
    return ConstructGPolynomialRec(f, X, 2*myprec, false, newaNewton,
        newbNewton)
end proc

NaiveBolzano := proc(f, X)
local df, inv_roots1, values, mymin, i, minimizer, _interval, t1, t2;
    df := convert(diff(f, X), horner);
    inv_roots1 := fgbrs:-rs_isolate_uni(primpart(diff(f, X)), X,
        precision = 2, verbose = 0);
    values := map(_s -> subs(X = _s, f), map(_r -> _r[1], inv_roots1));
    mymin := min(op(values));
    for i to nops(inv_roots1) do
        if subs(X = inv_roots1[i][1], f) = mymin then
            minimizer := inv_roots1[i]; _interval := inv_roots1[i]
        end if
    end do;
    t1 := minimizer[1];
    t2 := minimizer[2];
    return BolzanoRec(f, df, X, t1, t2)
end proc

BolzanoRec := proc(f, df, X, t1, t2)
local t, sf, sdf, a, c, b;
    t := 1/2*t1 + 1/2*t2;
    sf := subs(X = t, f);
    if sf = 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    sdf := subs(X = t, df);
    a := 1/4*sdf^2/sf;
    c := sf - sdf*t + t^2*a;
    b := sdf - 2*a*t;
    if sdf = 0 then return [1/sf, 1/2*sdf*(X - t) + sf, 0] end if;
    if 0 < sdf then
        if CheckTvalue(t, a, b, c, f, X) then
            return [1/sf, 1/2*sdf*(X - t) + sf, 0]
        end if;
        return BolzanoRec(f, df, X, t1, t)
    end if;
    if CheckTvalue(t, a, b, c, f, X) then
        return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if;
    return BolzanoRec(f, df, X, t, t2)
end proc

ConFrac := proc(t, f, df, X, sf, sdf, myprec)
local newt, newsf, newsdf, a, b, c;
    newt := confrac2rat(convert(t, confrac, myprec));
    lprint(newt);
    newsf := subs(X = t, f);
    newsdf := subs(X = t, df);
    a := 1/4*newsdf^2/newsf;
    c := newsf - newsdf*newt + newt^2*a;
    b := newsdf - 2*a*newt;
    if CheckTvalue(newt, a, b, c, f, X) then
        return [1/newsf, 1/2*newsdf*(X - newt) + newsf, 0]
    else return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if
end proc

SmallerApprox := proc(t, f, df, X, sf, sdf)
local newt, newsf, newsdf, a, b, c, myprec;
    myprec := floor(1/8*BitRat(t));
    if 0 < t then newt := BinaryApproximationDown(t, myprec)
    else newt := BinaryApproximationUp(t, myprec)
    end if;
    newsf := subs(X = t, f);
    newsdf := subs(X = t, df);
    a := 1/4*newsdf^2/newsf;
    c := newsf - newsdf*newt + newt^2*a;
    b := newsdf - 2*a*newt;
    if CheckTvalue(newt, a, b, c, f, X) then
        lprint("After rounding ", newt);
        return [1/newsf, 1/2*newsdf*(X - newt) + newsf, 0]
    else return [1/sf, 1/2*sdf*(X - t) + sf, 0]
    end if
end proc

Warning, (in CheckTvalue) `s` is implicitly declared local
|univsos/univsos1.mm:370|
CheckTvalue := proc(t, a, b, c, f, X)
local F, S, SODD, newg, g, newF, s;
    if a = 0 and b <> 0 or a = 0 and b = 0 and c < 0 then return false
    end if;
    if a <> 0 and 0 < b^2 - 4*a*c then return false end if;
    F := f - a*X^2 - b*X - c;
    g := gcd(F, diff(F, X), 'newF');
    if degree(g) = 1 then
        newF := quo(newF, g, X);
        if 0 < nops(fgbrs:-rs_isolate_uni(numer(newF), X, precision = 1))
        then return false
        else return true
        end if
    else
        S := sqrfree(F);
        SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
        SODD := mul(s, s in SODD);
        if 0 < nops(fgbrs:-rs_isolate_uni(SODD, X, precision = 1)) then
            return false
        else return true
        end if
    end if
end proc

Warning, (in oldCheckTvalue) `s` is implicitly declared local
|univsos/univsos1.mm:402|
oldCheckTvalue := proc(t, g, f, X)
local a, b, c, F, S, SODD, newg, s;
    a, b, c := coeff(g, X, 2), coeff(g, X, 1), coeff(g, X, 0);
    if a = 0 and b <> 0 or a = 0 and b = 0 and c < 0 then return false
    end if;
    if a <> 0 and 0 < b^2 - 4*c*a then return false end if;
    F := normal(f - g);
    S := sqrfree(F);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    SODD := mul(s, s in SODD);
    if 0 < nops(fgbrs:-rs_isolate_uni(primpart(SODD), X, precision = 1))
    then return false
    else return true
    end if
end proc

MyNewtonIterator := proc(_interval, pol)
local a, b, c, X, newa;
    a := _interval[1];
    b := _interval[2];
    X := op(1, indets(pol));
    newa := a - subs({X = a}, pol)/subs({X = a}, diff(pol, X));
    return [newa, b]
end proc

BolzanoIterator := proc(_interval, pol)
local a, b, c, X, sc;
    a := _interval[1];
    b := _interval[2];
    c := 1/2*a + 1/2*b;
    X := op(1, indets(pol));
    sc := eval(pol, X = c);
    if sc = 0 then return [a, c] end if;
    if sign(sc) = sign(eval(pol, X = a)) then return [c, b]
    else return [a, c]
    end if
end proc

Warning, (in UnivariateSumOfSquaresDecItv) `i` is implicitly declared local
|univsos/univsos1.mm:468|
Warning, (in UnivariateSumOfSquaresDecItv) `c` is implicitly declared local
|univsos/univsos1.mm:476|
Warning, (in UnivariateSumOfSquaresDecItv) `si` is implicitly declared local
|univsos/univsos1.mm:479|
Warning, (in UnivariateSumOfSquaresDecItv) `r` is implicitly declared local
|univsos/univsos1.mm:484|
Warning, (in UnivariateSumOfSquaresDecItv) `j` is implicitly declared local
|univsos/univsos1.mm:484|
Warning, (in UnivariateSumOfSquaresDecItv) `t` is implicitly declared local
|univsos/univsos1.mm:485|
UnivariateSumOfSquaresDecItv := proc(f, a, b)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time();
    sosq := SOSDecomp(q, y, 2);
    tcmp := time() - ti;
    lprint(tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

HornerToList := proc(sos)
local hd, tl, p, c, q, d;
    if nops(sos) = 0 then return [] end if;
    if nops(sos) = 1 then
        p, c, q, d := sos[1][1], op(sos[1][2]);
        if c = 0 and d = 0 then return [[1, p]] end if;
        if c = 0 then return [[1, p], [d, 1]] end if;
        if d = 0 then return [[1, p], [c, q]] end if;
        return [[1, p], [c, q], [d, 1]]
    end if;
    hd, tl := HdTailList(sos);
    p, c, q, d := hd[1], op(hd[2]);
    if c = 0 and d = 0 then return [op(MulPolList2(p, HornerToList(tl)))]
    end if;
    if c = 0 then return [op(MulPolList2(p, HornerToList(tl))), [d, 1]]
    end if;
    if d = 0 then return [op(MulPolList2(p, HornerToList(tl))), [c, q]]
    end if;
    return [op(MulPolList2(p, HornerToList(tl))), [c, q], [d, 1]]
end proc

Warning, (in HdTailList) `i` is implicitly declared local
|univsos/univsos1.mm:507|
HdTailList :=

    proc(l) local i; return l[1], [seq(l[i], i = 2 .. nops(l))] end proc

       MulPolList2 := proc(p, l) map(el -> [el[1], p*el[2]], l) end proc

              MulPolList := proc(p, l) map(el -> p*el, l) end proc

HornerToList1 := proc(l)
local l1;
    l1 := HornerToList(l);
    return foldr((a, b) -> [op(a), op(b)], [], op(l1))
end proc

SOSCHECK := proc(f, sos)
local res;
    res := expand(f - foldr(
        (_e, a) -> _e[1]^2*a + _e[2][1]*_e[2][2]^2 + _e[2][3], 1, op(sos)))
        ;
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

SOSCHECK2 := proc(f, sos)
local s, i, res;
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    res := expand(f - s);
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

          soscheck1 := proc(f, sos) return SOSCHECK2(f, sos) end proc

Warning, (in univsos2) `se` is implicitly declared local
|univsos/univsos2.mm:23|
Warning, (in univsos2) `so` is implicitly declared local
|univsos/univsos2.mm:24|
univsos2 := proc(p, id::integer := 2, iter::boolean := false)
local x, S, s, c, SEVEN, SODD, q, n, m, t, e, r, k, ok, l, a, p_can, p_cnj,
s1, s2, u, v, i, j, sqs, cfs, sos, rfloat, gp, gproots, se, so;
    x := op(indets(p));
    S := sqrfree(p);
    c := lcoeff(p);
    if c < 0 then
        lprint(p);
        lprint(c);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    n := degree(q, x);
    m := floor(1/2*n);
    if 2*m <> n then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if n = 0 then lprint(q, " * (", s, ")^2") end if;
    t := q;
    if id = 2 then t := sum(x^(2*i), i = 0 .. m)
    else if id = 1 then t := sum(x^j, j = 0 .. n) end if
    end if;
    e := max(1, c);
    printf("Perturbation loop\n");
    while q - e*t <> 0 and 0 < nops(realroot(q - e*t)) do e := 1/2*e end do
    ;
    printf("  epsilon = ");
    lprint(e);
    e := 1/2*e;
    r := q - e*t;
    k := 1;
    ok := false;
    printf("Root isolation loop\n");
    while not ok do
        k := 2*k;
        l := lcoeff(r, x);
        printf("  precision of root isolation = %d\n", k);
        gproots := true;
        gp := true;
        if gp then s1, s2 := gpsquares(r, x, k, iter)
        else
            a := polroots(r, x, gproots, iter);
            p_can := mul(x - a[2*i - 1], i = 1 .. 1/2*degree(r));
            p_cnj := mul(x - a[2*i], i = 1 .. 1/2*degree(r));
            s1 := convert(evalc(Re(1/2*p_can + 1/2*p_cnj)), rational, k);
            s2 := convert(evalc(Re(-1/2*I*(p_can - p_cnj))), rational, k)
        end if;
        u := r - l*(s1^2 + s2^2);
        v := expand(e*t + u);
        ok := true;
        for i from 0 to m do
            ok := ok and
                1/4*abs(coeff(v, x, 2*i + 1)) + abs(coeff(v, x, 2*i - 1))
                 <= coeff(v, x, 2*i)
        end do
    end do;
    sqs := [s1, s2];
    cfs := [l, l];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    for i to 2*m + 3 do sos := [op(sos), cfs[i], s*sqs[i]] end do;
    return sos
end proc

Warning, (in UnivariateSumOfSquaresDecItv2) `i` is implicitly declared local
|univsos/univsos2.mm:129|
Warning, (in UnivariateSumOfSquaresDecItv2) `c` is implicitly declared local
|univsos/univsos2.mm:137|
Warning, (in UnivariateSumOfSquaresDecItv2) `si` is implicitly declared local
|univsos/univsos2.mm:140|
Warning, (in UnivariateSumOfSquaresDecItv2) `r` is implicitly declared local
|univsos/univsos2.mm:145|
Warning, (in UnivariateSumOfSquaresDecItv2) `j` is implicitly declared local
|univsos/univsos2.mm:145|
Warning, (in UnivariateSumOfSquaresDecItv2) `t` is implicitly declared local
|univsos/univsos2.mm:146|
UnivariateSumOfSquaresDecItv2 := proc(f, a, b)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time[real]();
    sosq := univsos2(expand(q), y, 2);
    tcmp := time[real]() - ti;
    printf("%fms\n", 1000*tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

gpsquares := proc(r, x, k, iter)
local fd, ok, prec, cmd, status;
    fd := fopen("univsos/in.gp", WRITE, TEXT);
    writeline(fd, "r =", StringTools:-SubstituteAll(
        StringTools:-SubstituteAll(convert(r, string), "\n", ""), "\\", ""))
        ;
    writeline(fd, "x =", convert(x, string));
    writeline(fd, "k =", convert(k, string));
    fclose(fd);
    ok := true;
    if iter then
        prec := 1000000000;
        while ok do
            if FileTools:-Exists("univsos/out.mm") then
                FileTools:-Remove("univsos/out.mm")
            end if;
            cmd := sprintf("gp -q -s %d univsos/gpsquares.gp", prec);
            ssystem(cmd);
            try read "univsos/out.mm"
            catch:
                prec := 10*prec;
                printf("   Issue with PARI/GP root isolation: trying wit\
                    h stack precision = %d\n", prec)
            finally ok := false
            end try
        end do
    else
        if FileTools:-Exists("univsos/out.mm") then
            FileTools:-Remove("univsos/out.mm")
        end if;
        ssystem("gp -q univsos/gpsquares.gp");
        read "univsos/out.mm"
    end if;
    return s1gp, s2gp
end proc

polroots := proc(r, x, gproots)
local fd, a, rfloat;
    rfloat := r;
    if gproots then
        fd := fopen("univsos/in.gp", WRITE, TEXT);
        writeline(fd, "r =", convert(rfloat, string));
        fclose(fd);
        if FileTools:-Exists("univsos/out.mm") then
            FileTools:-Remove("univsos/out.mm")
        end if;
        ssystem("gp -q  univsos/mypolroots.gp");
        ssystem("sed -i 's/0\\.E/0\\.0E/g' univsos/out.mm");
        ssystem("sed -i 's/ E/E/g' univsos/out.mm");
        read "univsos/out.mm";
        return agp
    else
        a := [fsolve([r = 0], x, complex, fulldigits)];
        return map(sol -> rhs(sol[1]), a)
    end if
end proc

SOSCHECK2 := proc(f, sos)
local s, i, res;
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    res := expand(f - s);
    if res = 0 then return res
    else
        lprint(f);
        lprint(sos);
        error "Invalid sum of squares decomposition"
    end if
end proc

          soscheck2 := proc(f, sos) return SOSCHECK2(f, sos) end proc

Warning, (in univsos3) `se` is implicitly declared local
|univsos/univsos3.mm:21|
Warning, (in univsos3) `so` is implicitly declared local
|univsos/univsos3.mm:22|
univsos3 := proc(p, prec::integer := 10)
local S, s, c, SEVEN, SODD, q, n, m, t, e, r, ok, l, a, p_can, p_cnj, s1,
s2, u, v, i, j, sqs, cfs, sos, rfloat, gp, eigs, eigs2, soslist, soslist2,
sumsos, cnd, maxq, k, obj_plus_r0, id, x, se, so;
    x := op(indets(p));
    id := 2;
    S := sqrfree(p);
    c := lcoeff(p);
    if c < 0 then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    maxq := 1;
    q := q/maxq;
    n := degree(q, x);
    m := floor(1/2*n);
    if 2*m <> n then
        lprint(p);
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if n = 0 then lprint(q, " * (", s, ")^2") end if;
    t := q;
    if id = 2 then t := sum(x^(2*i), i = 0 .. m)
    else if id = 1 then t := sum(x^j, j = 0 .. n) end if
    end if;
    e := min(1, c);
    while
    degree(q - e*t, x) <= 0 or q - e*t <> 0 and 0 < nops(realroot(q - e*t))
    do e := 1/2*e
    end do;
    e := 1/2*e;
    r := q - e*t;
    ok := false;
    k := prec;
    while not ok do
        k := k + 1;
        eigs, soslist, eigs2, soslist2, obj_plus_r0 := sossdp(r, x, k);
        sumsos :=
            obj_plus_r0 + sum(eigs[j]*soslist[j]^2, j = 1 .. nops(soslist))
            ;
        u := r - sumsos;
        v := expand(e*t + u + obj_plus_r0);
        ok := true;
        for i from 0 to m do
            cnd := coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
                 - abs(coeff(v, x, 2*i - 1));
            if not (0 <= cnd) then
                printf("prec = %d\t idx = %d\t err = %8.3e\t", k, i,
                    evalf(cnd));
                lprint(cnd);
                ok := true;
                error "not enough precision";
                break
            end if
        end do
    end do;
    sqs := [op(soslist)];
    cfs := [op(eigs)];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    for i to nops(sqs) do sos := [op(sos), maxq*cfs[i], s*sqs[i]] end do;
    return sos
end proc

Warning, (in UnivariateSumOfSquaresDecItv3) `i` is implicitly declared local
|univsos/univsos3.mm:111|
Warning, (in UnivariateSumOfSquaresDecItv3) `c` is implicitly declared local
|univsos/univsos3.mm:120|
Warning, (in UnivariateSumOfSquaresDecItv3) `si` is implicitly declared local
|univsos/univsos3.mm:123|
Warning, (in UnivariateSumOfSquaresDecItv3) `r` is implicitly declared local
|univsos/univsos3.mm:128|
Warning, (in UnivariateSumOfSquaresDecItv3) `j` is implicitly declared local
|univsos/univsos3.mm:128|
Warning, (in UnivariateSumOfSquaresDecItv3) `t` is implicitly declared local
|univsos/univsos3.mm:129|
UnivariateSumOfSquaresDecItv3 := proc(f, a, b, k::integer := 1)
local psatz, bitsos, n, cf, q, sosq, clist, soslist, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, i, c, si, r, j, t;
    psatz := false;
    n := degree(f);
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    q := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    ti := time[real]();
    sosq := univsos3(q, y, 2, k);
    tcmp := time[real]() - ti;
    printf("%fms\n", 1000*tcmp);
    if psatz = true then
        sos := HornerToList(sosq);
        clist := [seq(c[1]/(b - a)^n, c in sos)];
        soslist := [seq(c[2], c in sos)];
        rlist := [seq(
            add(coeff(si, y, 2*i)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        tlist := [seq(
            add(coeff(si, y, 2*i + 1)*y^i, i = 0 .. ceil(degree(1/2*si))),
            si in soslist)];
        nc := floor(1/2*n);
        l := nops(clist);
        sosf1 := [seq(add(coeff(r, y, j)*(x - a)^j*(b - x)^(nc - j),
            j = 0 .. degree(r)), r in rlist)];
        if n mod 2 = 0 then
            sosf2 := [seq(add(
                coeff(t, y, j)*(x - a)^j*(b - x)^(nc - 1 - j),
                j = 0 .. degree(t)), t in tlist)]
        else
            sosf2 := [seq(add(coeff(t, y, j)*(x - a)^j*(b - x)^(nc - j),
                j = 0 .. degree(t)), t in tlist)]
        end if;
        return clist, sosf1, sosf2
    end if;
    return q, sosq
end proc

sossdp := proc(r, x, precSVD::integer := 10, precSDP::integer := 200,
epsStar::integer := 3, epsDash::integer := 3, a::rational := 0,
b::rational := 1, itv::boolean := false)
local fd, n, nsdp, nblock, nloc, i, j, Y, Y2, v, e, mons, rfloat, eigs,
eivs, eigs2, eivs2, gmp, normeig, gpround, SVD, af, bf, lowerbnd;
    n := degree(r);
    nsdp := 1 + ceil(1/2*n);
    if itv then nblock := 2 else nblock := 1 end if;
    fd := fopen("univsos/in.dat-s", WRITE, TEXT);
    writeline(fd, convert(2*ceil(1/2*n), string));
    writeline(fd, convert(nblock, string));
    if not itv then writeline(fd, convert(nsdp, string))
    else nloc := ceil(1/2*n); fprintf(fd, "%d %d\n", nsdp, nloc)
    end if;
    rfloat := convert(r, float, 100);
    af := convert(a, float);
    bf := convert(b, float);
    for i to 2*ceil(1/2*n) do fprintf(fd, "%.100f ", coeff(rfloat, x, i))
    end do;
    fprintf(fd, "\n");
    writeline(fd, "0 1 1 1 -1");
    for j from 2 to nsdp do fprintf(fd, "%d 1 %d %d 1\n", j - 1, 1, j)
    end do;
    for i from 2 to nsdp do
        for j from i to nsdp do
            fprintf(fd, "%d 1 %d %d 1\n", i + j - 2, i, j)
        end do
    end do;
    if itv then
        for i to nloc do
            for j from i to nloc do
                fprintf(fd, "%d 2 %d %d %f\n", i + j - 2, i, j,
                    -sign(i + j - 3)*bf*af);
                fprintf(fd, "%d 2 %d %d %f\n", i + j - 1, i, j,
                    sign(i + j - 2)*(bf + af));
                fprintf(fd, "%d 2 %d %d %f\n", i + j, i, j,
                    -sign(i + j - 1))
            end do
        end do
    end if;
    fclose(fd);
    if FileTools:-Exists("univsos/out.dat-s") then
        FileTools:-Remove("univsos/out.dat-s")
    end if;
    if FileTools:-Exists("univsos/out.mm") then
        FileTools:-Remove("univsos/out.mm")
    end if;
    gmp := true;
    if not gmp then
        system("sdpa -ds univsos/in.dat-s -o univsos/out.dat-s -p univso\
            s/param.sdpa > /dev/null")
    else
        write_param(precSDP, epsStar, epsDash);
        system("sdpa_gmp -ds univsos/in.dat-s -o univsos/out.dat-s -p un\
            ivsos/param_gmp.sdpa > /dev/null")
    end if;
    system("echo $(grep objValPrimal univsos/out.dat-s) ';' 'yMat:=' $(s\
        ed -n '/yMat/,/main/{//!p}' univsos/out.dat-s) ';' >> univsos/ou\
        t.mm");
    system("sed -i 's/ =/ :=/g' univsos/out.mm");
    system("sed -i 's/{/[/g' univsos/out.mm");
    system("sed -i 's/}/]/g' univsos/out.mm");
    system("sed -i 's/] \\[/], \\[/g' univsos/out.mm");
    read "univsos/out.mm";
    lowerbnd := coeff(r, x, 0) + convert(objValPrimal, rational, exact);
    SVD := true;
    Y := Matrix(yMat[1]);
    eigs, eivs := eigseivs_(Y, x, nsdp, precSVD, SVD);
    if itv then
        Y2 := Matrix(yMat[2]);
        eigs2, eivs2 := eigseivs_(Y2, x, nloc, precSVD, SVD)
    else eigs2 := Vector(1, 0); eivs2 := Vector(1, 0)
    end if;
    return convert(eigs, list), convert(eivs, list), convert(eigs2, list),
        convert(eivs2, list), lowerbnd
end proc

checkrational_ := proc(U)
local v;
    for v in U do
        if not type(convert(v, rational), realcons) then
            lprint(v);
            error "Non Rational Cholesky factor, retry with gmp = true"
        end if
    end do;
    return
end proc

eigseivs_ := proc(Y, x, nmat, precSVD, SVD)
local ti, tf, v, e, mons, eigs, eivs, gpround, normeig, U, S, V, Ysvd,
Yexact, tcmp;
    mons := Vector(nmat, j -> x^(j - 1));
    normeig := false;
    gpround := false;
    Yexact := convert(Y, rational, exact);
    if not SVD then
        ti := time[real]();
        lprint("starting Cholesky");
        U := LUDecomposition(Yexact, method = 'Cholesky');
        checkrational_(U);
        tcmp := time[real]() - ti;
        lprint(tcmp);
        lprint("ending Cholesky");
        S := IdentityMatrix(nmat)
    else
        Digits := precSVD;
        ti := time[real]();
        U, S, V := MTM[svd](Yexact);
        tcmp := time[real]() - ti;
        lprint(tcmp);
        Digits := 10
    end if;
    eigs := Diagonal(S);
    eivs := Transpose((Transpose(mons)) . U);
    return eigs, eivs
end proc

write_param := proc(precSDP, epsStar, epsDash)
local fd;
    fd := fopen("univsos/my_param_gmp.sdpa", WRITE, TEXT);
    fprintf(fd, "300\tunsigned int maxIteration;\n");
    fprintf(fd, "1.0E-%d\tdouble 0.0 < epsilonStar;\n", epsStar);
    fprintf(fd, "1.0E5   double 0.0 < lambdaStar;\n");
    fprintf(fd, "2.0   \tdouble 1.0 < omegaStar;\n");
    fprintf(fd, "-1.0E5  double lowerBound;\n");
    fprintf(fd, "1.0E5   double upperBound;\n");
    fprintf(fd, "0.1     double 0.0 <= betaStar <  1.0;\n");
    fprintf(fd,
        "0.3     double 0.0 <= betaBar  <  1.0, betaStar <= betaBar;\n");
    fprintf(fd, "0.9     double 0.0 < gammaStar  <  1.0;\n");
    fprintf(fd, "1.0E-%d\tdouble 0.0 < epsilonDash;\n", epsDash);
    fprintf(fd, "%d     precision\n", precSDP);
    fclose(fd)
end proc

      printpol := proc(p) lprint(sort(evalf(expand(p)), x, plex)) end proc

Warning, (in sositv3) `se` is implicitly declared local
|univsos/univsos3.mm:324|
Warning, (in sositv3) `so` is implicitly declared local
|univsos/univsos3.mm:325|
sositv3 := proc(f, a, b, prec::integer := 10, precSVD::integer := 10,
precSDP::integer := 200, epsStar::integer := 3, epsDash::integer := 3)
local bitsos, n, cf, q, sosq, clist, soslist, soslist2, rlist, tlist, nc, l,
sosf1, sosf2, sosdecomp, ti, tcmp, sos, sos2, h, S, c, SEVEN, SODD, s, ds,
dq, p1, p2, m, t, e, r, k, ok, eigs, eigs2, sumsos, sumsos2, u, v, i, sqs,
cfs, id, cnd, maxp1, obj_plus_r0, x, se, so;
    x := op(indets(p));
    n := degree(f);
    id := 2;
    if n = 0 and f < 0 then
        error "There is no decomposition into sum of squares for this po\
            lynomial"
    end if;
    if b < a then
        error cat("The interval [", convert(a, string), ", ",
            convert(b, string), "] is not valid")
    end if;
    h := add(coeff(f, x, i)*(y^2 + 1)^(n - i)*(a + b*y^2)^i, i = 0 .. n);
    S := sqrfree(h);
    c := lcoeff(f);
    SEVEN :=
        map(_e -> if type(_e[2], even) then _e[1]^(1/2*_e[2]) end if, S[2])
        ;
    SEVEN := [op(SEVEN), op(map(
        _e -> if type(_e[2], odd) then _e[1]^(1/2*_e[2] - 1/2) end if, S[2]))
        ];
    SEVEN := remove(member, SEVEN, [1]);
    SODD := map(_e -> if type(_e[2], odd) then _e[1] end if, S[2]);
    s := mul(se, se in SEVEN);
    q := S[1]*mul(so, so in SODD);
    ds := degree(s, y);
    dq := 1/2*degree(q, y);
    p1 := add(coeff(q, y, 2*i)*(b - x)^(dq - i)*(x - a)^i, i = 0 .. dq)/
        (b - a)^dq;
    p2 := add(coeff(s, y, 2*i)*(b - x)^(ds - i)*(x - a)^i, i = 0 .. ds)/
        (b - a)^ds;
    p1 := expand(p1);
    maxp1 := 1;
    p1 := p1/maxp1;
    n := degree(p1, x);
    m := ceil(1/2*n);
    if n = 0 then lprint(p1, " * (", p2, ")^2") end if;
    t := p1;
    if id = 3 then t := sum(abs(coeff(p1, x, i))*x^i, i = 0 .. n)
    else
        if id = 2 then t := sum(x^(2*i), i = 0 .. m)
        else if id = 1 then t := sum(x^j, j = 0 .. n) end if
        end if
    end if;
    e := 1/2^prec;
    r := p1 - e*t;
    k := prec;
    ok := false;
    while not ok do
        eigs, soslist, eigs2, soslist2, obj_plus_r0 :=
            sossdp(r, x, precSVD, precSDP, epsStar, epsDash, a, b, true);
        sumsos :=
            obj_plus_r0 + sum(eigs[j]*soslist[j]^2, j = 1 .. nops(soslist))
            ;
        sumsos2 := (b - x)*(x - a)*
            sum(eigs2[j]*soslist2[j]^2, j = 1 .. nops(soslist2));
        u := r - sumsos - sumsos2;
        v := expand(e*t + u + obj_plus_r0);
        ok := true;
        for i from 0 to m do
            cnd := coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
                 - abs(coeff(v, x, 2*i - 1));
            if not (0 <= cnd) then
                printf("prec = %d\t idx = %d\t err = %8.3e\t", k, i,
                    evalf(cnd));
                ok := true;
                error "not enough precision";
                break
            end if
        end do;
        break
    end do;
    sqs := [op(soslist)];
    cfs := [op(eigs)];
    for i from 0 to m do
        sqs := [op(sqs), x^i];
        cfs := [op(cfs), coeff(v, x, 2*i) - 1/4*abs(coeff(v, x, 2*i + 1))
             - abs(coeff(v, x, 2*i - 1))]
    end do;
    for i from 0 to m - 1 do
        sqs := [op(sqs), x^i*(x + 1/2*sign(coeff(v, x, 2*i + 1)))];
        cfs := [op(cfs), abs(coeff(v, x, 2*i + 1))]
    end do;
    sos := [];
    sos2 := [];
    for i to nops(sqs) do sos := [op(sos), maxp1*cfs[i], p2*sqs[i]] end do;
    for i to nops(eigs2) do
        sos2 := [op(sos2), maxp1*eigs2[i], p2*soslist2[i]]
    end do;
    return sos, sos2
end proc

          "/Users/typesarespaces/Documents/GithubProjects/RealCertify"

                               stack_level := -1

getSOSPoly := proc(poly, x)
local fd, _log_time_0, s, i, sos;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "getSOSPoly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    sos := univsos1(poly, x);
    s := 0;
    for i to 1/2*nops(sos) do s := s + sos[2*i - 1]*sos[2*i]^2 end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "getSOSPoly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return s
end proc

Ord := proc(f, t, point)
local fd, _log_time_0, g, T;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Ord", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    g := subs(t = T + point, f);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Ord", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return ldegree(expand(g), T)
end proc

Eps := proc(f, t, point)
local fd, _log_time_0, g;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Eps", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    g := subs(t = y + point, f);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Eps", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return tcoeff(expand(g), y)
end proc

Type_of_poly := proc(p, t, point)
local fd, _log_time_0, O, E, output;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    O := Ord(p, t, point);
    E := Eps(p, t, point);
    if type(O, even) and 0 < E then output := 0
    elif type(O, even) and E < 0 then output := 1
    elif type(O, odd) and 0 < E then output := 2
    elif type(O, odd) and E < 0 then output := 3
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return output
end proc

Type_of_P := proc(G, t, point)
local fd, _log_time_0, O_1, O_2, E_1, E_2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_P", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    O_1 := Ord(G[1], t, point);
    O_2 := Ord(G[2], t, point);
    E_1 := Eps(G[1], t, point);
    E_2 := Eps(G[2], t, point);
    if type(O_1, even) and E_1 < 0 then
        if O_1 <= O_2 or Type_of_poly(G[2], t, point) = 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 1
        elif O_2 < O_1 and Type_of_poly(G[2], t, point) <> 0 then
            if E_2 < 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 2
            elif 0 < E_2 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 3
            end if
        end if
    elif type(O_2, even) and E_2 < 0 then
        if O_2 <= O_1 or Type_of_poly(G[1], t, point) = 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 1
        elif O_1 < O_2 and Type_of_poly(G[1], t, point) <> 0 then
            if E_1 < 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 2
            elif 0 < E_1 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 3
            end if
        end if
    elif E_1*E_2 < 0 and O_1*O_2 <> 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return 4
    elif O_1 = 0 then
        if 0 < E_2 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 5
        elif E_2 < 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 6
        end if
    elif O_2 = 0 then
        if 0 < E_1 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 5
        elif E_1 < 0 then
            fd := FileTools:-Text:-Open("log_time.txt", append);
            FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
                convert(stack_level, string), "\nTime: ",
                convert(time() - _log_time_0, string), "\n"));
            FileTools:-Text:-Close(fd);
            stack_level := stack_level - 1;
            return 6
        end if
    elif 0 < E_1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return 5
    elif E_1 < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_P", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return 6
    end if
end proc

Type_of_Point := proc(G, f, t, point)
local fd, _log_time_0, T_1, T_2, output;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Type_of_Point", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    T_1 := Type_of_poly(f, t, point);
    T_2 := Type_of_P(G, t, point);
    if T_1 = 1 and 1 <= T_2 and T_2 <= 3 then output := 1
    elif T_1 = 1 and T_2 = 4 then output := 2
    elif T_1 = 2 and 1 <= T_2 and T_2 <= 2 then output := 3
    elif T_1 = 2 and 3 <= T_2 and T_2 <= 5 then output := 4
    elif T_1 = 3 and (T_2 = 1 or T_2 = 3) then output := 5
    elif T_1 = 3 and (T_2 = 2 or T_2 = 4 or T_2 = 6) then output := 6
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Type_of_Point", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return output
end proc

Pre_poly := proc(g, f, t, S, point)
local fd, _log_time_0, h, i, d;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Pre_poly", " ", convert(stack_level, string), "\n"))
        ;
    FileTools:-Text:-Close(fd);
    h := 1;
    for i in S do
        if i <> point then
            if Ord(g, t, i) <= Ord(f, t, i) then
                d := 2*floor(1/2*Ord(f, t, i) - 1/2*Ord(g, t, i)) + 2;
                h := (t - i)^d*h
            end if
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Pre_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_case_1 := proc(g, f, t, point)
local fd, _log_time_0, m, n, c_1, c_2, h, a;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_1", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    c_2 := Eps(g, t, point);
    a := (abs(c_1) + 1)/abs(c_2);
    h := a*(t - point)^(m - n);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_1", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_case_2 := proc(g_1, g_2, f, t, point)
local fd, _log_time_0, m, n_1, n_2, c_1, c_2, h_1, h_2, a, g, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_2", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    h := 1;
    n_1 := Ord(g_1, t, point);
    n_2 := Ord(g_2, t, point);
    c_1 := Eps(g_1, t, point);
    c_2 := Eps(g_2, t, point);
    h_1 := (t - point)^(2*floor(1/2*m - 1/2*n_1))/abs(c_1);
    h_2 := (t - point)^(2*floor(1/2*m - 1/2*n_2))/abs(c_2);
    if 0 < c_1 then
        h_1 := 1/4*h_1*(t - point - 1)^2; h_2 := 1/4*h_2*(t - point + 1)^2
    elif c_1 < 0 then
        h_1 := 1/4*h_1*(t - point + 1)^2; h_2 := 1/4*h_2*(t - point - 1)^2
    end if;
    g := h_1*g_1 + h_2*g_2;
    h := Fixing_case_1(expand(g), f, t, point);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_2", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return [h*h_1, h*h_2]
end proc

Fixing_case_3 := proc(g, f, t, point)
local fd, _log_time_0, m, n, c, h_1, g_1, h_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_3", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c := Eps(g, t, point);
    h_1 := 1/4*(t - point - 1)^2/abs(c);
    g_1 := h_1*g + 1/4*(t - point)^n*(t - point + 1)^2;
    h_2 := Fixing_case_4(g_1, f, t, point);
    h := h_1*h_2;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_3", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_case_4 := proc(g, f, t, point)
local fd, _log_time_0, m, n, b_1, b_2, d, c_1, c_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_4", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    b_1 := Eps(g, t, point);
    c_2 := Eps(f - c_1*(t - point)^m, t, point);
    b_2 := Eps(g - b_1*(t - point)^n, t, point);
    if 0 < c_2/c_1 - b_2/b_1 then d := 0; h := c_1*(t - point)^(m - n)/b_1
    else
        d := 2/(c_2/c_1 - b_2/b_1 - 1);
        h := c_1*(t - point)^(m - n)*(x - point + d)^2/(b_1*d^2)
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_4", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_case_5 := proc(g, f, t, point)
local fd, _log_time_0, m, n, c, h_1, g_1, h_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_5", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c := Eps(g, t, point);
    h_1 := 1/4*(t - point + 1)^2/abs(c);
    g_1 := h_1*g + 1/4*(t - point)^n*(t - point - 1)^2;
    h_2 := Fixing_case_6(g_1, f, t, point);
    h := h_1*h_2;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_5", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_case_6 := proc(g, f, t, point)
local fd, _log_time_0, m, n, a, d, b_1, b_2, c_1, c_2, h;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_case_6", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    m := Ord(f, t, point);
    n := Ord(g, t, point);
    c_1 := Eps(f, t, point);
    b_1 := Eps(g, t, point);
    c_2 := Eps(f - c_1*(t - point)^m, t, point);
    b_2 := Eps(g - b_1*(t - point)^n, t, point);
    if c_2/c_1 - b_2/b_1 < 0 then d := 0; h := c_1*(t - point)^(m - n)/b_1
    else
        d := 2/(c_2/c_1 - b_2/b_1 + 1);
        h := c_1*(t - point)^(m - n)*(x - point + d)^2/(b_1*d^2)
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_case_6", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return h
end proc

Fixing_points := proc(f, g_1, g_2, t)
local
fd, _log_time_0, fixing, S, interval, flag, point, H_1, H_2, h_1, h_2, h, g
;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Fixing_points", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    S := map(proc(bound)
            interval := bound_info(t, bound, 0);
            ASSERT(evalb(interval[1] = interval[2]));
            return interval[1]
        end proc, SolveTools:-SemiAlgebraic([0 <= g_1, 0 <= g_2], [t]));
    H_1 := 0;
    H_2 := 0;
    for point in S do
        flag := Type_of_Point([g_1, g_2], f, t, point);
        if flag = 1 then
            if type(Ord(g_1, t, point), even) and Eps(g_1, t, point) < 0
             and Ord(g_1, t, point) <= Ord(g_2, t, point) then
                h := Pre_poly(g_1, f, t, S, point);
                H_1 := H_1 + h*Fixing_case_1(h*g_1, f, t, point)
            elif type(Ord(g_2, t, point), even) and Eps(g_2, t, point) < 0
             and Ord(g_2, t, point) <= Ord(g_1, t, point) then
                h := Pre_poly(g_2, f, t, S, point);
                H_2 := H_2 + h*Fixing_case_1(h*g_2, f, t, point)
            end if
        elif flag = 2 then
            h_1 := Pre_poly(g_1, f, t, S, point);
            h_2 := Pre_poly(g_2, f, t, S, point);
            fixing := Fixing_case_2(h_1*g_1, h_2*g_2, f, t, point);
            H_1 := H_1 + h_1*fixing[1];
            H_2 := H_2 + h_2*fixing[2]
        elif flag = 3 then
            if Type_of_poly(g_1, t, point) = 1 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_3(h_1*g, f, t, point)
            elif Type_of_poly(g_2, t, point) = 1 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_3(h_2*g, f, t, point)
            end if
        elif flag = 4 then
            if Type_of_poly(g_1, t, point) = 2 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_4(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 2 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_4(h_2*g, f, t, point)
            end if
        elif flag = 5 then
            if Type_of_poly(g_1, t, point) = 1 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_5(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 1 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_5(h_2*g, f, t, point)
            end if
        elif flag = 6 then
            if Type_of_poly(g_1, t, point) = 3 then
                g := g_1;
                h_1 := Pre_poly(g, f, t, S, point);
                H_1 := H_1 + h_1*Fixing_case_6(h_1*g_1, f, t, point)
            elif Type_of_poly(g_2, t, point) = 3 then
                g := g_2;
                h_2 := Pre_poly(g, f, t, S, point);
                H_2 := H_2 + h_2*Fixing_case_6(h_2*g, f, t, point)
            end if
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Fixing_points", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return [H_1, H_2]
end proc

bound_poly := proc(g_1, g_2, x)
local fd, _log_time_0, d, c, c_1, g, h1, h2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "bound_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    d := [degree(g_1, x), degree(g_2, x)];
    c := [coeff(g_1, x^d[1]), coeff(g_2, x^d[2])];
    c_1 := [
        if d[1] = 1 then subs(x = 0, g_1)/abs(c[1])
        else coeff(g_1/abs(c[1]), x^(d[1] - 1))
        end if,
        if d[2] = 1 then subs(x = 0, g_2)/abs(c[2])
        else coeff(g_2/abs(c[2]), x^(d[2] - 1))
        end if];
    if type(d[1], even) and c[1] < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return [g_1, 1, 0]
    elif type(d[2], even) and c[2] < 0 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return [g_2, 0, 1]
    else
        if d[1] = d[2] then
            h1 := x^2/abs(c[1]);
            h2 :=
                (x + sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[2]);
            g := h1*g_1 + h2*g_2
        elif d[2] < d[1] then
            h1 := 1/abs(c[1]);
            h2 := x^(d[1] - d[2] - 2)*
                (x + sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[2])
        else
            h1 := x^(d[2] - d[1] - 2)*
                (x - sign(c[1])*(1/2*c_1[1] + 1/2*c_1[2] + 1))^2/abs(c[1]);
            h2 := 1/abs(c[2])
        end if
    end if;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "bound_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return [expand(h1*g_1 + h2*g_2), h1, h2]
end proc

dot_product := proc(v1, v2)
local fd, _log_time_0, out, i;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "dot_product", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    out := 0;
    for i to min(nops(v1), nops(v2)) do out := out + v1[i]*v2[i] end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "dot_product", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return out
end proc

bound_info := proc(x, bound, eps)
local fd, _log_time_0, i1, i2, j1, j2;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "bound_info", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    if nops(bound) = 2 then
        i1 := simplify(op(bound[1])[1]);
        i2 := simplify(op(bound[1])[2]);
        j1 := simplify(op(bound[2])[1]);
        j2 := simplify(op(bound[2])[2]);
        if evalb(i1 = x) then
            if evalb(j1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [min(i2, j2) + eps, max(i2, j2) - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [min(i2, j1) + eps, max(i2, j1) - eps]
            end if
        else
            if evalb(j1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [min(i1, j2) + eps, max(i1, j2) - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [min(i1, j1) + eps, max(i1, j1) - eps]
            end if
        end if
    else
        i1 := simplify(op(bound[1])[1]);
        j1 := simplify(op(bound[1])[2]);
        if type(bound[1], `=`) then
            if evalb(i1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [j1, j1]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [i1, i1]
            end if
        end if;
        if type(bound[1], `<=`) then
            if evalb(i1 = x) then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [-infinity, j1 - eps]
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ", "bound_info",
                    " ", convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return [i1 + eps, infinity]
            end if
        end if
    end if
end proc

averkov_lemma_7 := proc(x, f, basis, B_poly)
local fd, _log_time_0, _gamma, interval, lowerbound, upperbound, eps,
tobe_disjoint_set, N, g, term, semialgebraic_of_B, R, M, mu, m, N_list,
temp_bound_N, pos_coeff, _pos_coeff, T, semialgebraic_for_mu, N_top,
N_bottom, N_old, N_curr;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "averkov_lemma_7", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    R := RegularChains:-PolynomialRing([x]);
    semialgebraic_of_B := SolveTools:-SemiAlgebraic([0 <= B_poly], [x]);
    _gamma := 1/2*max(map(proc(g_i)
            map(proc(bound)
                    interval := bound_info(x, bound, 0);
                    lowerbound := convert(evalf(interval[1]), rational);
                    upperbound := convert(evalf(interval[2]), rational);
                    simplify(maximize(g_i, x = lowerbound .. upperbound))
                end proc, semialgebraic_of_B)
        end proc, basis));
    _gamma := ceil(evalf(_gamma));
    T := SolveTools:-SemiAlgebraic([0 <= B_poly, f < 0], [x]);
    eps := -1/2*min(map(proc(g_i)
            map(proc(bound)
                    interval := bound_info(x, bound, 0);
                    lowerbound := convert(evalf(interval[1]), rational);
                    upperbound := convert(evalf(interval[2]), rational);
                    simplify(maximize(g_i, x = lowerbound .. upperbound))
                end proc, T)
        end proc, basis));
    if eps = -infinity then eps := 1 end if;
    semialgebraic_for_mu := SolveTools:-SemiAlgebraic(
        [0 <= B_poly, op(map(g_i -> 0 <= g_i + 2*eps, basis))], [x]);
    mu := min(map(proc(bound)
            interval := bound_info(x, bound, 0);
            lowerbound := convert(evalf(interval[1]), rational);
            upperbound := convert(evalf(interval[2]), rational);
            simplify(minimize(f, x = lowerbound .. upperbound))
        end proc, semialgebraic_for_mu));
    mu := convert(evalf(mu), rational);
    M := -min(map(proc(bound)
            interval := bound_info(x, bound, 0);
            lowerbound := convert(evalf(interval[1]), rational);
            upperbound := convert(evalf(interval[2]), rational);
            simplify(minimize(f, x = lowerbound .. upperbound))
        end proc, semialgebraic_of_B));
    m := numelems(basis);
    N_list := [-infinity, 1];
    temp_bound_N :=
        ceil((log(mu) - log(2*m*_gamma))/(log(_gamma) - log(_gamma + eps)))
        ;
    if type(temp_bound_N, realcons) then
        if evalb(0 < 2*m*_gamma/mu) then
            _pos_coeff := 2*m*_gamma/mu; mu := _pos_coeff*mu
        end if;
        temp_bound_N := ceil(
            (log(mu) - log(2*m*_gamma))/(log(_gamma) - log(_gamma + eps)));
        N_list := N_list, [temp_bound_N, _pos_coeff]
    end if;
    temp_bound_N := ceil(
        (log(M) - log(2*eps))/(log(_gamma + 2*eps) - log(_gamma + eps)));
    if type(temp_bound_N, realcons) then
        if evalb(0 < evalf(2*eps/M)) then
            _pos_coeff := 2*eps/M; M := _pos_coeff*M
        end if;
        temp_bound_N := ceil(
            (log(M) - log(2*eps))/(log(_gamma + 2*eps) - log(_gamma + eps)))
            ;
        N_list := N_list, [temp_bound_N, _pos_coeff]
    end if;
    temp_bound_N :=
        ceil((log(M) - log(2*m*_gamma))/(log(_gamma) - log(_gamma + eps)));
    if type(temp_bound_N, realcons) then
        if evalb(0 < m*_gamma/M) then
            _pos_coeff := m*_gamma/M; M := _pos_coeff*M
        end if;
        temp_bound_N := ceil(
            (log(M) - log(2*m*_gamma))/(log(_gamma) - log(_gamma + eps)));
        N_list := N_list, [temp_bound_N, _pos_coeff]
    end if;
    N, pos_coeff :=
        op(foldl((x, y) -> if y[1] < x[1] then x else y end if, N_list));
    N := ceil(1/2*N);
    g := add(term, term in map(
        g_i -> g_i*((g_i - _gamma)/(_gamma + eps))^(2*N)/pos_coeff, basis))
        ;
    N_top := N;
    N_bottom := 0;
    N_old := N_top;
    do
        N_curr := iquo(N_top + N_bottom, 2);
        g := add(term, term in map(
            g_i -> g_i*((g_i - _gamma)/(_gamma + eps))^(2*N_curr)/pos_coeff
            , basis));
        if SolveTools:-SemiAlgebraic([0 <= B_poly, 0 <= g - f], [x]) = []
        then N_top := N_curr
        else N_bottom := N_curr
        end if;
        break if N_curr = N_old;
        N_old := N_curr
    end do;
    if N_top = 0 and RegularChains:-SemiAlgebraicSetTools:-IsEmpty([],
    [B_poly, -f], [], [], R) then N := -1
    else N := N_top
    end if;
    if N = -1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "averkov_lemma_7",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return map(g_i -> 0, basis)
    else
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "averkov_lemma_7",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return map(g_i -> ((g_i - _gamma)/(_gamma + eps))^(2*N)/pos_coeff,
            basis)
    end if
end proc

Lower_bound_poly := proc(x, poly, g)
local fd, _log_time_0, i, d_poly, c_poly, d_g, h, S, _point, G, C, eps,
_log_time_1, _log_time_2, opt_roots, _log_time_3;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Lower_bound_poly", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    eps := 1/1000;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_1 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ",
        "Lower_bound_poly::expand(poly)", " ", convert(stack_level, string),
        "\n"));
    FileTools:-Text:-Close(fd);
    d_poly := degree(expand(poly), x);
    c_poly := coeff(poly, x^d_poly);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ",
        "Lower_bound_poly::expand(poly)", " ", convert(stack_level, string),
        "\nTime: ", convert(time() - _log_time_1, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    if type(d_poly, even) and evalb(0 < evala(c_poly)) then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Lower_bound_poly",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return [poly, 0]
    end if;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_2 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ",
        "Lower_bound_poly::SemiAlgebraic(g)", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    S := map(bound -> bound_info(x, bound, eps),
        SolveTools:-SemiAlgebraic([0 <= g], [x]));
    d_g := degree(expand(g), x);
    _point := S[1][1];
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ",
        "Lower_bound_poly::SemiAlgebraic(g)", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_2, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    if d_g <= d_poly then
        if type(d_poly - d_g, even) then
            h := (x - _point)^(d_poly - d_g + 2)
        else h := (x - _point)^(d_poly - d_g + 1)
        end if
    else h := 1
    end if;
    G := h*g;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_3 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ",
        "Lower_bound_poly::Minimization_problem", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    C := 1/2*min(seq(
        if evalb(S[i][1] = S[i][2]) then 1
        else minimize(simplify(poly/G), x = S[i][1] .. S[i][2])
        end if, i = 1 .. numelems(S)));
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ",
        "Lower_bound_poly::Minimization_problem", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_3, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    C := evalf(C);
    C := convert(C, rational);
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Lower_bound_poly", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return [poly - C*G, C*h]
end proc

findPositiveConstantAvoidExponent := proc(f, g)
local fd, _log_time_0, i, _args, curr_condition, conditions, pos_coeff, sol
;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ",
        "findPositiveConstantAvoidExponent", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    sol := solve({0 <= c*f - g, 0 < c}, {x}, 'parametric', 'real',
        'parameters' = {c});
    _args := op(sol);
    conditions := [];
    for i to 1/2*nops(sol) do
        if evalb(_args[2*i] = [[x = x]]) then
            conditions := [evalf(_args[2*i - 1]), op(conditions)];
            pos_coeff :=
                Optimization:-Minimize(c, map(`<=`@op, conditions))[1];
            if pos_coeff = 0 then
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ",
                    "findPositiveConstantAvoidExponent", " ",
                    convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 1
            else
                fd := FileTools:-Text:-Open("log_time.txt", append);
                FileTools:-Text:-WriteString(fd, cat("End: ",
                    "findPositiveConstantAvoidExponent", " ",
                    convert(stack_level, string), "\nTime: ",
                    convert(time() - _log_time_0, string), "\n"));
                FileTools:-Text:-Close(fd);
                stack_level := stack_level - 1;
                return 1/convert(pos_coeff, rational, exact)
            end if
        end if;
        curr_condition := _args[2*i - 1];
        conditions := [op(0, curr_condition)(
            seq(map(v -> -evalf(v + 1/100), [op(curr_condition)]))),
            op(conditions)]
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ",
        "findPositiveConstantAvoidExponent", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return 0
end proc

Last_step := proc(x, _poly, g)
local fd, _log_time_0, A, i, j, Ga, Ep, tobe_disjoint_set, N, N1, N2, poly,
_g, pos_coeff, semialgebraic_Ep_lifted, m, mu, interval, lowerbound,
upperbound, R, SemiAlg_poly, N_list, temp_bound_N, N_top, N_bottom, N_old,
N_curr;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "Last_step", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    poly := _poly;
    pos_coeff := 1;
    R := RegularChains:-PolynomialRing([x]);
    A := RegularChains:-SemiAlgebraicSetTools:-IsEmpty([], [-poly], [], [],
        R);
    if evalb(A) then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return 0
    end if;
    pos_coeff := 1;
    Ga := convert(1/2*evalf(1.001*maximize(g)), rational);
    SemiAlg_poly := SolveTools:-SemiAlgebraic([poly <= 0], [x]);
    Ep := -1/2*max(map(proc(bound)
            interval := bound_info(x, bound, 0);
            lowerbound := interval[1];
            upperbound := interval[2];
            simplify(maximize(g, x = lowerbound .. upperbound))
        end proc, SemiAlg_poly));
    Ep := convert(evalf(Ep), rational);
    semialgebraic_Ep_lifted :=
        SolveTools:-SemiAlgebraic([0 <= g + 17/10*Ep], [x]);
    mu := min(map(proc(bound)
            interval := bound_info(x, bound, 0);
            lowerbound := convert(evalf(interval[1]), rational);
            upperbound := convert(evalf(interval[2]), rational);
            simplify(minimize(poly, x = lowerbound .. upperbound))
        end proc, semialgebraic_Ep_lifted));
    m := ceil(evalf(minimize(poly))) - 1;
    N_list := [];
    temp_bound_N := ceil((log(mu) - log(2*Ga))/(log(Ga) - log(Ga + Ep)));
    N_list := [op(N_list), temp_bound_N];
    temp_bound_N :=
        ceil((log(-m) - log(2*Ep))/(log(Ga + 2*Ep) - log(Ga + Ep)));
    N_list := [op(N_list), temp_bound_N];
    pos_coeff := convert(evalf(solve(
        (log(alpha*mu) - log(2*Ga))/(log(Ga) - log(Ga + Ep)) =
        (log(-alpha*m) - log(2*Ep))/(log(Ga + 2*Ep) - log(Ga + Ep)), alpha,
        'maxsols' = 1)), rational);
    N := ceil(1/2*subs(alpha = pos_coeff,
        (log(alpha*mu) - log(2*Ga))/(log(Ga) - log(Ga + Ep))));
    if N < 100 then
        N_top := N;
        N_bottom := 0;
        N_old := N_top;
        do
            N_curr := iquo(N_top + N_bottom, 2);
            _g := g*((g - Ga)/(Ga + Ep))^(2*N_curr)/pos_coeff;
            if RegularChains:-SemiAlgebraicSetTools:-IsEmpty([],
            [_g - _poly], [], [], R) then N_top := N_curr
            else N_bottom := N_curr
            end if;
            break if N_curr = N_old;
            N_old := N_curr
        end do;
        if N_top = 0 and RegularChains:-SemiAlgebraicSetTools:-IsEmpty([],
        [-_poly], [], [], R) then N := -1
        else N := N_top
        end if
    end if;
    if N = -1 then
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return 0
    else
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "Last_step", " ",
            convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return ((g - Ga)/(Ga + Ep))^(2*N)/pos_coeff
    end if
end proc

Sqf := proc(x, poly)
local fd, _log_time_0, L, h, f_u, i;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd,
        cat("Start: ", "Sqf", " ", convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    L := sqrfree(poly);
    h := 1;
    f_u := L[1];
    for i to numelems(L[2]) do
        if type(L[2][i][2], even) then h := h*L[2][i][1]^L[2][i][2]
        else h := h*L[2][i][1]^(L[2][i][2] - 1); f_u := f_u*L[2][i][1]
        end if
    end do;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "Sqf", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return [f_u, h]
end proc

find_certificate := proc(poly, QM_list, x)
local fd, _log_time_0, Sqm, Hs, f1, g, A, B, H2, f2, H3, f3, H4, F, s1, s2,
certificates, R;
    stack_level := stack_level + 1;
    fd := FileTools:-Text:-Open("log_time.txt", append);
    _log_time_0 := time();
    FileTools:-Text:-WriteString(fd, cat("Start: ", "find_certificate", " ",
        convert(stack_level, string), "\n"));
    FileTools:-Text:-Close(fd);
    R := RegularChains:-PolynomialRing([x]);
    Hs := Fixing_points(poly, QM_list[1], QM_list[2], x);
    f1 := poly - QM_list[1]*Hs[1] - QM_list[2]*Hs[2];
    F := Sqf(x, f1);
    f1 := simplify(F[1]);
    if evalb(
    RegularChains:-SemiAlgebraicSetTools:-IsEmpty([], [-f1], [], [], R))
    then
        s1 := Hs[1];
        s2 := Hs[2];
        certificates := [poly - s1*QM_list[1] - s2*QM_list[2], s1, s2];
        fd := FileTools:-Text:-Open("log_time.txt", append);
        FileTools:-Text:-WriteString(fd, cat("End: ", "find_certificate",
            " ", convert(stack_level, string), "\nTime: ",
            convert(time() - _log_time_0, string), "\n"));
        FileTools:-Text:-Close(fd);
        stack_level := stack_level - 1;
        return certificates
    end if;
    g := bound_poly(QM_list[1], QM_list[2], x);
    H2 := averkov_lemma_7(x, f1, QM_list, g[1]);
    f2 := f1 - QM_list[1]*H2[1] - QM_list[2]*H2[2];
    H3 := Lower_bound_poly(x, f2, g[1]);
    f3 := f2 - g[1]*H3[2];
    H4 := Last_step(x, f3, g[1]);
    s1 := Hs[1] + (H2[1] + (H3[2] + H4)*g[2])*F[2];
    s2 := Hs[2] + (H2[2] + (H3[2] + H4)*g[3])*F[2];
    certificates := [poly - s1*QM_list[1] - s2*QM_list[2], s1, s2];
    fd := FileTools:-Text:-Open("log_time.txt", append);
    FileTools:-Text:-WriteString(fd, cat("End: ", "find_certificate", " ",
        convert(stack_level, string), "\nTime: ",
        convert(time() - _log_time_0, string), "\n"));
    FileTools:-Text:-Close(fd);
    stack_level := stack_level - 1;
    return certificates
end proc

bitsizeI := proc(integer)
    if integer = 0 then return 1 end if;
    return ceil(evalf(log(abs(integer), 2))) + 1
end proc

bitsizeR := proc(rat)
local d;
    d := denom(rat);
    if d = 1 then return bitsizeI(numer(rat))
    else return bitsizeI(numer(rat)) + bitsizeI(denom(rat))
    end if
end proc

bitsizeP := proc(poly, x)
local _sum;
    return add(_sum, _sum in map(bitsizeR, [coeffs(collect(poly, x))]))
end proc

  "/Users/typesarespaces/Documents/GithubProjects/phd-thesis/Documents/Seminars/BeihangUniversity-Fall2021/Weifeng-Notes/Weifeng-Certificates/tests"

                            "/Users/typesarespaces"

Warning, (in monshom) `i` is implicitly declared local
|multivsos/multivsos.mm:20|
monshom := proc(n, d)
local l1, i;
    l1 := [seq(1, i = 1 .. n)];
    return map(_c -> _c - l1, combinat:-composition(n + d, n))
end proc

Warning, (in revmons) `i` is implicitly declared local
|multivsos/multivsos.mm:26|
revmons := proc(n, d)
local i;
    if d = 0 then return [[seq(0, i = 1 .. n)]]
    else return [op(monshom(n, d)), op(revmons(n, d - 1))]
    end if
end proc

Warning, (in revmons2) `i` is implicitly declared local
|multivsos/multivsos.mm:33|
revmons2 := proc(n, d)
local mons0, i;
    mons0 := [[seq(0, i = 1 .. n)]];
    return [seq(op(monshom(n, d - i + 1)), i = 1 .. d), mons0]
end proc

     monspt := proc(n, d) return ListTools:-Reverse(revmons(n, d)) end proc

Warning, (in mymons) `m` is implicitly declared local
|multivsos/multivsos.mm:48|
Warning, (in mymons) `v` is implicitly declared local
|multivsos/multivsos.mm:48|
Warning, (in anonymous procedure within mons) `i` is implicitly declared local
|multivsos/multivsos.mm:54|
mons := proc(n, d, X, ms::list := monspt(n, d))
    return map(a -> local i; mul(X[i]^a[i], i = 1 .. n), ms)
end proc

Warning, (in support) `m` is implicitly declared local
|multivsos/multivsos.mm:62|
support := proc(f, X, monslist)
local cf, idxf, monsf, m;
    cf := coeffs(f, X, 'monsf');
    monsf := [monsf];
    idxf := seq(ListTools:-Search(m, monslist), m in monsf);
    if member(0, [idxf]) then lprint(m); error "Bug in list of monomials"
    end if;
    return [cf], [idxf]
end proc

Warning, (in dense_perturbation) `m` is implicitly declared local
|multivsos/multivsos.mm:68|
   dense_perturbation := proc(ms) local m; return add(m^2, m in ms) end proc

sos2sdp := proc(r, X, relaxorder, mspt, msptk, ms, msk, rc, ridx, e,
precSVD::integer := 40, precSDP::integer := 200, epsStar::integer := 30,
precOut::integer := 30, precIn::integer := 100, gmp::boolean := false,
algo::integer := 1, g::list := [], gc::list := [], gidx::list := [])
local start_idx, sub_idx, nvars, zero, d, k, n, ng, r0, msdp, nsdp, nblock,
fd, rList, i, rfloat, j, lowerbnd, eigs, eivs, eigs2, eivs2, Y, Yrat,
absorb_tbl, m, absorb_PP, nsdpg, nsdponeg, gic, giidx, ni, ig, igc, gifloat,
mgi, eigsi, eivsi, nl, yMatText, objValPrimalText, mski, epsList, alg,
msptgi, di, msptki;
    k := relaxorder;
    d := 2*k;
    n := nops(X);
    ng := nops(g);
    zero := [seq(0, i = 1 .. n)];
    msdp := nops(mspt);
    nsdp := nops(msk);
    nblock := 1 + ng;
    if FileTools:-Exists("multivsos/in.dat-s") then
        FileTools:-Remove("multivsos/in.dat-s")
    end if;
    fd := fopen("multivsos/in.dat-s", WRITE, TEXT);
    rList := Array([seq(0, i = 1 .. msdp)]);
    for i to nops(rc) do rList[ridx[i]] := rc[i] end do;
    if mspt[1] = zero then sub_idx := 1; nvars := msdp - 1; r0 := rList[1]
    else
        sub_idx := ListTools:-Search(2*mspt[1], mspt) - 1;
        for j from 2 to nsdp do
            k := ListTools:-Search(mspt[1] + mspt[j], mspt);
            sub_idx := min(sub_idx, k - 1)
        end do;
        nvars := msdp - sub_idx;
        r0 := 0
    end if;
    writeline(fd, convert(nvars, string));
    writeline(fd, convert(nblock, string));
    fprintf(fd, "%d ", nsdp);
    nsdpg := locmatsizes(g, k, n);
    for ni in nsdpg do fprintf(fd, "%d ", ni) end do;
    fprintf(fd, "\n");
    rfloat := convert(rList, float, precIn);
    if mspt[1] = zero then
        for i from 2 to msdp do fprintf(fd, "%.*f ", precIn, rfloat[i])
        end do
    else
        for i to nvars do fprintf(fd, "%.*f ", precIn, rfloat[i + sub_idx])
        end do
    end if;
    fprintf(fd, "\n");
    if mspt[1] = zero then
        writeline(fd, "0 1 1 1 -1");
        for j from 2 to nsdp do fprintf(fd, "%d 1 %d %d 1\n", j - 1, 1, j)
        end do;
        for i from 2 to nsdp do
            for j from i to nsdp do
                k := ListTools:-Search(mspt[i] + mspt[j], mspt);
                fprintf(fd, "%d 1 %d %d 1\n", k - 1, i, j)
            end do
        end do
    else
        for i to nsdp do
            for j from i to nsdp do
                k := ListTools:-Search(mspt[i] + mspt[j], mspt);
                fprintf(fd, "%d 1 %d %d 1\n", k - sub_idx, i, j)
            end do
        end do
    end if;
    for ig to ng do
        gic := gc[ig];
        giidx := gidx[ig];
        for igc to nops(gic) do
            msptgi := monspt(n, 1/2*d - ceil(1/2*degree(g[ig])));
            mgi := mspt[giidx[igc]];
            gifloat := convert(gic[igc], float, precIn);
            if mgi = zero then
                fprintf(fd, "0 %d 1 1 %.*f\n", ig + 1, precIn, -gifloat);
                for j from 2 to nsdpg[ig] do
                    fprintf(fd, "%d %d 1 %d %.*f\n", j - 1, ig + 1, j,
                        precIn, gifloat)
                end do;
                for i from 2 to nsdpg[ig] do
                    for j from i to nsdpg[ig] do
                        k := ListTools:-Search(msptgi[i] + msptgi[j] + mgi,
                            mspt);
                        fprintf(fd, "%d %d %d %d %.*f\n", k - 1, ig + 1, i,
                            j, precIn, gifloat)
                    end do
                end do
            else
                for i to nsdpg[ig] do
                    for j from i to nsdpg[ig] do
                        k := ListTools:-Search(msptgi[i] + msptgi[j] + mgi,
                            mspt);
                        fprintf(fd, "%d %d %d %d %.*f\n", k - sub_idx,
                            ig + 1, i, j, precIn, gifloat)
                    end do
                end do
            end if
        end do
    end do;
    absorb_tbl := table([seq(0, i = 1 .. msdp)]);
    for i to nsdp do
        for j from i to nsdp do
            m := mspt[i] + mspt[j];
            if not_even(m) then
                k := ListTools:-Search(m, mspt); absorb_tbl[k] := i
            end if
        end do
    end do;
    absorb_PP := table([seq([], i = 1 .. msdp)]);
    for i to nsdp do
        k := ListTools:-Search(2*mspt[i], mspt);
        absorb_PP[k] := [op(absorb_PP[k]), i, i];
        for j from i + 1 to nsdp do
            m := mspt[i] + mspt[j];
            k := ListTools:-Search(m, mspt);
            absorb_PP[k] := [op(absorb_PP[k]), i, j, j, i]
        end do
    end do;
    fclose(fd);
    if FileTools:-Exists("multivsos/out.dat-s") then
        FileTools:-Remove("multivsos/out.dat-s")
    end if;
    if FileTools:-Exists("multivsos/out.mm") then
        FileTools:-Remove("multivsos/out.mm")
    end if;
    if not gmp then
        ssystem("sdpa -ds multivsos/in.dat-s -o multivsos/out.dat-s -p m\
            ultivsos/param.sdpa > /dev/null")
    else
        write_param(precSDP, epsStar, epsStar);
        ssystem("sdpa_gmp -ds multivsos/in.dat-s -o multivsos/out.dat-s \
            -p multivsos/my_param_gmp.sdpa > /dev/null")
    end if;
    fd := fopen("multivsos/out.dat-s", READ, TEXT);
    nl := "";
    yMatText := "yMat := ";
    do
        nl := readline(fd);
        if SearchText("objValPrimal", nl) = 1 then
            objValPrimalText :=
                StringTools[RegSubs]("objValPrimal = (.*)" = "\\1", nl);
            break
        end if
    end do;
    do nl := readline(fd); break if SearchText("yMat", nl) = 1 end do;
    do
        nl := readline(fd);
        break if 0 < SearchText("main loop", nl);
        yMatText := cat(yMatText, nl)
    end do;
    fclose(fd);
    yMatText := StringTools[SubstituteAll](yMatText, "{", "[");
    yMatText := StringTools[SubstituteAll](yMatText, "}", "]");
    yMatText := StringTools[SubstituteAll](yMatText, "][", "],[");
    fd := fopen("multivsos/out.mm", WRITE, TEXT);
    fprintf(fd, "objValPrimal := %s:\n%s:", objValPrimalText, yMatText);
    fd := fclose(fd);
    read "multivsos/out.mm";
    printf("Numerical SDP ended\n");
    lowerbnd := r0 + convert(objValPrimal, rational, exact);
    printf("Lower bound: %f\n", evalf(lowerbnd));
    eigs := Array([]);
    eivs := Array([]);
    nsdponeg := [nsdp, op(nsdpg)];
    alg := 1;
    for j to 1 + ng do
        i := ng + 2 - j;
        Y := Matrix(yMat[i]);
        if 1 < i then
            di := 1/2*d - ceil(1/2*degree(g[i - 1]));
            msptki := monspt(n, di);
            mski := mons(n, di, X, msptki)
        else mski := msk
        end if;
        if algo = 1 or 1 < i then Yrat := Matrix(Y)
        else
            if 30 <= precOut then Y := convert(Y, rational, exact)
            else Y := convert(Y, rational, precOut)
            end if;
            Y := 1/2*Y + 1/2*LinearAlgebra:-Transpose(Y);
            epsList := epsPP(convert(eigs, list), convert(eivs, list), r, g,
                nsdpg, X, ms, msdp);
            Yrat := absorber_PP(Y, epsList, absorb_PP, nsdp, msptk, mspt)
        end if;
        if (algo = 2 or algo = 3) and i = 1 then alg := algo end if;
        eigsi, eivsi := eigseivs(Yrat, X, mski, precSVD, precOut, alg, e);
        eigs := ArrayTools:-Concatenate(1, eigsi, eigs);
        eivs := ArrayTools:-Concatenate(1, eivsi, eivs)
    end do;
    return convert(eigs, list), convert(eivs, list), lowerbnd, absorb_tbl,
        nsdponeg
end proc

Warning, (in absorber_PP) `im` is implicitly declared local
|multivsos/multivsos.mm:350|
write_param := proc(precSDP, epsStar, epsDash)
local fd;
    fd := fopen("multivsos/my_param_gmp.sdpa", WRITE, TEXT);
    fprintf(fd, "300\tunsigned int maxIteration;\n");
    fprintf(fd, "1.0E-%d\t\t double 0.0 < epsilonStar;\n", epsStar);
    fprintf(fd, "1.0E5   double 0.0 < lambdaStar;\n");
    fprintf(fd, "2.0   \tdouble 1.0 < omegaStar;\n");
    fprintf(fd, "-1.0E5  double lowerBound;\n");
    fprintf(fd, "1.0E5   double upperBound;\n");
    fprintf(fd, "0.1     double 0.0 <= betaStar <  1.0;\n");
    fprintf(fd,
        "0.3     double 0.0 <= betaBar  <  1.0, betaStar <= betaBar;\n");
    fprintf(fd, "0.9     double 0.0 < gammaStar  <  1.0;\n");
    fprintf(fd, "1.0E-%d\t\t double 0.0 < epsilonDash;\n", epsDash);
    fprintf(fd, "%d     precision\n", precSDP);
    fprintf(fd, "%%+50.40Fe     char* \t xPrint \t   (default %%+8.3e, \t\
            NOPRINT skips printout) \n");
    fprintf(fd, "%%+50.40Fe     char* \t XPrint \t   (default %%+8.3e, \t\
            NOPRINT skips printout) \n");
    fprintf(fd, "%%+50.40Fe     char* \t YPrint \t   (default %%+8.3e, \t\
            NOPRINT skips printout) \n");
    fprintf(fd, "%%+50.40Fe     char* \t infPrint \t (default %%+10.16e, \
        \t  NOPRINT skips printout) \n");
    fclose(fd)
end proc

checkrational := proc(U)
local v;
    for v in U do
        if not type(convert(v, rational), realcons) then
            error "Complex Cholesky factor, retry with gmp = true or mor\
                e SDP precision"
        end if
    end do;
    return
end proc

eigseivs := proc(Yrat, X, ms, precSVD, precOut, algo, e)
local v, msvec, eigs, eivs, U, S, V, Ysvd, SVD, ti, tcmp;
    SVD := false;
    msvec := Vector(ms);
    ti := time();
    printf("Cholesky decomposition ... ");
    S := LinearAlgebra:-IdentityMatrix(nops(ms));
    if algo = 1 or algo = 3 then Digits := precSVD end if;
    if algo < 3 then
        U := LinearAlgebra:-LUDecomposition(Yrat, method = 'Cholesky')
    else
        U :=
            LinearAlgebra:-LUDecomposition(Yrat - e*S, method = 'Cholesky')
    end if;
    checkrational(U);
    tcmp := time() - ti;
    printf("done.\n");
    eigs := LinearAlgebra:-Diagonal(S);
    eivs := LinearAlgebra:-Transpose((LinearAlgebra:-Transpose(msvec)) . U)
        ;
    Digits := 10;
    Ysvd := U . S . (V^%T);
    if 30 <= precOut then
        eigs := convert(eigs, rational, exact);
        eivs := map(_e -> convert(_e, rational, exact), eivs)
    else
        eigs := convert(eigs, rational, precOut);
        eivs := map(_e -> convert(_e, rational, precOut), eivs)
    end if;
    return eigs, eivs
end proc

     not_even := proc(m) return has(1, map(_c -> irem(_c, 2), m)) end proc

decomp_mon := proc(a, n)
local c, b, degb, cm, cnt, i;
    c := map(_c -> iquo(_c, 2), a);
    b := a - 2*c;
    degb := ceil(1/2*add(i, i in b));
    cm := [seq(0, i = 1 .. n)];
    cnt := 0;
    for i to n do
        if b[i] = 1 then cm[i] := b[i]; cnt := cnt + 1 end if;
        break if degb <= cnt
    end do;
    return c, cm, b - cm
end proc

NP_PolyhedralSets := proc(f, X, mspt, ms)
local cf, idxf, msptf, ps;
    cf, idxf := support(f, X, ms);
    msptf := map(_idx -> mspt[_idx], idxf);
    ps := PolyhedralSets:-PolyhedralSet(msptf);
    return PolyhedralSets:-ConvexHull(ps)
end proc

absorber := proc(u, X, e, even_mons, ms, mspt, absorb_tbl)
local i, j, k, ucoeffs, uidx, uc, err_list, err, m, bad_m, n, c, cm, cp,
cfs, sqs, n1, m1, m2, k1, k2;
    ucoeffs, uidx := support(u, X, ms);
    n := nops(X);
    err_list := Array([seq(e, i = 1 .. nops(even_mons))]);
    cfs := [];
    sqs := [];
    for i to nops(ucoeffs) do
        uc := ucoeffs[i];
        bad_m := mspt[uidx[i]];
        if not_even(bad_m) then
            k := ListTools:-Search(bad_m, mspt);
            m1 := mspt[absorb_tbl[k]];
            m2 := bad_m - m1;
            cfs := [op(cfs), 1/2*abs(uc)];
            sqs := [op(sqs), mul(X[i]^m1[i], i = 1 .. n)
                 + sign(uc)*mul(X[i]^m2[i], i = 1 .. n)];
            k1 := ListTools:-Search(2*m1, even_mons);
            k2 := ListTools:-Search(2*m2, even_mons);
            err_list[k1] := err_list[k1] - 1/2*abs(uc);
            err_list[k2] := err_list[k2] - 1/2*abs(uc)
        else
            k := ListTools:-Search(bad_m, even_mons);
            err_list[k] := err_list[k] + uc
        end if
    end do;
    err_list := convert(err_list, list);
    cfs := [op(cfs), op(err_list)];
    sqs := [op(sqs), seq(mul(X[i]^(1/2*m[i]), i = 1 .. n), m in even_mons)]
        ;
    return cfs, sqs
end proc

old_absorber := proc(u, X, e, even_mons, ms, mspt, even_mons_n1, absorb_tbl)
local i, j, k, ucoeffs, uidx, uc, err_list, err, m, bad_m, n, c, cm, cp,
cfs, sqs, n1, m1, m2;
    printf("\nu = ");
    lprint(evalf(u));
    ucoeffs, uidx := support(u, X, ms);
    n := nops(X);
    err_list := [];
    for j to nops(even_mons) do
        m := even_mons[j];
        n1 := even_mons_n1[j];
        err := e;
        for i to nops(ucoeffs) do
            uc := ucoeffs[i];
            bad_m := mspt[uidx[i]];
            if m = bad_m then err := err + uc
            else if has(bad_m, n1) then err := err - 1/2*abs(uc) end if
            end if
        end do;
        err_list := [op(err_list), err]
    end do;
    printf("\nerr list = ");
    cfs := [op(err_list)];
    sqs := [seq(mul(X[i]^(1/2*m[i]), i = 1 .. n), m in even_mons)];
    for i to nops(ucoeffs) do
        uc := ucoeffs[i];
        bad_m := mspt[uidx[i]];
        if not_even(bad_m) then
            k := ListTools:-Search(bad_m, mspt);
            m1 := mspt[absorb_tbl[k]];
            m2 := bad_m - m1;
            printf("\n");
            lprint(bad_m);
            lprint(m1);
            lprint(m2);
            cfs := [op(cfs), 1/2*abs(uc)];
            sqs := [op(sqs), mul(X[i]^m1[i], i = 1 .. n)
                 + sign(uc)*mul(X[i]^m2[i], i = 1 .. n)]
        end if
    end do;
    return cfs, sqs
end proc

Warning, (in relaxordermin) `gi` is implicitly declared local
|multivsos/multivsos.mm:625|
Warning, (in locmatsizes) `gi` is implicitly declared local
|multivsos/multivsos.mm:629|
locmatsizes := proc(g, k, n)
local gi;
    return
        [seq(combinat:-binomial(n + k - ceil(1/2*degree(gi)), n), gi in g)]
end proc

Warning, (in preliminary_test_negativity) `x` is implicitly declared local
|multivsos/multivsos.mm:651|
Warning, (in permutepoly) `i` is implicitly declared local
|multivsos/multivsos.mm:678|
Warning, (in is_homogeneous) `v` is implicitly declared local
|multivsos/multivsos.mm:708|
Warning, (in multivsos) `i` is implicitly declared local
|multivsos/multivsos.mm:719|
Warning, (in multivsos_internal) `m` is implicitly declared local
|multivsos/multivsos.mm:815|
multivsos_internal := proc(f, {algo::integer := 1, denom::boolean := false,
epsStar::integer := 5, epsilon::integer := 8, glist::list := [],
gmp::boolean := false, iter_prec::integer := 0, precIn::integer := 100,
precOut::integer := 30, precSDP::integer := 100, precSVD::integer := 40,
relaxorder::integer := 0})
local p, d, mspt, ms, rc, ridx, pc, pidx, ng, gc, gidx, gic, giidx, S, s, c,
q, n, k, t, e, r, l, a, s1, s2, u, v, i, j, sqs, cfs, sos, rfloat, eigs,
eigsg, eigsgi, soslist, soslistg, soslistgi, sumsos, cnd, maxq, obj_plus_r0,
card_nk, even_mons, err_list, err, msptk, msk, absorb_tbl, rmin, nsdponeg,
idx, oneg, idxi, g, X, ti, tf, gi, cg, use_convex, newf, hf, vars,
deg_denom, mspt_denom, ms_denom, msptk_denom, msk_denom, sigma1, bitsos, m;
    use_convex := true;
    ti := time[real]();
    c := max(map(_c -> abs(_c), coeffs(expand(f))));
    c := max(c, 1);
    p := f/c;
    X := [op(indets([p, op(glist)]))];
    g := [];
    ng := nops(glist);
    for i to ng do
        gi := expand(glist[i]);
        cg := max(map(_c -> abs(_c), coeffs(expand(gi))));
        cg := 1;
        g := [op(g), gi/cg]
    end do;
    n := nops(X);
    rmin := relaxordermin([p, op(g)]);
    d := 2*max(relaxorder, rmin);
    k := ceil(1/2*d);
    mspt := monspt(n, d);
    card_nk := combinat:-binomial(n + k, n);
    msptk := monspt(n, k);
    ms := mons(n, d, X, mspt);
    lprint(X);
    printf("Polynomial system with %d variables and degree at most %d\n", n,
        d);
    printf("Size of monomial basis = %d\n", nops(msptk));
    printf("Number of moment variables = %d\n", nops(ms));
    if ng = 0 then
        mspt, msptk := truncate_withNP(p, X, mspt, msptk, ms, true);
        printf("\nAfter Newton polytope reduction:\n");
        printf("Size of monomial basis = %d\n", nops(msptk));
        printf("Number of moment variables = %d\n", nops(mspt))
    end if;
    if ng = 1 and denom then
        deg_denom := d - degree(glist[1]);
        mspt_denom := monspt(n, deg_denom);
        ms_denom := mons(n, deg_denom, X, mspt_denom);
        msptk_denom := monspt(n, 1/2*deg_denom);
        msk_denom := mons(n, 1/2*deg_denom, X, msptk_denom);
        sigma1 := expand(add(m, m in msk_denom)^2);
        mspt, msptk :=
            truncate_withNP(glist[1]*sigma1, X, mspt, msptk, ms, true);
        printf("\nAfter Newton polytope reduction:\n");
        printf("Size of monomial basis = %d\n", nops(msptk));
        printf("Number of moment variables = %d\n", nops(mspt))
    end if;
    ms := mons(n, d, X, mspt);
    msk := mons(n, k, X, msptk);
    if algo = 1 or algo = 3 then
        t := dense_perturbation(msk);
        even_mons := 2*msptk;
        e := 1/2^epsilon
    else e := 0; t := 0
    end if;
    r := expand(p - e*t);
    pc, pidx := support(expand(p), X, ms);
    if r = 0 then rc := [0]; ridx := [1]
    else rc, ridx := support(r, X, ms)
    end if;
    gc := [];
    gidx := [];
    for i to ng do
        gic, giidx := support(g[i], X, ms);
        gc := [op(gc), gic];
        gidx := [op(gidx), giidx]
    end do;
    printf("SDPA starts...\n");
    if algo = 3 then
        eigs, soslist, obj_plus_r0, absorb_tbl, nsdponeg := sos2sdp(p, X, k,
            mspt, msptk, ms, msk, pc, pidx, e, precSVD, precSDP, epsStar,
            precOut, precIn, gmp, algo, g, gc, gidx)
    else
        eigs, soslist, obj_plus_r0, absorb_tbl, nsdponeg := sos2sdp(r, X, k,
            mspt, msptk, ms, msk, rc, ridx, e, precSVD, precSDP, epsStar,
            precOut, precIn, gmp, algo, g, gc, gidx)
    end if;
    idx := 0;
    sumsos := obj_plus_r0;
    oneg := [1, op(g)];
    for i to ng + 1 do
        idxi := idx + nsdponeg[i];
        sumsos :=
            sumsos + oneg[i]*sum(eigs[j]*soslist[j]^2, j = idx + 1 .. idxi)
            ;
        idx := idxi
    end do;
    if algo = 1 or algo = 3 then
        u := expand(r - sumsos + obj_plus_r0);
        try cfs, sqs := absorber(u, X, e, even_mons, ms, mspt, absorb_tbl)
        catch "invalid subscript selector":
            lprint("Invalid absorbtion table, certainly a Newton polytop\
                e issue");
            return false
        end try;
        nsdponeg[1] := nsdponeg[1] + nops(sqs)
    else u := 0; cfs := []; sqs := []
    end if;
    err := expand(u + e*t - add(cfs[i]*sqs[i]^2, i = 1 .. nops(sqs)));
    cfs := [op(cfs), op(eigs)];
    sqs := [op(sqs), op(soslist)];
    sos := [];
    for i to nops(sqs) do sos := [op(sos), c*cfs[i], sqs[i]] end do;
    if soscheck1(f, sos, nsdponeg, g) = 1 then
        printf("\n Exact sum of squares decomposition\n");
        tf := time[real]() - ti;
        bitsos := BitSizePolSeq(sos, X);
        printf("bitsize= %d\n", bitsos);
        printf("time= %fsecs\n", tf);
        return {sos, nsdponeg, tf, bitsos}
    else
        if 2 <= iter_prec then printf("\n Aborting \n"); return {false}
        end if;
        printf("\n***************************\n");
        printf("****   RECURSIVE CALL  ****\n");
        lprint(2*epsilon, 2*precSVD, 2*precSDP, 2*epsStar, 2*precOut,
            2*precIn);
        printf("***************************\n\n");
        if epsilon <= 16 then
            return multivsos_internal(f, ':-epsilon' = 2*epsilon,
                ':-precSVD' = 2*precSVD, ':-precSDP' = 2*precSDP,
                ':-epsStar' = 2*epsStar, ':-precOut' = 2*precOut,
                ':-precIn' = 2*precIn, ':-gmp' = gmp, ':-algo' = algo,
                ':-glist' = glist, ':-relaxorder' = relaxorder,
                ':-denom' = denom, ':-iter_prec' = iter_prec + 1)
        else
            return multivsos_internal(f, ':-epsilon' = 2*epsilon,
                ':-precSVD' = 2*precSVD, ':-precSDP' = 2*precSDP,
                ':-epsStar' = 2*epsStar, ':-precOut' = 2*precOut,
                ':-precIn' = 2*precIn, ':-gmp' = true, ':-algo' = algo,
                ':-glist' = glist, ':-relaxorder' = relaxorder,
                ':-denom' = denom, ':-iter_prec' = iter_prec + 1)
        end if
    end if;
    tf := time[real]() - ti;
    printf("bitsize= %d\n", BitSizePolSeq(sos, X));
    printf("time= %fsecs\n", tf)
end proc

soscheck1 := proc(f, sos, nsdponeg, g::list := [])
local s, i, j, idx, idxi, oneg;
    oneg := [1, op(g)];
    s := 0;
    idx := 0;
    for i to nops(g) + 1 do
        idxi := idx + nsdponeg[i];
        for j from idx + 1 to idxi do
            if sos[2*j - 1] < 0 then
                printf("Negative number => invalid sum of squares decomp\
                    osition\n");
                return 0;
                error "Negative number => invalid sum of squares decompo\
                    sition"
            else s := s + oneg[i]*sos[2*j - 1]*sos[2*j]^2
            end if
        end do;
        idx := idxi
    end do;
    if not (expand(f - s) = 0) then
        printf("Inexact sum of squares decomposition");
        return 0;
        error "Inexact sum of squares decomposition"
    else return 1
    end if
end proc

Warning, (in BitSizeSos) `p` is implicitly declared local
|multivsos/multivsos.mm:996|
BitSizeSos := proc(sos, X)
local p;
    return add(BitSizePol(p[1], X) + BitSizePolQuadr(p[2], X), p in sos)
end proc

BitSizePolQuadr := proc(q, X)
    return BitRat(q[1]) + BitSizePol(q[2], X) + BitRat(q[3])
end proc

Warning, (in BitSizePolSeq3) `p` is implicitly declared local
|multivsos/multivsos.mm:1004|
BitSizePolSeq3 := proc(listpol, X)
local p;
    return add(BitSizePol(p[1], X) + BitSizePolSeq(p[2], X), p in listpol)
end proc

Warning, (in BitSizePolSeq) `p` is implicitly declared local
|multivsos/multivsos.mm:1008|
BitSizePolSeq := proc(listpol, X)
local p;
    return add(BitSizePol(p, X), p in listpol)
end proc

BitSizePol := proc(p, X)
local res;
    res := [coeffs(expand(p), X)]; return BitSizeSeq(res)
end proc

Warning, (in BitSizeSeq) `c` is implicitly declared local
|multivsos/multivsos.mm:1018|
     BitSizeSeq := proc(l) local c; return add(BitRat(c), c in l) end proc

BitRat := proc(r)
local n, d, res, rs;
    if type(r, rational) then rs := r else rs := r^2 end if;
    if rs = 0 then return 1 end if;
    n, d := abs(numer(rs)), abs(denom(rs));
    if d = 1 then res := ilog2(n) + 1
    else res := ilog2(n) + ilog2(d) + 2
    end if;
    return res
end proc

benchRAGLib := proc(f, g::list := [])
local sys, i, ti, tf, sol;
    ti := time[real]();
    sys := [f < 0];
    for i to nops(g) do sys := [op(sys), expand(-g[i]) < 0] end do;
    lprint(sys);
    sol := RAG:-HasRealSolutions(sys);
    tf := time[real]() - ti;
    printf("time= %esecs\n", tf);
    return sol
end proc

benchSamplePoints := proc(f, g::list := [])
local sys, vars, R, P, i, ti, tf;
    ti := time[real]();
    sys := [f < 0];
    for i to nops(g) do sys := [op(sys), 0 <= g[i]] end do;
    vars := [op(indets(f))];
    R := RegularChains:-PolynomialRing(vars);
    P := SamplePoints(sys, R);
    tf := time[real]() - ti;
    printf("time= %esecs\n", tf);
    return P
end proc

printms := proc(ms)
local i;
    for i to nops(ms) do printf("%d ", i); lprint(ms[i]) end do; return
end proc

extractCertificates := proc(out)
local i, j, certificates, sos, rlist, oneWithBasis, s, idx, idxi;
    if not (out[1] = false) then
        certificates := [];
        s := 0;
        idx := 0;
        sos := out[4];
        rlist := out[3];
        oneWithBasis := [1, op(basis)];
        for i to nops(basis) + 1 do
            certificates := [op(certificates), 0];
            idxi := idx + rlist[i];
            for j from 1 + idx to idxi do
                s := s + oneWithBasis[i]*sos[2*j - 1]*sos[2*j]^2;
                certificates[i] :=
                    sos[2*j]^2*sos[2*j - 1] + certificates[i]
            end do;
            idx := idxi
        end do;
        return true, certificates, s
    end if;
    return false, [0], 0
end proc

checkRealCertify := proc(f, basis, test_name)
local st, out, isvalid, certificates, s, h;
    printf("\n>> Test\n%s\n", test_name);
    printf(">> input polynomial\n%s\n", convert(f, string));
    printf(">> basis\n%s\n", convert(basis, string));
    st := time();
    out := multivsos_internal(f, epsilon = 1, precSVD = 10, precSDP = 200,
        precOut = 30, precIn = 100, gmp = true, algo = 2, glist = basis,
        relaxorder = 1, denom = false);
    isvalid, certificates, s := extractCertificates(out);
    if isvalid then
        printf(">> Time taken\n%f\n", time() - st);
        lprint(">> Sums of squares multipliers", certificates);
        printf(">> Degree size\n%s\n", convert(foldl(
            (_x, _y) -> max(_x, _y), 0,
            op(map(h -> quickdegree(h, x), certificates))), string));
        return
    else
        printf(">> RealCertify couldnt find certificates\n%f\n",
            time() - st)
    end if
end proc

weifengExamples := proc()
local x, f, g_1, g_2, G;
    f := -x*(x - 1)^3*(x - 2)^2;
    g_1 := x*(x - 1/2)*(x - 1)^2*(x - 2);
    g_2 := -x*(x - 1)*(x - 2);
    G := [g_1, g_2];
    try checkWeifeng(f, G, x, "Test 1")
    catch: printf(">> Weifeng approach fails Test 1\n")
    end try;
    try checkRealCertify(f, G, "Test 1")
    catch: printf(">> RealCertify fails Test 1\n")
    end try;
    f := -x*(x - 3);
    g_1 := x*(x - 1)*(x - 2)*(x - 3);
    g_2 := -x*(x - 1)*(x - 2)*(x - 3);
    G := [g_1, g_2];
    try checkWeifeng(f, G, x, "Test 2")
    catch: printf(">> Weifeng approach fails Test 2\n")
    end try;
    try checkRealCertify(f, G, "Test 2")
    catch: printf(">> RealCertify fails Test 2\n")
    end try;
    f := -x + 10;
    g_1 := (x - 2)^3;
    g_2 := -(x - 2)^3;
    G := [g_1, g_2];
    try checkRealCertify(f, G, "Test 3")
    catch: printf(">> RealCertify fails Test 3\n")
    end try;
    checkWeifeng(f, G, x, "Test 3");
    try checkRealCertify(f, G, "Test 3")
    catch: printf(">> RealCertify fails Test 3\n")
    end try
end proc

weifengExamples1 := proc()
local x, f, g_1, g_2, G;
    f := -x*(x - 1)^3*(x - 2)^2;
    g_1 := x*(x - 1/2)*(x - 1)^2*(x - 2);
    g_2 := -x*(x - 1)*(x - 2);
    G := [g_1, g_2];
    try checkWeifeng(f, G, x, "Test 1")
    catch: printf(">> Weifeng approach fails Test 1\n")
    end try
end proc

realCertifyIssues1 := proc()
local x;
    try
        checkRealCertify(x + 1, [x*(x - 1)*(x - 2), -x*(x - 1)*(x - 2)],
            "Test")
    catch: printf(">> RealCertify fails with test\n")
    end try;
    checkWeifeng(x + 1, [x*(x - 1)*(x - 2), -x*(x - 1)*(x - 2)], x, "Test")
end proc

oldProblematicExamples1 := proc()
    checkWeifeng(x + 101/100, [
        (x - 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25),
        (-x + 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25)],
        x, "Works");
    checkRealCertify(x + 101/100, [-x^2 + 100,
        (x - 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25),
        (-x + 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25)],
        "Works");
    checkWeifeng(x + 53/100, [(x - 577/100)*(x - 317/50)*(x - 1069/100)*
        (x - 1443/100)*(x - 381/25), -(x - 577/100)*(x - 317/50)*
        (x - 1069/100)*(x - 1443/100)*(x - 381/25)], x, "Now works!");
    checkRealCertify(x + 53/100, [-x^2 + 100, (x - 577/100)*(x - 317/50)*
        (x - 1069/100)*(x - 1443/100)*(x - 381/25), -(x - 577/100)*
        (x - 317/50)*(x - 1069/100)*(x - 1443/100)*(x - 381/25)], "Works")
end proc

oldProblematicExamples2 := proc()
    checkWeifeng((x - 7)*(x - 71/10), [
        (x - 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25),
        (-x + 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25)],
        x, "PASSED");
    checkWeifeng((x - 7)*(x - 71/10), [
        (x - 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25),
        (-x + 118/25)^3*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25)
        ], x, "FAILS");
    checkWeifeng((x - 10)*(x - 15), [
        (x - 118/25)*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25),
        (-x + 118/25)^3*(x - 657/100)*(x - 89/10)*(x - 413/20)*(x - 561/25)
        ], x, "PASSED")
end proc

leftStrictPositiveBenchmark := proc(num_iterations, basisGeneratorFunc)
local
i, intervals1, basis1, isolated_points1, archimedean_poly1, f1, benchmarks;
    benchmarks := [];
    for i to num_iterations do
        intervals1 := intervalsGenerator(x, 3, 1, 10, 100);
        basis1 := basisGeneratorFunc(x, intervals1);
        isolated_points1 := getIsolatedPoints(intervals1);
        archimedean_poly1 :=
            getArchimedeanPolynomial(x, isolated_points1, 2);
        f1 := strictlyLeftPolynomial(x, isolated_points1, 10);
        benchmarks := [op(benchmarks), [f1, basis1, archimedean_poly1]]
    end do;
    return benchmarks
end proc

rightStrictPositiveBenchmark := proc(num_iterations, basisGeneratorFunc)
local i, test_name1, intervals1, basis1, isolated_points1,
archimedean_poly1, f1, benchmarks;
    benchmarks := [];
    for i to num_iterations do
        intervals1 := intervalsGenerator(x, 3, 1, 10, 100);
        basis1 := basisGeneratorFunc(x, intervals1);
        isolated_points1 := getIsolatedPoints(intervals1);
        archimedean_poly1 :=
            getArchimedeanPolynomial(x, isolated_points1, 2);
        f1 := strictlyRightPolynomial(x, isolated_points1, 10);
        benchmarks := [op(benchmarks), [f1, basis1, archimedean_poly1]]
    end do;
    return benchmarks
end proc

Warning, (in productGensBenchmark) `random_point` is implicitly declared local
|benchmarking.mpl:207|
productGensBenchmark := proc(num_iterations, basisGeneratorFunc)
local i, test_name1, intervals1, basis1, isolated_points1,
archimedean_poly1, f1, benchmarks, random_point;
    benchmarks := [];
    for i to num_iterations do
        random_point := genRandomPoint(1, 10, 100);
        basis1 := [x - random_point, -x + random_point];
        isolated_points1 := [random_point];
        archimedean_poly1 :=
            getArchimedeanPolynomial(x, isolated_points1, 2);
        f1 := basis1[1]*basis1[2] + 35;
        benchmarks := [op(benchmarks), [f1, basis1, archimedean_poly1]]
    end do;
    return benchmarks
end proc

archimedeanBenchmark := proc(num_iterations, basisGeneratorFunc)
local i, test_name1, intervals1, basis1, isolated_points1,
archimedean_poly1, f1, benchmarks;
    benchmarks := [];
    for i to num_iterations do
        intervals1 := intervalsGenerator(x, 3, 1, 10, 100);
        basis1 := basisGeneratorFunc(x, intervals1);
        isolated_points1 := getIsolatedPoints(intervals1);
        archimedean_poly1 :=
            getArchimedeanPolynomial(x, isolated_points1, 2);
        f1 := archimedean_poly1 + 10;
        benchmarks := [op(benchmarks), [f1, basis1, archimedean_poly1]]
    end do;
    return benchmarks
end proc

natGensBenchmark := proc(num_iterations, basisGeneratorFunc, maxtime)
local i, test_name1, test_name2, test_name3, test_name4, intervals1, basis1,
isolated_points1, nat_gens;
    for i to num_iterations do
        intervals1 := intervalsGenerator(x, 3, 1, 10, 100);
        basis1 := basisGeneratorFunc(x, intervals1);
        print("Basis", basis1);
        isolated_points1 := getIsolatedPoints(intervals1);
        nat_gens := gen_nat_gens(basis1, x);
        test_name1 := cat("Batch: ", convert(i, string), " Test Weifeng");
        try
            map(f1 ->
                timelimit(maxtime, checkWeifeng(f1, basis1, x, test_name1))
                , nat_gens);
            printf(">> Succeeds Weifeng %s\n", test_name1)
        catch: printf(">> Timeout Weifeng %s\n", test_name1)
        end try
    end do
end proc

natGensBenchmark2 := proc(x, num_points)
local
i, _p, pos_isolated_points, isolated_points, basis_poly, basis, tempPoly;
    pos_isolated_points := [seq(i, i = 1 .. num_points)];
    isolated_points := sort(
        [op(map(p -> -p, pos_isolated_points)), op(pos_isolated_points)]);
    basis_poly := mul(_p, _p in map(p -> x - p, isolated_points));
    basis := [-basis_poly, basis_poly];
    printf("\n>> Start benchmark\n");
    try
        checkWeifeng(x + num_points, basis, x,
            "Left Natural Generator Test")
    catch: printf(">> Timeout Weifeng %s\n", "Left Natural Generator Test")
    end try;
    for i to 2*num_points - 1 do
        tempPoly := (x - isolated_points[i])*(x - isolated_points[i + 1]);
        try
            checkWeifeng(tempPoly, basis, x, cat(
                "In between Natural Generator Test ", convert(i, string)))
        catch:
            printf(">> Timeout Weifeng %s\n", cat(
                "In between Natural Generator Test ", convert(i, string)))
        end try
    end do;
    try
        checkWeifeng(-x + num_points, basis, x,
            "Right Natural Generator Test")
    catch:
        printf(">> Timeout Weifeng %s\n", "Right Natural Generator Test")
    end try
end proc

runBenchmark := proc(benchmarks, num_iterations, maxtime)
local i, test_name1;
    printf("\n>> Start benchmark\n");
    for i to num_iterations do
        test_name1 :=
            cat("Batch: ", convert(i, string), " Test 1 - Weifeng");
        try
            timelimit(maxtime, checkWeifeng(benchmarks[i][1],
                benchmarks[i][2], x, test_name1));
            printf(">> Succeeds Weifeng %s\n", test_name1)
        catch: printf(">> Timeout Weifeng %s\n", test_name1)
        end try;
        test_name1 := cat("Batch: ", convert(i, string),
            " Test 1 - RealCertify without Archimedean polynomial");
        try
            timelimit(maxtime, checkRealCertify(benchmarks[i][1],
                benchmarks[i][2], test_name1));
            printf(">> Succeeds RealCertify %s\n", test_name1)
        catch: printf(">> Timeout RealCertify %s\n", test_name1)
        end try;
        test_name1 := cat("Batch: ", convert(i, string),
            " Test 1 - RealCertify with Archimedean polynomial");
        try
            timelimit(maxtime, checkRealCertify(benchmarks[i][1],
                [op(benchmarks[i][2]), benchmarks[i][3]], test_name1));
            printf(">> Succeeds RealCertify %s\n", test_name1)
        catch: printf(">> Timeout RealCertify %s\n", test_name1)
        end try
    end do
end proc

runBenchmark1 := proc()
    natGensBenchmark2(x, 1);
    natGensBenchmark2(x, 2);
    natGensBenchmark2(x, 3);
    natGensBenchmark2(x, 4);
    natGensBenchmark2(x, 5);
    natGensBenchmark2(x, 6);
    natGensBenchmark2(x, 7)
end proc

runBenchmark2 := proc()
local num_iterations, max_time;
    num_iterations := 100;
    max_time := 300;
    runBenchmark(
        archimedeanBenchmark(num_iterations, linearBasisNoBoundedPoly),
        num_iterations, max_time)
end proc

simple_test := proc()
    checkWeifeng(-(x - 1)^2, [x - 1, -x + 1], x, "PASSED");
    checkWeifeng(x + 2, [x - 1, -x + 1], x, "PASSED");
    checkWeifeng(x + 100, [x - 1, -x + 1], x, "PASSED")
end proc

example_11_paper := proc()
    checkWeifeng(-26*x^7 + 13*x^6 + 87*x^5 + 49*x^4 - 464*x^3 + 1512*x^2
         - 2211*x + 1092,
        [x*(x - 1/2)*(x - 1)^2*(x - 2), -x*(x - 1)*(x - 2)], x, "PASSED")
end proc

problematic_case := proc()
    checkWeifeng(-x^2 + 4848041/10000, [(x - 241/25)*(x - 329/20)*
        (x - 478/25)*(x - 1979/100)*(x - 2079/100), (-x + 241/25)*
        (x - 329/20)*(x - 478/25)*(x - 1979/100)*(x - 2079/100)], x, "??");
    checkRealCertify(-x^2 + 4848041/10000, [(x - 241/25)*(x - 329/20)*
        (x - 478/25)*(x - 1979/100)*(x - 2079/100), (-x + 241/25)*
        (x - 329/20)*(x - 478/25)*(x - 1979/100)*(x - 2079/100)], x, "??")
end proc

realcertify_problematic_example := proc()
    checkRealCertify(-x^2 + 845306/625, [-x^2 + 839056/625, (x - 61/25)*
        (x - 483/50)*(x - 1013/100)*(x - 1539/100)*(x - 1027/50)*
        (x - 866/25)*(x - 891/25), -(x - 61/25)*(x - 483/50)*(x - 1013/100)
        *(x - 1539/100)*(x - 1027/50)*(x - 866/25)*(x - 891/25)], x, "??")
end proc


>> Start

>> Start benchmark

>> Test
Batch: 1 Test 1 - Weifeng
>> input polynomial
-x^2+146126/625
>> basis
[(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25), -(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25)]
>> Time taken
1.215000
">> Sums of squares multipliers", [-x^2+146126/625-283/530981*x^2*(x-851/100)*(
x-99/10)*(x-249/25)*(x-274/25)*(x-324/25)+283/530981*(x+1)^2*(x-851/100)*(x-99/
10)*(x-249/25)*(x-274/25)*(x-324/25), 283/530981*x^2, 283/530981*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 1 Test 1 - Weifeng

>> Test
Batch: 1 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+146126/625
>> basis
[(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25), -(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -9.035979
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 1 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 1 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+146126/625
>> basis
[(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25), -(x-851/100)*(x-99/10)*(x-249/25)*(x-274/25)*(x-324/25), -x^2+139876/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.042772
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13661
time= 0.120000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [146126/625*(1/11258999068426240000*
41751441550523133059437155431899436907^(1/2)+
32580958571584091562975945161125967023/
96272269623867917204508242298384668822923390702231486464000*x*
41751441550523133059437155431899436907^(1/2)-\
12042508654829991811351464391560050245919442059159655658449552078554891/3493796\
2072733350767259725466603433381563681835319296000000000000000000000000000000000\
000000*x^2*41751441550523133059437155431899436907^(1/2)-\
2230441163172465291601821320599815284848546462510622192426300538353/14345686081\
6281910545391205397821469341104314777600000000000000000000000000000000000000000\
0*x^3*41751441550523133059437155431899436907^(1/2))^2+146126/625*(1/
134161774359296066946277345791757184185204538247626096640000000000000000000000*
x*12990036668206456574610941955606486511724231743518256445744911768658949528064\
2999838852824578873975354235351412759402334354473123756124933573939030987010^(1
/2)-444240523626990843052239147939633714310291571266505472581659590045304791366\
30058543766965201431779119667777227/4875160358205306434486112933037923230313846\
8361348466967328058598835885179536061336492979145800740298376334488796662345896\
953497766550330355678405021937482755819438080000000000000000000000000*x^2*12990\
0366682064565746109419556064865117242317435182564457449117686589495280642999838\
852824578873975354235351412759402334354473123756124933573939030987010^(1/2)-533\
1774515037935287244433377712206451187774207278053235377876419111116213245589204\
22238712007666676429456039/1601410407414523827760517777711155544222552099793826\
1599111361515022121242063225874599065183461092032369763460727316101193858504939\
534482960407890731649392799907840000000000000000000000000*x^3*12990036668206456\
5746109419556064865117242317435182564457449117686589495280642999838852824578873\
975354235351412759402334354473123756124933573939030987010^(1/2))^2+146126/625*(
1/15621266678733811863124187835851590511357874268675526283107180899121900928541\
1603270942115804693322278655825676318124605106972262400000000000000000000000000\
0000000000000*x^2*1831384382523527890733289895408067479010871233552191338430670\
5874497385954047293649176074102434953185093376618242249503457363515507786227708\
6326716278958605977210496854058979875929625292826263171591016670846018833254799\
9693146522393254632640898315432377982910690881776520585565730660061470417739018\
552788719058218709911824381115938^(1/2)-438503602036970121127379302484890996990\
6897887623203741107298234299756562619839367660495910580962100296162241255635015\
8641591519987213097798696397335805435336588818831138674592964585494439298737643\
6868620249/86125519393878775755097289290227999363977481095206489825977013114115\
0547994173631638665103985663637105151305383699422392418764403208526136269097535\
2111991301861343829802709480007553790347762601939396442945670969334732415621896\
0064767779020222573689485025647584842954661684252500804437907108044953456029616\
0623328500509050738194532794368000000000000000000000000000000000000000000*x^3*
1831384382523527890733289895408067479010871233552191338430670587449738595404729\
3649176074102434953185093376618242249503457363515507786227708632671627895860597\
7210496854058979875929625292826263171591016670846018833254799969314652239325463\
2640898315432377982910690881776520585565730660061470417739018552788719058218709\
911824381115938^(1/2))^2+212820338687007106026673617761953174954184788770795290\
4531612774787778872895781017425147939860362877219572840710770711442509816638249\
1359158529617409020275274813107392167168720498177428987140023948970979034569138\
0659653531775564835131665279958487325129764282053382349677842590546694004560161
/199467759319265453666015688824464132741497744346531843956743245822105631386400\
0549930295721572915032735072946619861615410159792467809243619616199064383745093\
8614519015261197812612470339354208606769502894645080900557336782586100923019925\
913600000000000000000000000000000000000000000000000000000000000*x^6, 
461541892272466822891917724774181727/6338253001141147007483516026880000]
>> Degree size
6
>> Succeeds RealCertify Batch: 1 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 2 Test 1 - Weifeng
>> input polynomial
-x^2+7341481/10000
>> basis
[(x-383/100)*(x-113/25)*(x-1193/100)*(x-2379/100)*(x-2491/100), -(x-383/100)*(x-113/25)*(x-1193/100)*(x-2379/100)*(x-2491/100)]
>> Time taken
1.236000
">> Sums of squares multipliers", [-x^2+7341481/10000-4657/5327317*x^2*(x-383/
100)*(x-113/25)*(x-1193/100)*(x-2379/100)*(x-2491/100)+4657/5327317*(x+1)^2*(x-\
383/100)*(x-113/25)*(x-1193/100)*(x-2379/100)*(x-2491/100), 4657/5327317*x^2, 
4657/5327317*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 2 Test 1 - Weifeng

>> Test
Batch: 2 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+7341481/10000
>> basis
[(x-383/100)*(x-113/25)*(x-1193/100)*(x-2379/100)*(x-2491/100), -(x-383/100)*(x-113/25)*(x-1193/100)*(x-2379/100)*(x-2491/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.865229
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 2 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 2 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+7341481/10000
>> basis
[(x-383/100)*(x-113/25)*(x-1193/100)*(x-2379/100)*(x-2491/100), -(x-383/100)*(x-113/25)*(x-1193/100)*(x-2379/100)*(x-2491/100), -x^2+7241481/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.013624
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14642
time= 0.120000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [7341481/10000*(1/225179981368524800000*
14573600952443302863380011054533510897535^(1/2)-\
3234316898827944020282560579123246444697/
430136779203346198512551091779166777591722861349687311466496000*x*
14573600952443302863380011054533510897535^(1/2)-\
65918382627453437808101696219799449317683647861268755240220527344371758069041/
1129331943484268636513515270409348878927538088750015647318016000000000000000000\
0000000000000000000000*x^2*14573600952443302863380011054533510897535^(1/2)+
59439269909310636752344391754154217309936163656147537245779779435887/5826852256\
6468363256962609803021872259232518530662400000000000000000000000000000000000000\
00000*x^3*14573600952443302863380011054533510897535^(1/2))^2+7341481/10000*(1/
1806931109574829818421624432654958206284060942000025035708825600000000000000000\
00000*x*69919341623132873678402320723705163063759983710422142990161556046600546\
0608820447714719924683349568895342756132717355162178950542310521608935013333311\
79593135640974^(1/2)+4545435208817246222323001869313600644458961029850901861040\
5692796150929237254880591897623854149469957796493125328028387/40305756272631247\
4705273659818964849472990090176325194377995277786230668450337295407579033063669\
0028548043162155400643815632506096342739579262777509333782439802280517768948944\
67973120000000000000000000000000*x^2*699193416231328736784023207237051630637599\
8371042214299016155604660054606088204477147199246833495688953427561327173551621\
7895054231052160893501333331179593135640974^(1/2)-23842756939878807774381361219\
5192445000034451798913448350471134988259688337090056865295633153860496067413239\
5289/31193975550950612218037110865685130452637901158710130271615253926953402030\
4945418592511753251264507410639621419354858977459764256658866643224022750541331\
080308830097658347520000000000000000000000000*x^3*69919341623132873678402320723\
7051630637599837104221429901615560466005460608820447714719924683349568895342756\
13271735516217895054231052160893501333331179593135640974^(1/2))^2+7341481/10000
*(1/442594394475845208317639009540085954970842678587045304770347253190085822283\
3124560420728727955880647629063163619758752317053011728665800563752960000000000\
000000000000000000000000000000*x^2*49816175786414011376722773671343333235164208\
5492026584014280105921974653849613499333780082803298838577389388475649574287882\
0009704372939642026135281683165098134569338326208715542518461133328764812298548\
9281573983704754597786410628823390993674976987249931266712158457678017868322345\
8365347649593926806831205833993510557195259055417514486599095393573111707289190
^(1/2)-245182940756294269131789806924687059705435959120054937449268359081163552\
4153267988149026642782280762149836101888451403441024865989551135287011671909375\
93620333870339212246281639379329653161467219812864745793112728226594983/1044514\
7285662606383717935861978758993988460748236489402642986007421631527254020771903\
2064857318086053415372040059893946456144868560516473115417674434041000552939761\
8817198411512938829889354976189380233782599664785309975977924060875699823034501\
3614356928425576463949063248170821288311691390083881110368546802208028017757007\
8850075204412058668440376450690399638388736000000000000000000000000000000000000\
0000000*x^3*4981617578641401137672277367134333323516420854920265840142801059219\
7465384961349933378008280329883857738938847564957428788200097043729396420261352\
8168316509813456933832620871554251846113332876481229854892815739837047545977864\
1062882339099367497698724993126671215845767801786832234583653476495939268068312\
05833993510557195259055417514486599095393573111707289190^(1/2))^2+9363979223475\
0111882101007942234318662887917549133203212646376157374657624429164127099986656\
8182525337769689132229864383650286045895053060106984717179062709023521712695172\
6263815325115967658646628007499340835616033750202067665221489341631126971666672\
89561395634948961496856173154076399845085152490023522520950722481/1295431176186\
9368046976202325177262747408736865524888402515631739959527996456458173949270755\
7150758301934407028197354889157265116618765160770159911175828172333861311622560\
9802720865220648056640808114443780007600610628915297241491012147393174638804183\
013122589589504000000000000000000000000000000000000000000000000000000000000*x^6
, 44278602222714940232589653834642518081/202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 2 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 3 Test 1 - Weifeng
>> input polynomial
-x^2+1889/4
>> basis
[(x-271/100)*(x-873/100)*(x-219/25)*(x-251/20)*(x-39/2), (-x+271/100)*(x-873/100)*(x-219/25)*(x-251/20)*(x-39/2)]
>> Time taken
1.269000
">> Sums of squares multipliers", [-x^2+1889/4-370/1996303*x^2*(x-271/100)*(x-\
873/100)*(x-219/25)*(x-251/20)*(x-39/2)-370/1996303*(x+1)^2*(-x+271/100)*(x-873
/100)*(x-219/25)*(x-251/20)*(x-39/2), 370/1996303*x^2, 370/1996303*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 3 Test 1 - Weifeng

>> Test
Batch: 3 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1889/4
>> basis
[(x-271/100)*(x-873/100)*(x-219/25)*(x-251/20)*(x-39/2), (-x+271/100)*(x-873/100)*(x-219/25)*(x-251/20)*(x-39/2)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -4.579217
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 3 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 3 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1889/4
>> basis
[(x-271/100)*(x-873/100)*(x-219/25)*(x-251/20)*(x-39/2), (-x+271/100)*(x-873/100)*(x-219/25)*(x-251/20)*(x-39/2), -x^2+1849/4]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.021177
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13755
time= 0.124000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [1889/4*(1/18014398509481984000*
93003409187561312952580627128152272063^(1/2)+
55987725193446495270464645891736697461/
857805043632715557157329095117725625734351308167686651904000*x*
93003409187561312952580627128152272063^(1/2)-\
33565175978022356967319870807175474339389932174745818035480573961935467/3018218\
5162272298475172271219592237975675419366522880000000000000000000000000000000000\
0000000*x^2*93003409187561312952580627128152272063^(1/2)-\
723526157752956630566696394940637971017826477109079986805876214642637/511291649\
1226646644814783901677880440559096981094400000000000000000000000000000000000000\
000000*x^3*93003409187561312952580627128152272063^(1/2))^2+1889/4*(1/
30906557606166833638576405728862451687091629431319429120000000000000000000000*x
*327876999700533355639901506147110516766672418398679027691862950230510751019806\
9681240463619328021850881570875042857902729654183246639506648680158451894^(1/2)
-236025845105488421152575230421871744632386820626405656846135077017508345371930\
50600355441918315135289998031707/3691566834186695622604918938830065197149107518\
8786596768320840965924305948022396061632262194834040018461617494203242356667878\
857595703218556517330753900299573327298560000000000000000000000000*x^2*32787699\
9700533355639901506147110516766672418398679027691862950230510751019806968124046\
3619328021850881570875042857902729654183246639506648680158451894^(1/2)-84035055\
8508026490381218645916434157278748631638820435537428730338305312018039477820073\
7625438465374399700724787/12006874869901036477122616177962901308249929378502109\
6106174296926754333374615988037410597631053648424260549435883917966843540339368\
978599688323176364194515922987253760000000000000000000000000*x^3*32787699970053\
3355639901506147110516766672418398679027691862950230510751019806968124046361932\
8021850881570875042857902729654183246639506648680158451894^(1/2))^2+1889/4*(1/
3432299277936217860900361922213033001298603474852049202695083938377829411941486\
4826207587565991860427440271538008246555655536640000000000000000000000000000000\
0000000000*x^2*1082617651449707601237000401153654550851933505827074539036652118\
6809652100889520286509099442332452370991192766696866805528982957447734404784774\
4904286859419613908372867758195156412337710119703685846181529710183962706128398\
8576314345139715158602628367552853687353658034423214780114527494211163397114223\
2255382547625443829395051587^(1/2)-47953241052433446612708335276597604467149147\
8243297629185214294838524144817648353113746391995818508893098366409259889674452\
4708146162652843523021177017209891042916863469431076877627730721491735164270595\
99625139/2520594380528318074823366060840698154575753470722797475041342987689459\
3883996388835911897978771431548075208049699669717535697804741389090202701710772\
5260181909088441505864195541325163281954777824109098963865812756716623216005960\
6510160355083494246534589797309679585666949136101993829625971884984291729972924\
069174639192887794178460955443200000000000000000000000000000000000000000000*x^3
*108261765144970760123700040115365455085193350582707453903665211868096521008895\
2028650909944233245237099119276669686680552898295744773440478477449042868594196\
1390837286775819515641233771011970368584618152971018396270612839885763143451397\
1515860262836755285368735365803442321478011452749421116339711422322553825476254\
43829395051587^(1/2))^2+8946018601410245523097900761293457433843848404332798621\
3257081749574010379636046041158573792319435775770822689395941848561834280065342\
6382649309526194316988450146129073609038791927196692577350457001788743871331246\
8904182472423891088623850147402297916924083090929609126739474952163832929131016\
923/648263838549220364205183992021304899356456274992518192945139802305635400860\
5078830168932014256041112575869605126415544564020514017440191661506591100086181\
9405878144951681474105899582952765903784284170062235424673661588409282441291765\
090467535703244800000000000000000000000000000000000000000000000000000000*x^6, 
98518183280200056055007281110339041/1298074214633706907132624082305024]
>> Degree size
6
>> Succeeds RealCertify Batch: 3 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 4 Test 1 - Weifeng
>> input polynomial
-x^2+244394/625
>> basis
[(x-231/50)*(x-171/20)*(x-1309/100)*(x-438/25)*(x-463/25), (-x+231/50)*(x-171/20)*(x-1309/100)*(x-438/25)*(x-463/25)]
>> Time taken
1.125000
">> Sums of squares multipliers", [-x^2+244394/625-6538/9654931*x^2*(x-231/50)*
(x-171/20)*(x-1309/100)*(x-438/25)*(x-463/25)-6538/9654931*(x+1)^2*(-x+231/50)*
(x-171/20)*(x-1309/100)*(x-438/25)*(x-463/25), 6538/9654931*x^2, 6538/9654931*(
x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 4 Test 1 - Weifeng

>> Test
Batch: 4 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+244394/625
>> basis
[(x-231/50)*(x-171/20)*(x-1309/100)*(x-438/25)*(x-463/25), (-x+231/50)*(x-171/20)*(x-1309/100)*(x-438/25)*(x-463/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -5.089522
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 4 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 4 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+244394/625
>> basis
[(x-231/50)*(x-171/20)*(x-1309/100)*(x-438/25)*(x-463/25), (-x+231/50)*(x-171/20)*(x-1309/100)*(x-438/25)*(x-463/25), -x^2+238144/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.025575
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13954
time= 0.120000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [244394/625*(3/22517998136852480000*
18354217352658081916054356643659072157^(1/2)-\
967042340590002793344788907644084867/
21160971886107655497719873180077681715322981641441247232000*x*
18354217352658081916054356643659072157^(1/2)-\
557427901517763762253080160949554711497014788290357478310918990856022541/173391\
8900348266557581266618287084419511698297318277120000000000000000000000000000000\
000000000*x^2*18354217352658081916054356643659072157^(1/2)+
12599723358744316991217826544664242702713318101815412899997069689699/1513550654\
8481694815912155995424519812099682074624000000000000000000000000000000000000000\
0000*x^3*18354217352658081916054356643659072157^(1/2))^2+244394/625*(1/
295922158992770825827202836187662407596663176075652628480000000000000000000000*
x*33465860790356919195663557051115050949429524267179637675723530134531183423905\
0896126224973046555113062123755423607942781563566782223663889581686822675713^(1
/2)+152917351615901002315328566155367392845972250291282717402523511687287608080\
55980213511115938200146198482632009/3532425894962913610449459672356520202105001\
3266175977875299208822492834962927533546085482836134355666454215373187450648313\
5641454533654256775045125875221761674948116480000000000000000000000000*x^2*3346\
5860790356919195663557051115050949429524267179637675723530134531183423905089612\
6224973046555113062123755423607942781563566782223663889581686822675713^(1/2)-44\
8094982745710701191288397798341252382470793575146423834104080385708493564461270\
497727251937859048382809245389/505197483740276234548945913211305041237026259654\
4069845764045378944688619481479552910482151823478771615764617674111509966971889\
2966423213602100122194726075376928292864000000000000000000000000*x^3*3346586079\
0356919195663557051115050949429524267179637675723530134531183423905089612622497\
3046555113062123755423607942781563566782223663889581686822675713^(1/2))^2+
244394/625*(1/51610464247677025515814180903910724138395783793589374171122514192\
5125974733832838650391902277892561258233180766136642883882162585600000000000000\
00000000000000000000000000*x^2*447593113380656500364687197314330570785982415948\
0149246912567975436107647733334150166321500623979266940435125152715222199383019\
0267898627401368138936286417448424045125899044984903215468025048124671871357615\
3864876091544383779153683389783820489213345610293372013197829141238911374621253\
960761703855175345719260999872883704215422096677^(1/2)-193383141569116095122170\
0012952626158037903237553289858514854160112037303671118274994086102633158594685\
4650095608955388777764206420065731603656316483612870364569895460150160124467851\
9917923162800841680188367142017/53765531610469048255006492128348168399488862113\
8727230928505989478223252357411576280965233898603617278822255756415316228690876\
2643523927166755396867945375528180207980583656715964470187734670321576697610592\
6909625711394738914650559022531027890186796753282942054239082367901652256535325\
9298488770836103895411895355592892597274264307152491380736000000000000000000000\
0000000000000000000000*x^3*4475931133806565003646871973143305707859824159480149\
2469125679754361076477333341501663215006239792669404351251527152221993830190267\
8986274013681389362864174484240451258990449849032154680250481246718713576153864\
8760915443837791536833897838204892133456102933720131978291412389113746212539607\
61703855175345719260999872883704215422096677^(1/2))^2+3805862986735781696014240\
8626441867342782944496166186100921361769987107271766105914134053482162138324038\
9329322658631981432327625141353578906330935950842521704090087966544127638575965\
3296911637919477578073155252024187399579850555623912085470744292752288087991583\
581712849105402218445852578901178836383319/594879148295516882206418221428648212\
8908906235706823872468146250207475425708076123780079116006864307252614615808910\
7191607083392265585210021011069456834371696967625665910341387293926476126317218\
0201121232461077560346491509557569328082677164679834370048000000000000000000000\
000000000000000000000000000000000000000*x^6, 
5053414045049406239996331312322277413/25353012004564588029934064107520000]
>> Degree size
6
>> Succeeds RealCertify Batch: 4 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 5 Test 1 - Weifeng
>> input polynomial
-x^2+451
>> basis
[(x-139/100)*(x-59/10)*(x-857/100)*(x-1203/100)*(x-19), (-x+139/100)*(x-59/10)*(x-857/100)*(x-1203/100)*(x-19)]
>> Time taken
0.872000
">> Sums of squares multipliers", [-x^2+451-143/979681*x^2*(x-139/100)*(x-59/10
)*(x-857/100)*(x-1203/100)*(x-19)-143/979681*(x+1)^2*(-x+139/100)*(x-59/10)*(x-\
857/100)*(x-1203/100)*(x-19), 143/979681*x^2, 143/979681*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 5 Test 1 - Weifeng

>> Test
Batch: 5 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+451
>> basis
[(x-139/100)*(x-59/10)*(x-857/100)*(x-1203/100)*(x-19), (-x+139/100)*(x-59/10)*(x-857/100)*(x-1203/100)*(x-19)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -183.022487
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 5 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 5 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+451
>> basis
[(x-139/100)*(x-59/10)*(x-857/100)*(x-1203/100)*(x-19), (-x+139/100)*(x-59/10)*(x-857/100)*(x-1203/100)*(x-19), -x^2+441]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 10.000527
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 12779
time= 0.108000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [(1/1407374883553280000*
216850669189343326749873493053755922310^(1/2)-\
319067780129851130714337635133401343597/
125005899898389670944978474342605234220390570567957217280000*x*
216850669189343326749873493053755922310^(1/2)-\
654436911606783020623783860671086037183912208258246580825064608541/447055935496\
293321651143339905519131018128051404800000000000000000000000000000000000000*x^2
*216850669189343326749873493053755922310^(1/2)+
215357368514653756477085970415431941676106893295058546848828316807/372546612913\
57776804261944992126594251510670950400000000000000000000000000000000000000000*x
^3*216850669189343326749873493053755922310^(1/2))^2+(1/
286115798717627725856731737539532243851601952899072000000000000000000000*x*1403\
2019762941806671672033612713497408121662182192525974369561100500051755309490149\
8666500324565291245489854319819654912111237152791050602279870^(1/2)+81997050638\
2479072327480013591771768581501975551442325170355947339963618230103929935398311\
448443305115609/526621658130334634527826413743131426253817370917180911435101408\
6313813959015281856969563670706313069121538462435942880296073235751132353512718\
508046256439296000000000000000000000000*x^2*14032019762941806671672033612713497\
4081216621821925259743695611005000517553094901498666500324565291245489854319819\
654912111237152791050602279870^(1/2)-250404367797696798438196664806147193194761\
274192237247679528502371841814638434113672311317252352978304941639/315972994878\
2007807166958482458788557522904225503085468610608451788288375409169114181738202\
4237878414729230774615657281776439414506794121076311048277538635776000000000000\
000000000000*x^3*14032019762941806671672033612713497408121662182192525974369561\
1005000517553094901498666500324565291245489854319819654912111237152791050602279\
870^(1/2))^2+(1/222335734370415054258920543457784421315444949884594558092001053\
4477311890546843519904848405669224214181824874256793600000000000000000000000000\
000000000000*x^2*23107247005396175883703515900125338819045787404338403720989169\
6383638448099278228057418211126168230694753147621803949721651140084198868547060\
0677520703475563512317957478690263528422244099484382106133016739455234170660449\
0586632014573758278340755044265628028557531039629753778485097255217453957672986\
2735^(1/2)-57722439423161157717560621040733972341994968001662985115649150980100\
1035895140042490726244900749323567625144680625805647869184475015109818639327067\
521355560694625288061868940922291822484040527491/396979480755082043775882000605\
0173301148836753128086899939727694678754416298373402845763307926863522512592511\
3148325623124797991309953070793041117707455161835282306082097973195072780419544\
8575664344356316871231344760332457105297429523548741131232236271618878222199478\
8586897085036845381533204663649772293576458240000000000000000000000000000000000\
0000000*x^3*2310724700539617588370351590012533881904578740433840372098916963836\
3844809927822805741821112616823069475314762180394972165114008419886854706006775\
2070347556351231795747869026352842224409948438210613301673945523417066044905866\
320145737582783407550442656280285575310396297537784850972552174539576729862735^
(1/2))^2+1315113788469672830436297042416425259862874502792710168165425006495688\
2411836762964230627509443861378623368630433174869428514996646896584884006454008\
5820666856866982902066406174387023692724487170316621245378230454577824098391629\
72148602060789074586543429711538260133041/1591442296412594781695560545483487472\
6229064010900721438430322954318817141835370285746442902671109141110486642823819\
1485452274967285590408643989317945243741837019052806440105262384132960820044636\
5007963036933603241502915428352000000000000000000000000000000000000000000000000\
00000*x^6, 19190389594376799062442264107025/316912650057057350374175801344]
>> Degree size
6
>> Succeeds RealCertify Batch: 5 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 6 Test 1 - Weifeng
>> input polynomial
-x^2+174569/400
>> basis
[(x-277/100)*(x-807/100)*(x-1009/100)*(x-1281/100)*(x-1763/100)*(x-373/20)*(x-393/20), -(x-277/100)*(x-807/100)*(x-1009/100)*(x-1281/100)*(x-1763/100)*(x-373/20)*(x-393/20)]
>> Time taken
1.203000
">> Sums of squares multipliers", [-x^2+174569/400-100/11105061*x^2*(x-277/100)
*(x-807/100)*(x-1009/100)*(x-1281/100)*(x-1763/100)*(x-373/20)*(x-393/20)+100/
11105061*(x+1)^2*(x-277/100)*(x-807/100)*(x-1009/100)*(x-1281/100)*(x-1763/100)
*(x-373/20)*(x-393/20), 100/11105061*x^2, 100/11105061*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 6 Test 1 - Weifeng

>> Test
Batch: 6 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+174569/400
>> basis
[(x-277/100)*(x-807/100)*(x-1009/100)*(x-1281/100)*(x-1763/100)*(x-373/20)*(x-393/20), -(x-277/100)*(x-807/100)*(x-1009/100)*(x-1281/100)*(x-1763/100)*(x-373/20)*(x-393/20)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.244172
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 6 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 6 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+174569/400
>> basis
[(x-277/100)*(x-807/100)*(x-1009/100)*(x-1281/100)*(x-1763/100)*(x-373/20)*(x-393/20), -(x-277/100)*(x-807/100)*(x-1009/100)*(x-1281/100)*(x-1763/100)*(x-373/20)*(x-393/20), -x^2+170569/400]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.022918
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 26465
time= 0.126000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [174569/400*(1/18014398509481984000000*
189739240883971078752534537976543044275323743^(1/2)+
3110155071488685606411508989942715312038101/
29167260144387854688913063913105941337768952695837839581406822400000*x*
189739240883971078752534537976543044275323743^(1/2)-\
17249841818957797767243417105277925063462044612880777516565022745088150863/4552\
3340429177672313352209218564549744662537901041351120650240000000000000000000000\
000000000000000*x^2*189739240883971078752534537976543044275323743^(1/2)-\
297152630924362076620466810198282485660423728136244035847010399341/101865479295\
5652392314970397149652987873494369996636160000000000000000000000000000000000000\
000*x^3*189739240883971078752534537976543044275323743^(1/2)+
623070061054606947268415019463245870954613439478915042937736930182561/104310250\
7986588049730529686681244659582458234876555427840000000000000000000000000000000\
000000000*x^4*189739240883971078752534537976543044275323743^(1/2))^2+174569/400
*(87/38846583832898280374060551866508415782112032342221952956288204800000000000\
00000000000*x*76280894525010525206743951569187548892714200668235634615549395047\
6605124885153859059790475046843668398566936003678486934711801117191373172334729\
5417064975233581430^(1/2)-12723935665189752371987163486372454355569179693916801\
8679915306651753017160768686209223939691453682315268251181315303207/24906549091\
4785994597825731845910264800965994264677541587769500873950536951776453164033136\
5756867211168288520763578700933815696530452070355613086516573628580818279153754\
40067297280000000000000000000000000*x^2*762808945250105252067439515691875488927\
1420066823563461554939504766051248851538590597904750468436683985669360036784869\
347118011171913731723347295417064975233581430^(1/2)-210603725056473866883533219\
0054913346874450754987550458870141505866198724247166785256307946696698718558902\
2677313/35668631159424925759703288076048763640876386166025689209964183342109787\
0973334975230472100681803070872876702158398498721682500405348611488238617182399\
742878291431920007905280000000000000000000000000*x^3*76280894525010525206743951\
5691875488927142006682356346155493950476605124885153859059790475046843668398566\
9360036784869347118011171913731723347295417064975233581430^(1/2)+34525465984865\
6603671180707294841222237194533295873511628516480890672822316293201689668170554\
662058898134645366617/228279239420319524862101043686712087301608871462564410943\
7707733895026374229343841475021444363539653586410893813750391818768002594231113\
52472714996735835442106516428805059379200000000000000000000000000*x^4*762808945\
2501052520674395156918754889271420066823563461554939504766051248851538590597904\
750468436683985669360036784869347118011171913731723347295417064975233581430^(1/
2))^2+174569/400*(1/50350766376603314037490835264485325280722654936347979896941\
4428385795870505564025851132150860386100808059941274116806626628135038180392960\
000000000000000000000000000000000000*x^2*41475267354633007763752291873607262397\
0704495782068924461099082024221049185624136823262277652697436841978014673185506\
8701347486326755745566766142663402635695260815903836110972985707459433463573524\
2801073053981348515522144058087764907188711857169819818805584690261606657242820\
53930696963659088376284072459569460086675981421902048507460564144078^(1/2)+1529\
4819595209999669147665122475195178065986745590191409057565676786340972459892667\
3182619908605029560440078340184626328726034630413678388369554382844075185315374\
014162238256294111775599073193638327794726328967079/295923823218850475765770294\
1200042945059968417786693126475556053123972509304906938180323174327366656460214\
1099621270972683551988168086533845721144611136859084320547658537916217152543544\
2151360981920135397339513046392900627013120460256359822710815905341698487634008\
6050811392673765957870943101392630427873029050324323730451096205037512463926855\
4670080000000000000000000000000000000000000000*x^3*4147526735463300776375229187\
3607262397070449578206892446109908202422104918562413682326227765269743684197801\
4673185506870134748632675574556676614266340263569526081590383611097298570745943\
3463573524280107305398134851552214405808776490718871185716981981880558469026160\
665724282053930696963659088376284072459569460086675981421902048507460564144078^
(1/2)-1819582346955947888345241643476886199161621152390508404144011218890143537\
0894748948847557104761235385030392906327024755497584608000610826654820985907238\
641739360034875776992854313620232206164300094472042658207466673/378782493720128\
6089801859764736054969676759574766967201888711747998684811910280880870813663139\
0293202690740607515226845034946544855150763322523065102255179627930301002928532\
7579552557365953742056857773308594576699382912802576794189128140573069844358837\
3740641715310145038582622420426074807169782566947677477184415134374977403142448\
015953826374997770240000000000000000000000000000000000000000*x^4*41475267354633\
0077637522918736072623970704495782068924461099082024221049185624136823262277652\
6974368419780146731855068701347486326755745566766142663402635695260815903836110\
9729857074594334635735242801073053981348515522144058087764907188711857169819818\
8055846902616066572428205393069696365908837628407245956946008667598142190204850\
7460564144078^(1/2))^2+174569/400*(1/693093780518885257497385319719698979833548\
3991768966470688994621704066434973292895336923980692336592363542330971504970270\
2298543128865200818072397941628701812478942270867771243958830660801637139891765\
0021355783488324578164167965409280000000000000000000000000000*x^3*3789348735395\
6161868261630387278437216538058406950650692839548556937218733019213632893244511\
8277161429072997290549530107693706823356974190080035785860429788150661443736247\
7721213839475894122382099215612803178682419078110292941328160451268334165256276\
2660218406630134633822823919957265986894089638870002882898231132027018436489738\
3963144360448489980355475836079148794961190174589357911988549490945820404359337\
9868166282488621666826052268745341950812580496537572335490793232693854181100083\
47203084717173437212224345^(1/2)-1973186555178592487344201033378168018216351481\
9064915145547518968940227651605905809589933075301658639706551717641419994845657\
5478490739813272754532923133968758938367180025749062476520395073511432334693782\
2287713335880973328864446053243041351852645542434151235789300070437450434794454\
726267569/266651711761008707898353193590785150633607546793477576805032923017133\
0123915527420197500273256554922314270551178619849409678260291715486646124284023\
2430881351455526446945537736936728119802324565586324495142504572246934569251084\
6715427914352180595509920093057870550888972854827736404753008694525320624722374\
6127796769670797281074863337733975987159626892003197711484423169837283897872321\
1340454135230410663736975123872112277139539779424444494391920356350128941161539\
4484994761002544136482321452935074705788499789901527453060300800000000000000000\
00000000000*x^4*378934873539561618682616303872784372165380584069506506928395485\
5693721873301921363289324451182771614290729972905495301076937068233569741900800\
3578586042978815066144373624777212138394758941223820992156128031786824190781102\
9294132816045126833416525627626602184066301346338228239199572659868940896388700\
0288289823113202701843648973839631443604484899803554758360791487949611901745893\
5791198854949094582040435933798681662824886216668260522687453419508125804965375\
7233549079323269385418110008347203084717173437212224345^(1/2))^2+12553433305604\
0331069989579574478880832766278335048981748093979389382788224422691353187885870\
0585844988005966217269532840375085525254661764436723809098030300412525529338833\
9106871337867801948378078832375757863046768025665582006908219573198787245062495\
1026734205952988387422137979254557436404012889182514756801477551484991944725284\
5456173715985873024493356067567615353/46819112144414416028533672470436615732126\
8560589592552569219625570873460657604809071571758506868608686768644043920081431\
6789617515898841499696070841862739329643599646203205167744720438234641892746748\
3393410298987841987377040253283332099108032393060096980741137205208510501353158\
1686630301853360219673347514555317504595040665600000000000000000000000000000000\
0000000000000000000*x^8, 3674455522587129054579221574083962521/
126765060022822940149670320537600]
>> Degree size
8
>> Succeeds RealCertify Batch: 6 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 7 Test 1 - Weifeng
>> input polynomial
-x^2+8784809/10000
>> basis
[(x-23/10)*(x-137/20)*(x-229/25)*(x-1457/100)*(x-401/25)*(x-2747/100)*(x-2847/100), -(x-23/10)*(x-137/20)*(x-229/25)*(x-1457/100)*(x-401/25)*(x-2747/100)*(x-2847/100)]
>> Time taken
1.267000
">> Sums of squares multipliers", [-x^2+8784809/10000-35/17816677*x^2*(x-23/10)
*(x-137/20)*(x-229/25)*(x-1457/100)*(x-401/25)*(x-2747/100)*(x-2847/100)+35/
17816677*(x+1)^2*(x-23/10)*(x-137/20)*(x-229/25)*(x-1457/100)*(x-401/25)*(x-\
2747/100)*(x-2847/100), 35/17816677*x^2, 35/17816677*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 7 Test 1 - Weifeng

>> Test
Batch: 7 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+8784809/10000
>> basis
[(x-23/10)*(x-137/20)*(x-229/25)*(x-1457/100)*(x-401/25)*(x-2747/100)*(x-2847/100), -(x-23/10)*(x-137/20)*(x-229/25)*(x-1457/100)*(x-401/25)*(x-2747/100)*(x-2847/100)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.632606
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 7 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 7 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+8784809/10000
>> basis
[(x-23/10)*(x-137/20)*(x-229/25)*(x-1457/100)*(x-401/25)*(x-2747/100)*(x-2847/100), -(x-23/10)*(x-137/20)*(x-229/25)*(x-1457/100)*(x-401/25)*(x-2747/100)*(x-2847/100), -x^2+8684809/10000]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.011385
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 27793
time= 0.133000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [8784809/10000*(1/18014398509481984000000*
181632854881133360606982127237156294959532951^(1/2)-\
5562283839820917510095988388289534243808711/
95729565410556966428543454341689704533818460086873105228208537600000*x*
181632854881133360606982127237156294959532951^(1/2)-\
76982183715364005074074855702469594929650750433603769087288798929830731299109/
4210540033216414501089452334983649402503159871884197323322530201600000000000000\
00000000000000000000000*x^2*181632854881133360606982127237156294959532951^(1/2)
+2553898404331508391549062043050227531032894214581082942954867677951587/4992685\
8981989232078180028527366215865070314750679711744000000000000000000000000000000\
000000000000*x^3*181632854881133360606982127237156294959532951^(1/2)+
88797551009466041361460046367373663281097072096445959519795923372807671/6390637\
9496946217060070436515028756307290002880870031032320000000000000000000000000000\
0000000000000*x^4*181632854881133360606982127237156294959532951^(1/2))^2+
8784809/10000*(1/19248183008989323433551782102782397268585873700042044906617280\
92160000000000000000000000*x*52404226284188666042167517074438849787082354176965\
2720171759613196458277781980287794097148782183671729506547177559415752321872611\
5848244324062739316285388927126948221336070^(1/2)-21335485726066040755817219655\
8449733745109700152626110435531028492828997875905136697348066055237650602685870\
9308162470846281/31467687195481497147535994690922377538856588770717007325554149\
6551732003625443175668794818768502360730893340320534632700745568423472956761032\
9484138467874835131376752960301880247735812096000000000000000000000000000*x^2*
5240422628418866604216751707443884978708235417696527201717596131964582777819802\
8779409714878218367172950654717755941575232187261158482443240627393162853889271\
26948221336070^(1/2)-1732520751471285899089623873240337806633855060659253083929\
487243629652439261354881100359244311963230009136258479571/286564565676785889346\
3568274818257520577313748833196699033902697729519251930856328635441647220809110\
1891307170870499991587347515327694137553401414996891792048126503403411975197163\
52000000000000000000000000*x^3*524042262841886660421675170744388497870823541769\
6527201717596131964582777819802877940971487821836717295065471775594157523218726\
115848244324062739316285388927126948221336070^(1/2)+115016520732682761675463890\
0763437561179945025197520350515005957804449207011046923580098889119208716401949\
77788126461/1146258262707143557385427309927303008230925499533278679613561079091\
8077007723425314541766588883236440756522868348199996634939006131077655021360565\
9987567168192506013613647900788654080000000000000000000000000000*x^4*5240422628\
4188666042167517074438849787082354176965272017175961319645827778198028779409714\
8782183671729506547177559415752321872611584824432406273931628538892712694822133\
6070^(1/2))^2+8784809/10000*(1/198622037046144028478344479216752759541114884259\
4837080038228354008900546226265845962890420802602682621732558066198931960925480\
5876452311083746590720000000000000000000000000000000000000*x^2*1250174683555502\
7396704102318564869111974882581391264119618980302503773164105199354921125632027\
0612619347273806168269888582996745105854850726262083014076060879407417074978240\
8930578890757053266667100724093246775461612477835952306689263800018315933151858\
0081068767918191047330716516380539813840772420284042922270787266695651913751061\
12911633934353310177329043508766^(1/2)+6448001987168684871459413994769305037225\
2333945247719327281412516734133934476947133639999377662514323181965832216333889\
2248900035138586996971187185792213743976734027191362338508758767826011998111874\
5671075600418187932637669/43029955501949506477339016595216601851307966505592709\
4738185812299457079034156891998384461168600763524018487204937653419708199120254\
6152431573062958895143053765040751171618202300068228899738542991971514120982670\
3868199645485539494521618386903200721308778049746284071393885106497518622695861\
7489807351931122154124969161062724167278726780917645964047686997455557745442816\
000000000000000000000000000000000000000000*x^3*12501746835555027396704102318564\
8691119748825813912641196189803025037731641051993549211256320270612619347273806\
1682698885829967451058548507262620830140760608794074170749782408930578890757053\
2666671007240932467754616124778359523066892638000183159331518580081068767918191\
0473307165163805398138407724202840429222707872666956519137510611291163393435331\
0177329043508766^(1/2)-31775029165351411422580508804763837366135067551860931179\
8633138580317366760182389279696828202566574855620829015324915769029284218564967\
9559710660963760675437013791376767822630855376654045164028452508075322649028225\
82717705823/5507834304249536829099394124187725036967419712715866812648778397433\
0506116372082175793211029580897731074366362232019637722649487392590751124135205\
8738578310881925216149967129894408733299166533502972353807485781809512955462214\
9055298767153523609692327523590367524361138417293631682383705070303869534104718\
3635727996052616028693411677027957458683398103935674311391416680448000000000000\
00000000000000000000000000000*x^4*125017468355550273967041023185648691119748825\
8139126411961898030250377316410519935492112563202706126193472738061682698885829\
9674510585485072626208301407606087940741707497824089305788907570532666671007240\
9324677546161247783595230668926380001831593315185800810687679181910473307165163\
8053981384077242028404292227078726669565191375106112911633934353310177329043508\
766^(1/2))^2+8784809/10000*(1/3856986129765626888373539635322297228291105614280\
8829312428020293668737699486550347152732566144364206905053001125909436323555461\
3036700868299161672295840637699786895716797807849512236410901207525336504140563\
8149921509184666395878962337117791846400000000000000000000000000000000*x^3*7398\
1261023166021509409327636041113645497254465803705633331577980498463936995912075\
4671356761698340338966769927893882410747694001404669827017931379275866318726124\
0200842263355671041596260708126269908332488502055218676106143289477888298257619\
3432673527021929305997382333853305828942516780190151872946902757555467513886559\
7591731904105920054513662312548548858963075912262607189174970498833715044934340\
9637412186784292700627390171067284505269620149230051305723161239872163797818718\
3926438572584279317809389083067657959807676956326073313660698645^(1/2)-91042532\
6511785163824845753447280641051211323896014673638447984449354383851192952908509\
3451122783987134180563740894148020725522287954101997619082993711501609165199912\
9807984107778303771647031151561151158909562775520931582704576670795215675876335\
09353965581056158384084413932566777317548514589001303569573597/9916130344533627\
8009788316439626687328085932703249941588110804488875330885770982148333281405437\
2408461866662772286767295187543855204936352904921081621792436730067446318397701\
9014025735667829743890843864723186248578935468009234977319175285440156904193311\
6299718564790673176471359852904396459968946747128916086729348634939983259078870\
8561794506897682653183301418860548597900665596893598048837167061453063417787665\
0005238559276889527897094837763535288248983468699111224506772103262132489749697\
1720996172132226706096375379068433251042901008321809702214172672000000000000000\
0000000000000000*x^4*7398126102316602150940932763604111364549725446580370563333\
1577980498463936995912075467135676169834033896676992789388241074769400140466982\
7017931379275866318726124020084226335567104159626070812626990833248850205521867\
6106143289477888298257619343267352702192930599738233385330582894251678019015187\
2946902757555467513886559759173190410592005451366231254854885896307591226260718\
9174970498833715044934340963741218678429270062739017106728450526962014923005130\
5723161239872163797818718392643857258427931780938908306765795980767695632607331\
3660698645^(1/2))^2+16547823158465464365703534430747160461561321012025603995692\
9476655073825393765980458650544875763764112922986680236022627401902978951386356\
7888450817813107150952783304859560963145768805937892378442980551289583949726636\
9876778755512483147646161631185150769183481559050739586982237719815851067084808\
9381579144454359018973282608279594783800635261958017056010051572884534584902920\
583249528493/100118636749944410170165464720131063992773531080019815031368803864\
4085204678371377569238442093069129659388345001367677372727439305625348713596806\
0948773704240251152672005873088221022274973439227060002994495407305098101845208\
0763898706845168324575699174506249350249763888354774590837608719406989587072236\
3898314287072994043361760607750109895065600000000000000000000000000000000000000\
0000000000000000*x^8, 513070414969527939475687414616739543929/
12676506002282294014967032053760000]
>> Degree size
8
>> Succeeds RealCertify Batch: 7 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 8 Test 1 - Weifeng
>> input polynomial
-x^2+1748969/2500
>> basis
[(x-621/100)*(x-103/10)*(x-536/25)*(x-1213/50)*(x-1263/50), (-x+621/100)*(x-103/10)*(x-536/25)*(x-1213/50)*(x-1263/50)]
>> Time taken
1.285000
">> Sums of squares multipliers", [-x^2+1748969/2500-485/2494126*x^2*(x-621/100
)*(x-103/10)*(x-536/25)*(x-1213/50)*(x-1263/50)-485/2494126*(x+1)^2*(-x+621/100
)*(x-103/10)*(x-536/25)*(x-1213/50)*(x-1263/50), 485/2494126*x^2, 485/2494126*(
x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 8 Test 1 - Weifeng

>> Test
Batch: 8 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1748969/2500
>> basis
[(x-621/100)*(x-103/10)*(x-536/25)*(x-1213/50)*(x-1263/50), (-x+621/100)*(x-103/10)*(x-536/25)*(x-1213/50)*(x-1263/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.093204
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 8 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 8 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1748969/2500
>> basis
[(x-621/100)*(x-103/10)*(x-536/25)*(x-1213/50)*(x-1263/50), (-x+621/100)*(x-103/10)*(x-536/25)*(x-1213/50)*(x-1263/50), -x^2+1723969/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.014297
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14195
time= 0.128000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [1748969/2500*(1/1801439850948198400000*
1167292864936285743393325713948134521154655^(1/2)+
3330070028092688203580242575919894582289/
1794396061545572758186336775649478290955214818940040553431040000*x*
1167292864936285743393325713948134521154655^(1/2)-\
20482943987128954923549589798479551995772667150178500873918058479757059449/2630\
5287860601851317856081945391401251296382360160997212160000000000000000000000000\
000000000000000*x^2*1167292864936285743393325713948134521154655^(1/2)-\
16549473835622733266776592112006783071619194548704628179680865024427/6684646239\
6739898554471760081107850780904845108838400000000000000000000000000000000000000\
00000*x^3*1167292864936285743393325713948134521154655^(1/2))^2+1748969/2500*(1/
3591548635900839433264617054944105984176999404907314819366912000000000000000000\
0000*x*275267978305556211568112911806857430275465099134661264626273120840598484\
4793092423063091339549713177110149165595886531353900090188372508500804207954979\
048545537094^(1/2)+129728045505617098582753921199115620331012594930561707091749\
182914637942196924977394499867568062596033292571549427/926806791659638704647115\
5419171550391773000734163555708068386523002548948390705509673987682893392420251\
2434609439276619290982561962584904573171509087829184008550139226908262400000000\
00000000000000000*x^2*275267978305556211568112911806857430275465099134661264626\
2731208405984844793092423063091339549713177110149165595886531353900090188372508\
500804207954979048545537094^(1/2)-105530938614288300300827659081518494212300630\
1811646644458635758591438978187300109258338979207470555610130021727/25775117995\
9878228796712234229711453465349446279331051402538478657336968722558213433481531\
6314552215168024601581346733282472926514912574069888638507619066724553653479276\
5440000000000000000000000000*x^3*2752679783055562115681129118068574302754650991\
3466126462627312084059848447930924230630913395497131771101491655958865313539000\
90188372508500804207954979048545537094^(1/2))^2+1748969/2500*(1/190701481671771\
7192257492830184982731461433391495984994581457263686322443386430837677578036324\
7968340527391789150776477608757322191994880000000000000000000000000000000000000\
000*x^2*14883459576979764933032076948738265864126355303611488333204325931594357\
8797129143614981900008514419200424279482950725151861257176191921173131602420798\
3203085677844388098390574570586563658239801351424545236395800352636678755120657\
7391048438863777567510617426434888666770960478645221879996989714498361370981700\
898360045266725644732588016106971155^(1/2)-427200716581820210658970434190481631\
6496668483217912081350990924193306619991999109638804201848668796371199771014392\
5919434586465902289033911125233155528075014463485901215387994690019818610265397\
91748421944832673787/7407368771307625536990338035948051446863253415686231105915\
7068160820994427276901197795074604992050292150423824895579375981138931092791171\
0404231047459303718771855038464586706414524532061477464186001820706868155137341\
3784530518913817733913947329783298566690703258868488968614156903961065143731449\
6052995498731526839355810631052937732569549155545907200000000000000000000000000\
00000000000000000*x^3*148834595769797649330320769487382658641263553036114883332\
0432593159435787971291436149819000085144192004242794829507251518612571761919211\
7313160242079832030856778443880983905745705865636582398013514245452363958003526\
3667875512065773910484388637775675106174264348886667709604786452218799969897144\
98361370981700898360045266725644732588016106971155^(1/2))^2+2406735169299406789\
6003002414751799041292551983901633670706606859723875678941907822655684297273577\
3074317159054312369822096285977754059175565550651936914297395361600521680982363\
1873550847392368855424522900380706604623037946977360163415137120683118940377314\
9925922805574241222241614566187936538093270539/29064667185299997221642741179650\
7035226305840844614257305149945859495727451124392101491726455381408388317923781\
4806997269058762700271181607709524976108576859005643675379833014251452654858249\
9706356193422079990664240066254210025055508400203345260707840000000000000000000\
00000000000000000000000000000000000000000*x^6, 
3431987584808456740367555849068421801/2028240960365167042394725128601600]
>> Degree size
6
>> Succeeds RealCertify Batch: 8 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 9 Test 1 - Weifeng
>> input polynomial
-x^2+1001/4
>> basis
[(x-117/100)*(x-7/5)*(x-477/100)*(x-27/2)*(x-29/2), -(x-117/100)*(x-7/5)*(x-477/100)*(x-27/2)*(x-29/2)]
>> Time taken
0.956000
">> Sums of squares multipliers", [-x^2+1001/4-781/326071*x^2*(x-117/100)*(x-7/
5)*(x-477/100)*(x-27/2)*(x-29/2)+781/326071*(x+1)^2*(x-117/100)*(x-7/5)*(x-477/
100)*(x-27/2)*(x-29/2), 781/326071*x^2, 781/326071*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 9 Test 1 - Weifeng

>> Test
Batch: 9 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1001/4
>> basis
[(x-117/100)*(x-7/5)*(x-477/100)*(x-27/2)*(x-29/2), -(x-117/100)*(x-7/5)*(x-477/100)*(x-27/2)*(x-29/2)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -9.206828
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 9 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 9 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1001/4
>> basis
[(x-117/100)*(x-7/5)*(x-477/100)*(x-27/2)*(x-29/2), -(x-117/100)*(x-7/5)*(x-477/100)*(x-27/2)*(x-29/2), -x^2+961/4]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.039964
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13460
time= 0.109000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [1001/4*(1/7205759403792793600*
14152388240662265419020135272755508331^(1/2)-\
34901246616232515947214650883175687069/
52213096781454678431896769829729513160459728774432502579200*x*
14152388240662265419020135272755508331^(1/2)-\
23971160596576105112070895656306834318336822969193330704607519008702311/4867586\
2958874677410655344463474343226868834815180800000000000000000000000000000000000\
000000*x^2*14152388240662265419020135272755508331^(1/2)+
223030074666381044451870466606403558975199336330149010447724026639/810453928719\
19209807950956482641264114000723968000000000000000000000000000000000000000000*x
^3*14152388240662265419020135272755508331^(1/2))^2+1001/4*(1/
4984408366988766966851107273059772746431368685074513920000000000000000000000*x*
1590968440946150007043225175547038941382978648576597016191289909491845195238064\
16273781876298415691398086682269801871828957733159778321191268020787210^(1/2)+
9519293431975240242979113894644674129536046351788790807194385270132350431222764\
959837241605145294965829453/372212201444327280119620834622344979325004324441826\
2057366982381894621260843105775045729714185330589674951224852845437750796722920\
95949623088874266175189091038003200000000000000000000000*x^2*159096844094615000\
7043225175547038941382978648576597016191289909491845195238064162737818762984156\
91398086682269801871828957733159778321191268020787210^(1/2)-4781711649883338754\
0303246057101661601492468236911267605675079431531409126789977986161352003392559\
74928696217/5726341560681958155686474378805307374230835760643480088256895972145\
5711705278550385318918679774316764230018843889929811550718814168607634321365271\
71925986015969280000000000000000000000000*x^3*159096844094615000704322517554703\
8941382978648576597016191289909491845195238064162737818762984156913980866822698\
01871828957733159778321191268020787210^(1/2))^2+1001/4*(1/231757036846650956914\
0453591771363707295465632386389505865433744586152215443810111217303202640639890\
1341939087227185056972800000000000000000000000000000000000000000*x^2*3191371245\
9277773477098560108517011814719515859615612493896068411476421879963497163309797\
5626674393878090810807285530712533431067247027458290861856767975944191509975364\
1455193950490733232425304334550010434576239625847581959209634950113201177588368\
26873305041307903782851274206307534916334311594975559253654085163939680394^(1/2
)-84315858329346473612704231929440323989763095784617099154056717308466025730614\
4216837014184008480387897006232846657158956773008011374425267168621540495969381\
012698571765837779740206076516343530296456337501839/438618724180946460364270466\
0312664857723709824960076249353363630408636897585345855686539252737189206230472\
4586733270814218709239695883509970344183375113374093352208161496662297173423175\
6298465564151658806174838297973588505455519619802713297779543355654802908111800\
2603714906713661502028908686409899599724014285682943122588551662796800000000000\
0000000000000000000000000000000*x^3*3191371245927777347709856010851701181471951\
5859615612493896068411476421879963497163309797562667439387809081080728553071253\
3431067247027458290861856767975944191509975364145519395049073323242530433455001\
0434576239625847581959209634950113201177588368268733050413079037828512742063075\
34916334311594975559253654085163939680394^(1/2))^2+5954977126581618903095056900\
1366174962685804319500863751780589811868226191773866804028748511256135259135371\
3436734239601914393744209997270169490426237735267998325875347771332315154502633\
3426723122586086633820979451767146826236651889482660244004234415076240397246357\
022036869086347483547/122958297906580103645150201978371573874005662787140691353\
4557406340264373646981514547781639286446300407754632404056689938772745069633612\
8794606962867277161389333555156294143687375127372345381362322489462761105688997\
2630735544703098562305664745472000000000000000000000000000000000000000000000000\
0*x^6, 58577710895847228517603227805637889/1298074214633706907132624082305024]
>> Degree size
6
>> Succeeds RealCertify Batch: 9 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 10 Test 1 - Weifeng
>> input polynomial
-x^2+3511409/10000
>> basis
[(x-9/4)*(x-547/100)*(x-1351/100)*(x-1647/100)*(x-1747/100), -(x-9/4)*(x-547/100)*(x-1351/100)*(x-1647/100)*(x-1747/100)]
>> Time taken
0.961000
">> Sums of squares multipliers", [-x^2+3511409/10000-1433/1436655*x^2*(x-9/4)*
(x-547/100)*(x-1351/100)*(x-1647/100)*(x-1747/100)+1433/1436655*(x+1)^2*(x-9/4)
*(x-547/100)*(x-1351/100)*(x-1647/100)*(x-1747/100), 1433/1436655*x^2, 1433/
1436655*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 10 Test 1 - Weifeng

>> Test
Batch: 10 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+3511409/10000
>> basis
[(x-9/4)*(x-547/100)*(x-1351/100)*(x-1647/100)*(x-1747/100), -(x-9/4)*(x-547/100)*(x-1351/100)*(x-1647/100)*(x-1747/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -5.668723
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 10 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 10 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+3511409/10000
>> basis
[(x-9/4)*(x-547/100)*(x-1351/100)*(x-1647/100)*(x-1747/100), -(x-9/4)*(x-547/100)*(x-1351/100)*(x-1647/100)*(x-1747/100), -x^2+3411409/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.028485
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14386
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [3511409/10000*(3/360287970189639680000*
5126122834244531942572114134380858579159^(1/2)+
39691630462824193167306258882029429533103/
945602760137075297851540305624852913003388639389167323709440000*x*
5126122834244531942572114134380858579159^(1/2)-\
5002629908580276794676540317059011003420045590248554287673918610352451662617/22\
2650039056923291914032501260226460408917390477954520186880000000000000000000000\
000000000000000000*x^2*5126122834244531942572114134380858579159^(1/2)-\
10752964705881643993514324183795080416661290455791785494910925595391/8806611971\
3436374240698321314980547223555728736256000000000000000000000000000000000000000\
000*x^3*5126122834244531942572114134380858579159^(1/2))^2+3511409/10000*(1/3799\
8939999048241819994880215078649243121901308237571445227520000000000000000000000
*x*6038304819352587583492354971851126628746783104277630654865724229045582560595\
1649899643236950636055855675398198249413244135374102639120492794557552487174301\
16683158^(1/2)+1881829543896972233737659638726108758287363780115822549041550724\
9173430095197687611351530733789065659289443761778211/30785781887983905967756819\
8089591467159298885403609143487163997208902032639908250224645885107745712394302\
3531800190662680553343646605837703649160382373775471530752811452004827136000000\
000000000000000000*x^2*60383048193525875834923549718511266287467831042776306548\
6572422904558256059516498996432369506360558556753981982494132441353741026391204\
9279455755248717430116683158^(1/2)-20034885184886148088877203498270385961236433\
5156160815289777884740301146669130506895495182803729147559873272451/25815000316\
9532834301480853772316781595884870122115345290162120297195793766913909327917968\
5848571321670149554485742920388136171315182237201543209265470389996202061132201\
984000000000000000000000000*x^3*60383048193525875834923549718511266287467831042\
7763065486572422904558256059516498996432369506360558556753981982494132441353741\
0263912049279455755248717430116683158^(1/2))^2+3511409/10000*(1/153963005604087\
6854948442520821192779139021391256665779004714035202061453629891898354653707077\
8592094015182498197562031390930030786143846400000000000000000000000000000000000\
00000*x^2*591299201409542022613793093792841931051419485674406881723431159123874\
7878812862208246050667763804018677676947121188916729176452283933020790325464271\
1612867504514412087824967274465597118424714028907518437263737474825372717899751\
7919312151597802623315201573911409143106974887070948511573372968908030169585181\
070288105066315912556098148959514462166366^(1/2)-109137737208982259502006446245\
0153153879038007787972620600998141427320751235041881133783142849005305887031424\
1594448484801204741886602904813162473087273793508678052360601391923260556687518\
0569959229047346508069727149173/32045561289651736144655315789916929877139855966\
5453383116653242314752583816916271149162512797533119404088273225724009413116468\
7895621051173367311323741855209396473593411675889162145053637173322300444041597\
0319265754523550080765647048828491204497319896502960217401525802409709312518472\
0191092223396140081979379574219376358202603512594971261961267327606456320000000\
00000000000000000000000000000000000*x^3*591299201409542022613793093792841931051\
4194856744068817234311591238747878812862208246050667763804018677676947121188916\
7291764522839330207903254642711612867504514412087824967274465597118424714028907\
5184372637374748253727178997517919312151597802623315201573911409143106974887070\
948511573372968908030169585181070288105066315912556098148959514462166366^(1/2))
^2+9251471864405623587364868936929405870162619176054731040384757424361129093163\
2070902987531379314358934778092230021431448281149125494172480063931367416277211\
0640587616249629246749722712571227746753906864749660959626842861791903100466010\
7027198951682364464058651463312964835850213653725706327524749218375547/41691258\
0459325068865394313877467931373184526093065460371822650496434662849811747350899\
2615139230384591337408252378795380419562073624987753705013747291986176344514217\
9752178397543107862513055410016932171231416359178790932933208200612780799892046\
6603861606400000000000000000000000000000000000000000000000000000000*x^6, 
16286520042236671844479902083790109089/50706024009129176059868128215040000]
>> Degree size
6
>> Succeeds RealCertify Batch: 10 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 11 Test 1 - Weifeng
>> input polynomial
-x^2+845306/625
>> basis
[(x-61/25)*(x-483/50)*(x-1013/100)*(x-1539/100)*(x-1027/50)*(x-866/25)*(x-891/25), -(x-61/25)*(x-483/50)*(x-1013/100)*(x-1539/100)*(x-1027/50)*(x-866/25)*(x-891/25)]
>> Time taken
1.128000
">> Sums of squares multipliers", [-x^2+845306/625-17/32417660*x^2*(x-61/25)*(x
-483/50)*(x-1013/100)*(x-1539/100)*(x-1027/50)*(x-866/25)*(x-891/25)+17/
32417660*(x+1)^2*(x-61/25)*(x-483/50)*(x-1013/100)*(x-1539/100)*(x-1027/50)*(x-\
866/25)*(x-891/25), 17/32417660*x^2, 17/32417660*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 11 Test 1 - Weifeng

>> Test
Batch: 11 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+845306/625
>> basis
[(x-61/25)*(x-483/50)*(x-1013/100)*(x-1539/100)*(x-1027/50)*(x-866/25)*(x-891/25), -(x-61/25)*(x-483/50)*(x-1013/100)*(x-1539/100)*(x-1027/50)*(x-866/25)*(x-891/25)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.703971
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 11 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 11 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+845306/625
>> basis
[(x-61/25)*(x-483/50)*(x-1013/100)*(x-1539/100)*(x-1027/50)*(x-866/25)*(x-891/25), -(x-61/25)*(x-483/50)*(x-1013/100)*(x-1539/100)*(x-1027/50)*(x-866/25)*(x-891/25), -x^2+839056/625]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.433141
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 11 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 12 Test 1 - Weifeng
>> input polynomial
-x^2+2254049/2500
>> basis
[(x-207/100)*(x-879/100)*(x-121/10)*(x-68/5)*(x-1393/50), -(x-207/100)*(x-879/100)*(x-121/10)*(x-68/5)*(x-1393/50)]
>> Time taken
1.303000
">> Sums of squares multipliers", [-x^2+2254049/2500-88/5461923*x^2*(x-207/100)
*(x-879/100)*(x-121/10)*(x-68/5)*(x-1393/50)+88/5461923*(x+1)^2*(x-207/100)*(x-\
879/100)*(x-121/10)*(x-68/5)*(x-1393/50), 88/5461923*x^2, 88/5461923*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 12 Test 1 - Weifeng

>> Test
Batch: 12 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+2254049/2500
>> basis
[(x-207/100)*(x-879/100)*(x-121/10)*(x-68/5)*(x-1393/50), -(x-207/100)*(x-879/100)*(x-121/10)*(x-68/5)*(x-1393/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.569371
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 12 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 12 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+2254049/2500
>> basis
[(x-207/100)*(x-879/100)*(x-121/10)*(x-68/5)*(x-1393/50), -(x-207/100)*(x-879/100)*(x-121/10)*(x-68/5)*(x-1393/50), -x^2+2229049/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.011093
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14462
time= 0.120000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [2254049/2500*(3/360287970189639680000*
4915990788604816888072333820962500195991^(1/2)+
1959245276199653842548811458773033595869/
544104143676639906465565743092599555399282285804852384628736000*x*
4915990788604816888072333820962500195991^(1/2)-\
24281830983175101158238079118086038087586446835430017649126707623750322747/2687\
5502067238673228744242069741621947643442124043793203200000000000000000000000000\
00000000000000*x^2*4915990788604816888072333820962500195991^(1/2)-\
654163376876800713051346366336931048703638224849048783400623653386249/162155671\
0233211238579647967495320902464635031833804800000000000000000000000000000000000\
00000000*x^3*4915990788604816888072333820962500195991^(1/2))^2+2254049/2500*(1/
3341776714189220168328426899643301106175550289252531086295040000000000000000000\
000*x*1946991880388400654930465007556206066217832688060437449154517960908875086\
3922809941176657749533200648147494228225423107031235600727838317547346814281018\
590843142^(1/2)-230469709134376399109324661262570285212755955472647521740299517\
5472519741079834398278118110594246693625032146106169/10831641767483660745655491\
4687253992400387980626790321982564662431056009903956497023944452744193055641551\
1520615112453155762859913672248853850468771533390287239472941977735004160000000\
000000000000000000*x^2*19469918803884006549304650075562060662178326880604374491\
5451796090887508639228099411766577495332006481474942282254231070312356007278383\
17547346814281018590843142^(1/2)-9825043128390666425705125121642348672721276233\
201818689508393132494712511461269434501499111844037376920059202583023/292784349\
2351960768871030683922581651495082353413382201431157775451811638268849279973455\
5978145082445538799701354128302390196277374725561940934452317578900645428119534\
588395520000000000000000000000000*x^3*19469918803884006549304650075562060662178\
3268806043744915451796090887508639228099411766577495332006481474942282254231070\
31235600727838317547346814281018590843142^(1/2))^2+2254049/2500*(1/368084497678\
8738098999250189210418337014634162478325017416644055161002850525097099850232537\
1518206095378541796189348042441882186484369326080000000000000000000000000000000\
000000000*x^2*18333714286600564762224446527860914354167881408117825880074047096\
7345942008682969414408039389243617590672247759728695043992439146346523573371599\
4218822291110666117742306466398023889805496432632107917973738955990389464762917\
6220371351735433704758090212300118852219481365471748217231467071335524166554259\
193411829015986991818647765033439365395183160866^(1/2)-828732061519677724778968\
0492839715202830256733170812874347025657239585877622225196158625061533582149522\
6061493014772486593343415422846488061521738038792510608108452532526382261986718\
680636286585667743942062732175433777/350568588307911454920272300106676381415688\
3729834909278285664274557986235785745715558618376058398292950829945582192853685\
0317287995667923308895623813804097072015618347320396859927298793967690703942976\
0814592225716127321349874746904740989529013993643018737107388832534015666460198\
1451953091918121192540903506280808939152749159887606460953756214740151464624128\
0000000000000000000000000000000000000000000*x^3*1833371428660056476222444652786\
0914354167881408117825880074047096734594200868296941440803938924361759067224775\
9728695043992439146346523573371599421882229111066611774230646639802388980549643\
2632107917973738955990389464762917622037135173543370475809021230011885221948136\
5471748217231467071335524166554259193411829015986991818647765033439365395183160\
866^(1/2))^2+123546488422213483579212477569414276381294726171534096058207876109\
5153078492483451434705344222628255453781086564403089490347071070539235621256224\
5609959590742447664093147005264766393030480832845649184859031289834579611788707\
6216181369438161372966149269513154266873547250365645587886749371320928585114983\
97469/3483360009413829338244619534679431801324291744611331448798301895461835525\
5206755144122673596843718371265996348781101497020084786021126683356093361944543\
4199387456377926038888734939896210028307382563412327143044343713071646925285370\
1395190551940081726804459520000000000000000000000000000000000000000000000000000\
00000000*x^6, 67731849557484261542057831610051020441/
202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 12 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 13 Test 1 - Weifeng
>> input polynomial
-x^2+14005441/10000
>> basis
[(x-163/50)*(x-39/4)*(x-1621/100)*(x-3529/100)*(x-3629/100), -(x-163/50)*(x-39/4)*(x-1621/100)*(x-3529/100)*(x-3629/100)]
>> Time taken
1.372000
">> Sums of squares multipliers", [-x^2+14005441/10000-191/996151*x^2*(x-163/50
)*(x-39/4)*(x-1621/100)*(x-3529/100)*(x-3629/100)+191/996151*(x+1)^2*(x-163/50)
*(x-39/4)*(x-1621/100)*(x-3529/100)*(x-3629/100), 191/996151*x^2, 191/996151*(x
+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 13 Test 1 - Weifeng

>> Test
Batch: 13 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+14005441/10000
>> basis
[(x-163/50)*(x-39/4)*(x-1621/100)*(x-3529/100)*(x-3629/100), -(x-163/50)*(x-39/4)*(x-1621/100)*(x-3529/100)*(x-3629/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.201634
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 13 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 13 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+14005441/10000
>> basis
[(x-163/50)*(x-39/4)*(x-1621/100)*(x-3529/100)*(x-3629/100), -(x-163/50)*(x-39/4)*(x-1621/100)*(x-3529/100)*(x-3629/100), -x^2+13905441/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.007141
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14831
time= 0.124000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [14005441/10000*(1/720575940379279360000*
130730444469954829682512359892945534373599^(1/2)-\
323350171936570525155414601201021886616061/
192924084142364390332613124756213389009601456947479817454878720000*x*
130730444469954829682512359892945534373599^(1/2)-\
77736284465533149200740742585371524188930492805140158643719719940880904802451/
8052548402353882996154974384900289783430163975930120593473536000000000000000000\
0000000000000000000000*x^2*130730444469954829682512359892945534373599^(1/2)+
782555343006928966396463137285956246486742582303471098113569557150501/718698218\
9952000615470600305356584079921299850474291200000000000000000000000000000000000\
00000000*x^3*130730444469954829682512359892945534373599^(1/2))^2+14005441/10000
*(1/103072619550129702350783672126723709227906098891905543596461260800000000000\
00000000000*x*12117467937889791122577132539497829309500748485821165536847921426\
1873088322477026959598112310069161886379762920626064887731775016729149906203369\
774763114497717216981382^(1/2)+799163393129019757205199388850529986099264195078\
54717375434263859501832150895881666811623417636052810784172205108273493/1746311\
1708721406677716064459315943725737928385541697667666032715981593467443600833998\
0624399985551370922848279019562584930205880971004798144852552772787249071419397\
688409333519393751040000000000000000000000000*x^2*12117467937889791122577132539\
4978293095007484858211655368479214261873088322477026959598112310069161886379762\
920626064887731775016729149906203369774763114497717216981382^(1/2)-208779436552\
7870853656160067892598473196021102198578552721807568867973729955808126262913296\
0682871695320766851464667/29925132740148186712948599549530975098728435702453121\
1851154694224593315711119999731499706835340153366263037250770575666865823157107\
592338968580944116425464768589974747801515458560000000000000000000000000*x^3*12\
1174679378897911225771325394978293095007484858211655368479214261873088322477026\
9595981123100691618863797629206260648877317750167291499062033697747631144977172\
16981382^(1/2))^2+14005441/10000*(3/1903138929591659854250777884317588717182933\
6742487962960447020820495981515466410107062993307722609186856827429929479983999\
5652605822669973975203840000000000000000000000000000000000000000*x^2*1595441780\
5521967377408028248670257817375147005516905069981914680477536988979051390597855\
0704584573719234990107107389847204518286325760098579490365233410397356723474316\
7291954717164286304916021078064687366729419711350465922067154169917145826040022\
6859662976618566864002834724560890131528667355143441119469597963294163168737734\
443841803092859461805406630996410654^(1/2)-566956400713724492009620970110325252\
0657181541878552443248731913875870779602780311250681911771001830562998942670638\
0771464228764993726086957775781176144290670447314678913807349898263192406540970\
343605810037206057754122442627/135271951257324097432252654784809044818228256898\
5713416196176955915208113307967602890037688292758987484697876518494312471542540\
4320677520289776961036128708129343211297852656754570813164767079023752596960255\
4506060805142723968714681341452287443182105390071854414103999841037645631152839\
6153049767639693868766552210325145517435570780638525832778873769931284049068315\
115520000000000000000000000000000000000000000000*x^3*15954417805521967377408028\
2486702578173751470055169050699819146804775369889790513905978550704584573719234\
9901071073898472045182863257600985794903652334103973567234743167291954717164286\
3049160210780646873667294197113504659220671541699171458260400226859662976618566\
8640028347245608901315286673551434411194695979632941631687377344438418030928594\
61805406630996410654^(1/2))^2+2082709937216165360296129033044742777547372359629\
6550125194670691456940381947515136677812262681522337650188291817077083194192456\
9989239696180206440797881630082364040531357361249242828914340321041228238752508\
8734371312922572931025569131534059007404661908629171370164053090939983888559962\
0462319970574677381526134162507/55823533105340879948377068104898003598158070364\
3176695672233188019684219569627418412068851727803717101155118122170569413824227\
5690833118936667395600245874076644584411812749447120656133063039932263012615320\
2705529322458844279070079995422588908831920798594405094129664000000000000000000\
000000000000000000000000000000000000000000*x^6, 
31258258558811988430686856357307569/81129638414606681695789005144064]
>> Degree size
6
>> Succeeds RealCertify Batch: 13 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 14 Test 1 - Weifeng
>> input polynomial
-x^2+4848041/10000
>> basis
[(x-241/25)*(x-329/20)*(x-478/25)*(x-1979/100)*(x-2079/100), (-x+241/25)*(x-329/20)*(x-478/25)*(x-1979/100)*(x-2079/100)]
>> Time taken
1.615000
">> Sums of squares multipliers", [-x^2+4848041/10000-(173/2283654+366/6538909*
(-500/399719741*x^6+42645/399719741*x^5-28605797/7994394820*x^4+1874370583/
31977579280*x^3-18468401616369/39971974100000*x^2+262677774611609/
199859870500000*x-21123258431789/99929935250000)^468)*x^2*(x-241/25)*(x-329/20)
*(x-478/25)*(x-1979/100)*(x-2079/100)-(173/2283654+366/6538909*(-500/399719741*
x^6+42645/399719741*x^5-28605797/7994394820*x^4+1874370583/31977579280*x^3-\
18468401616369/39971974100000*x^2+262677774611609/199859870500000*x-\
21123258431789/99929935250000)^468)*(x+1)^2*(-x+241/25)*(x-329/20)*(x-478/25)*(
x-1979/100)*(x-2079/100), (173/2283654+366/6538909*(-500/399719741*x^6+42645/
399719741*x^5-28605797/7994394820*x^4+1874370583/31977579280*x^3-18468401616369
/39971974100000*x^2+262677774611609/199859870500000*x-21123258431789/
99929935250000)^468)*x^2, (173/2283654+366/6538909*(-500/399719741*x^6+42645/
399719741*x^5-28605797/7994394820*x^4+1874370583/31977579280*x^3-18468401616369
/39971974100000*x^2+262677774611609/199859870500000*x-21123258431789/
99929935250000)^468)*(x+1)^2]
>> Degree size
2815
>> Succeeds Weifeng Batch: 14 Test 1 - Weifeng

>> Test
Batch: 14 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+4848041/10000
>> basis
[(x-241/25)*(x-329/20)*(x-478/25)*(x-1979/100)*(x-2079/100), (-x+241/25)*(x-329/20)*(x-478/25)*(x-1979/100)*(x-2079/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.479487
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 14 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 14 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+4848041/10000
>> basis
[(x-241/25)*(x-329/20)*(x-478/25)*(x-1979/100)*(x-2079/100), (-x+241/25)*(x-329/20)*(x-478/25)*(x-1979/100)*(x-2079/100), -x^2+4748041/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.020629
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14194
time= 0.124000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [4848041/10000*(1/1801439850948198400000*
1516590627006900745575419708686896255502135^(1/2)-\
64090552253829933870061565795954292172939/
6994039790245749847186463538220508504531734731552935945175040000*x*
1516590627006900745575419708686896255502135^(1/2)-\
23544286926287350411473590573139033778958617154656084260046109263945944317/1894\
7231578869444505257742411437309684689269836820267401216000000000000000000000000\
000000000000000*x^2*1516590627006900745575419708686896255502135^(1/2)+
13047704739509244201736725952821227251733305964334362851465408410173/5210965715\
5318184548515554802272532169012239065415680000000000000000000000000000000000000\
0000*x^3*1516590627006900745575419708686896255502135^(1/2))^2+4848041/10000*(1/
3880393027352462234676785645862361023424362462580790763769036800000000000000000\
00000*x*54733884015457215286683089846751561231213693069497282525899269261875425\
6258423636806521362794004760485174306191849530952886681079284403782389265988987\
406867937050390^(1/2)+113181490777785131201389333833547641687132270465284207437\
177168526338485762219200941349014090203563799999119776236593/154062187285345663\
8073471862099329727365148220593751219303937700462939423959110677035346252743050\
2849918643325851952986165005595636586888090226512128547282312465104317671312195\
584000000000000000000000000*x^2*54733884015457215286683089846751561231213693069\
4972825258992692618754256258423636806521362794004760485174306191849530952886681\
079284403782389265988987406867937050390^(1/2)-145958589704766037312935442278937\
1158688971552803052984105120683947552980698799445944560924256133162962895403719
/254225881811388416570482281333731249775346078235518423924869892884641763377679\
4671555535529081623336092849598566010969983959392362661435922712124279237289010\
13256353527889920000000000000000000000000*x^3*547338840154572152866830898467515\
6123121369306949728252589926926187542562584236368065213627940047604851743061918\
49530952886681079284403782389265988987406867937050390^(1/2))^2+4848041/10000*(1
/683158317193411547843029250183747157483617601616681716024685412907026505924402\
0614454743752491075485493253067454261685249774394217741680640000000000000000000\
00000000000000000000*x^2*107055920123099236587843814199735934399632197923733278\
9860974611582518268831709005569289343764407642883206218566937665457307843122633\
1040640673471627957410690362436748638949054497585025542093029505285437604249970\
9220474031158930175680654907106445418635713417297798169466160038648088749374370\
728270365103631202101791363369368843196469867928165480510^(1/2)-328014067957767\
0586510298752858240145977096543165930288485268005161877064807094744670050379628\
9549754441113273253013172961701191388839512273345368761368643377323873112514668\
40973709495934821028076082568045632369181/8346164454452253466306764228407191689\
8502112991558757695216834639418942982539940357429445052504722472361923374917131\
0392911062832613580503687545428968889562040291211142812440257249876149989253909\
7955716962102001578131706050990560371672468982378839951796775174379725150548940\
6408106029567870240759269625431506088268874880449353404265220354530998013132800\
000000000000000000000000000000000000000*x^3*10705592012309923658784381419973593\
4399632197923733278986097461158251826883170900556928934376440764288320621856693\
7665457307843122633104064067347162795741069036243674863894905449758502554209302\
9505285437604249970922047403115893017568065490710644541863571341729779816946616\
0038648088749374370728270365103631202101791363369368843196469867928165480510^(1
/2))^2+257756047234283209597705948281541906027587896835738348980525702941368990\
9850815236968799379524899837080588021706061390038469834238152117616079918103076\
1007065981329780600161582822090598297156908852609716557576071506927112234043790\
1898703556406600271827389044726653594049767031614519374862926022571/52791495859\
4477270983558583153163697580023427232333812547379518462851326817372080851199230\
2322380609285506672114082582921650418229543126395364343889875907931965651308617\
8112772249148294286475361847036643644560632726142476549717274245148739339131289\
60000000000000000000000000000000000000000000000000000000*x^6, 
8655416112850674885631844106505353761/8112963841460668169578900514406400]
>> Degree size
6
>> Succeeds RealCertify Batch: 14 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 15 Test 1 - Weifeng
>> input polynomial
-x^2+5855201/10000
>> basis
[(x-162/25)*(x-371/50)*(x-483/50)*(x-353/20)*(x-2199/100), -(x-162/25)*(x-371/50)*(x-483/50)*(x-353/20)*(x-2199/100)]
>> Time taken
1.318000
">> Sums of squares multipliers", [-x^2+5855201/10000-488/2177299*x^2*(x-162/25
)*(x-371/50)*(x-483/50)*(x-353/20)*(x-2199/100)+488/2177299*(x+1)^2*(x-162/25)*
(x-371/50)*(x-483/50)*(x-353/20)*(x-2199/100), 488/2177299*x^2, 488/2177299*(x+
1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 15 Test 1 - Weifeng

>> Test
Batch: 15 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+5855201/10000
>> basis
[(x-162/25)*(x-371/50)*(x-483/50)*(x-353/20)*(x-2199/100), -(x-162/25)*(x-371/50)*(x-483/50)*(x-353/20)*(x-2199/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -3.591372
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 15 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 15 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+5855201/10000
>> basis
[(x-162/25)*(x-371/50)*(x-483/50)*(x-353/20)*(x-2199/100), -(x-162/25)*(x-371/50)*(x-483/50)*(x-353/20)*(x-2199/100), -x^2+5755201/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.017080
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14706
time= 0.125000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [5855201/10000*(3/360287970189639680000*
4276646163596934618871340123857629525495^(1/2)+
3520661117445147746237498422603321418351/
757345893827370655085508602023721441531745742318841188319232000*x*
4276646163596934618871340123857629525495^(1/2)-\
90065253911304379361281965735760138181566582559433934649853692157127044718043/
6607789449220768342952914613601410103109656575576992697548800000000000000000000\
000000000000000000000*x^2*4276646163596934618871340123857629525495^(1/2)-\
2332922195558702174689803106296072951631997102287116977904284753656993/28213333\
1085507070677544400849834621523225956528947200000000000000000000000000000000000\
000000000*x^3*4276646163596934618871340123857629525495^(1/2))^2+5855201/10000*(
1/84579704950025834789797307054098049319803604167385506528624640000000000000000\
000000*x*1953918423082816731627053995509312690174791877866147543735260818978912\
4990850872160463002571459019069674073880421830004505853642533260034354523455365\
908653572534774^(1/2)-132067295462673986127366053776281822201744420824464850683\
8728455033321079094922834724665245820105981854517913744110727/12996430201267378\
0914364811004339652484201022726197336499322826015481364344127721246172771337972\
8439069814058368140237105487809671563549198134770151929169962307754114140639630\
1967360000000000000000000000000*x^2*1953918423082816731627053995509312690174791\
8778661475437352608189789124990850872160463002571459019069674073880421830004505\
853642533260034354523455365908653572534774^(1/2)-474196186046096294671098975025\
3168288814911019030164242012949179681332678015528891918951947822687434043561272\
20267/2308424153042410194815505111515612164015702682713116594277390973531064414\
6613041993950281500411643880929222083116631633819356877047023512362089037729128\
970308620733578680991744000000000000000000000000*x^3*19539184230828167316270539\
9550931269017479187786614754373526081897891249908508721604630025714590190696740\
73880421830004505853642533260034354523455365908653572534774^(1/2))^2+5855201/
10000*(1/1234127290376200867460072231271354045103850172711481254807423538666080\
6599516160560168327911720150229858869961067224275911538021853443374710784000000\
00000000000000000000000000000000000*x^2*742587914038892908984313345485893154017\
0972272842333802918970198951196807076242865783824598682659056260385052423383425\
7986649141541406110713322693388836171000865852686579207937828856035026979095738\
4170519097795636598446397951488178954467961194941527452354413004940557376973531\
4588144544944668304722881119947091537462927471502869863479080824988455980720800\
3630^(1/2)-76705846531983606600828150853931621855642483073573756133273735554973\
8182466326756560159477196184775366806419074668144954777675522347937723690440333\
217858302728888916494859688545949632824721247459701074238410573457937806293/613\
5621651552910005469085003089172226609529341700263080044701340942052350561428713\
7646738935119627453501065637364324431750823309875225735166875793201477997624118\
4621140202841444841154228619120425716545855127190334106530419401661602036366614\
3530438507555288298518811520553057575159063179834855024472139794800636884225160\
9510184078232766505933087925302297049402703872000000000000000000000000000000000\
00000000000*x^3*742587914038892908984313345485893154017097227284233380291897019\
8951196807076242865783824598682659056260385052423383425798664914154140611071332\
2693388836171000865852686579207937828856035026979095738417051909779563659844639\
7951488178954467961194941527452354413004940557376973531458814454494466830472288\
11199470915374629274715028698634790808249884559807208003630^(1/2))^2+2418056453\
2233152985727072756775355758493301665074758103017222155549278504235092149577045\
3755269454303351721068695106938065751558028323427968559597246500832021606377326\
9258832716016189169998504509826287389863706513510401108100712746220085018443273\
58842231802411922469833192841671441224661584869455811225292392043471/1209177131\
4459235855129096575749040825017583651669847239301718089322837165207044105672108\
5774463092898649373425390933321246414435161417146480737020024240811773478561561\
5732072636743816681149139100368999470812047017181753735911954631261390136489416\
960161145520390144000000000000000000000000000000000000000000000000000000000000*
x^6, 35320839372231162408941225062834741961/
202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 15 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 16 Test 1 - Weifeng
>> input polynomial
-x^2+7889681/10000
>> basis
[(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100), -(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100)]
>> Time taken
1.263000
">> Sums of squares multipliers", [-x^2+7889681/10000-1114/1848883*x^2*(x-341/
100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100)+1114/1848883*(x+1)^2*(x-\
341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100), 1114/1848883*x^2, 
1114/1848883*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 16 Test 1 - Weifeng

>> Test
Batch: 16 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+7889681/10000
>> basis
[(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100), -(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.584622
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 16 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 16 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+7889681/10000
>> basis
[(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100), -(x-341/100)*(x-843/100)*(x-383/25)*(x-2591/100)*(x-2691/100), -x^2+7789681/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.012676
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 15001
time= 0.123000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [7889681/10000*(1/1801439850948198400000*
633475454769298614339724317226516349304639^(1/2)+
152964746720132580126269094392280385576759/
747875813830785429060244038159585563344353181334667141039783936000*x*
633475454769298614339724317226516349304639^(1/2)-\
309814645221418762444238743283487014877824475908273838824885106632125486297457/
4689297357193855456299348865533635764910570583395702031442247680000000000000000\
00000000000000000000000*x^2*633475454769298614339724317226516349304639^(1/2)-\
2162171542186528086882965279512813035482531456106488970027125261575791/46434241\
8953022254668327692995211459289213755065368576000000000000000000000000000000000\
0000000000*x^3*633475454769298614339724317226516349304639^(1/2))^2+7889681/
10000*(1/1125431365726525309511843727728072583578536940014968487546139443200000\
00000000000000000*x*27690828638728238142668570157619271605637815414668244828930\
1481114261484707853176817613274678944277263315482471682249881566526312581238679\
99532389641210273309156414773942^(1/2)+5266582737486894493285245582484347277414\
3946449313331930864319283208871489587119623513211718187589378734140736637721006\
3743/21283567878648619059374694854892137366234362240238446216565319659488061584\
3441185130647716091316981700659597071657395476987253577241160304491692657938650\
4583444390002014407604355761753292800000000000000000000000000*x^2*2769082863872\
8238142668570157619271605637815414668244828930148111426148470785317681761327467\
894427726331548247168224988156652631258123867999532389641210273309156414773942^
(1/2)-2309757771601632891240186146376368677023932699446928107420385205504417397\
80957044019310684049882793455330979365482043/2023234641424217822562283714787594\
4571999516431879609153302889869205163286396609552146124421061857415463907577979\
7746712117308903783144373478179274236801011040027157183009769757081600000000000\
00000000000000*x^3*276908286387282381426685701576192716056378154146682448289301\
4811142614847078531768176132746789442772633154824716822498815665263125812386799\
9532389641210273309156414773942^(1/2))^2+7889681/10000*(1/291223656629085254307\
0703274385676552517395761358997494525096193791481974617263960869962762941266791\
4385859337561520849523461173975708488310207178342400000000000000000000000000000\
0000000000*x^2*1733417912162254799280055263953541427787086551571830318499237400\
9424383186356256683580904026617066665022931892101957175658120643996080810644668\
7769355505425889221272559498681388387439664394287033868943878446034937589656195\
1531809735634808136316320864079691661080108911189688407989784039898406048764023\
189998079674246680936928299437990081005957539806997520123788118335486^(1/2)-104\
1288529115206791791800964380783181498083460766552109853824546402619250594841101\
8516323337967718510050050413434048175589262219288462943728288249890716222418455\
382876945851276764221616366445443234823627523246078272948965910061/161046912645\
9904747465186248688462539449550784010440747334621885747454945433605688274436711\
1839176429297687759537220437990081638157588554363061822875365279554957740677976\
7612052478395048884020943038730654926936045198083803449997309909906549804029411\
2186768705822507361432008317509994344669872596322830264444067894882871253837633\
6588378498789346693457206193140141669524858470400000000000000000000000000000000\
00000000000*x^3*173341791216225479928005526395354142778708655157183031849923740\
0942438318635625668358090402661706666502293189210195717565812064399608081064466\
8776935550542588922127255949868138838743966439428703386894387844603493758965619\
5153180973563480813631632086407969166108010891118968840798978403989840604876402\
3189998079674246680936928299437990081005957539806997520123788118335486^(1/2))^2
+489296377280450827416500218026139360674774376544002733345603820270965600323567\
2768900880113682140146829034242449941241630218842072512621880222555538414403212\
0838045905224657141757772803122148789728969044013684250883697720183029722865952\
2233143705594408934492549642308763092016966659822931115039854197061117464354945\
6251129/40777182638506967941389317417206491233942891905900991048818552042983760\
3883742196190998618561718162534539225095704995997139305117634800957981438857320\
4905447325462846037804272253842457616025508520228592837139902834443484652859980\
5242953350328474603237987348762119372800000000000000000000000000000000000000000\
00000000000000000000000*x^6, 54743414327050331521349207308236609/
507060240091291760598681282150400]
>> Degree size
6
>> Succeeds RealCertify Batch: 16 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 17 Test 1 - Weifeng
>> input polynomial
-x^2+833201/2500
>> basis
[(x-2)*(x-276/25)*(x-799/50), (-x+2)*(x-276/25)*(x-799/50)]
>> Time taken
0.217000
">> Sums of squares multipliers", [-x^2+833201/2500-1841/57471*x^2*(x-2)*(x-276
/25)*(x-799/50)-1841/57471*(x+1)^2*(-x+2)*(x-276/25)*(x-799/50), 1841/57471*x^2
, 1841/57471*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 17 Test 1 - Weifeng

>> Test
Batch: 17 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+833201/2500
>> basis
[(x-2)*(x-276/25)*(x-799/50), (-x+2)*(x-276/25)*(x-799/50)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -140.416350
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 17 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 17 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+833201/2500
>> basis
[(x-2)*(x-276/25)*(x-799/50), (-x+2)*(x-276/25)*(x-799/50), -x^2+808201/2500]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 0.030008
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 6628
time= 0.119000secs
>> Time taken
0.007000
">> Sums of squares multipliers", [833201/2500*(1/2882303761517117440*
5834819764722614251246640918438399799^(1/2)-\
18116208681932288968429485438049014147/
4592359548418570441445417683502059178071779502968939741184000*x*
5834819764722614251246640918438399799^(1/2)-13176771266753926778860600817431266\
36401162051146065699528901690974474582879192637/1282886680696797065192642477668\
985459322380378204547317760000000000000000000000000000000000000000000000*x^2*
5834819764722614251246640918438399799^(1/2))^2+833201/2500*(1/54736498376396674\
78155274571387671293108822947006068555776000000000000000000000000*x*64446355192\
4108470030437709638116127426673928121401955630709460960404178129511569311362770\
5542292166044049860883178711194977428947137447864443270973335452790^(1/2)-35874\
5484345629542862870068237491198422426192951212690389410076414696244452938011659\
7778350166545812413774812383745213/39627514023926186066879753413773327648515913\
6636278598556166910918656361928198248806141889018988672916324380636413157807033\
210921815266241675773236594800588847199590357454028800000000000000000000000000*
x^2*644463551924108470030437709638116127426673928121401955630709460960404178129\
5115693113627705542292166044049860883178711194977428947137447864443270973335452\
790^(1/2))^2+105655924491327717117325022662151251911514863836529592679679237344\
0807560372970915105491640165173501030240786320105774057970597613397652078885549\
1684918559281024376102008949757802695967587689209002061196058985779874829364497\
716911504021669/115367720254418285028419357865622458396884539063649407403567066\
1147617544504826161300525104343792567837310864463704259741804347669796945023928\
8934400000000000000000000000000000000000000000000000000000000000000000000000000\
0000000000000000000000*x^4, 648773057532864932850828211324056161/
2028240960365167042394725128601600]
>> Degree size
4
>> Succeeds RealCertify Batch: 17 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 18 Test 1 - Weifeng
>> input polynomial
-x^2+238574/625
>> basis
[(x-597/100)*(x-431/50)*(x-1443/100)*(x-432/25)*(x-457/25), (-x+597/100)*(x-431/50)*(x-1443/100)*(x-432/25)*(x-457/25)]
>> Time taken
1.147000
">> Sums of squares multipliers", [-x^2+238574/625-989/2282617*x^2*(x-597/100)*
(x-431/50)*(x-1443/100)*(x-432/25)*(x-457/25)-989/2282617*(x+1)^2*(-x+597/100)*
(x-431/50)*(x-1443/100)*(x-432/25)*(x-457/25), 989/2282617*x^2, 989/2282617*(x+
1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 18 Test 1 - Weifeng

>> Test
Batch: 18 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+238574/625
>> basis
[(x-597/100)*(x-431/50)*(x-1443/100)*(x-432/25)*(x-457/25), (-x+597/100)*(x-431/50)*(x-1443/100)*(x-432/25)*(x-457/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.961808
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 18 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 18 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+238574/625
>> basis
[(x-597/100)*(x-431/50)*(x-1443/100)*(x-432/25)*(x-457/25), (-x+597/100)*(x-431/50)*(x-1443/100)*(x-432/25)*(x-457/25), -x^2+232324/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.026200
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13846
time= 0.123000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [238574/625*(1/112589990684262400000*
3875138233021580646951761835831443707119^(1/2)-\
847519468711054485802283027738864108339/
17870920808699036568928191318237557828997972185421579288576000*x*
3875138233021580646951761835831443707119^(1/2)-\
231229065982281004287724627838880834332547027638152614399770542582366679/105886\
0883368691789705424089123111745093107773901216153600000000000000000000000000000\
0000000000*x^2*3875138233021580646951761835831443707119^(1/2)+
846340548089909192834926408132775452123394170191770768829538780039/665743679132\
2766456353735669790788676216442952089600000000000000000000000000000000000000000
*x^3*3875138233021580646951761835831443707119^(1/2))^2+238574/625*(1/4066025792\
1357764724688285022327491011575338517806700298240000000000000000000000*x*662724\
4895349090441202259577551731171152073606965623760252101026748706265930951407025\
062850271827614115062835510051633975700229634754904498306706680107100318^(1/2)+
5242857309341436664639469088178192480903467517782196196335110955151554050646130\
7684959954284521578129584442182139/49744096068645309117558363795204710733415596\
7476568107193000589178502549733091404018925866743881956288520132746730086897147\
2695238059594402292143238855564485058223604236288000000000000000000000000*x^2*
6627244895349090441202259577551731171152073606965623760252101026748706265930951\
407025062850271827614115062835510051633975700229634754904498306706680107100318^
(1/2)-2776756367666152324742726892641604304082730640956087441891431182593183694\
376779064293632274910413747914689629/417011879489343424828844415528973909423621\
9935756353225355659788396912905288014653892929378254813653529052895510240737860\
3474772926300388158744399966933232330918068224000000000000000000000000*x^3*6627\
2448953490904412022595775517311711520736069656237602521010267487062659309514070\
25062850271827614115062835510051633975700229634754904498306706680107100318^(1/2
))^2+238574/625*(1/600816699442352005042223308059515140201039517535404573322456\
1777299792319538778306144378180863838564831761060024456554371305246294016000000\
000000000000000000000000000000000*x^2*67526824955105432394402218838466875431075\
0828825441837229943677219325012101880479897070523562632440194252739992340997384\
4504856641013974739980834970597543180604162329768191946207623392788793992318346\
9748938562740727289731374841325455376912057935528359158169631060804973482288516\
86337456378417621783752812477043315896726519872266747971206^(1/2)-1462309814545\
3649743559267901701540989338295020317493092934291253801717337140311689796596324\
7999814476584968270727080286593086023873359791529162928281425461502050018489969\
746536356465433293099440689897568818843/226923697580262895656277216423958168930\
4410015852095365023776637191855834886357124001880441215972253821560867261698941\
1781283374282669979294789265000480855613827591282068385399927495411390123766045\
4789256887473493079699275059420307900660090090410305795094091236137584373796980\
9402144148439264541266460537428313815116627530959237899178420994048000000000000\
00000000000000000000000000000*x^3*675268249551054323944022188384668754310750828\
8254418372299436772193250121018804798970705235626324401942527399923409973844504\
8566410139747399808349705975431806041623297681919462076233927887939923183469748\
9385627407272897313748413254553769120579355283591581696310608049734822885168633\
7456378417621783752812477043315896726519872266747971206^(1/2))^2+13536171925929\
1939639748350749069332944904575125470072869774588303894869998771912891769927134\
4543021928742172449088594117811630159218310281581897381761369122376286935504843\
9412945191391841528188610195245690906597891728048288669885325369511652883528097\
58178219649196628701529602270272225207049/1003929203369833659810549724566938136\
4203985532321150814968617344354043252278286388763412206283518577653505565186787\
0259873648709693033663940231394439462099790172280383913880491615583031144577325\
4454055942415054177723025233143091202649910935552000000000000000000000000000000\
00000000000000000000000000*x^6, 3855472407141762860406087786586875087/
25353012004564588029934064107520000]
>> Degree size
6
>> Succeeds RealCertify Batch: 18 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 19 Test 1 - Weifeng
>> input polynomial
-x^2+1210921/2500
>> basis
[(x-173/100)*(x-79/25)*(x-469/50)*(x-989/50)*(x-1039/50), -(x-173/100)*(x-79/25)*(x-469/50)*(x-989/50)*(x-1039/50)]
>> Time taken
1.142000
">> Sums of squares multipliers", [-x^2+1210921/2500-716/734549*x^2*(x-173/100)
*(x-79/25)*(x-469/50)*(x-989/50)*(x-1039/50)+716/734549*(x+1)^2*(x-173/100)*(x-\
79/25)*(x-469/50)*(x-989/50)*(x-1039/50), 716/734549*x^2, 716/734549*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 19 Test 1 - Weifeng

>> Test
Batch: 19 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1210921/2500
>> basis
[(x-173/100)*(x-79/25)*(x-469/50)*(x-989/50)*(x-1039/50), -(x-173/100)*(x-79/25)*(x-469/50)*(x-989/50)*(x-1039/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -5.265468
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 19 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 19 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1210921/2500
>> basis
[(x-173/100)*(x-79/25)*(x-469/50)*(x-989/50)*(x-1039/50), -(x-173/100)*(x-79/25)*(x-469/50)*(x-989/50)*(x-1039/50), -x^2+1185921/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.020649
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14160
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1210921/2500*(1/900719925474099200000*
267805532368388278891056901836108222154927^(1/2)-\
654735963246401055635068257626329367277/
308758757320199874028875320453348767316795680073661653450752000*x*
267805532368388278891056901836108222154927^(1/2)-\
381300794637088353464121793466187537024189981432330888340410158478195551/174102\
5891028967460891789439686991007384013113148875735040000000000000000000000000000\
00000000000*x^2*267805532368388278891056901836108222154927^(1/2)+
31574472831535326606725898972009689295300845941225617996888659463139/7361382420\
5446213252276258576714698628615303057113088000000000000000000000000000000000000\
00000*x^3*267805532368388278891056901836108222154927^(1/2))^2+1210921/2500*(1/
7131242049654650719812769544957915166244917711457795010723840000000000000000000\
000*x*1545150975393950879096103035098410113036471285584657640184830451270832512\
0393294871507616801831851800904910265653128582934500125826051746012708443031630\
0719543418^(1/2)+62641698116218218704765735921386266219893590076714105360309595\
5084222559949221061761829290807405378786882858475637/17396853392538389032332722\
3773108937086397511809870877267076898711487048001845891251069875332757366704715\
3147492299160781756871489114006721089533724693109214125092666232610488320000000\
00000000000000000*x^2*154515097539395087909610303509841011303647128558465764018\
4830451270832512039329487150761680183185180090491026565312858293450012582605174\
60127084430316300719543418^(1/2)-8697125556964878755215019833541516887256238272\
7449924865967600605425571251963127446995902989461705735089101844941/29422857269\
7299169295250602051931631504402107310564072010456081413341972191233272263170846\
5552146564567440523423269297733739915989321752422157485969911734680072597453049\
69216000000000000000000000000*x^3*154515097539395087909610303509841011303647128\
5584657640184830451270832512039329487150761680183185180090491026565312858293450\
01258260517460127084430316300719543418^(1/2))^2+1210921/2500*(1/240058470651730\
9221487886326614114875183827759402009715576492978252907647127200856221200812851\
9566333242577028330137905064489071151153152000000000000000000000000000000000000\
000*x^2*51022986839082370352061901691918071702998985722828711292040542428676072\
7507431400649215204333181626988016206912882373757887153592375512498800226500803\
1749352339776811411794936284272210604202789741252832088946530739021682354584659\
0701662775433042993872309473620600422501779122730950895979115914989439696423291\
240318271258471882478546683046962362^(1/2)-431305718775968689091860473693443840\
6583780251235820006757822382636578326258090385940093461918895447505295565333014\
0668689185489362113479526330370368895840606432268545946695944915863604680208950\
50672532495430384137/7412588244938572474992514124663118731186658645838581419060\
6784645194355213319564657245086342485427781154972350183375806620359923049926557\
4151338079938283596605220886402719466989484446083456661211121805669263326863422\
4363382843168015930388747898308211952440541771045713654912449604372491262223446\
9698985766456093187468951935573711994538868542050349875200000000000000000000000\
000000000000000000*x^3*51022986839082370352061901691918071702998985722828711292\
0405424286760727507431400649215204333181626988016206912882373757887153592375512\
4988002265008031749352339776811411794936284272210604202789741252832088946530739\
0216823545846590701662775433042993872309473620600422501779122730950895979115914\
989439696423291240318271258471882478546683046962362^(1/2))^2+171549361212752362\
1244244938869793020626580556832884319743079384127348577045203435509319719274363\
6622867054099032132548657001674838934281443187630731792258213519550133195209028\
4015681365601989221074503300006565168106814822392298714891770479424183470736192\
6050167506015333387981940099066857295291513541/60670585831312168195760899769739\
3527551989894456807756045176386970939258030157109346331120869615846545918298497\
7682112518132526487300192947205764497877970996067082356672728221079682989233090\
6787687668254198629910839179978339386421219254537489405056122880000000000000000\
0000000000000000000000000000000000000000*x^6, 
54989766274502873498002411963957511401/202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 19 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 20 Test 1 - Weifeng
>> input polynomial
-x^2+9778321/10000
>> basis
[(x-169/20)*(x-999/100)*(x-1423/100)*(x-919/50)*(x-2911/100), -(x-169/20)*(x-999/100)*(x-1423/100)*(x-919/50)*(x-2911/100)]
>> Time taken
1.277000
">> Sums of squares multipliers", [-x^2+9778321/10000-343/11299874*x^2*(x-169/
20)*(x-999/100)*(x-1423/100)*(x-919/50)*(x-2911/100)+343/11299874*(x+1)^2*(x-\
169/20)*(x-999/100)*(x-1423/100)*(x-919/50)*(x-2911/100), 343/11299874*x^2, 343
/11299874*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 20 Test 1 - Weifeng

>> Test
Batch: 20 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+9778321/10000
>> basis
[(x-169/20)*(x-999/100)*(x-1423/100)*(x-919/50)*(x-2911/100), -(x-169/20)*(x-999/100)*(x-1423/100)*(x-919/50)*(x-2911/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.118341
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 20 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 20 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+9778321/10000
>> basis
[(x-169/20)*(x-999/100)*(x-1423/100)*(x-919/50)*(x-2911/100), -(x-169/20)*(x-999/100)*(x-1423/100)*(x-919/50)*(x-2911/100), -x^2+9678321/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.010228
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14579
time= 0.131000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [9778321/10000*(1/3602879701896396800000*
3396128857482403292150593775235079427811295^(1/2)-\
295776397012459223244035219451648976896859/
250590079501270053400982104377030278180959315166385578841210880000*x*
3396128857482403292150593775235079427811295^(1/2)-\
15089221246029199205070736441086277395321786262048060133908673173074102596809/
5476959578943860135619218793185294613479188691758558004379648000000000000000000\
0000000000000000000000*x^2*3396128857482403292150593775235079427811295^(1/2)+
113649689898482818261164384232484347889092754316184181610516926829847/933520792\
0568810902572501613834138146823619126021324800000000000000000000000000000000000\
0000000*x^3*3396128857482403292150593775235079427811295^(1/2))^2+9778321/10000*
(1/2804203304419256389437040022110870842101344610180381698242379776000000000000\
0000000000*x*132434809876415406784131923373133152983411819187596008428778619110\
6905988429192539014278470200238627581126895815750171732622267043385946407937504\
344138086318398581803854^(1/2)+195549492290801221511418286506293657376660497263\
05487650171708486487970278493438033902404993601347424916075107448254681/2385733\
4416412276376401688086957151627179189869135638877930552633252400637096488302819\
7983400102376583226504431991100981295030448589478420413426160157055151580777627\
11149050105834766336000000000000000000000000*x^2*132434809876415406784131923373\
1331529834118191875960084287786191106905988429192539014278470200238627581126895\
815750171732622267043385946407937504344138086318398581803854^(1/2)-585200986758\
3950743642627576196631391827932513495534760036550958142376386582624388946308035\
22746947782873847963/1588423898201447443368500142469523032015903862335041795807\
2117088343044780499323867033654902797216899987713175869102650788816619434676806\
644343576266203176834796290793076162560000000000000000000000000*x^3*13243480987\
6415406784131923373133152983411819187596008428778619110690598842919253901427847\
0200238627581126895815750171732622267043385946407937504344138086318398581803854
^(1/2))^2+9778321/10000*(1/7486762940590339950101444079669186560245060402441340\
7105677772417226435975818843874126071158506050535578315765227994757039029422466\
45945776209920000000000000000000000000000000000000000*x^2*591209376345204041159\
9507366641364138408978440135196595530263075153849168184303801014514370526678681\
6050516259937185607805731259975288764195194953666476073606844295228937796976324\
5041227685601339435442475883899438099642422171813975579198971961942617788847523\
6077893275085771744243655069272217680431993349775037333749085161286813995899000\
36380862590766923719430^(1/2)-1433763093085174455594305336163777258196505083071\
0533382406779893481970213289317723701782551064764713145249861377611197793036973\
8059302819875273739243173410321167273535285485895602741622169679836550349196604\
426700277093/581681032739700864149685713368747644417258002839704991887523063486\
8630929046529593166788151843696802539696691216989519239231312879047183900376603\
6460198030118428554543290503826044083287835020127192087537352800972542047442779\
2834020540215546523328133743110969892922980051080912251112634804937252395584016\
1127471111309829321038497622451101542575288397522276483858432000000000000000000\
000000000000000000000000*x^3*59120937634520404115995073666413641384089784401351\
9659553026307515384916818430380101451437052667868160505162599371856078057312599\
7528876419519495366647607360684429522893779697632450412276856013394354424758838\
9943809964242217181397557919897196194261778884752360778932750857717442436550692\
7221768043199334977503733374908516128681399589900036380862590766923719430^(1/2)
)^2+468266589997562961134611382491494571377285886571185997335154374067480905966\
2392341219485360000197412438848693432100001685181488608138090364130531770093094\
8517607018913827997385819641938963472773308570519009538490656465405819004625975\
5183072405293167507601553325827982165153538194723614310254686551630153707/73963\
2348653360008094847790934535025085363855411623591448352338981216047702319446659\
0529343947837928024917934353227631983477286699309089815821112514509991453754937\
4843926356588789022463194542074360549014716386877077997228723989161010359178675\
30831951339244748800000000000000000000000000000000000000000000000000000000*x^6,
27229438885487024202871799160344923249/129807421463370690713262408230502400]
>> Degree size
6
>> Succeeds RealCertify Batch: 20 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 21 Test 1 - Weifeng
>> input polynomial
-x^2+11680409/10000
>> basis
[(x-349/100)*(x-129/20)*(x-31/2)*(x-406/25)*(x-422/25)*(x-3203/100)*(x-3303/100), -(x-349/100)*(x-129/20)*(x-31/2)*(x-406/25)*(x-422/25)*(x-3203/100)*(x-3303/100)]
>> Time taken
1.222000
">> Sums of squares multipliers", [-x^2+11680409/10000-15/15582401*x^2*(x-349/
100)*(x-129/20)*(x-31/2)*(x-406/25)*(x-422/25)*(x-3203/100)*(x-3303/100)+15/
15582401*(x+1)^2*(x-349/100)*(x-129/20)*(x-31/2)*(x-406/25)*(x-422/25)*(x-3203/
100)*(x-3303/100), 15/15582401*x^2, 15/15582401*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 21 Test 1 - Weifeng

>> Test
Batch: 21 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+11680409/10000
>> basis
[(x-349/100)*(x-129/20)*(x-31/2)*(x-406/25)*(x-422/25)*(x-3203/100)*(x-3303/100), -(x-349/100)*(x-129/20)*(x-31/2)*(x-406/25)*(x-422/25)*(x-3203/100)*(x-3303/100)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.677470
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 21 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 21 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+11680409/10000
>> basis
[(x-349/100)*(x-129/20)*(x-31/2)*(x-406/25)*(x-422/25)*(x-3203/100)*(x-3303/100), -(x-349/100)*(x-129/20)*(x-31/2)*(x-406/25)*(x-422/25)*(x-3203/100)*(x-3303/100), -x^2+11580409/10000]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.344672
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 21 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 22 Test 1 - Weifeng
>> input polynomial
-x^2+475969/400
>> basis
[(x-401/50)*(x-911/100)*(x-887/50)*(x-647/20)*(x-667/20), (-x+401/50)*(x-911/100)*(x-887/50)*(x-647/20)*(x-667/20)]
>> Time taken
1.263000
">> Sums of squares multipliers", [-x^2+475969/400-179/969775*x^2*(x-401/50)*(x
-911/100)*(x-887/50)*(x-647/20)*(x-667/20)-179/969775*(x+1)^2*(-x+401/50)*(x-\
911/100)*(x-887/50)*(x-647/20)*(x-667/20), 179/969775*x^2, 179/969775*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 22 Test 1 - Weifeng

>> Test
Batch: 22 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+475969/400
>> basis
[(x-401/50)*(x-911/100)*(x-887/50)*(x-647/20)*(x-667/20), (-x+401/50)*(x-911/100)*(x-887/50)*(x-647/20)*(x-667/20)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.322521
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 22 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 22 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+475969/400
>> basis
[(x-401/50)*(x-911/100)*(x-887/50)*(x-647/20)*(x-667/20), (-x+401/50)*(x-911/100)*(x-887/50)*(x-647/20)*(x-667/20), -x^2+471969/400]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.950623
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 22 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 23 Test 1 - Weifeng
>> input polynomial
-x^2+1540361/2500
>> basis
[(x-853/100)*(x-1569/100)*(x-829/50)*(x-1131/50)*(x-1181/50), (-x+853/100)*(x-1569/100)*(x-829/50)*(x-1131/50)*(x-1181/50)]
>> Time taken
1.184000
">> Sums of squares multipliers", [-x^2+1540361/2500-497/4721170*x^2*(x-853/100
)*(x-1569/100)*(x-829/50)*(x-1131/50)*(x-1181/50)-497/4721170*(x+1)^2*(-x+853/
100)*(x-1569/100)*(x-829/50)*(x-1131/50)*(x-1181/50), 497/4721170*x^2, 497/
4721170*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 23 Test 1 - Weifeng

>> Test
Batch: 23 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1540361/2500
>> basis
[(x-853/100)*(x-1569/100)*(x-829/50)*(x-1131/50)*(x-1181/50), (-x+853/100)*(x-1569/100)*(x-829/50)*(x-1131/50)*(x-1181/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.253025
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 23 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 23 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1540361/2500
>> basis
[(x-853/100)*(x-1569/100)*(x-829/50)*(x-1131/50)*(x-1181/50), (-x+853/100)*(x-1569/100)*(x-829/50)*(x-1131/50)*(x-1181/50), -x^2+1515361/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.016231
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14470
time= 0.178000secs
>> Time taken
0.135000
">> Sums of squares multipliers", [1540361/2500*(1/450359962737049600000*
82250721232325788886478733889111292577615^(1/2)-\
2502833912111978823577078224060063116973/
2427612807121187414902821006643814082838626041885104845881344000*x*
82250721232325788886478733889111292577615^(1/2)-\
4730043570002235616885086674976340479752705703679626188689481522441838368429/13\
3731368465065933499591026375825599591328698939234566170214400000000000000000000\
0000000000000000000*x^2*82250721232325788886478733889111292577615^(1/2)+
14279476557860565045124771076863392074939003965685369632454456770499/5652226524\
2440333005572226984515182740023034668646400000000000000000000000000000000000000\
00000*x^3*82250721232325788886478733889111292577615^(1/2))^2+1540361/2500*(1/21\
3970189544105493599345642201320959346125918302775305872343040000000000000000000\
000*x*1114205535583176951278739446559357657331579324741069689063769629441449132\
3502454043018479642485894778756759428277244022183333981499769534706973615653630\
0144195141030^(1/2)+17711302529246499997039238032734606520240394975542728481444\
3875066376868209198709663150288352201962230422313613205810757/10704929354381951\
2306460861275645385150091738385824301583954479741563923699660330110112068448274\
6532522509724946525733803346100180087967656576608923462920337939960354440786732\
90854400000000000000000000000000*x^2*111420553558317695127873944655935765733157\
9324741069689063769629441449132350245404301847964248589477875675942827724402218\
33339814997695347069736156536300144195141030^(1/2)-1013302722033378927508386561\
0374497889027285923611851547402086988287986092046048421275843843911417971109541\
389091/130305444888997829453364578103337527473379298406945232623985318711284145\
0392882700590706518410391946095561841850537471983044194080261016317656147962388\
670989227476977524408320000000000000000000000000*x^3*11142055355831769512787394\
4655935765733157932474106968906376962944144913235024540430184796424858947787567\
594282772440221833339814997695347069736156536300144195141030^(1/2))^2+1540361/
2500*(13/3670860835555237058111701098269736025516490593845709360016880462466321\
8256161509198928552177243796404224332833556735648712397849728594604982272000000\
000000000000000000000000000000000*x^2*40686397323422691855267766531772507029965\
8449151393607549877000050810904471225710141160547524481283358518225392071897329\
7507626242638725851196318141681411114013345800353231189687512273251013684307862\
5136606318326985339648700294425288211979184603975202112149266008076874647187657\
2778067911094037928132812020748715195730103993668596544103745308854499364910^(1
/2)-557615807773245164450750050709078947516769538110560068010078405345446800883\
0474301320743592957184281112380477194194576734897129537435652179801931063239948\
52119479427054437678243681228871655475902231891313036863674128207/2359662647028\
9612909540951436709097816662293026612944331104041457845999735171928944114873057\
7731441687306107324459889568799420841525248637234490705099629001165973137736651\
5529274038901288748306126780333637405470886657955961293348775661617736489551384\
5501585416749203392503718936981442404293338582594477359691353668492855855417074\
7993218469701836028535457710080000000000000000000000000000000000000000000*x^3*
4068639732342269185526776653177250702996584491513936075498770000508109044712257\
1014116054752448128335851822539207189732975076262426387258511963181416814111140\
1334580035323118968751227325101368430786251366063183269853396487002944252882119\
7918460397520211214926600807687464718765727780679110940379281328120207487151957\
30103993668596544103745308854499364910^(1/2))^2+1010271104438186608230455140010\
0052030830328449677373683604794069162312077321028441179856617618596865853283919\
6145539739642558569019512099291730538484166748568367392466123179991986118758847\
2394625366982182617876195430421872965416645182344267446091440662423015651354122\
710389941737115661128727684537283213866641/146855406507449446260820022334338297\
3459618159906200346271191492764067038034736733098239342884876606460245046677108\
4190447911168637511895090028953507379866557004677857270871675012334202882890338\
9053510068903931091187998296298070388640525233008466374688768000000000000000000\
000000000000000000000000000000000000000000000*x^6, 
75696373253714317631111182027324940369/50706024009129176059868128215040000]
>> Degree size
6
>> Succeeds RealCertify Batch: 23 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 24 Test 1 - Weifeng
>> input polynomial
-x^2+3738329/2500
>> basis
[(x-877/100)*(x-228/25)*(x-1789/100)*(x-1271/50)*(x-1827/50), -(x-877/100)*(x-228/25)*(x-1789/100)*(x-1271/50)*(x-1827/50)]
>> Time taken
0.979000
">> Sums of squares multipliers", [-x^2+3738329/2500-62/5718767*x^2*(x-877/100)
*(x-228/25)*(x-1789/100)*(x-1271/50)*(x-1827/50)+62/5718767*(x+1)^2*(x-877/100)
*(x-228/25)*(x-1789/100)*(x-1271/50)*(x-1827/50), 62/5718767*x^2, 62/5718767*(x
+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 24 Test 1 - Weifeng

>> Test
Batch: 24 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+3738329/2500
>> basis
[(x-877/100)*(x-228/25)*(x-1789/100)*(x-1271/50)*(x-1827/50), -(x-877/100)*(x-228/25)*(x-1789/100)*(x-1271/50)*(x-1827/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.128791
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 24 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 24 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+3738329/2500
>> basis
[(x-877/100)*(x-228/25)*(x-1789/100)*(x-1271/50)*(x-1827/50), -(x-877/100)*(x-228/25)*(x-1789/100)*(x-1271/50)*(x-1827/50), -x^2+3713329/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.962297
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 24 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 25 Test 1 - Weifeng
>> input polynomial
-x^2+172921/400
>> basis
[(x-149/100)*(x-41/20)*(x-73/10)*(x-879/100)*(x-371/20), (-x+149/100)*(x-41/20)*(x-73/10)*(x-879/100)*(x-371/20)]
>> Time taken
1.227000
">> Sums of squares multipliers", [-x^2+172921/400-85/1188447*x^2*(x-149/100)*(
x-41/20)*(x-73/10)*(x-879/100)*(x-371/20)-85/1188447*(x+1)^2*(-x+149/100)*(x-41
/20)*(x-73/10)*(x-879/100)*(x-371/20), 85/1188447*x^2, 85/1188447*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 25 Test 1 - Weifeng

>> Test
Batch: 25 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+172921/400
>> basis
[(x-149/100)*(x-41/20)*(x-73/10)*(x-879/100)*(x-371/20), (-x+149/100)*(x-41/20)*(x-73/10)*(x-879/100)*(x-371/20)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -5.370898
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 25 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 25 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+172921/400
>> basis
[(x-149/100)*(x-41/20)*(x-73/10)*(x-879/100)*(x-371/20), (-x+149/100)*(x-41/20)*(x-73/10)*(x-879/100)*(x-371/20), -x^2+168921/400]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.023135
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14122
time= 0.119000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [172921/400*(1/360287970189639680000*
19814322264832167001193497888186993215385^(1/2)-\
1486828886506845160121293717754940039299/
146203892725345598940787514063812061666740051803704985124864000*x*
19814322264832167001193497888186993215385^(1/2)-\
26252641223215016902812333425026525881004717161039745003100107022903904843/4709\
0879332198735912218536659010584494982578787856678912000000000000000000000000000\
00000000000000*x^2*19814322264832167001193497888186993215385^(1/2)+
13078119225027528826519118249500904657322103741807576130586482265739/5446519431\
6709637247319338494469248379297573791334400000000000000000000000000000000000000\
0000*x^3*19814322264832167001193497888186993215385^(1/2))^2+172921/400*(1/34443\
614597265361124365558242019170373472971913403742289920000000000000000000000*x*
5129839287756760365566508901235072020072666618310107529846431472869311404720389\
810342989421039272850906754356306274308074479244614968283619346888635524877819^
(1/2)+1565545392761039875433533415632913154913001269959398222538603875878091908\
97807461591975395620610419040507793928711/1293753569069465088807624741902941250\
3642056797428732826571672978809033964729957912920801127424940768450061100406222\
1228148560433744821024451613622362205971861947832414398054400000000000000000000\
000*x^2*51298392877567603655665089012350720200726666183101075298464314728693114\
0472038981034298942103927285090675435630627430807447924461496828361934688863552\
4877819^(1/2)-28801342196795793792099235146494677256428549748877568185871822493\
1375398387049629191377869117489768748913587177413/41897860796485126140391846881\
8505039991646578874751498249497566410849984689469551485108727763427624772701650\
8247977046614534604987080792598522078204661975366941596807331840000000000000000\
000000000*x^3*51298392877567603655665089012350720200726666183101075298464314728\
6931140472038981034298942103927285090675435630627430807447924461496828361934688\
8635524877819^(1/2))^2+172921/400*(1/307646599773797246709190975832232433202041\
7275982807671551208469718140226549692389515113854951883435878365427635377958003\
853582820966400000000000000000000000000000000000000000*x^2*10422354232288287948\
7919059463341219286571105860556125884384466734894104892537291926461065831398269\
3035299689514189042223641133974753998906361202503044350604645212892418768047536\
5107543669112235085861696340710585689609191934587685020232719942172012993507399\
6127819056713287143305902958273134456898728490146569247041749705206622139069271\
5275465^(1/2)-21442173289898773846220494759119569365306329421260616475102240572\
4421705947407064504530420570738456019556373291887273172763521814713189711111908\
2213843147716966155767216613202720451981552001114797032997369854979599/12988948\
3334671332387377643975600159838474765681279092370357531991491233923921976084835\
4881035631690020668177779238755980615537371779275972455119937812478921886435652\
3767875611215032998869847092243800932691621783811954133310615490022102181238825\
1477421161161436676057810846367202002089612227682305961660510876882557978907342\
478039719596240153224413184000000000000000000000000000000000000000000*x^3*10422\
3542322882879487919059463341219286571105860556125884384466734894104892537291926\
4610658313982693035299689514189042223641133974753998906361202503044350604645212\
8924187680475365107543669112235085861696340710585689609191934587685020232719942\
1720129935073996127819056713287143305902958273134456898728490146569247041749705\
2066221390692715275465^(1/2))^2+55822094271901097126750448471519307648950657035\
9860140264925950242046874512447099264829354627788150525624455960407883046740785\
6461047958147474191050567693226889981357524348573331945954157664822753643149056\
4627516572148091442537150705841523285207132073790571320161857419733486948079654\
77428651087961/3790784730454820823915319290803220703073531726986411938672820237\
7779309767863504862954416777934643860002828690854213168478228837877727471858479\
5336769209314055823185382521983382508138969446656470286125374581889357168516220\
5794820328132001282534406195511296000000000000000000000000000000000000000000000\
0000000*x^6, 4233248865839217930307530297816389761/
129807421463370690713262408230502400]
>> Degree size
6
>> Succeeds RealCertify Batch: 25 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 26 Test 1 - Weifeng
>> input polynomial
-x^2+666601/2500
>> basis
[(x-103/100)*(x-527/50)*(x-701/50), (-x+103/100)*(x-527/50)*(x-701/50)]
>> Time taken
0.298000
">> Sums of squares multipliers", [-x^2+666601/2500-7990/134271*x^2*(x-103/100)
*(x-527/50)*(x-701/50)-7990/134271*(x+1)^2*(-x+103/100)*(x-527/50)*(x-701/50),
7990/134271*x^2, 7990/134271*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 26 Test 1 - Weifeng

>> Test
Batch: 26 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+666601/2500
>> basis
[(x-103/100)*(x-527/50)*(x-701/50), (-x+103/100)*(x-527/50)*(x-701/50)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -158.328396
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 26 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 26 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+666601/2500
>> basis
[(x-103/100)*(x-527/50)*(x-701/50), (-x+103/100)*(x-527/50)*(x-701/50), -x^2+641601/2500]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 0.037504
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 6805
time= 0.127000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [666601/2500*(1/18014398509481984000*
129565452125426883417688590593109901115^(1/2)-\
15722487936534449696460049914641358609/
195793775505589615838287976177830966515371693686517633174732800*x*
129565452125426883417688590593109901115^(1/2)-914740212349984624851679044000264\
139243313734714374969426880516888942634490808566737/466762756869083202507800828\
9627491239670990218512761859604480000000000000000000000000000000000000000000000
*x^2*129565452125426883417688590593109901115^(1/2))^2+666601/2500*(1/9335255137\
38166405015601657925498247934198043702552371920896000000000000000000000000*x*23\
1035394025565490622391008426703953628492074534962125613311277127408186199836519\
9475042328793452828498124401572653804965994789815319859393504733439709668582393\
8^(1/2)-33017985969000510317078974457934200782156493375838759614315053553348270\
39163503001317353453396102844135880172088575329611/5818846939215532525972091091\
5839926235615101306278877007411966170204807610781573588586398797469589287412612\
5479357624016107817701332347685920322410713952191540734309927722324492025856000\
00000000000000000000*x^2*231035394025565490622391008426703953628492074534962125\
6133112771274081861998365199475042328793452828498124401572653804965994789815319\
8593935047334397096685823938^(1/2))^2+14925513619874833792181168476926703455395\
0511545870244773286284958890323801817714595446679586936881306777537358095715036\
6141160231483577557120618471636331455809367099402640426814048250186396411246141\
615151747400753661353831134772689387972223366769/108500092062303023533791943726\
9496177196010720442709566605921175236913902916614077134545913686726681856976062\
1750996244680932499000081993404971885010721177600000000000000000000000000000000\
000000000000000000000000000000000000000000000000000000000000000*x^4, 
4676123503936664017615696610348664841/202824096036516704239472512860160000]
>> Degree size
4
>> Succeeds RealCertify Batch: 26 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 27 Test 1 - Weifeng
>> input polynomial
-x^2+1871881/2500
>> basis
[(x-207/25)*(x-256/25)*(x-93/4)*(x-1259/50)*(x-1309/50), (-x+207/25)*(x-256/25)*(x-93/4)*(x-1259/50)*(x-1309/50)]
>> Time taken
1.289000
">> Sums of squares multipliers", [-x^2+1871881/2500-363/3004409*x^2*(x-207/25)
*(x-256/25)*(x-93/4)*(x-1259/50)*(x-1309/50)-363/3004409*(x+1)^2*(-x+207/25)*(x
-256/25)*(x-93/4)*(x-1259/50)*(x-1309/50), 363/3004409*x^2, 363/3004409*(x+1)^2
]
>> Degree size
7
>> Succeeds Weifeng Batch: 27 Test 1 - Weifeng

>> Test
Batch: 27 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1871881/2500
>> basis
[(x-207/25)*(x-256/25)*(x-93/4)*(x-1259/50)*(x-1309/50), (-x+207/25)*(x-256/25)*(x-93/4)*(x-1259/50)*(x-1309/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.170430
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 27 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 27 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1871881/2500
>> basis
[(x-207/25)*(x-256/25)*(x-93/4)*(x-1259/50)*(x-1309/50), (-x+207/25)*(x-256/25)*(x-93/4)*(x-1259/50)*(x-1309/50), -x^2+1846881/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.013359
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14659
time= 0.130000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1871881/2500*(1/360287970189639680000*
48511467690830560992011910120467176526167^(1/2)+
28781938530348277379998229453540417450877/
71590290330622483017697705303536417479387206114983204890869760000*x*
48511467690830560992011910120467176526167^(1/2)-\
89414912829978750707379209547758832897677566248957523449396309028690076357593/
2396258787889050438409763544224900949378004123623148379701248000000000000000000\
0000000000000000000000*x^2*48511467690830560992011910120467176526167^(1/2)+
230075526879050376206829142229156597422432780539571563608401236394033/666736535\
0818492753216783078716734189483076903501824000000000000000000000000000000000000\
0000000*x^3*48511467690830560992011910120467176526167^(1/2))^2+1871881/2500*(1/
1533605624248992280582248668303936607601922639118814963008798720000000000000000\
000000*x*4734115335731294714740264079007527609697337786041396467680068496752333\
4769426887327724327879337059221223092420761191163322103413358974478253932833119\
79270330860515622^(1/2)+3203901306942329213258243196637085407056085714557447583\
509520080204156262920154789922994944423977761836326714570033506187/454838614654\
4727348257797647942871200734102396883512277073123682772875608727777839181736401\
9963868479564819755339284998130231316161085931435259333720857762960534733834174\
65725842882560000000000000000000000000*x^2*473411533573129471474026407900752760\
9697337786041396467680068496752333476942688732772432787933705922122309242076119\
116332210341335897447825393283311979270330860515622^(1/2)-827887296601415684107\
9509531082569281154349437760444275105662712728773704498158592191680858564335723\
88117964316359/9111929684388445395816689832198610383220345731546594596036934938\
9188113628639677933220709582962008160971810752137726032257588722575886096863113\
8953027551490196253137235513180160000000000000000000000000*x^3*4734115335731294\
7147402640790075276096973377860413964676800684967523334769426887327724327879337\
05922122309242076119116332210341335897447825393283311979270330860515622^(1/2))^
2+1871881/2500*(1/1460729447962776701903671822586181681537106279721588902878596\
8423195670942737175754679687573183746679525192407055250225690255080054858374237\
38880000000000000000000000000000000000000000*x^2*994779331586337330524570866523\
2321909478871022264473479047542618554626082261105069228789998784875894554070274\
9028176761526188162026531155935693705968601078021395513792688282871688644287545\
2787802863743450368536767148569799868359658854935168850409494568915983313657261\
4376424310472855829486916330444333880478349636229914163672737861940716557205664\
1304064921662^(1/2)-96880740507921622296104012824067742946519702279078977816705\
2894051123948123264124750310695167830697556066697172104118941420762465418299585\
6597632731857235241271192411962608519459237688466044464851614846752536159969795\
019041/803435545826268143930888228175501298686258381390540131141847422197358126\
8313882295837945405303215557344737015711176451419095741642395950408826523837000\
3186530675731121417980521954916691485001318538692929130666251002141130295674254\
0611063151002273561606879436144365777581862232166942965997623719184053558646947\
5437983859166576979694790081168519485098834685212386918400000000000000000000000\
00000000000000000000*x^3*994779331586337330524570866523232190947887102226447347\
9047542618554626082261105069228789998784875894554070274902817676152618816202653\
1155935693705968601078021395513792688282871688644287545278780286374345036853676\
7148569799868359658854935168850409494568915983313657261437642431047285582948691\
63304443338804783496362299141636727378619407165572056641304064921662^(1/2))^2+
1270628637923221699326782079170183966187191988910992461764264054932147432070564\
0609005800835709896867614963274252993741879185463889556364764030854339139160859\
1778512493227097062941215196460403830257259189646009977242051819105978651667290\
796343375502778291966719765696594659243335460857575251369898551279685141/114710\
0879387506690852503812619784704479279125372479652084373254129677270069772013187\
3434971716768981867338509681970839545229694401469040619448752494754580748823082\
7720148360821886160175866302011527874614242132571856068077453986497163029276369\
12212046512128000000000000000000000000000000000000000000000000000000000000*x^6,
16042311747722529454479364491194440249/3169126500570573503741758013440000]
>> Degree size
6
>> Succeeds RealCertify Batch: 27 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 28 Test 1 - Weifeng
>> input polynomial
-x^2+300014/625
>> basis
[(x-261/100)*(x-601/100)*(x-787/100)*(x-277/25)*(x-492/25), -(x-261/100)*(x-601/100)*(x-787/100)*(x-277/25)*(x-492/25)]
>> Time taken
1.516000
">> Sums of squares multipliers", [-x^2+300014/625-11027/114687692*x^2*(x-261/
100)*(x-601/100)*(x-787/100)*(x-277/25)*(x-492/25)+11027/114687692*(x+1)^2*(x-\
261/100)*(x-601/100)*(x-787/100)*(x-277/25)*(x-492/25), 11027/114687692*x^2, 
11027/114687692*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 28 Test 1 - Weifeng

>> Test
Batch: 28 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+300014/625
>> basis
[(x-261/100)*(x-601/100)*(x-787/100)*(x-277/25)*(x-492/25), -(x-261/100)*(x-601/100)*(x-787/100)*(x-277/25)*(x-492/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -6.125177
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 28 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 28 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+300014/625
>> basis
[(x-261/100)*(x-601/100)*(x-787/100)*(x-277/25)*(x-492/25), -(x-261/100)*(x-601/100)*(x-787/100)*(x-277/25)*(x-492/25), -x^2+293764/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.020834
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14093
time= 0.121000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [300014/625*(1/225179981368524800000*
14239463798113315776855542446781641874619^(1/2)-\
15885947005136071885477131759031786129/
4104246006728882983406440143249301808086049302725877825536000*x*
14239463798113315776855542446781641874619^(1/2)-\
30814393101344511042134133251193340129394866773800146933876878576038707183/3522\
8669971354268056403152460197335223707046380271954821120000000000000000000000000\
00000000000000*x^2*14239463798113315776855542446781641874619^(1/2)+
670285297031736425317161006979910988831592298482530205363516510023/815440417672\
9685035162051803368929640623031661363200000000000000000000000000000000000000000\
0*x^3*14239463798113315776855542446781641874619^(1/2))^2+300014/625*(1/25051498\
6462963683956644639716958828257472329815267234283520000000000000000000000*x*220\
8456888988226418523509897164140709192441412338419638903597212028646978250739986\
13497372765654295098094259371968645144713899742368522008424017128254101072541^(
1/2)+10721184124456980406866621220271388575404015857071556894080590683015161257\
0596651870242162180100351616496835007957/27973140812750197545177957184002709064\
6840252588051887229290787313347294922163367949902972252771333747318181178622655\
5389797492336512417285516987793787065191621940862066360320000000000000000000000\
000*x^2*22084568889882264185235098971641407091924414123384196389035972120286469\
7825073998613497372765654295098094259371968645144713899742368522008424017128254\
101072541^(1/2)-540553921313450501018938725600595753763774609691453943554928558\
5989600453125296958601157555619343731899903755497/63651465581064444295404499248\
7434454886248460961077666426219590216606847236674041390736529154945759769552570\
9398219178036475258160371883312932942020123404810488549296046080000000000000000\
00000000*x^3*220845688898822641852350989716414070919244141233841963890359721202\
8646978250739986134973727656542950980942593719686451447138997423685220084240171\
28254101072541^(1/2))^2+300014/625*(1/24149290361344214738203975578647581052313\
6548683584334119912547295910465489090554515428395857213089079529391342241358631\
945741099073536000000000000000000000000000000000000000*x^2*50947528555710006694\
5153063650176176444019189620488072017103344363719605677842302231611740029328461\
5628842909469291811554329720111847674169283628452347565074144605169484943612333\
8474839518149125060724757151524457789516601592992499429052800145063062188631090\
9709420827254830070286452212473250510783042736448231263193461109922525740394567\
9181^(1/2)-35102589597135225817918466081505749119099334459483711422137070418594\
8574861327313707518401446086039941961680235989346755791991752897490509247935809\
55801967153171435275876442559161905094829290710117978702627148143/2503160750720\
3118338938147196473362011043523289415659723983431268191439107344311915311194365\
6314946416157987841663645913133739657745119801991273425560128347973493548649422\
7261701961164243080635545321184129914276408962130663385673454578613333234736792\
6534000235919595609084010790288201385389371423776517495696859551504487948504585\
1139697465505087488000000000000000000000000000000000000000000*x^3*5094752855571\
0006694515306365017617644401918962048807201710334436371960567784230223161174002\
9328461562884290946929181155432972011184767416928362845234756507414460516948494\
3612333847483951814912506072475715152445778951660159299249942905280014506306218\
8631090970942082725483007028645221247325051078304273644823126319346110992252574\
03945679181^(1/2))^2+7850855621113939434112612147103877563757420141697564288146\
6060102291672974902029207879953170480279938985517527069065023603322367792773504\
3610052032146866965915508603015338926198730635128837267917838244033944182481570\
4415598807412848149239690766042940710904397655263678301720960299032404127730489\
748561/113531909584170475117938062878653385739733209338196584639689889855846697\
7911490060210016824697197523549032148208998348299393259252208425360510859119433\
7451881313532264956824200587141762692715322307424310083636834928828391982654362\
5044611101982411718656000000000000000000000000000000000000000000000000000000000\
000*x^6, 1400295380880007410514486767925196983/
25353012004564588029934064107520000]
>> Degree size
6
>> Succeeds RealCertify Batch: 28 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 29 Test 1 - Weifeng
>> input polynomial
-x^2+3489281/10000
>> basis
[(x-263/100)*(x-809/100)*(x-1097/100)*(x-1641/100)*(x-1741/100), (-x+263/100)*(x-809/100)*(x-1097/100)*(x-1641/100)*(x-1741/100)]
>> Time taken
1.545000
">> Sums of squares multipliers", [-x^2+3489281/10000-1264/670013*x^2*(x-263/
100)*(x-809/100)*(x-1097/100)*(x-1641/100)*(x-1741/100)-1264/670013*(x+1)^2*(-x
+263/100)*(x-809/100)*(x-1097/100)*(x-1641/100)*(x-1741/100), 1264/670013*x^2,
1264/670013*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 29 Test 1 - Weifeng

>> Test
Batch: 29 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+3489281/10000
>> basis
[(x-263/100)*(x-809/100)*(x-1097/100)*(x-1641/100)*(x-1741/100), (-x+263/100)*(x-809/100)*(x-1097/100)*(x-1641/100)*(x-1741/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -5.571343
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 29 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 29 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+3489281/10000
>> basis
[(x-263/100)*(x-809/100)*(x-1097/100)*(x-1641/100)*(x-1741/100), (-x+263/100)*(x-809/100)*(x-1097/100)*(x-1641/100)*(x-1741/100), -x^2+3389281/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.028662
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14280
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [3489281/10000*(1/225179981368524800000*
16854451893209204120139447745046991290710^(1/2)-\
683059861802468826320028028829530715161/
31090976057667961862985038783395760499123296112809120628736000*x*
16854451893209204120139447745046991290710^(1/2)-\
1547203975962944906915141542330720418706132881604663447077487063425521416859/12\
9324379002422956987903474701840809095074455480335618539520000000000000000000000\
000000000000000000*x^2*16854451893209204120139447745046991290710^(1/2)+
11919949312307511903578971441765954797187596124001169474654741904777/1853166583\
6374736942639970054266310035659847326760960000000000000000000000000000000000000\
0000*x^3*16854451893209204120139447745046991290710^(1/2))^2+3489281/10000*(1/41\
3838012807753462361291119045890589104238257537073979326464000000000000000000000\
0*x*829780160321554802316283340982036399697165220778102340144646537481158439911\
1673972892568726520980295891120827861619544964339063256247245878252677711323012\
6265453^(1/2)+42684523505220733664381650171174446425678034255418482562209941700\
419386894685396592930885638008638018194797326321129/597919619331773542088026745\
3619178649723290814713336439169057722977948212899927489471657502094809121784114\
9613881596308090761165621555628059620202178199419876416054823500203950080000000\
0000000000000000*x^2*8297801603215548023162833409820363996971652207781023401446\
4653748115843991116739728925687265209802958911208278616195449643390632562472458\
782526777113230126265453^(1/2)-183951443135837613479170558045525708793870384721\
7009769056560844472611664675402823233518178796559068661907035849/25703846408405\
0643422538946574631506450324184898550866460843554430466400365860222613411939397\
8935397486236402881349895928019031669628598043248173571211350699889865053437952\
000000000000000000000000*x^3*82978016032155480231628334098203639969716522077810\
2340144646537481158439911167397289256872652098029589112082786161954496433906325\
62472458782526777113230126265453^(1/2))^2+3489281/10000*(1/11332753319167855624\
1035840170219411027635966576223477782863822026920146517527711864436356901279191\
5835872811297861815946517839590584481742848000000000000000000000000000000000000\
0000*x^2*3028964526067121775872304708130383648630564580165127190115404352543617\
6458899883324063613897745725356920008095530464921287414547200563868848389113178\
1411692423530846538753752741587881632443718415204957147708692139323544641450371\
7350336937411578149163293788493714527319054859827423211524054439873119107289518\
4514812006179130014704198335025271569338571352490^(1/2)-52939660602845235773728\
2208640251849479340890096133439339962977530796141886474326059230873713672442458\
8418910706008769402136304308398955363597115687099079041138218073583802167097773\
403603573623018766484330494933504801/318153579159700947676094644517796713912232\
5482721940938237099330738594764816646779652471080019405956330540751035318278637\
0403990903373276980314370769541623480195055226102683632466776051632012914925089\
1002226065257925330317089490650468485218536705494681806539937016544595904832609\
1254661021051771729007171989893133935778043615356759929097597789468174736613703\
6800000000000000000000000000000000000000000*x^3*3028964526067121775872304708130\
3836486305645801651271901154043525436176458899883324063613897745725356920008095\
5304649212874145472005638688483891131781411692423530846538753752741587881632443\
7184152049571477086921393235446414503717350336937411578149163293788493714527319\
0548598274232115240544398731191072895184514812006179130014704198335025271569338\
571352490^(1/2))^2+225814849456528941683891551682188311338434254959718298256078\
0460115335777288100721081797458778384290741454610661949219987476598545329594484\
5439059691717856568031311363862848335515322763469693490845262933643766921394417\
8766390699359080185742574688675807710898455034045646256602458611367409614173464\
723/268219680548706258130727356152455177598334346056201450213080276314634333269\
0883592291473194463486911791846996225429818779703373783669901063167165524616961\
4195145392840629876346793558817577727821736636303730404641693842412807111825884\
822403906528374374898073600000000000000000000000000000000000000000000000000*x^6
, 28405709726081194768676750487215256609/202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 29 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 30 Test 1 - Weifeng
>> input polynomial
-x^2+4709609/10000
>> basis
[(x-106/25)*(x-116/25)*(x-221/25)*(x-1947/100)*(x-2047/100), (-x+106/25)*(x-116/25)*(x-221/25)*(x-1947/100)*(x-2047/100)]
>> Time taken
1.622000
">> Sums of squares multipliers", [-x^2+4709609/10000-389/309164*x^2*(x-106/25)
*(x-116/25)*(x-221/25)*(x-1947/100)*(x-2047/100)-389/309164*(x+1)^2*(-x+106/25)
*(x-116/25)*(x-221/25)*(x-1947/100)*(x-2047/100), 389/309164*x^2, 389/309164*(x
+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 30 Test 1 - Weifeng

>> Test
Batch: 30 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+4709609/10000
>> basis
[(x-106/25)*(x-116/25)*(x-221/25)*(x-1947/100)*(x-2047/100), (-x+106/25)*(x-116/25)*(x-221/25)*(x-1947/100)*(x-2047/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -4.696608
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 30 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 30 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+4709609/10000
>> basis
[(x-106/25)*(x-116/25)*(x-221/25)*(x-1947/100)*(x-2047/100), (-x+106/25)*(x-116/25)*(x-221/25)*(x-1947/100)*(x-2047/100), -x^2+4609609/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.021238
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14522
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [4709609/10000*(1/900719925474099200000*
286531605234618729969398133907183791808207^(1/2)-\
32781151723982832257626579201859735310593/
10571150381584375590014160554046514040241870166987263677825024000*x*
286531605234618729969398133907183791808207^(1/2)-\
1677636393829112746939494707062242658753350275048797008358145386212857854763/74\
1868987343657158883079896461702122428260354925315378642944000000000000000000000\
000000000000000000*x^2*286531605234618729969398133907183791808207^(1/2)+
6519197992220073248356546181096634572301285569521045812857641440423/98451509900\
2455881798096052747826468222017415518617600000000000000000000000000000000000000\
000*x^3*286531605234618729969398133907183791808207^(1/2))^2+4709609/10000*(7/94\
9592303799881163370342267470978716708173254304403684662968320000000000000000000\
000*x*6284009268516845555897199699012755009908080737322556499516545279127995293\
7893752989732645163017241287637704904580109598251183781100308540997433157953472\
232250572134^(1/2)+418729218664230361472070014264400411298419463305627902456378\
1949472620962801078542771240023017891817409750176371650821/79241853040238584602\
7702295925089249655395615005194331901397512983121308602894969206830286582001006\
8476959293730214796249652975608393153867537834557018089466614583078609255758036\
992000000000000000000000000*x^2*62840092685168455558971996990127550099080807373\
2255649951654527912799529378937529897326451630172412876377049045801095982511837\
81100308540997433157953472232250572134^(1/2)-1292370225423993598590761644740860\
6979170706400772705666511698954121804870072728309154089385378272252479288973826\
23/8076273308318062202048983302946016109502718701329415654519744765051583435682\
0191489203994972695288141094949941502640711783789870709621836046647621646907056\
275266160688338305024000000000000000000000000*x^3*62840092685168455558971996990\
1275500990808073732255649951654527912799529378937529897326451630172412876377049\
04580109598251183781100308540997433157953472232250572134^(1/2))^2+4709609/10000
*(1/119244474068550263173928975174675049559768476153933616815919919671857202100\
6589015275186169453089187657435920672059659862700591961796738704998400000000000\
0000000000000000000000000000*x^2*1408265856791347577345750324741440996062215781\
8670008572466373758373993640056857998825658877547423128153081262537530570709720\
2698987587102464034705401949804651409301993825140409189184660406787157892987489\
6624144780057488956175303689796325410039726254933213301262566252986391220515867\
8028678362677794699087705193061893456917296217137829216864898022147580782^(1/2)
-952080512573963494530264351904549221498393970453511271127336363002218383615247\
3131305004982377075648140484930483100004604489378696659386897799871653138454098\
70354483887284622829188986120724811787261266612275651132428867/4602858875033628\
1224705235648172902554456557915655412575579262169176508965883796989672052445209\
4030888291446786255581398145143729740807398551216755374546443467223629483301266\
4211128719773071668089869200641583100457254231633855022363960013238667239879875\
1369590392460510300469632691377227192759952976032883862704136685535602951597467\
16648871509603054270794642227200000000000000000000000000000000000000000*x^3*140\
8265856791347577345750324741440996062215781867000857246637375837399364005685799\
8825658877547423128153081262537530570709720269898758710246403470540194980465140\
9301993825140409189184660406787157892987489662414478005748895617530368979632541\
0039726254933213301262566252986391220515867802867836267779469908770519306189345\
6917296217137829216864898022147580782^(1/2))^2+11015574932165872149049939431962\
7163362323104503893850758177803054112374638520993384195488509128343547824856488\
3998978941819809815676154779945154921902078186373171327354137465720364830995874\
4457360375454087395510463377126641520029282378571845076947688348201194153383660\
5236642733452801938741359192051181070347/21238130364178398655635276851187891724\
6191152345577903112752151966121406554815027349143025392502580078643591542641855\
7489343535403238336188580139321176643989169722324688758459669444690352979849421\
3624096617932955384994176419823513436974282039951476987983508275200000000000000\
000000000000000000000000000000000000000000*x^6, 
263204395101729268086788742628278776969/811296384146066816957890051440640000]
>> Degree size
6
>> Succeeds RealCertify Batch: 30 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 31 Test 1 - Weifeng
>> input polynomial
-x^2+869561/2500
>> basis
[(x-331/50)*(x-69/10)*(x-209/25)*(x-819/50)*(x-869/50), -(x-331/50)*(x-69/10)*(x-209/25)*(x-819/50)*(x-869/50)]
>> Time taken
1.267000
">> Sums of squares multipliers", [-x^2+869561/2500-644/687671*x^2*(x-331/50)*(
x-69/10)*(x-209/25)*(x-819/50)*(x-869/50)+644/687671*(x+1)^2*(x-331/50)*(x-69/
10)*(x-209/25)*(x-819/50)*(x-869/50), 644/687671*x^2, 644/687671*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 31 Test 1 - Weifeng

>> Test
Batch: 31 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+869561/2500
>> basis
[(x-331/50)*(x-69/10)*(x-209/25)*(x-819/50)*(x-869/50), -(x-331/50)*(x-69/10)*(x-209/25)*(x-819/50)*(x-869/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -5.895434
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 31 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 31 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+869561/2500
>> basis
[(x-331/50)*(x-69/10)*(x-209/25)*(x-819/50)*(x-869/50), -(x-331/50)*(x-69/10)*(x-209/25)*(x-819/50)*(x-869/50), -x^2+844561/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.028751
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14514
time= 0.124000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [869561/2500*(1/450359962737049600000*
64867771225251713145166845819250522943335^(1/2)-\
15161155526951506164523643842311856079751/
9572793395393272154343186838250287931582299828533947405434880000*x*
64867771225251713145166845819250522943335^(1/2)-\
5928036355163923495087494711091189801473937353418192199889316585685024375107/99\
2313360892721310592033373147935703286485221528984050728960000000000000000000000\
000000000000000000*x^2*64867771225251713145166845819250522943335^(1/2)+
303483951307806156883195118386954589488834815880533689224063885554901/713228687\
3007768507557501523383176275776550046007296000000000000000000000000000000000000\
0000000*x^3*64867771225251713145166845819250522943335^(1/2))^2+869561/2500*(1/
4536289649795297419849295420104848929309646726989641374760960000000000000000000\
000*x*8705523234132348113920571994154143903558480428828571807474802019052435735\
1675974773262918654121817367894192137076324436414077614721235291928646723047211\
266788694^(1/2)+590938049719239143853774949184809622468665049816512716332568370\
556864333684571176312313608299058891122704662679743867/175643736546000299004466\
9311431683547794016069898007754421238611692794016219851507715624847240066713050\
8898920452929020714787746759737123120447603089536780963923299852934232355635200\
00000000000000000000000*x^2*870552323413234811392057199415414390355848042882857\
1807474802019052435735167597477326291865412181736789419213707632443641407761472\
1235291928646723047211266788694^(1/2)-19766155549902187868426988798920681493692\
7278589835168287041104401433109120894799367578945933771207644576089717421/30298\
6915028388403466462268563967947239011881265030473035457882487737033322535999380\
5422817789781360452383257836930765187512045749476538699489904058979780768213495\
06008219648000000000000000000000000*x^3*870552323413234811392057199415414390355\
8480428828571807474802019052435735167597477326291865412181736789419213707632443\
6414077614721235291928646723047211266788694^(1/2))^2+869561/2500*(1/42601466298\
1181373739611143102601633112759128741584264013231124382750956668939911447274532\
4730562778828408083411065900628932436324528422912000000000000000000000000000000\
0000000000*x^2*4227822789084456060049496395196544478235868026279024551546501515\
8030588390983259616066325584562489525234543373311705498162553743674844900947327\
8792395958202782939917019730289239841222825408103882860744359549922611701280622\
6954046512373239011456437441154136170822868958594400714668833002105153991732550\
25504928344319450263737029872426655966227324075390^(1/2)-1294962055906879092599\
6103655908003818551072170716056512584612979913219582666168511433317649367000135\
2775466076831256458465635870096088720556819834142470053585089203190174671268208\
6778028195573063094905744164448763646841/59171847209454157425210913755239266887\
9264747765066526099333286634250587069361666263079053531841873659388775618304828\
7693411207199212243012338335150243630023741468449149312844075727094966277878713\
6701000292737528198383941207178113125884874622555659921554181177400868712200502\
4789300699455059406844322858626904480871842365604600585335247098522081435566106\
21440000000000000000000000000000000000000000000*x^3*422782278908445606004949639\
5196544478235868026279024551546501515803058839098325961606632558456248952523454\
3373311705498162553743674844900947327879239595820278293991701973028923984122282\
5408103882860744359549922611701280622695404651237323901145643744115413617082286\
8958594400714668833002105153991732550255049283443194502637370298724266559662273\
24075390^(1/2))^2+9832492368722804861946331492098365686937018990502040600538293\
3657142599444878284769356995928797186147529780522753929343399310228323957263342\
5128826911697396854250576465936486229676116890615847830328125453024690743525422\
1836536134172122999345496050678433860481105613100924054111392547631347090459679\
11856354705467/2257629380445097158062398099991180422537106153413194041428351333\
9212308108579184603824320173896922854206723263328573491646990824454501193862332\
4049750217552695845255875197429807834019201345138798458228062349716125437680380\
6657716891572148732806543662089418833920000000000000000000000000000000000000000\
00000000000000000000*x^6, 26908389728359109212735458664850925081/
202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 31 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 32 Test 1 - Weifeng
>> input polynomial
-x^2+5312089/10000
>> basis
[(x-69/10)*(x-651/50)*(x-319/20)*(x-2083/100)*(x-2183/100), (-x+69/10)*(x-651/50)*(x-319/20)*(x-2083/100)*(x-2183/100)]
>> Time taken
1.144000
">> Sums of squares multipliers", [-x^2+5312089/10000-277/1490551*x^2*(x-69/10)
*(x-651/50)*(x-319/20)*(x-2083/100)*(x-2183/100)-277/1490551*(x+1)^2*(-x+69/10)
*(x-651/50)*(x-319/20)*(x-2083/100)*(x-2183/100), 277/1490551*x^2, 277/1490551*
(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 32 Test 1 - Weifeng

>> Test
Batch: 32 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+5312089/10000
>> basis
[(x-69/10)*(x-651/50)*(x-319/20)*(x-2083/100)*(x-2183/100), (-x+69/10)*(x-651/50)*(x-319/20)*(x-2083/100)*(x-2183/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.575007
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 32 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 32 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+5312089/10000
>> basis
[(x-69/10)*(x-651/50)*(x-319/20)*(x-2083/100)*(x-2183/100), (-x+69/10)*(x-651/50)*(x-319/20)*(x-2083/100)*(x-2183/100), -x^2+5212089/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.018827
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14599
time= 0.123000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [5312089/10000*(13/360287970189639680000*
272649114293691512166419987918829966247^(1/2)+
21352771970181970491757733425346814823251/
261533398531564229355707386267345912912855466337360783867904000*x*
272649114293691512166419987918829966247^(1/2)-\
20386442428086599594012757369718472439501783986873313190235706010881439006937/
3105302205992054556803249479404507465316364499898026531225600000000000000000000\
00000000000000000000*x^2*272649114293691512166419987918829966247^(1/2)-\
33780994854316610806778834456001095595855825185556650078293214250187/2214290527\
8941127840404770105683152725823178407936000000000000000000000000000000000000000\
0000*x^3*272649114293691512166419987918829966247^(1/2))^2+5312089/10000*(1/7949\
5736473396596654163186672755391112098931197389479199375360000000000000000000000
*x*1837520154574979742163752364027463101109971916426192818573840603696749724984\
1588811799566432041724580867196707966757677316202387670031164455056872227855331\
268452518^(1/2)+659976995103558632360283943143243854407461543534419752491212420\
99066665827251270734715881040066016703165039744170130361/1434412214461140196105\
3114557785731235348276415037616663572940978745882253487618607450769710890362798\
1769013316135997240157511296742489483309967134180834245062059188625788774855475\
20000000000000000000000000*x^2*183752015457497974216375236402746310110997191642\
6192818573840603696749724984158881179956643204172458086719670796675767731620238\
7670031164455056872227855331268452518^(1/2)-35866584505395076923666301336645349\
78061876611862216853897315128815003263303072848095126443754248616927648497057/
1472879431111468949175408074722912679363645972768660313920288847030634763990480\
6435541240891610570939582150687487899315229933215974748384809540564500143069385\
0531757375356928000000000000000000000000*x^3*1837520154574979742163752364027463\
1011099719164261928185738406036967497249841588811799566432041724580867196707966\
757677316202387670031164455056872227855331268452518^(1/2))^2+5312089/10000*(1/
1968172655260711028637249739677624237497909303579968731017954464750746902225568\
3647324062470485392262103340663151827994018320729722311850904780800000000000000\
00000000000000000000000000*x^2*306812057502914879581304865495989104222319838449\
8915861224623295047574408164656108262629144036304844290616219351247320930521228\
6154165608715383497344882931930643554601086648938092472423811725042937016853431\
7640271707697148878764120554272969808508211264436136781023537323443090173839899\
903732580715467133329602011076111431286699021780494071830224627118529477518^(1/
2)-1501626344975034900902307659863648206508092168078475900292413455017977855310\
4472408479735583766739185422042805226294116156339175784193038736439211523338956\
0801592345894574009452434512411255433488411506673036077134194046091/39690532383\
5798935589665781672242922679103974167386938627434338909580493766388428147935851\
3040697245219970970155287557931865965389345996382229430062466951155094222472397\
8075894839953979401538105482399311695343015310989355062589801238007986639812341\
9973787943795393128755312178365632450759449243415194773736211792014095656673861\
7514405089912409794753989637813829632000000000000000000000000000000000000000000\
0*x^3*3068120575029148795813048654959891042223198384498915861224623295047574408\
1646561082626291440363048442906162193512473209305212286154165608715383497344882\
9319306435546010866489380924724238117250429370168534317640271707697148878764120\
5542729698085082112644361367810235373234430901738398999037325807154671333296020\
11076111431286699021780494071830224627118529477518^(1/2))^2+2754090008245577883\
4980843118051917371901132224480551126267427421625710141942950040391104503052916\
4793844150544101784759974277608890118486849169843970614833125058224717022593229\
1682335303156969646508735069528216174680768939006285294971211308024193916080285\
0366014325113114806245200174201002921168445975368292881/24443373550750506076532\
1279595570056573447558032284732960931076735361995532234576371606649264806430226\
9933647320674077916015116462646204842678231049351963019310892980622765200726114\
5959330318263833855028338494436757693050994389523166145157332816569558976430080\
00000000000000000000000000000000000000000000000000000000000*x^6, 
101466904990053129793177318717132744281/202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 32 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 33 Test 1 - Weifeng
>> input polynomial
-x^2+7234241/10000
>> basis
[(x-29/10)*(x-681/100)*(x-1111/100)*(x-621/50)*(x-2471/100), -(x-29/10)*(x-681/100)*(x-1111/100)*(x-621/50)*(x-2471/100)]
>> Time taken
1.578000
">> Sums of squares multipliers", [-x^2+7234241/10000-107/3622813*x^2*(x-29/10)
*(x-681/100)*(x-1111/100)*(x-621/50)*(x-2471/100)+107/3622813*(x+1)^2*(x-29/10)
*(x-681/100)*(x-1111/100)*(x-621/50)*(x-2471/100), 107/3622813*x^2, 107/3622813
*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 33 Test 1 - Weifeng

>> Test
Batch: 33 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+7234241/10000
>> basis
[(x-29/10)*(x-681/100)*(x-1111/100)*(x-621/50)*(x-2471/100), -(x-29/10)*(x-681/100)*(x-1111/100)*(x-621/50)*(x-2471/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.706975
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 33 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 33 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+7234241/10000
>> basis
[(x-29/10)*(x-681/100)*(x-1111/100)*(x-621/50)*(x-2471/100), -(x-29/10)*(x-681/100)*(x-1111/100)*(x-621/50)*(x-2471/100), -x^2+7134241/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.013826
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14591
time= 0.127000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [7234241/10000*(3/225179981368524800000*
2002233061925798968046688642530326770815^(1/2)-\
6524031823328164421054922961439505306631/
443216170431180741411634186004896576464492843824818138644480000*x*
2002233061925798968046688642530326770815^(1/2)-\
20582136891022862057431215193127296308365552545207223851427177942054445549617/
1146673891066158556198039736294120197612906399370704721018880000000000000000000\
000000000000000000000*x^2*2002233061925798968046688642530326770815^(1/2)+
182385781394678427928902229168544108109115454284185396812258183736973/880591413\
2419839330745422562060685484895961360629760000000000000000000000000000000000000\
000000*x^3*2002233061925798968046688642530326770815^(1/2))^2+7234241/10000*(1/
1223118817137235793277909052047061544120433492662085035753472000000000000000000\
0000*x*331757643413373156383121675018156749704784139150985795199504867973730242\
5754010583309597146827385301159721102316157820259675955561987511596513429856741\
57032329558^(1/2)+1992937698078257676854599495684917549684997022899103550756037\
528481639046789094500581270876995858706014493518716167833/430301836585088995320\
8411171485556172399912611523415953681615783847905182858853750608441867821233363\
8973585316858221767764810227028121574057437325023348657044583716811275332118118\
40000000000000000000000000*x^2*331757643413373156383121675018156749704784139150\
9857951995048679737302425754010583309597146827385301159721102316157820259675955\
56198751159651342985674157032329558^(1/2)-1211678806135385386126242109989934583\
9574936596268159325007916869441415711589220232583021567657284780697789528901/10\
5744478628502422255699709116023365299058865845812151865161271147966828748849718\
0894997521511313485445393749392233021150137033699181350323212125962832065685510\
73747593854976000000000000000000000000*x^3*331757643413373156383121675018156749\
7047841391509857951995048679737302425754010583309597146827385301159721102316157\
82025967595556198751159651342985674157032329558^(1/2))^2+7234241/10000*(23/3389\
0156421000122960351112591990603729927350334105509571261046298152759925307285038\
8572442294907320967661329147652706187392888709537810224250880000000000000000000\
000000000000000000000*x^2*57072786095294498687754713293450669858676561287544295\
0090600311952922116015605729905667470221074418136809188386720099162614146109046\
1692287658341818110669970880653970593276918003655600790943915200734896191503298\
2101933772501696381857241807376411473100523426105158273573152570059017054201216\
97138528174491058386864060016136884281397400682497976355754337710^(1/2)-2011264\
7953901438257965734242122348501356790056694291806067566118397940063544203978276\
9589002059325156363019822987579336368132979452262586276886738162687111156495558\
71678906314328221146559629774441023828543836147788014361/1117253672091614624650\
7014631418112001720305829254994104904545544805786417883629263295076837036292481\
8792025948279206412425689776377232334638179804326885512728934805368739057272715\
8615634738346529935166070334183319715842793942958074245730414877207000455228023\
0901886785769482531678580446366929888375086364081264475114474780106624803070328\
63441046230411603376865280000000000000000000000000000000000000000000*x^3*570727\
8609529449868775471329345066985867656128754429500906003119529221160156057299056\
6747022107441813680918838672009916261414610904616922876583418181106699708806539\
7059327691800365560079094391520073489619150329821019337725016963818572418073764\
1147310052342610515827357315257005901705420121697138528174491058386864060016136\
884281397400682497976355754337710^(1/2))^2+190072911216677756869660375171263815\
6925155694875628767637735452800054252153240652115826363517569406305722088737543\
4752412256585469457959884748196640496004920163794980049579871409256938999966607\
3430827956829964041166817668023303493104570769959214483713726366411837265849607\
19702499143137724644583724486618849777201/1025323806601342852126334682696064890\
1542731089441502726892742889071486407889770286378202661478575577136742954484725\
7162118532878318768062224375818265987942165758955144641581443578437381826461949\
2227689762708742395885430443868051913293352178060653907240508960276480000000000\
00000000000000000000000000000000000000000000000000*x^6, 
38152406901088122343296935285391714801/50706024009129176059868128215040000]
>> Degree size
6
>> Succeeds RealCertify Batch: 33 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 34 Test 1 - Weifeng
>> input polynomial
-x^2+265331/625
>> basis
[(x-493/100)*(x-571/100)*(x-73/5)*(x-459/25)*(x-484/25), (-x+493/100)*(x-571/100)*(x-73/5)*(x-459/25)*(x-484/25)]
>> Time taken
1.178000
">> Sums of squares multipliers", [-x^2+265331/625-1163/1322402*x^2*(x-493/100)
*(x-571/100)*(x-73/5)*(x-459/25)*(x-484/25)-1163/1322402*(x+1)^2*(-x+493/100)*(
x-571/100)*(x-73/5)*(x-459/25)*(x-484/25), 1163/1322402*x^2, 1163/1322402*(x+1)
^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 34 Test 1 - Weifeng

>> Test
Batch: 34 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+265331/625
>> basis
[(x-493/100)*(x-571/100)*(x-73/5)*(x-459/25)*(x-484/25), (-x+493/100)*(x-571/100)*(x-73/5)*(x-459/25)*(x-484/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -4.492966
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 34 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 34 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+265331/625
>> basis
[(x-493/100)*(x-571/100)*(x-73/5)*(x-459/25)*(x-484/25), (-x+493/100)*(x-571/100)*(x-73/5)*(x-459/25)*(x-484/25), -x^2+259081/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.023559
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14554
time= 0.120000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [265331/625*(1/225179981368524800000*
17539669025482355629448566161037594530495^(1/2)+
1248508894238937952127517911332406986691/
10353593140820596165591829526586577207809056014144015632957440000*x*
17539669025482355629448566161037594530495^(1/2)-\
15687073884854693261114609584710918343437679094495586654942580141992049098887/
1571919949520341644980990821906324262881384644292170989174784000000000000000000\
000000000000000000000*x^2*17539669025482355629448566161037594530495^(1/2)-\
47577053875432953521015094839582635958270013420770660632155499634681/9642535020\
4301962308509550304958384556780159605145600000000000000000000000000000000000000\
000000*x^3*17539669025482355629448566161037594530495^(1/2))^2+265331/625*(1/349\
3155443378536988846646270902942806403076987315935531499520000000000000000000000
*x*4233949170856869905306775960761521448079671923259083262805911884968823734639\
2310886482018280295984868345011823632041353007960195194986925825563569760786140\
027110^(1/2)+158911933203499813028368861644383334413516655668667886912360025014\
84244784950993269987021679204193453741390804249359898493/1757307977457557281499\
0968390558949894445229968660209174582272559072563760041019070374469656083619704\
0852482569627631872959735286386201373396133859654778517315030147953775341469696\
000000000000000000000000000*x^2*42339491708568699053067759607615214480796719232\
5908326280591188496882373463923108864820182802959848683450118236320413530079601\
95194986925825563569760786140027110^(1/2)-4794861872329200534856102887665531234\
69595741119815231426961478410332024144400039763420804513816767426469941154389/
6899039852806326820317110354047927358675433534222430809136462474808416876797683\
4714526657489778567870906403452051255425989823122810989454915171152437418779638\
6989850859929600000000000000000000000000*x^3*4233949170856869905306775960761521\
4480796719232590832628059118849688237346392310886482018280295984868345011823632\
041353007960195194986925825563569760786140027110^(1/2))^2+265331/625*(1/8850200\
4323460624226558209498158959803646024491920335154557228754985302529951814925482\
7550423168447120516054096107939597141684876267237670912000000000000000000000000\
000000000000000*x^2*11396793847597615681261833572919392248176944336647612544003\
3208571327944933476811403010960221698838258500518941737344934224845227660227865\
3317861458405038900851823378565356066918558666639466500233267903529258342761816\
9874360049378091071108948738635263316267772962477088931924280776298687018863073\
3223813656067646476940083903763330586854870271758337378030^(1/2)-53011281449832\
5330419532188191007489246130045506744470153513996547670792586560726314358777058\
4966339956376692577475507122651371799796105559040355606848380633800965407346957\
68432588763287159549151968891910093717997703548503/7792529759213687130359849392\
7011775817107509448579003767430337111908857926116649977742261444962196108983075\
3185421514659910123309852591766921101344429860477548312795454612070439862541341\
8879561765902800364929578119109137153333173173987438272621195431584277574904272\
3679494917162690142827522584253755335034063328094002966274604392114223295734489\
234077495014195200000000000000000000000000000000000000000000*x^3*11396793847597\
6156812618335729193922481769443366476125440033208571327944933476811403010960221\
6988382585005189417373449342248452276602278653317861458405038900851823378565356\
0669185586666394665002332679035292583427618169874360049378091071108948738635263\
3162677729624770889319242807762986870188630733223813656067646476940083903763330\
586854870271758337378030^(1/2))^2+349344100328123834120921073124411997339539247\
7777441678763929631110014539395982543140942908830524705857374987897014040516397\
9262064635344842845020106062268898878439464697557997510615130128045415173696556\
4905684877001391766810425701889801784090549278613667315293211651682921910350179\
87193045558896635561765898887/2169073308148256569712203820543057280583663090299\
3592914539002986106307455325643415348116149820278591363641805519088728596954692\
8435443727872495249806078779036696439230522468077075613070837394464656037815294\
4034538728134762106635760562764312900985159680000000000000000000000000000000000\
000000000000000000000000000000000*x^6, 15473910897150806986754716570055691699/
50706024009129176059868128215040000]
>> Degree size
6
>> Succeeds RealCertify Batch: 34 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 35 Test 1 - Weifeng
>> input polynomial
-x^2+9226441/10000
>> basis
[(x-603/100)*(x-319/50)*(x-821/100)*(x-237/20)*(x-328/25)*(x-2821/100)*(x-2921/100), -(x-603/100)*(x-319/50)*(x-821/100)*(x-237/20)*(x-328/25)*(x-2821/100)*(x-2921/100)]
>> Time taken
1.758000
">> Sums of squares multipliers", [-x^2+9226441/10000-19/16172138*x^2*(x-603/
100)*(x-319/50)*(x-821/100)*(x-237/20)*(x-328/25)*(x-2821/100)*(x-2921/100)+19/
16172138*(x+1)^2*(x-603/100)*(x-319/50)*(x-821/100)*(x-237/20)*(x-328/25)*(x-\
2821/100)*(x-2921/100), 19/16172138*x^2, 19/16172138*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 35 Test 1 - Weifeng

>> Test
Batch: 35 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+9226441/10000
>> basis
[(x-603/100)*(x-319/50)*(x-821/100)*(x-237/20)*(x-328/25)*(x-2821/100)*(x-2921/100), -(x-603/100)*(x-319/50)*(x-821/100)*(x-237/20)*(x-328/25)*(x-2821/100)*(x-2921/100)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.690997
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 35 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 35 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+9226441/10000
>> basis
[(x-603/100)*(x-319/50)*(x-821/100)*(x-237/20)*(x-328/25)*(x-2821/100)*(x-2921/100), -(x-603/100)*(x-319/50)*(x-821/100)*(x-237/20)*(x-328/25)*(x-2821/100)*(x-2921/100), -x^2+9126441/10000]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.983734
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 35 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 36 Test 1 - Weifeng
>> input polynomial
-x^2+1715441/10000
>> basis
[(x-283/100)*(x-693/100)*(x-709/100)*(x-1071/100)*(x-1171/100), -(x-283/100)*(x-693/100)*(x-709/100)*(x-1071/100)*(x-1171/100)]
>> Time taken
1.166000
">> Sums of squares multipliers", [-x^2+1715441/10000-2581/682992*x^2*(x-283/
100)*(x-693/100)*(x-709/100)*(x-1071/100)*(x-1171/100)+2581/682992*(x+1)^2*(x-\
283/100)*(x-693/100)*(x-709/100)*(x-1071/100)*(x-1171/100), 2581/682992*x^2, 
2581/682992*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 36 Test 1 - Weifeng

>> Test
Batch: 36 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1715441/10000
>> basis
[(x-283/100)*(x-693/100)*(x-709/100)*(x-1071/100)*(x-1171/100), -(x-283/100)*(x-693/100)*(x-709/100)*(x-1071/100)*(x-1171/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -7.806119
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 36 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 36 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1715441/10000
>> basis
[(x-283/100)*(x-693/100)*(x-709/100)*(x-1071/100)*(x-1171/100), -(x-283/100)*(x-693/100)*(x-709/100)*(x-1071/100)*(x-1171/100), -x^2+1615441/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.058296
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13869
time= 0.117000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [1715441/10000*(1/225179981368524800000*
11928496190209160672785910732514242730654^(1/2)-\
38860472440175922790737000657777522881/
687630988765649371935096701675915892693944483082168120115200*x*
11928496190209160672785910732514242730654^(1/2)-\
67779541697504873587537984861201698771066579467216960046368288916219937/3295737\
4798109782605666133231100668242540009822779080704000000000000000000000000000000\
00000000*x^2*11928496190209160672785910732514242730654^(1/2)+
1863427821521953258430005462463915877231920604519320169824654531119/54648001095\
9028698551731667261056814745223111376896000000000000000000000000000000000000000\
0*x^3*11928496190209160672785910732514242730654^(1/2))^2+1715441/10000*(1/80353\
21855539146997190981054439781971514516680601375866880000000000000000000000*x*69\
1379426014778037017862718565278062470715324224659795012288161606130211120829950\
800313866666678148028768868694931899866801295639218114813346726307248845845^(1/
2)+3870529487846474373239528096168568118720419395919721869626285936361837174725\
0971193583263011047650523110671312553/81734523291009271615333010800857510980638\
8842079059416218083957365173569290401782226713034899356788373187360482140683349\
212852897949333334472052044781708291583904153862144000000000000000000000000*x^2
*691379426014778037017862718565278062470715324224659795012288161606130211120829\
950800313866666678148028768868694931899866801295639218114813346726307248845845^
(1/2)-5477944582095455699895728499239868286999734379868461221107885625422878450\
84719088084091260281769502332356879181/7115190094825403241045925185571167009790\
5281353583639904782815400354342127787159577346279981826216735946798810723506111\
1491365968053892718827557687424993174018787901440000000000000000000000000*x^3*
6913794260147780370178627185652780624707153242246597950122881616061302111208299\
50800313866666678148028768868694931899866801295639218114813346726307248845845^(
1/2))^2+1715441/10000*(1/473026577054416588356182992759756057034022972944416000\
5750489528151267780944578442682499032555804233262054015739821076811614508810240\
0000000000000000000000000000000000000*x^2*3772120194063082816751065494849418501\
5152851587687527978203002265458398726988973476898832657651910105869924062062934\
1655360463120865058535638582371712294386739468442154972992752821797913001042623\
3141638746972517701276284058921388516990522987104861730581346854843580692471683\
547385992667835562717993815593031583249715702213114178535339^(1/2)-125327653571\
0164261252653734397313276266028576614364587965698837088804216643014701453060862\
9074873555263405645782066937812173607877020536432372094121535533376033753661892\
0944229501921420657532048643654781028913/77005013270349446696521707055779262543\
7824342269336425677079934427485697050168816390425655920703301568894628629786980\
9302499539585138461562597486282035712913398080506104664918584726072049363089638\
7915620071442739132329387269387600875201718572543861474097754161743843242553769\
8843952994428793249677370781246811522739206763751959913764512333824000000000000\
0000000000000000000000000000*x^3*3772120194063082816751065494849418501515285158\
7687527978203002265458398726988973476898832657651910105869924062062934165536046\
3120865058535638582371712294386739468442154972992752821797913001042623314163874\
6972517701276284058921388516990522987104861730581346854843580692471683547385992\
667835562717993815593031583249715702213114178535339^(1/2))^2+427293432474966532\
4572039558770574159896165509181658542050922936223580973848571619590540907077153\
9546318269224432390704217949662382978206951290630341209655067528540925817498635\
7011696653226878366552472149153221030294359457890536837371285953512662821895947\
0062714321501040372800505058495969810971/15930203497384762833797829385593277809\
1134453280361803880094122047941375496129877546312453892870996833548195227608957\
5807665063470503714997438554175122725145303635134741721225049652096753799673806\
4253958852717370780549603158708525587399531217027072000000000000000000000000000\
0000000000000000000000000000*x^6, 4830175465516361099936317252351559121/
202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 36 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 37 Test 1 - Weifeng
>> input polynomial
-x^2+10708049/10000
>> basis
[(x-431/50)*(x-797/50)*(x-2379/100)*(x-3057/100)*(x-3157/100), (-x+431/50)*(x-797/50)*(x-2379/100)*(x-3057/100)*(x-3157/100)]
>> Time taken
1.412000
">> Sums of squares multipliers", [-x^2+10708049/10000-501/8077475*x^2*(x-431/
50)*(x-797/50)*(x-2379/100)*(x-3057/100)*(x-3157/100)-501/8077475*(x+1)^2*(-x+
431/50)*(x-797/50)*(x-2379/100)*(x-3057/100)*(x-3157/100), 501/8077475*x^2, 501
/8077475*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 37 Test 1 - Weifeng

>> Test
Batch: 37 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+10708049/10000
>> basis
[(x-431/50)*(x-797/50)*(x-2379/100)*(x-3057/100)*(x-3157/100), (-x+431/50)*(x-797/50)*(x-2379/100)*(x-3057/100)*(x-3157/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.190794
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 37 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 37 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+10708049/10000
>> basis
[(x-431/50)*(x-797/50)*(x-2379/100)*(x-3057/100)*(x-3157/100), (-x+431/50)*(x-797/50)*(x-2379/100)*(x-3057/100)*(x-3157/100), -x^2+10608049/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.945570
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 37 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 38 Test 1 - Weifeng
>> input polynomial
-x^2+3600641/10000
>> basis
[(x-191/25)*(x-909/100)*(x-1671/100), (-x+191/25)*(x-909/100)*(x-1671/100)]
>> Time taken
0.321000
">> Sums of squares multipliers", [-x^2+3600641/10000-3341/114083*x^2*(x-191/25
)*(x-909/100)*(x-1671/100)-3341/114083*(x+1)^2*(-x+191/25)*(x-909/100)*(x-1671/
100), 3341/114083*x^2, 3341/114083*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 38 Test 1 - Weifeng

>> Test
Batch: 38 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+3600641/10000
>> basis
[(x-191/25)*(x-909/100)*(x-1671/100), (-x+191/25)*(x-909/100)*(x-1671/100)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -149.710190
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 38 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 38 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+3600641/10000
>> basis
[(x-191/25)*(x-909/100)*(x-1671/100), (-x+191/25)*(x-909/100)*(x-1671/100), -x^2+3500641/10000]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 0.027774
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 6770
time= 0.123000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [3600641/10000*(3/36028797018963968000*
73327397385518705353564236544412913367^(1/2)-\
25502283515568551127605804104458658253/
41553461242732414381776796332511281141266355064068797984931840*x*
73327397385518705353564236544412913367^(1/2)-7519016094591505075654803958515577\
9690483316043497683178720494577530785846128386273/33442474061807978880110797075\
2171617388212151745506541830144000000000000000000000000000000000000000000000*x^
2*73327397385518705353564236544412913367^(1/2))^2+3600641/10000*(1/178359861662\
9758873605909177344915292737131475976034889760768000000000000000000000000*x*815\
8925933579266105001360337045429795896017883177506967868732063540350066504811212\
0459068273454955990130757153432472031537773984343897628092370967798160930113062
^(1/2)-206747644743986675442180598839689512335344127636649897846712838352979217\
19069198136252779609623058839426148121954765867/1238446233159128210296751586239\
1316552747723089289995652670172391052477970969505546095303023056005705863627121\
8009606167654980079391601094795804008013673785947644932238096547138502656000000\
0000000000000000*x^2*8158925933579266105001360337045429795896017883177506967868\
7320635403500665048112120459068273454955990130757153432472031537773984343897628\
092370967798160930113062^(1/2))^2+655728574666793669666017124591924877931843197\
2752798762049872731467063541693758898918099712251889547700013230689940905856840\
3381839710576898464702857352071972869761104177593817278389081783858961376292776\
411318169704587786648362924133065187863/850064806563026986689843868964530310484\
6627309309406150366602983430118336373082300402271563011045470192904961465701093\
6719431371789455722003474482724864000000000000000000000000000000000000000000000\
0000000000000000000000000000000000000000000000000*x^4, 
82814945053678743983570200896348194001/3245185536584267267831560205762560000]
>> Degree size
4
>> Succeeds RealCertify Batch: 38 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 39 Test 1 - Weifeng
>> input polynomial
-x^2+3976961/10000
>> basis
[(x-681/100)*(x-37/5)*(x-1497/100)*(x-65/4)*(x-1769/100), -(x-681/100)*(x-37/5)*(x-1497/100)*(x-65/4)*(x-1769/100)]
>> Time taken
1.047000
">> Sums of squares multipliers", [-x^2+3976961/10000-823/1685168*x^2*(x-681/
100)*(x-37/5)*(x-1497/100)*(x-65/4)*(x-1769/100)+823/1685168*(x+1)^2*(x-681/100
)*(x-37/5)*(x-1497/100)*(x-65/4)*(x-1769/100), 823/1685168*x^2, 823/1685168*(x+
1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 39 Test 1 - Weifeng

>> Test
Batch: 39 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+3976961/10000
>> basis
[(x-681/100)*(x-37/5)*(x-1497/100)*(x-65/4)*(x-1769/100), -(x-681/100)*(x-37/5)*(x-1497/100)*(x-65/4)*(x-1769/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.765135
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 39 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 39 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+3976961/10000
>> basis
[(x-681/100)*(x-37/5)*(x-1497/100)*(x-65/4)*(x-1769/100), -(x-681/100)*(x-37/5)*(x-1497/100)*(x-65/4)*(x-1769/100), -x^2+3876961/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.025149
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14452
time= 0.120000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [3976961/10000*(1/72057594037927936000*
1739844499135961016660053291730117671599^(1/2)-\
22827548565482597148500420456163836235729/
641889324072249039623670481163416636199092762249604555079680000*x*
1739844499135961016660053291730117671599^(1/2)-\
18848593006737671728874641757966918796864257349451131030171147081278307736337/
5705882925134216873804015324499031727570996025612092571648000000000000000000000\
00000000000000000000*x^2*1739844499135961016660053291730117671599^(1/2)+
42024593134832202979604552659831960163245540209730199845739041170763/4782448143\
3052498074149376240627217009595987368345600000000000000000000000000000000000000\
0000*x^3*1739844499135961016660053291730117671599^(1/2))^2+3976961/10000*(1/292\
1412057668719039387655846143504244516349965113391396683776000000000000000000000\
0*x*333573690527919112213491585872058184515595997193021745701080620153891594247\
9157694313467004292140816502341776076825929534947132704167575252694988435847651\
733526742^(1/2)+900468460996530096838532185841002794314261890266894349981424020\
885926949325453468658835524478443086491054325085437/320486900983922701844625870\
9119337574626110672579148875772376147450159854715488052993934513220107744310110\
4792142853116302668565120401847748042348000587264451124800517098576648601600000\
0000000000000000*x^2*3335736905279191122134915858720581845155959971930217457010\
8062015389159424791576943134670042921408165023417760768259295349471327041675752\
52694988435847651733526742^(1/2)-2136092218394881135569410776425795242543824026\
914558501520574297304213153587315920234631636127536323843430649137/241757639300\
9054163553219688942892003184927389968734072905700720311433671123871760115777735\
7284427061090947177110502051417654257952543548514588663052456836602967542691843\
276800000000000000000000000*x^3*33357369052791911221349158587205818451559599719\
3021745701080620153891594247915769431346700429214081650234177607682592953494713\
2704167575252694988435847651733526742^(1/2))^2+3976961/10000*(1/395454619571481\
6279119359551749979074375983031956210977401210030468553103992947185701865862143\
9346420486906318182389123608686001378058829824000000000000000000000000000000000\
00000000*x^2*256376664560853799451031463078285659536905230136459956781373383611\
8456117343601167565441591381162221092799144525491463349180651145026809864176557\
8079808246226002872958525015676589453153251668100911845928136159803664934328811\
2646120220385367389058710945174584287649373627836158932121422370158183105333538\
5815146859111580093494555488435051315899190603949886^(1/2)-14108529363892279000\
5079620659905144092274784202370840366552118900233660455948421308345315258528506\
5175580782814134292282780660507167754969554164442666838584081001624059443054709\
5286226254649944257927324518493840829436287/18783341803049555102333372814171456\
0308208222565392391544791542020537368707203631864787559413606189331693643732388\
2483303869999078022859363328238432582298682376709331708382059689405734011583457\
5623278080364291338601818112640041292062193777946610054397414687065222322068465\
4864621512231967624667772400243528637412456405984101816235542650826605435308585\
75260811264000000000000000000000000000000000000000000*x^3*256376664560853799451\
0314630782856595369052301364599567813733836118456117343601167565441591381162221\
0927991445254914633491806511450268098641765578079808246226002872958525015676589\
4531532516681009118459281361598036649343288112646120220385367389058710945174584\
2876493736278361589321214223701581831053335385815146859111580093494555488435051\
315899190603949886^(1/2))^2+170199027581311570670370783547747155613498500944444\
5611109124902487345640698928242931478208890523380396461211496153941546676720908\
9542110268466434982759338228329527246316796643879468620409513903642719735693726\
3991249053202419585147166307597744572296562120670917949725052926603561767209848\
83469376820447345169/1765466819936618745355673910098568882398589879166454901857\
8278539867588377016192504664149252410427587459164615412003798756420865012240554\
0670771780266407505346211363298804705721845240616108779128722064317915842022703\
1207230080684998697507421058503111675472647290880000000000000000000000000000000\
000000000000000000000*x^6, 48212049851960256459070622357812532001/
202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 39 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 40 Test 1 - Weifeng
>> input polynomial
-x^2+1304161/2500
>> basis
[(x-609/100)*(x-909/100)*(x-1209/100)*(x-1031/50)*(x-1081/50), -(x-609/100)*(x-909/100)*(x-1209/100)*(x-1031/50)*(x-1081/50)]
>> Time taken
1.082000
">> Sums of squares multipliers", [-x^2+1304161/2500-803/1759588*x^2*(x-609/100
)*(x-909/100)*(x-1209/100)*(x-1031/50)*(x-1081/50)+803/1759588*(x+1)^2*(x-609/
100)*(x-909/100)*(x-1209/100)*(x-1031/50)*(x-1081/50), 803/1759588*x^2, 803/
1759588*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 40 Test 1 - Weifeng

>> Test
Batch: 40 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1304161/2500
>> basis
[(x-609/100)*(x-909/100)*(x-1209/100)*(x-1031/50)*(x-1081/50), -(x-609/100)*(x-909/100)*(x-1209/100)*(x-1031/50)*(x-1081/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.586220
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 40 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 40 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1304161/2500
>> basis
[(x-609/100)*(x-909/100)*(x-1209/100)*(x-1031/50)*(x-1081/50), -(x-609/100)*(x-909/100)*(x-1209/100)*(x-1031/50)*(x-1081/50), -x^2+1279161/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.019172
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14241
time= 0.121000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [1304161/2500*(1/90071992547409920000*
2914711761030126930875001716445494082355^(1/2)-\
58625544090780179229746800694258335683/
4301355352348321982141540080415457788251627538717474186854400*x*
2914711761030126930875001716445494082355^(1/2)-\
85892618487185796676318902232191680828688742922023032768155453650305977327/4179\
5223188951164070901967978587030206501713562915622092800000000000000000000000000\
00000000000000*x^2*2914711761030126930875001716445494082355^(1/2)+
108548426340949594686487494422064566862657996858881191759433725066177/400594934\
1085107980427835211544723984088401811865600000000000000000000000000000000000000\
000000*x^3*2914711761030126930875001716445494082355^(1/2))^2+1304161/2500*(1/53\
4978856818574900107545190125913986643221933605319962787840000000000000000000000
*x*7797759649736741551508394687496537161604413364540939459778683806570601359215\
7104803690390984067583982674761249978073942440968964862428329522204224915360858\
3770^(1/2)+34547386322203663813624171442956283234977691715303396493301886604509\
456800068691904627648205595425315329186226395787/140471949811516314635029885599\
3833620917279671293047148447912871996498546645149930124559167042716037060793331\
2918415036377097751322064702750244091276852073794851942478569799680000000000000\
0000000000000*x^2*7797759649736741551508394687496537161604413364540939459778683\
8065706013592157104803690390984067583982674761249978073942440968964862428329522\
2042249153608583770^(1/2)-23670209187955819833293052881913023381354423873332451\
7754556735183960150029450434875264647722284736704806063877/64626353561339273894\
1111805671462474763750643345283511060940883217562193614967751738271195217177650\
7934802518823250366961026016567922842080192901617293604299554399715328000000000\
0000000000000000*x^3*7797759649736741551508394687496537161604413364540939459778\
6838065706013592157104803690390984067583982674761249978073942440968964862428329\
5222042249153608583770^(1/2))^2+1304161/2500*(1/5754353341057418716344233260000\
8570618197622065137549969275039215548129837039507170697441311036627685555488557\
46510919351755851592326184960000000000000000000000000000000000000000*x^2*256515\
9103834075566431027625771847654338681206837865356320933149896801550702110530462\
5480767212016142348404418117660444612529311319335536988115732040432983815547007\
0032927593217047376041365822352686669851260226749793990545359566892633992762926\
5479519496142693476396687817828725533839849611077413424864966996645982695551923\
563545055916937501913546170^(1/2)-545107542179994047982118409183730923693841483\
0504583498361774006118744632112109735762602679610583058989132728875331148133818\
1789042032977079325093095247148925828488090494646734281249616636489706192105141\
3304851923163/67582296725659011537464709295018712768616441013883674054659170203\
7342226014588724337799136293464370915004988577927182239883773760803758087012602\
9517935838606888057007061267165653381199286162675785796537368081752335238143938\
6857565259954389966895480162303441164889772487294412158604358175907028717982312\
8369378556013693244093348461914486807269631170969600000000000000000000000000000\
000000000000000*x^3*25651591038340755664310276257718476543386812068378653563209\
3314989680155070211053046254807672120161423484044181176604446125293113193355369\
8811573204043298381554700700329275932170473760413658223526866698512602267497939\
9054535956689263399276292654795194961426934763966878178287255338398496110774134\
24864966996645982695551923563545055916937501913546170^(1/2))^2+2068196674991693\
8955307602905375622491081218526304792804076986980334016665432539010887041591833\
2196569477749041227616924675772485158276463130888411175543383705390362788258404\
7657201211997288949945349406150335187278292641381665395217367994098630505178869\
9121563121890586140872290727118748108790703030270432587/27959518515813702706609\
1417934514304753693657398624749701379147476878260696474060434234827488480928187\
1957320238655270642197270732822714635020495874316703855835500463522242645423956\
8587185512093140437609277011016667224596615740826424330900041946198179840000000\
00000000000000000000000000000000000000000000000000000000*x^6, 
31606032530869337548917113802569401/49517601571415210995964968960000]
>> Degree size
6
>> Succeeds RealCertify Batch: 40 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 41 Test 1 - Weifeng
>> input polynomial
-x^2+315386/625
>> basis
[(x-27/10)*(x-93/20)*(x-303/25)*(x-506/25)*(x-531/25), (-x+27/10)*(x-93/20)*(x-303/25)*(x-506/25)*(x-531/25)]
>> Time taken
1.481000
">> Sums of squares multipliers", [-x^2+315386/625-675/715868*x^2*(x-27/10)*(x-\
93/20)*(x-303/25)*(x-506/25)*(x-531/25)-675/715868*(x+1)^2*(-x+27/10)*(x-93/20)
*(x-303/25)*(x-506/25)*(x-531/25), 675/715868*x^2, 675/715868*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 41 Test 1 - Weifeng

>> Test
Batch: 41 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+315386/625
>> basis
[(x-27/10)*(x-93/20)*(x-303/25)*(x-506/25)*(x-531/25), (-x+27/10)*(x-93/20)*(x-303/25)*(x-506/25)*(x-531/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -3.872158
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 41 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 41 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+315386/625
>> basis
[(x-27/10)*(x-93/20)*(x-303/25)*(x-506/25)*(x-531/25), (-x+27/10)*(x-93/20)*(x-303/25)*(x-506/25)*(x-531/25), -x^2+309136/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.019821
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13905
time= 0.115000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [315386/625*(1/11258999068426240000*
45997201794265132813288396498288612807^(1/2)-\
40485724262010258729835879530080048907/
212124652401395673244671117066150707737582142340651286528000*x*
45997201794265132813288396498288612807^(1/2)-\
2536924773885327799241952651754061276093169456471379993442621192797526117/14953\
5713245570456538968931720461712279599342221577420800000000000000000000000000000\
00000000000*x^2*45997201794265132813288396498288612807^(1/2)+
385471216801868791721632415645835252575648279534308054800815521369/101148916435\
9072080825191102343324221313391410544640000000000000000000000000000000000000000
*x^3*45997201794265132813288396498288612807^(1/2))^2+315386/625*(1/191405712954\
3301843698802326021909917178871580436190986240000000000000000000000*x*111528769\
8306470592553542126051140733678588470235661816930583642839596757953710258763011\
3881942027455792710189467577829181383687370283626658880874520947014^(1/2)+43844\
1016255196438924132044424321896234474454217361156181999137440798170006394324905\
56814404424810936539337519/6697079016671892164509807233428562046203787746273079\
2995935340524136302630509840600879858737317658077781069337155545059268972006913\
4398433881116870301060058982354171985920000000000000000000000*x^2*1115287698306\
4705925535421260511407336785884702356618169305836428395967579537102587630113881\
942027455792710189467577829181383687370283626658880874520947014^(1/2)-690466603\
9222732276696712496692108513783352699956859245960768954352858720529210472863902\
81020765363019012093503/6523253010347971288951991471115567148173360883663478914\
2039712000579201892578056833817267107937525957063232040655525109571852271577713\
4048081649478913095857518657142784000000000000000000000000*x^3*1115287698306470\
5925535421260511407336785884702356618169305836428395967579537102587630113881942\
027455792710189467577829181383687370283626658880874520947014^(1/2))^2+315386/
625*(1/255100044301774593440175166771314005733914739895423385043827276879991359\
2569056059589126571204083591403448171755946806909278040883200000000000000000000\
00000000000000000000*x^2*536159563693452919487154307751972787373026508038642583\
3875531582983356422751765873999843452151404072531041037662520403827401386622858\
8321451746205436603639823935475271575471996228821632669164817937889035933591196\
7783564993702275315003730507083510596446066870557104379395421466104537149660477\
1794255545181998883214687849807606572956882^(1/2)-62088624096345441163951281209\
6353792740528838430059597640052654825809529473740710224195565631774414119423710\
6413355112360774869101328380615939167903974126315832112588770178871826572015163\
4957478265028026558155527/49286577630244984574105541813796958199954837550916477\
5729259006109122152230607215972829486822764976490556906564236618689720513894317\
9851865791708198227051081551233961572171318394486703630249330259715767059614366\
5667607310638140189288227188324980431865559001996222129256189001151303737788300\
8409067510523249026780450576003234772479867755289378816000000000000000000000000\
0000000000000000*x^3*5361595636934529194871543077519727873730265080386425833875\
5315829833564227517658739998434521514040725310410376625204038274013866228588321\
4517462054366036398239354752715754719962288216326691648179378890359335911967783\
5649937022753150037305070835105964460668705571043793954214661045371496604771794\
255545181998883214687849807606572956882^(1/2))^2+100518549313079712379954311232\
8231790344196398874953377722974117197301849819253364337614407350312993528995332\
6676323764816623861078940735678693646670457918219077868721842473787885671597141\
8956639504722491803839482115141247311269192303813878574422503557066491666848965\
7328951115529265173320264230563/17796827082624764294074755099265047848170253058\
3182659232794213832492186906892941241388366531491832325748441673750684355508955\
4051404941754386519831386003747109937931285809557327439654127363759624295878130\
1403071734088296406227453968751876014676715241472000000000000000000000000000000\
0000000000000000000000*x^6, 9704626249331148381295628311740933/
24758800785707605497982484480000]
>> Degree size
6
>> Succeeds RealCertify Batch: 41 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 42 Test 1 - Weifeng
>> input polynomial
-x^2+3937681/10000
>> basis
[(x-137/100)*(x-8)*(x-56/5)*(x-729/50)*(x-1759/100), -(x-137/100)*(x-8)*(x-56/5)*(x-729/50)*(x-1759/100)]
>> Time taken
1.290000
">> Sums of squares multipliers", [-x^2+3937681/10000-959/795853*x^2*(x-137/100
)*(x-8)*(x-56/5)*(x-729/50)*(x-1759/100)+959/795853*(x+1)^2*(x-137/100)*(x-8)*(
x-56/5)*(x-729/50)*(x-1759/100), 959/795853*x^2, 959/795853*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 42 Test 1 - Weifeng

>> Test
Batch: 42 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+3937681/10000
>> basis
[(x-137/100)*(x-8)*(x-56/5)*(x-729/50)*(x-1759/100), -(x-137/100)*(x-8)*(x-56/5)*(x-729/50)*(x-1759/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -5.274965
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 42 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 42 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+3937681/10000
>> basis
[(x-137/100)*(x-8)*(x-56/5)*(x-729/50)*(x-1759/100), -(x-137/100)*(x-8)*(x-56/5)*(x-729/50)*(x-1759/100), -x^2+3837681/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.025398
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14792
time= 0.118000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [3937681/10000*(1/18014398509481984000*
112878501939015013071992054597100654007^(1/2)-\
165794012041105220478243073823187863811/
19037630506905026955943078321514532379123053243212102631424000*x*
112878501939015013071992054597100654007^(1/2)-503133199847826878766836313533201\
9103907120248762811829832566571678370244328713/37532959808665899334597655018590\
282746227038187348322523545600000000000000000000000000000000000000000*x^2*
112878501939015013071992054597100654007^(1/2)+
1042604437235354171780653384511281613581438237797860170600873342677703/49644490\
1631531077219551608899987215749402987593728000000000000000000000000000000000000\
00000000*x^3*112878501939015013071992054597100654007^(1/2))^2+3937681/10000*(1/
4289481120990388495382589144981746599568804364268379716976640000000000000000000\
000*x*7236495988017918929148963182985079484119409992401622519690414578465104512\
4118033056841917300524492677727398008792254343638605648960283967896653406480186\
093599318^(1/2)+275403898708686034398941893142749522793199049549980006017964139\
1493423654347432701583068762821198612016631313173332891/44496596493797497482182\
9248476532885841083969178123263159191999666940951951726204235874526997209982457\
1084299184873873888125600955847429518003372372545317198667211560121124477992960\
000000000000000000000000*x^2*72364959880179189291489631829850794841194099924016\
2251969041457846510451241180330568419173005244926777273980087922543436386056489\
60283967896653406480186093599318^(1/2)-2574121062128485370597100239148545656273\
91695217754982799731771647859145860249857857832080547383453553366498269531/4237\
5763006637819457235354559879236583767574986850439048947083289657759727590255937\
0484677717554427139769984464035482485261528386490115900513846764048305068262310\
820771266560000000000000000000000000*x^3*72364959880179189291489631829850794841\
1940999240162251969041457846510451241180330568419173005244926777273980087922543\
43638605648960283967896653406480186093599318^(1/2))^2+3937681/10000*(1/11028562\
4995042848440601220563373214705501425408963400900955359779223327056558206278009\
1456974753150104218740433655957713387677806273793674444800000000000000000000000\
000000000000000000*x^2*19566408254530351308113407107570854478264838849021858397\
7722384399803806104303581056636976330835957872245200208996799424965518062606185\
8991967343555308569023665458898010510356121873705358503321510108138789104106011\
0468901213755569444793036176337841880800733410964176738317539878062482769186780\
8524404014129856854648493757482956892868359721159087100728415731038^(1/2)-43613\
3226745810008281989340805487655408455136237000460625271377198785871228762666568\
5425275746861039809671268084658972756681836537940216636640685806809394906696664\
85738066596893476916936340708616155202573521864546671158770889/1408020249008847\
2597268127142663807543336349738969089341649052917679877718132965665621603147656\
3462174481392433265432750768537420152990058329210950873370604785683837820413921\
4697100187782659882308805519981539395698696881322850436263719109234659716641907\
5622006959668001486507952222964466570354900173853179716767151295829546388763444\
2351190469912677373604630941464002560000000000000000000000000000000000000000000\
0*x^3*1956640825453035130811340710757085447826483884902185839777223843998038061\
0430358105663697633083595787224520020899679942496551806260618589919673435553085\
6902366545889801051035612187370535850332151010813878910410601104689012137555694\
4479303617633784188080073341096417673831753987806248276918678085244040141298568\
54648493757482956892868359721159087100728415731038^(1/2))^2+3358551051380655644\
8333901480336177422448160146366176871284743633719768138924494875214342727530138\
0633785921812128776943552583729059499534355171165118598035810302957539179714505\
7846957978577400207304712784960421057713927745266931832869195190946442124608442\
532607693600034802337933968483243800948779877265637994222851248641/294692166137\
1444094528556878248157752552642227716019128493226566104521394571332606899879277\
9755423520943156282006870734988158223473156180312173622446296566317280811996511\
1550366437048596170598733483399399458140351358735842982993842665584122904358246\
1709920787469814464512000000000000000000000000000000000000000000000000000000000\
000*x^6, 2212659685514870218005098504667095169/
12676506002282294014967032053760000]
>> Degree size
6
>> Succeeds RealCertify Batch: 42 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 43 Test 1 - Weifeng
>> input polynomial
-x^2+166649/100
>> basis
[(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10), -(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10)]
>> Time taken
1.738000
">> Sums of squares multipliers", [-x^2+166649/100-4/15986209*x^2*(x-799/100)*(
x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10)+4/15986209
*(x+1)^2*(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)
*(x-397/10), 4/15986209*x^2, 4/15986209*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 43 Test 1 - Weifeng

>> Test
Batch: 43 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+166649/100
>> basis
[(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10), -(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.975429
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 43 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 43 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+166649/100
>> basis
[(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10), -(x-799/100)*(x-979/100)*(x-1679/100)*(x-493/25)*(x-1743/50)*(x-387/10)*(x-397/10), -x^2+165649/100]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.991920
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 43 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 44 Test 1 - Weifeng
>> input polynomial
-x^2+752609/2500
>> basis
[(x-531/100)*(x-947/100)*(x-67/5)*(x-753/50)*(x-803/50), (-x+531/100)*(x-947/100)*(x-67/5)*(x-753/50)*(x-803/50)]
>> Time taken
1.567000
">> Sums of squares multipliers", [-x^2+752609/2500-845/1638193*x^2*(x-531/100)
*(x-947/100)*(x-67/5)*(x-753/50)*(x-803/50)-845/1638193*(x+1)^2*(-x+531/100)*(x
-947/100)*(x-67/5)*(x-753/50)*(x-803/50), 845/1638193*x^2, 845/1638193*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 44 Test 1 - Weifeng

>> Test
Batch: 44 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+752609/2500
>> basis
[(x-531/100)*(x-947/100)*(x-67/5)*(x-753/50)*(x-803/50), (-x+531/100)*(x-947/100)*(x-67/5)*(x-753/50)*(x-803/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -9.743670
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 44 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 44 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+752609/2500
>> basis
[(x-531/100)*(x-947/100)*(x-67/5)*(x-753/50)*(x-803/50), (-x+531/100)*(x-947/100)*(x-67/5)*(x-753/50)*(x-803/50), -x^2+727609/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.033219
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14100
time= 0.120000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [752609/2500*(3/225179981368524800000*
1759071200574668396886129945605636476105^(1/2)+
1587508855431084789304784118138888802261/
48673704366650865385839667979524904897809479503990772203520000*x*
1759071200574668396886129945605636476105^(1/2)-\
267304607207633278358507204228521013893937074519769140666845421181221086473/655\
0359958949221577734602691841529455823092679980812861440000000000000000000000000\
000000000000000*x^2*1759071200574668396886129945605636476105^(1/2)-\
284749902089008401112740229420770940009864621113986355270964320677/241764904889\
7170294614616432762389625003411347865600000000000000000000000000000000000000000
*x^3*1759071200574668396886129945605636476105^(1/2))^2+752609/2500*(1/254074568\
10469707937879671047142902131677450395077092311040000000000000000000000*x*32336\
3367416732913295060050224679893740756284186898461486390933714783100147481474550\
5659851593121939477879144211058366186576322294242447125822538026631714657^(1/2)
+278407319872203855017334105369914961001998250595076346684754417182192648742637\
5739671999021799006603291175786119989/57669445983729378587527952158913993678927\
1804677065271282424909988212552676726623326041782879791161281047960430468399954\
409906790029736469034710459004321868476282837025370931200000000000000000000000*
x^2*323363367416732913295060050224679893740756284186898461486390933714783100147\
4814745505659851593121939477879144211058366186576322294242447125822538026631714\
657^(1/2)-115485597948434559178282956518664700740900987529306923276337601975776\
99927366490205308761790316306138312243703/8514004244454126111452582823944437679\
6697562845022414808932793933903786351024919583599892415700459081681628756391049\
145101301205396418247727381306451486594334033392435200000000000000000000000*x^3
*323363367416732913295060050224679893740756284186898461486390933714783100147481\
4745505659851593121939477879144211058366186576322294242447125822538026631714657
^(1/2))^2+752609/2500*(1/762122684920586178737068080862788611701895761322742305\
9963968016638607068143057179208479286053135049433426448172840867180756717734461\
440000000000000000000000000000000000000000*x^2*21452492669965789796386984996858\
2890768449380140694885633337494798495264676485624503199575336562809790443587668\
3810874871031971355536310287917491408580164290424390058668991496253403243321521\
2841851447394836973044451363100211335725491274123008650436072775007250572597205\
396249125147955432480572573429987355866306793175472301011571995898320586955^(1/
2)-1457533081364649495257510797786264907149598430331572461999520145861979339775\
9469271088784768973418787686927149396433414609954324581447329116241332236631274\
446357005161548726067070059947882025023462057636402918559941/354802423817791725\
1091893122370118482081849901653935643839787388650232574907801790441890439207221\
9922014876432966764438874533948466665670188645851441493254090704409194631392599\
6071180120963247308519611652810391249298325017680318188058554576917390124779619\
0887407833733659028051545764803610862877814155638570947828639857117581653696844\
5817785721395609600000000000000000000000000000000000000000*x^3*2145249266996578\
9796386984996858289076844938014069488563333749479849526467648562450319957533656\
2809790443587668381087487103197135553631028791749140858016429042439005866899149\
6253403243321521284185144739483697304445136310021133572549127412300865043607277\
5007250572597205396249125147955432480572573429987355866306793175472301011571995\
898320586955^(1/2))^2+515135557688057732243630870821312135259415605440802762620\
5658694358013706097880232233448935169183777202640760401397071760143351427665051\
3706533966625706337571113198873455986000665423304355193476615164525529681642953\
6752025807277793231439302895640744943610935402129902904485031375844945535596585\
43387/2558309871175923809635165671612405286698910021865232578947060679088528679\
0975372896366172591028041511777005677396433672735919513921671380092965876452102\
9701299621882280967385454298868913377459193888589478774263756618053251401018490\
3155945710066332136898560000000000000000000000000000000000000000000000000000*x^
6, 1012623673805023961344164079449044889/8112963841460668169578900514406400]
>> Degree size
6
>> Succeeds RealCertify Batch: 44 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 45 Test 1 - Weifeng
>> input polynomial
-x^2+604121/2500
>> basis
[(x-39/25)*(x-129/50)*(x-53/10)*(x-661/50)*(x-711/50), (-x+39/25)*(x-129/50)*(x-53/10)*(x-661/50)*(x-711/50)]
>> Time taken
1.459000
">> Sums of squares multipliers", [-x^2+604121/2500-797/254015*x^2*(x-39/25)*(x
-129/50)*(x-53/10)*(x-661/50)*(x-711/50)-797/254015*(x+1)^2*(-x+39/25)*(x-129/
50)*(x-53/10)*(x-661/50)*(x-711/50), 797/254015*x^2, 797/254015*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 45 Test 1 - Weifeng

>> Test
Batch: 45 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+604121/2500
>> basis
[(x-39/25)*(x-129/50)*(x-53/10)*(x-661/50)*(x-711/50), (-x+39/25)*(x-129/50)*(x-53/10)*(x-661/50)*(x-711/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -9.192773
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 45 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 45 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+604121/2500
>> basis
[(x-39/25)*(x-129/50)*(x-53/10)*(x-661/50)*(x-711/50), (-x+39/25)*(x-129/50)*(x-53/10)*(x-661/50)*(x-711/50), -x^2+579121/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.041384
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14100
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [604121/2500*(3/900719925474099200000*
31371900103785176540145495425065462992295^(1/2)-\
2873052884026311259401930096960824247493/
578709412320507272622818904020880470244094442089506112798720000*x*
31371900103785176540145495425065462992295^(1/2)-\
19789284702460432383777627860214643496219009477313770114716857223754291663/1562\
8807643673293622322528620779439683154191603491657482240000000000000000000000000\
00000000000000*x^2*31371900103785176540145495425065462992295^(1/2)+
13594322931468476868067250876126760387206490112986414652605693723667/6467581678\
0385442743765440287539415461282555992473600000000000000000000000000000000000000\
0000*x^3*31371900103785176540145495425065462992295^(1/2))^2+604121/2500*(1/1905\
22607465731579395931777472358883756546335737803062640640000000000000000000000*x
*225307990010661142336904643384911573899080820703126410419324463939879717115630\
1160718778566892496198297301160120050734099581707371214695105465956765030243748\
70^(1/2)+3839775213395131271400959856057367860154424983425320455649565963987958\
372708372629447441128169467272975912028167141/213086365769677880700962189883563\
0169230380988314012437635642593087304090139242662795871463724804052450709620374\
6137769056760417403366978903011613274564399766760198537918545920000000000000000\
000000000*x^2*22530799001066114233690464338491157389908082070312641041932446393\
9879717115630116071877856689249619829730116012005073409958170737121469510546595\
676503024374870^(1/2)-699194556675871025216638585613580428088440720742950299514\
954639392510475670755967875575229323939375643447595907/308631168339567976636041\
3164715638751304098623909383853451853633545913945835084908398131385532374385089\
0316970073661647128084216949826452879696553530242864915993937838080000000000000\
000000000000*x^3*22530799001066114233690464338491157389908082070312641041932446\
3939879717115630116071877856689249619829730116012005073409958170737121469510546\
595676503024374870^(1/2))^2+604121/2500*(1/178891949418302363793383493998222121\
7647395994536299485282402714227449213573318010749397155059024213743428647813983\
910748586864485072896000000000000000000000000000000000000000*x^2*21807886433656\
3760056321402519533152057335056523203038273978063733065464920011272459665209718\
3321266259556089331425968772283111762615434302245141225291276410750499690882276\
5321123848395442072199098238033870395882862448389340720267585773346503591538456\
5515890647222860562250521858325164636469034826824827453062081557402957024665286\
3623757465070^(1/2)-25473769829534836914786736006753893840700655530934344912097\
8218682820639361908750297907796009518713595455229130725988395976346851819520055\
14826942537709728962462429797600631615697446095944127258691126382679047053/2025\
8828026590144352571261078459932176690170809883873026838014903721196002021978990\
7936854537911775602154306132557472429168588666797441387578975552221643285657547\
9814637031841771646617981145279316467581511270243479433589070890173312034290926\
0313429953922273657190568780132136448815848323950582280215160081796190344644993\
0432774946932247251436699648000000000000000000000000000000000000000000*x^3*2180\
7886433656376005632140251953315205733505652320303827397806373306546492001127245\
9665209718332126625955608933142596877228311176261543430224514122529127641075049\
9690882276532112384839544207219909823803387039588286244838934072026758577334650\
3591538456551589064722286056225052185832516463646903482682482745306208155740295\
70246652863623757465070^(1/2))^2+2168227596962160355858107546490352455529933816\
8214253814725858323716043201093174073463474318718590532254788719092189474733830\
8373421563964757438112438156400870186182427490207202069689277763145833706204844\
2182433405505632719859995707920885396920774518966145957462482298241117200811115\
38984471740334961/7805298734200759046778319300960374126549466420632504509811220\
7914775114706363044494173092043459086891133397959478088886605858839100720813880\
2286657703352718608276148935902281743449070112564394416293159131793922206898124\
1330193414802924160885792440320000000000000000000000000000000000000000000000000\
0000000000*x^6, 15273606019338047914887049633461117209/
202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 45 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 46 Test 1 - Weifeng
>> input polynomial
-x^2+3307681/10000
>> basis
[(x-27/5)*(x-178/25)*(x-35/4)*(x-511/50)*(x-1591/100), -(x-27/5)*(x-178/25)*(x-35/4)*(x-511/50)*(x-1591/100)]
>> Time taken
1.773000
">> Sums of squares multipliers", [-x^2+3307681/10000-501/610214*x^2*(x-27/5)*(
x-178/25)*(x-35/4)*(x-511/50)*(x-1591/100)+501/610214*(x+1)^2*(x-27/5)*(x-178/
25)*(x-35/4)*(x-511/50)*(x-1591/100), 501/610214*x^2, 501/610214*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 46 Test 1 - Weifeng

>> Test
Batch: 46 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+3307681/10000
>> basis
[(x-27/5)*(x-178/25)*(x-35/4)*(x-511/50)*(x-1591/100), -(x-27/5)*(x-178/25)*(x-35/4)*(x-511/50)*(x-1591/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -8.073489
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 46 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 46 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+3307681/10000
>> basis
[(x-27/5)*(x-178/25)*(x-35/4)*(x-511/50)*(x-1591/100), -(x-27/5)*(x-178/25)*(x-35/4)*(x-511/50)*(x-1591/100), -x^2+3207681/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.030234
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14067
time= 0.120000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [3307681/10000*(1/72057594037927936000*
768475898063402414696812589510260638295^(1/2)+
1043611305016313163453738900979253737131/
14175878218389693986850254181346607925089638160018408734720000*x*
768475898063402414696812589510260638295^(1/2)-\
1202254606471103620576065730481192944627457761627404041014330244131538751/34935\
2382431041012675455477839788268866154696336149053440000000000000000000000000000\
00000000000*x^2*768475898063402414696812589510260638295^(1/2)-\
15197196113106781162105751808975544195145582730540287571680966540809/6601157699\
8930862112204796547752841958262204006400000000000000000000000000000000000000000\
000*x^3*768475898063402414696812589510260638295^(1/2))^2+3307681/10000*(1/35773\
683960938599697966640930794318731894240904821663072256000000000000000000000*x*
6794767492544421701967990748027918159284468916548980626468128495157630187639138\
561525456065771536070005967939953359436806216260296773698344153043458122421110^
(1/2)-2074367179558741512072524190760856682830136657100944715218585880473852009\
99839450074156849847108521173221368343867/7650228086873054258707871590412578976\
9803530914513354680744552360909775885493714475717276923261281706600035324852097\
6371959136976321020918526290807265756295509836262539264000000000000000000000000\
00*x^2*679476749254442170196799074802791815928446891654898062646812849515763018\
7639138561525456065771536070005967939953359436806216260296773698344153043458122\
421110^(1/2)-161235010287097748561728541160548193992938902895977367985215274838\
665706745494631407882684895434736888423220453/185029404876057981618127542297158\
1353094292488653249323154066002396477190768848978501065294343953524093769267951\
8272200298859218318115221353601893465923861352042987520000000000000000000000000\
00*x^3*679476749254442170196799074802791815928446891654898062646812849515763018\
7639138561525456065771536070005967939953359436806216260296773698344153043458122\
421110^(1/2))^2+3307681/10000*(1/1545982093729193344416561988305269626406087215\
3240342186270884058139976943005324077808016991183320383194961752077892803568469\
7983942656000000000000000000000000000000000000000*x^2*5590019839208770244822991\
4714035254334665528749751739826360454311859402650483524000510874014702541054561\
1099702563251637848838573711389970208460955818555005535868075254082353207821828\
5302045486705621803730879502198821684429933469276711457859259273968318256937767\
334079195487045330806789433334326927954583693474578483693777740138225973294830^
(1/2)-5038255298226383726429663264892024740103170009255407260832184258539898891\
2507371854655437778850411863936020086106616495154511102293346239138673814138339\
90238774520656382181481981902964849162971858378133301141069/1509777423465476905\
8206258793219577942417537391415964858778801509348927669099852877939940570626041\
7783537657781351265305343433382136950538781561116204551675031769897503067594572\
6959802187353747909623108360413508869272895018394126891877925674897959179121341\
8593953431066865835299417920923080167935568953939961102011543824236049056680954\
269427302400000000000000000000000000000000000000000000*x^3*55900198392087702448\
2299147140352543346655287497517398263604543118594026504835240005108740147025410\
5456110997025632516378488385737113899702084609558185550055358680752540823532078\
2182853020454867056218037308795021988216844299334692767114578592592739683182569\
3776733407919548704533080678943333432692795458369347457848369377774013822597329\
4830^(1/2))^2+32197756718734755315037226968419806651107647870238682529981924758\
1686485492283269267959951229660716132300795164077882653786092840683870992303336\
1949656103848596053725153348362039336914993739019429303213896993647003088540006\
8348557155402781897479457524090743635707337170009361376711788517795710096130881
/102369754336796756762561929788790694918529350780825704573429499910785468843183\
3608738991670705537381649835049733421429977036837288192168573663708820759826758\
7411039582536325771101276661536322880418462561966003781052766649843984427084940\
1390995865600000000000000000000000000000000000000000000000000000000000000000*x^
6, 53093118726703203239509845331219206489/3245185536584267267831560205762560000
]
>> Degree size
6
>> Succeeds RealCertify Batch: 46 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 47 Test 1 - Weifeng
>> input polynomial
-x^2+152174/625
>> basis
[(x-499/100)*(x-123/10)*(x-332/25), (-x+499/100)*(x-123/10)*(x-332/25)]
>> Time taken
0.332000
">> Sums of squares multipliers", [-x^2+152174/625-6428/94989*x^2*(x-499/100)*(
x-123/10)*(x-332/25)-6428/94989*(x+1)^2*(-x+499/100)*(x-123/10)*(x-332/25), 
6428/94989*x^2, 6428/94989*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 47 Test 1 - Weifeng

>> Test
Batch: 47 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+152174/625
>> basis
[(x-499/100)*(x-123/10)*(x-332/25), (-x+499/100)*(x-123/10)*(x-332/25)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -177.842455
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 47 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 47 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+152174/625
>> basis
[(x-499/100)*(x-123/10)*(x-332/25), (-x+499/100)*(x-123/10)*(x-332/25), -x^2+145924/625]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 0.041072
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 6519
time= 0.119000secs
>> Time taken
0.007000
">> Sums of squares multipliers", [152174/625*(1/1801439850948198400*
938285908432899284893628009171243814^(1/2)-\
1420197400368950384970538157325278959/
443092992533242057841051203297483510014789972248414807654400*x*
938285908432899284893628009171243814^(1/2)-245914993665758824608207680504421275\
781294152194572143342835780077613691029244331/120569288216388661104269252676828\
960751874415702099099648000000000000000000000000000000000000000000000*x^2*
938285908432899284893628009171243814^(1/2))^2+152174/625*(1/2435743196290680022\
308469751047049712159079105092911104000000000000000000000000*x*4080540462936056\
4797466813176828953555704717155466804251272297794150340599160644975432690126424\
3594332035240717102659786888205265249455454437136826215^(1/2)-28070998370019183\
4867207533194315875510713212150810531771039160001498069149555204781396232076232\
07247654028792047347/1362650674215785194498488778369384702235670986667922358413\
5751820285035912953175788517668581945140506502279161673641959731792070095053168\
74721664495593799754671081100673024000000000000000000000000*x^2*408054046293605\
6479746681317682895355570471715546680425127229779415034059916064497543269012642\
43594332035240717102659786888205265249455454437136826215^(1/2))^2+2277748902077\
5943833049379649967352369532003076250135286159552786203901422514419722322183933\
2757951353359974354186892629256708113647335054125310803796603340806403308948839\
53929859745877988347957461124693786563430186737602228620293561749/1447290403288\
2291067667646480537267001657163186051835385226962135641275506404055448645763685\
9327582582703632407966816530371308481872852880604528640000000000000000000000000\
000000000000000000000000000000000000000000000000000000000000000000000*x^4, 
1081520753265726670478889341278959583/101412048018258352119736256430080000]
>> Degree size
4
>> Succeeds RealCertify Batch: 47 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 48 Test 1 - Weifeng
>> input polynomial
-x^2+343811/625
>> basis
[(x-333/100)*(x-883/100)*(x-837/50)*(x-531/25)*(x-556/25), -(x-333/100)*(x-883/100)*(x-837/50)*(x-531/25)*(x-556/25)]
>> Time taken
1.405000
">> Sums of squares multipliers", [-x^2+343811/625-1875/3051886*x^2*(x-333/100)
*(x-883/100)*(x-837/50)*(x-531/25)*(x-556/25)+1875/3051886*(x+1)^2*(x-333/100)*
(x-883/100)*(x-837/50)*(x-531/25)*(x-556/25), 1875/3051886*x^2, 1875/3051886*(x
+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 48 Test 1 - Weifeng

>> Test
Batch: 48 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+343811/625
>> basis
[(x-333/100)*(x-883/100)*(x-837/50)*(x-531/25)*(x-556/25), -(x-333/100)*(x-883/100)*(x-837/50)*(x-531/25)*(x-556/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.423533
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 48 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 48 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+343811/625
>> basis
[(x-333/100)*(x-883/100)*(x-837/50)*(x-531/25)*(x-556/25), -(x-333/100)*(x-883/100)*(x-837/50)*(x-531/25)*(x-556/25), -x^2+337561/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.018183
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14392
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [343811/625*(1/450359962737049600000*
61946910472135607204390074622194980080503^(1/2)+
7119072168452235241091390440938318623409/
4570875214545934697126199406720076731171643262767710854971392000*x*
61946910472135607204390074622194980080503^(1/2)-\
1081877291829449392021782042863474980358613181680525978856346306283073846691/28\
1009169528767887500582172433823877755556197491066951172096000000000000000000000\
000000000000000000*x^2*61946910472135607204390074622194980080503^(1/2)-\
30625236583757084624073954105380669841824832788476389887905445777207/8513918546\
1139952710386354601384638457962186313564160000000000000000000000000000000000000\
00000*x^3*61946910472135607204390074622194980080503^(1/2))^2+343811/625*(1/8992\
2934249205724000186295178823640881777983197141424375070720000000000000000000000
*x*2321336967299341992903295775599661352477701605116107383541602574831170196473\
8546748596242032382579818297273054971257674700713826944999613335547168912713690\
368285654^(1/2)+277357183797052023240983123539597090906533978840372342709723644\
09727928764817807927176242389475992827202314449426663429/5575665227163026057398\
0034736341386880114477904350832203194691286210812119348361931001531203630838228\
8058362655176389532147483792582178550191621506659041362100744188856210238210048\
0000000000000000000000000*x^2*2321336967299341992903295775599661352477701605116\
1073835416025748311701964738546748596242032382579818297273054971257674700713826\
944999613335547168912713690368285654^(1/2)-253071475665857489930274136056666833\
151007605801475906645963953786797115025861948323684877496393963869091707230643/
1216292940124739913222236230145517163793068238894716112992196830952415981149854\
7588137420967544124147163522167451951570749935657801426769726498457873490988408\
618634704595189760000000000000000000000000*x^3*23213369672993419929032957755996\
6135247770160511610738354160257483117019647385467485962420323825798182972730549\
71257674700713826944999613335547168912713690368285654^(1/2))^2+343811/625*(23/
8223920431681937512662266457685543736716599766577610735520577783647914292817904\
3931412180727392495678756037262968235288577172048941206732800000000000000000000\
0000000000000000000*x^2*8862385590186122066066897899721097180366421345675295567\
6638915649550123109847811077823186866989362315420307908047263730747361295622288\
5437116706250139217185727486827781330302015328405757453429857488403344825247609\
8119864495133783819333277291690505976250935580669421740281235216467254541076801\
4959788208520272467010863426328838094933804772077342^(1/2)-10686041992846357463\
5638843503582752263902788530451312738371202123419171140908977085606137498981275\
9732851604750888856148690256996779484404527539924711363160522355911120800506506\
64983552346439703833202579406498203781009/5614198600791946869847787671547149325\
5372610081175421336096442228851742813627984126191924743419436003952714107024948\
9555397382109425898008502965041959085306446726538213109427752668107728069601975\
5458472817729752903735596743404739148195393444957973813860536325083399001010046\
6868831281436674569884652309711666355898232546594064250527625490733025161170124\
8000000000000000000000000000000000000000000*x^3*8862385590186122066066897899721\
0971803664213456752955676638915649550123109847811077823186866989362315420307908\
0472637307473612956222885437116706250139217185727486827781330302015328405757453\
4298574884033448252476098119864495133783819333277291690505976250935580669421740\
2812352164672545410768014959788208520272467010863426328838094933804772077342^(1
/2))^2+116187373665864880485649492974384230755012112956183920304802491140172853\
0095817647157461875922123850615819236344098829810980642562492994821415084798112\
1842344823583622632524656371753106082922644829339258143459734081812143422966893\
55037839385997069047893189844560682278953922313164464696829401660303437281/1202\
8974112984335522023204408214876770311598327332101184744607753663696438225631595\
0383989306336440314983332046805468749168919560266043808351245970958866570979016\
9824698256390026616631929909637201122315426945852795651742993428110515727185449\
14361614336000000000000000000000000000000000000000000000000000000000000*x^6, 
3780147804537082315890326169651335379/12676506002282294014967032053760000]
>> Degree size
6
>> Succeeds RealCertify Batch: 48 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 49 Test 1 - Weifeng
>> input polynomial
-x^2+7867369/10000
>> basis
[(x-551/100)*(x-571/100)*(x-241/20)*(x-903/50)*(x-2587/100), (-x+551/100)*(x-571/100)*(x-241/20)*(x-903/50)*(x-2587/100)]
>> Time taken
1.437000
">> Sums of squares multipliers", [-x^2+7867369/10000-65/1377364*x^2*(x-551/100
)*(x-571/100)*(x-241/20)*(x-903/50)*(x-2587/100)-65/1377364*(x+1)^2*(-x+551/100
)*(x-571/100)*(x-241/20)*(x-903/50)*(x-2587/100), 65/1377364*x^2, 65/1377364*(x
+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 49 Test 1 - Weifeng

>> Test
Batch: 49 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+7867369/10000
>> basis
[(x-551/100)*(x-571/100)*(x-241/20)*(x-903/50)*(x-2587/100), (-x+551/100)*(x-571/100)*(x-241/20)*(x-903/50)*(x-2587/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.186895
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 49 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 49 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+7867369/10000
>> basis
[(x-551/100)*(x-571/100)*(x-241/20)*(x-903/50)*(x-2587/100), (-x+551/100)*(x-571/100)*(x-241/20)*(x-903/50)*(x-2587/100), -x^2+7767369/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.012713
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14487
time= 0.124000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [7867369/10000*(1/720575940379279360000*
182297617630564021229281541437307868795103^(1/2)-\
1825625488670781905434131140984905927547/
840699374419494182860253060202914463504535169416900076634112000*x*
182297617630564021229281541437307868795103^(1/2)-\
79542465300285730597435960032631997275679383500064678714536219280656330169/4619\
8900299803271400149117163351338541790922297725461463040000000000000000000000000\
000000000000000*x^2*182297617630564021229281541437307868795103^(1/2)+
279429264004476950424490016262406059707959393459375659827849823326801/100219175\
1503341415953937840703623847370785676737904640000000000000000000000000000000000\
00000000*x^3*182297617630564021229281541437307868795103^(1/2))^2+7867369/10000*
(1/3784613912559883993100215678021741653343512354629669803052236800000000000000\
00000000*x*29339877623426685663760931966706493911929535589484236949565763000489\
8426039625222427780218967099580854807006575720012512730509528140021536645116231\
154204021317719094^(1/2)+213752141392671039796965431205292216674048126177970331\
83987776591813667598325106028993080809167898528209872023317429/1321350619319603\
7531712907395411251265018051649947867986620553991384277289712380861995200149868\
1085761599970227978177231704641721836794985434467770923858799306608773331130759\
1450624000000000000000000000000*x^2*2933987762342668566376093196670649391192953\
5589484236949565763000489842603962522242778021896709958085480700657572001251273\
0509528140021536645116231154204021317719094^(1/2)-58493786924232042304204853840\
9507566276399182687266354510940369160476264432515624581816531766174999572249517\
4758779/17198418355402857591240498790511950431432013535333879494274956833952366\
9789296498012017549367074852876327994166092442702592891121747153419503896407332\
6564579467003313192477655040000000000000000000000000*x^3*2933987762342668566376\
0931966706493911929535589484236949565763000489842603962522242778021896709958085\
4807006575720012512730509528140021536645116231154204021317719094^(1/2))^2+
7867369/10000*(1/87013506242990824938736457305455149813030625257273432149856556\
5115071374702149944459543896542302186003980431871277653833341603091852382175232\
0000000000000000000000000000000000000000*x^2*1548370495456621571049294174473046\
1714111934600923093221961464751441471560853527233788062891307161718422464338298\
1576871010683687481449199084251682379412098839433284400429633349682197348980482\
3455266080545512792554580793242849995700725138558356744651866853487871567576099\
4949901697028209414665490166169424794209513463485004738096850511029209905303855\
01038^(1/2)-2096224271569482177893792821319040755959144901654255847588519961729\
8961064525961625095373789864536729596696482770044349050798498265055421663836510\
8535423240641075502061392799359743874410936046359746320666093861153163563/69246\
0766026290759610047577170251714072351673890650139559198205363044632105777600363\
5658949758273025273544792500778584013607786084903485582072565539401197371059275\
9938310389400291122775897661168416975502322925861260852670975572156691220105318\
0331581704636054332865928307545148401422459633061450098873475591937601135725913\
3556787054240153998735410051086039384064000000000000000000000000000000000000000\
000*x^3*15483704954566215710492941744730461714111934600923093221961464751441471\
5608535272337880628913071617184224643382981576871010683687481449199084251682379\
4120988394332844004296333496821973489804823455266080545512792554580793242849995\
7007251385583567446518668534878715675760994949901697028209414665490166169424794\
20951346348500473809685051102920990530385501038^(1/2))^2+8995005938289243960733\
0415027317295491960046375914715822182695335385536384922926744027911379468746037\
1769755451849577681530867750672538164812895456714506827225130417217761135603729\
0104472600700255588534859497769388979181908219578674060177625462719189886574370\
9918399243682174863264750172394475322509573981701/58515381715189193553328145108\
3635746076328008451813463917617344169508297017058807425937082833600105903770402\
2986043973284693125291241040827914661532379811580531946915724282139511992465589\
9262984532939630713885342051125604410423094532402827544874461146141834608640000\
0000000000000000000000000000000000000000000000000000*x^6, 
122326770854472841348736539437002586769/202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 49 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 50 Test 1 - Weifeng
>> input polynomial
-x^2+80729/400
>> basis
[(x-8/5)*(x-41/20)*(x-182/25)*(x-237/20)*(x-257/20), -(x-8/5)*(x-41/20)*(x-182/25)*(x-237/20)*(x-257/20)]
>> Time taken
1.337000
">> Sums of squares multipliers", [-x^2+80729/400-1933/304075*x^2*(x-8/5)*(x-41
/20)*(x-182/25)*(x-237/20)*(x-257/20)+1933/304075*(x+1)^2*(x-8/5)*(x-41/20)*(x-\
182/25)*(x-237/20)*(x-257/20), 1933/304075*x^2, 1933/304075*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 50 Test 1 - Weifeng

>> Test
Batch: 50 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+80729/400
>> basis
[(x-8/5)*(x-41/20)*(x-182/25)*(x-237/20)*(x-257/20), -(x-8/5)*(x-41/20)*(x-182/25)*(x-237/20)*(x-257/20)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -11.015001
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 50 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 50 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+80729/400
>> basis
[(x-8/5)*(x-41/20)*(x-182/25)*(x-237/20)*(x-257/20), -(x-8/5)*(x-41/20)*(x-182/25)*(x-237/20)*(x-257/20), -x^2+76729/400]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.049550
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14262
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [80729/400*(3/14411518807585587200*
7997651974612172677082464544307029263^(1/2)-\
1846179404173390983033216469563401623/
18883921813282379479989139694236575594516296244828280193024*x*
7997651974612172677082464544307029263^(1/2)-\
139759014330247099297806549540180259989168958379822564223457736808509377957/150\
3299386687605139674551930211070333391357291702255616000000000000000000000000000\
00000000000000*x^2*7997651974612172677082464544307029263^(1/2)+
265748368865129461045713950362685491094165006810521556296739812581971/549594458\
8119856629051832626060517386799997255680000000000000000000000000000000000000000\
00000*x^3*7997651974612172677082464544307029263^(1/2))^2+80729/400*(1/109039315\
51440762613106083333797630151531978222480360734720000000000000000000000*x*87426\
5073962626270461068937109115797319894199223203215996416535000513864720170541233\
714214661042724574353180938300312590987570040632268119924527812092072070^(1/2)+
7583333408349929060586577229561381060294070055115752108376965980850331986498861\
20639823023545171724365565668731157/4446877961021503393617010860295504444272408\
9393824902187769169006065939122977568681787193545227250381167191394528666585490\
8785311285276796103174121266658603713277992317747200000000000000000000000000*x^
2*87426507396262627046106893710911579731989419922320321599641653500051386472017\
0541233714214661042724574353180938300312590987570040632268119924527812092072070
^(1/2)-397965097556988896084017971210798308067870428340889501723660080092593989\
99752877750125229708189904238091719921/8323807673394587123887925129482433056839\
6544234554107604682978921590447611762114133886326435783176523908357724346595201\
597105820894319464257002069326960255374298657587200000000000000000000000*x^3*87\
4265073962626270461068937109115797319894199223203215996416535000513864720170541\
233714214661042724574353180938300312590987570040632268119924527812092072070^(1/
2))^2+80729/400*(1/516350648583636090916943289259672686929277906285866346138760\
9438448395067369146064321091769679712868215128865284537574476153329444454400000\
000000000000000000000000000000000000*x^2*30848602302325689561005365814238347264\
8815265336966716690214037761733771833201470231279655298308885361032107883732941\
5671343548786392293545683620211240372421831507199101702625077420820906572205942\
1055923972582946503950274792600687847858465369621158209825090431643025376031362\
387522112751914929807863402108664219910076845439138215291920070592878^(1/2)-198\
3704362591612018138448572380462792564801039239954364971010298789619811083144277\
8141730213623334779973220928948637571161796136730734777449121808600586086781616\
69481603454956219176334590230473883168479859871747882131127/4737206275425220698\
2852877962965850333589168545889053605361936283414725015680939678121606283312260\
5311944958629390571415855568318860706703200644675581211571722963659174270332160\
8892744160250528173021814963103683785717415509968559091616777024331492341303800\
4660254504594074745465825949585268982310224402482059535288181313790550308148416\
999773826982084608000000000000000000000000000000000000000000000*x^3*30848602302\
3256895610053658142383472648815265336966716690214037761733771833201470231279655\
2983088853610321078837329415671343548786392293545683620211240372421831507199101\
7026250774208209065722059421055923972582946503950274792600687847858465369621158\
2098250904316430253760313623875221127519149298078634021086642199100768454391382\
15291920070592878^(1/2))^2+2845986559932251864810189627430422827262389627721716\
9031671273497819642839061378768347301502138487464524001250100876696823286847565\
9889460446642694321057908101857917809950245888658863353714563567718812625296645\
1636158483900993821555942504703162976373904408802710693872375563026971964040865\
96666837684361282231547/6922120598399447608337262816441552772662085686884692706\
0675059531028879167660487836228096118075138514881975940011164528670296595798981\
3665115196621132402174811018320820501133387141425858539013688981440688108405684\
4659277625298602560461781958600892821886992384000000000000000000000000000000000\
0000000000000000000000000000*x^6, 423901485386298221216587677245333169/
8112963841460668169578900514406400]
>> Degree size
6
>> Succeeds RealCertify Batch: 50 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 51 Test 1 - Weifeng
>> input polynomial
-x^2+1229969/10000
>> basis
[(x-319/100)*(x-43/10)*(x-499/100)*(x-863/100)*(x-963/100), (-x+319/100)*(x-43/10)*(x-499/100)*(x-863/100)*(x-963/100)]
>> Time taken
1.328000
">> Sums of squares multipliers", [-x^2+1229969/10000-4350/484171*x^2*(x-319/
100)*(x-43/10)*(x-499/100)*(x-863/100)*(x-963/100)-4350/484171*(x+1)^2*(-x+319/
100)*(x-43/10)*(x-499/100)*(x-863/100)*(x-963/100), 4350/484171*x^2, 4350/
484171*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 51 Test 1 - Weifeng

>> Test
Batch: 51 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1229969/10000
>> basis
[(x-319/100)*(x-43/10)*(x-499/100)*(x-863/100)*(x-963/100), (-x+319/100)*(x-43/10)*(x-499/100)*(x-863/100)*(x-963/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -15.342761
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 51 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 51 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1229969/10000
>> basis
[(x-319/100)*(x-43/10)*(x-499/100)*(x-863/100)*(x-963/100), (-x+319/100)*(x-43/10)*(x-499/100)*(x-863/100)*(x-963/100), -x^2+1129969/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.081305
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14248
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1229969/10000*(1/1801439850948198400000*
974639236504581146317400440719141434150310^(1/2)+
3242384931298060472744790048974711644007/
2247365069999460542932110512547006754961541223793317505925120000*x*
974639236504581146317400440719141434150310^(1/2)-\
44219004495580633284120655589247531581158370973438069383641673733862677637/1235\
6889401892571827156834460825902304321342248415244845056000000000000000000000000\
000000000000000*x^2*974639236504581146317400440719141434150310^(1/2)-\
29392955162020551292465716362543045147899015970946474912441316426209/2232556611\
2989788680594270552665062297995301324062720000000000000000000000000000000000000\
00000*x^3*974639236504581146317400440719141434150310^(1/2))^2+1229969/10000*(1/
7029697081965551972782554715492068866458363590209561511854080000000000000000000\
000*x*6397199537598071594090705146803074867303240152079885039882051030664975943\
5847548342998630082496034425366473191079338796012785090341543287414481966491303\
1692805165^(1/2)-31536412960772013655753912470382200498889471984997873690083757\
248152776260646934194761563278006963493642350353979689/162058643177295288076583\
2325810636518626181811484456082680037925630656402508410828603144903717093539289\
3353305931243006404921553374674976810740980028258614144720777755986860441600000\
00000000000000000000*x^2*639719953759807159409070514680307486730324015207988503\
9882051030664975943584754834299863008249603442536647319107933879601278509034154\
32874144819664913031692805165^(1/2)-2831051370959672853512846951659498300286587\
2609312670832009950933183789334818894441618477088747289059047142092913/22486752\
4592828999471289154662989039435575229261886956590553479511244071485895537270942\
1106556755745107233567847860777867658950571879884270009889619025197773845530039\
3926656000000000000000000000000*x^3*6397199537598071594090705146803074867303240\
1520798850398820510306649759435847548342998630082496034425366473191079338796012\
7850903415432874144819664913031692805165^(1/2))^2+1229969/10000*(1/115223331394\
9434557270123050638784394620849224194072228301790977880766829029585978279510271\
4973052542142394948785503964011410488276969062400000000000000000000000000000000\
0000000*x^2*6182960327549783823780145495534373472764077039822515970764850546547\
4253866005885373654763317901026635145962933360044255546099399362447723544111937\
7550942836202680365228909365871118644814259576945478386405102758997679672922845\
0901958259429525523713259935194587489084419372607371119455701264951293385113095\
7902515906662107454643382801689495578916510^(1/2)-12926078245268691221436605168\
7913978247200755526912839871546221306774986997989043130634676926711739138260488\
6473770795860704032491921630542006954344302188055569657236916257351350868974566\
4040202159742642375634725361/38492728880990529180685423654472390814606859077468\
5265379082853241233250014143284553824633744389016810232604075551732957047335686\
2797138632509660958407481021541523463781813778169975139623762790583293801210308\
8568587339669180051335721502394898785427999092663979059590428770672706285202819\
3098851874434099278009636598148243655018544985546576317443053977600000000000000\
0000000000000000000000000000*x^3*6182960327549783823780145495534373472764077039\
8225159707648505465474253866005885373654763317901026635145962933360044255546099\
3993624477235441119377550942836202680365228909365871118644814259576945478386405\
1027589976796729228450901958259429525523713259935194587489084419372607371119455\
7012649512933851130957902515906662107454643382801689495578916510^(1/2))^2+10032\
9833438588190898588691811220054254702759939248490564934698969437383470088811623\
9645182654847909364276866819180506054669688063302595299284916329801746538811750\
4159056369038923985307337566752340954581254086657030856109742544017891843846229\
774131812099892316623898599298551559203514080567472431489564373/375028697607562\
3726614103007804761351046351557064056819827458658445806514394199996157660001810\
2997915714514068342943331639824451414113030026214741933323884223080552232556319\
2639174552095819778267649526602065540038047324380901510239255350550086825489203\
200000000000000000000000000000000000000000000000000000000000*x^6, 
74487565582331616509863627165839727001/3245185536584267267831560205762560000]
>> Degree size
6
>> Succeeds RealCertify Batch: 51 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 52 Test 1 - Weifeng
>> input polynomial
-x^2+494851/625
>> basis
[(x-73/20)*(x-102/25)*(x-1303/100)*(x-1939/100)*(x-649/25), -(x-73/20)*(x-102/25)*(x-1303/100)*(x-1939/100)*(x-649/25)]
>> Time taken
1.614000
">> Sums of squares multipliers", [-x^2+494851/625-129/2454346*x^2*(x-73/20)*(x
-102/25)*(x-1303/100)*(x-1939/100)*(x-649/25)+129/2454346*(x+1)^2*(x-73/20)*(x-\
102/25)*(x-1303/100)*(x-1939/100)*(x-649/25), 129/2454346*x^2, 129/2454346*(x+1
)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 52 Test 1 - Weifeng

>> Test
Batch: 52 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+494851/625
>> basis
[(x-73/20)*(x-102/25)*(x-1303/100)*(x-1939/100)*(x-649/25), -(x-73/20)*(x-102/25)*(x-1303/100)*(x-1939/100)*(x-649/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.404481
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 52 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 52 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+494851/625
>> basis
[(x-73/20)*(x-102/25)*(x-1303/100)*(x-1939/100)*(x-649/25), -(x-73/20)*(x-102/25)*(x-1303/100)*(x-1939/100)*(x-649/25), -x^2+488601/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.012634
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14389
time= 0.125000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [494851/625*(1/180143985094819840000*
10211788939788541304954920552796643343807^(1/2)+
2157103857069319783426965189594066810771/
753497028428068078139883009682803507448220600439539601768448000*x*
10211788939788541304954920552796643343807^(1/2)-\
378485841956846873353038877913580376579005051693745294475076527830423487273/555\
6177467326192804211366880305781937603047674121061138432000000000000000000000000\
0000000000000000*x^2*10211788939788541304954920552796643343807^(1/2)-\
213353137665304224200445026155803285207531312225022512793870301433677/561399033\
9845926151721797955653097536029075089391616000000000000000000000000000000000000\
0000000*x^3*10211788939788541304954920552796643343807^(1/2))^2+494851/625*(1/10\
1598673688250382705579280097020012573312871755356546531328000000000000000000000\
0*x*197870099565591683991386794882593394047614729394156338549384394741802280903\
2284812894862037151481073534389323642892220811478754153044346203335282241497445\
860446^(1/2)-538023114405786094426548218743758990648426586255664901872183480110\
32694436087884388650936853745587292387144467918757/4990315157359625242612763424\
3090573770210090108976435386929395170575677120676116200611228786712924619267658\
5841262092447209763642775311654571213835583117670362575691888612868096000000000\
0000000000000000*x^2*1978700995655916839913867948825933940476147293941563385493\
8439474180228090322848128948620371514810735343893236428922208114787541530443462\
03335282241497445860446^(1/2)-2843511761254503022488053235159489045510827200570\
468444127829803169225469098986121182385781719543582962946901131751/225892358558\
1429671447080044387560806086490718299189357336285976629116981683668423209595463\
7302329619857200496400473821044109652396715336661732905292829227012013101920183\
91040000000000000000000000000*x^3*197870099565591683991386794882593394047614729\
3941563385493843947418022809032284812894862037151481073534389323642892220811478\
754153044346203335282241497445860446^(1/2))^2+494851/625*(1/1054271875167535666\
2351588846650423680091763001578395393300740835672594831783696029828758606676238\
9078653684483852474990499173150467555328000000000000000000000000000000000000000\
0*x^2*2225640592011308920226217083995180921127152268150867147278564413930600178\
8921806181085054819097558155467436565005824555508691610725643646321479877734968\
8847238465180032261872254830252334463899826568830331798530245402086729475620896\
8021301302071222056328846583465287739900288199610587734088756332004438109259491\
9195272871686054379276574116093758102^(1/2)-32853903000629473262803339628678272\
2590271948985495770701998053505238506881732267805121041026510963820133060556470\
5220438792362962157770349996547866610171668765044288558933485049405329074017677\
4802807536733016436877253/96925149427337145169950168380009168904966204932209936\
7719645860886543876815676129444372981326949178289526695781823000136585134394492\
4363248734478646046182140579378256744990330052867896735725378061974402654526751\
7103244725043219364749456782829273300066924807197959986917119793337374461979680\
6780339291743882820753903620681335880075145629772886676675441459200000000000000\
00000000000000000000000000000*x^3*222564059201130892022621708399518092112715226\
8150867147278564413930600178892180618108505481909755815546743656500582455550869\
1610725643646321479877734968884723846518003226187225483025233446389982656883033\
1798530245402086729475620896802130130207122205632884658346528773990028819961058\
77340887563320044381092594919195272871686054379276574116093758102^(1/2))^2+3139\
8702213588963501137222370820703773209140116671922931429606322094874048776993876\
1159631962667022790441849747753945599626305190569521966565747112497233723930995\
8360376275933065573715851022717211299369731714284990505425423634823032992201898\
627599674993370168970926876195486575056006279885429048921472992081/147637894222\
0837323042260550886091060260620060886160122711804743166034547594590580401639055\
1176713874580954275700758561492675663669476852684707413304004323740294089939371\
0174021107879091916910038384557595580884442944440121308032495422924918645347604\
85289984000000000000000000000000000000000000000000000000000000000000*x^6, 
8740466805150526599153079082484206971/50706024009129176059868128215040000]
>> Degree size
6
>> Succeeds RealCertify Batch: 52 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 53 Test 1 - Weifeng
>> input polynomial
-x^2+7106609/10000
>> basis
[(x-749/100)*(x-899/100)*(x-1971/100)*(x-2447/100)*(x-2547/100), (-x+749/100)*(x-899/100)*(x-1971/100)*(x-2447/100)*(x-2547/100)]
>> Time taken
1.451000
">> Sums of squares multipliers", [-x^2+7106609/10000-620/3172101*x^2*(x-749/
100)*(x-899/100)*(x-1971/100)*(x-2447/100)*(x-2547/100)-620/3172101*(x+1)^2*(-x
+749/100)*(x-899/100)*(x-1971/100)*(x-2447/100)*(x-2547/100), 620/3172101*x^2,
620/3172101*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 53 Test 1 - Weifeng

>> Test
Batch: 53 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+7106609/10000
>> basis
[(x-749/100)*(x-899/100)*(x-1971/100)*(x-2447/100)*(x-2547/100), (-x+749/100)*(x-899/100)*(x-1971/100)*(x-2447/100)*(x-2547/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.229881
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 53 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 53 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+7106609/10000
>> basis
[(x-749/100)*(x-899/100)*(x-1971/100)*(x-2447/100)*(x-2547/100), (-x+749/100)*(x-899/100)*(x-1971/100)*(x-2447/100)*(x-2547/100), -x^2+7006609/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.014074
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14405
time= 0.127000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [7106609/10000*(7/3602879701896396800000*
96497228782429459738431301734812456141703^(1/2)+
4907529677922450327754502393135681459159/
830694518813448523543210664540277341589744287708010294699622400*x*
96497228782429459738431301734812456141703^(1/2)-\
63229382840273485395403326025085242198886098679895120152448318198592763021/2356\
2811622330876061089707262486415588846767039401464692736000000000000000000000000\
000000000000000*x^2*96497228782429459738431301734812456141703^(1/2)-\
144193889323131048031832189517356802419988402020478176237341677415937/185674693\
9152736641935729975715899485922778295817994240000000000000000000000000000000000\
0000000*x^3*96497228782429459738431301734812456141703^(1/2))^2+7106609/10000*(1
/244780048853431477689697132836960328899787863968738694083379200000000000000000\
00000*x*11879425951357884809339689817970243288499460114847438990048473276353931\
6231564107982652292258135041186891874306472591678825695865062528608619299227391\
2363462750326^(1/2)+26356244305401815566113092949281147391917582925325786757436\
5037145217348164080855673363538850890201129732664626696699/30762602515548692731\
6721533407258718917408720016979146390138946863343192814903769285179342940454304\
1544968825154352351742818067879658194334892241612942562452551583159203539399475\
2000000000000000000000000*x^2*1187942595135788480933968981797024328849946011484\
7438990048473276353931623156410798265229225813504118689187430647259167882569586\
50625286086192992273912363462750326^(1/2)-2133574779885269714795699963451844495\
94446718081511520834650858351458542332252998912862337090043676998883877104323/
3636134492985459294947085003017575947834238872776910661156632021899731390379281\
6827202769713372666976581570945153391377856403483277508066664558060741371200528\
17496859234795520000000000000000000000000*x^3*118794259513578848093396898179702\
4328849946011484743899004847327635393162315641079826522922581350411868918743064\
725916788256958650625286086192992273912363462750326^(1/2))^2+7106609/10000*(1/
1054656945277386550880596035146940404965363891200096694162431500844593217277070\
0787158700827459799888584427833984279874926219489665081147392000000000000000000\
000000000000000000000*x^2*40426146472964403535307659284486053830683226146274129\
9645500373274808849214976078531569971277282198877222783291056738141495026467783\
5000310033244348338368157309339153601337803653301659319692933760395063267561547\
9777438715631852745240933141671887988992072151686192880862476346873052998712098\
94347927248996548378894173597152978774903921885338293716718^(1/2)-8989780321510\
0729775639174591479962529297616021107432998060688428578826610480181053478191657\
7876742706233223636973110304606697602397000055541931973838093257304065731412455\
8642266218031800977229677158862091922870636883/10609370372637027999620740297127\
5683862290610736845980797309024053227202018237466073884787789747497693527731054\
6455720205098772106647030126606386566286965708773810656182704081789690277591024\
7704724500956592875460748700318031425718033843955486166502977806096300297096997\
6618786873898487313008260765860025678360002946983355165003152610975991852638745\
82301900800000000000000000000000000000000000000000*x^3*404261464729644035353076\
5928448605383068322614627412996455003732748088492149760785315699712772821988772\
2278329105673814149502646778350003100332443483383681573093391536013378036533016\
5931969293376039506326756154797774387156318527452409331416718879889920721516861\
9288086247634687305299871209894347927248996548378894173597152978774903921885338\
293716718^(1/2))^2+843029576729418594462853261728110431282407049486419095103533\
8916477005597268885555183809148452685050264311182683754290133429551782907123448\
7538074506901783820543224118456604250942510841427998276215205917591455046029615\
9060554573543376371724309161569960078389760967157909867295092572839058916984213\
5976729/13049770498113610166074076915483866080959808925309048717428827339072068\
8269044177766180970335430307985893191796449860960294804230607228534073353953418\
9512310174465091944957214737393430549834725625900468165576102430089197633150035\
6919862654105574093570965504000000000000000000000000000000000000000000000000000\
00000*x^6, 182401457564884133704827028832892600521/
50706024009129176059868128215040000]
>> Degree size
6
>> Succeeds RealCertify Batch: 53 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 54 Test 1 - Weifeng
>> input polynomial
-x^2+5674321/10000
>> basis
[(x-158/25)*(x-371/25)*(x-359/20)*(x-2161/100)*(x-2261/100), (-x+158/25)*(x-371/25)*(x-359/20)*(x-2161/100)*(x-2261/100)]
>> Time taken
1.346000
">> Sums of squares multipliers", [-x^2+5674321/10000-402/2573873*x^2*(x-158/25
)*(x-371/25)*(x-359/20)*(x-2161/100)*(x-2261/100)-402/2573873*(x+1)^2*(-x+158/
25)*(x-371/25)*(x-359/20)*(x-2161/100)*(x-2261/100), 402/2573873*x^2, 402/
2573873*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 54 Test 1 - Weifeng

>> Test
Batch: 54 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+5674321/10000
>> basis
[(x-158/25)*(x-371/25)*(x-359/20)*(x-2161/100)*(x-2261/100), (-x+158/25)*(x-371/25)*(x-359/20)*(x-2161/100)*(x-2261/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.689505
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 54 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 54 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+5674321/10000
>> basis
[(x-158/25)*(x-371/25)*(x-359/20)*(x-2161/100)*(x-2261/100), (-x+158/25)*(x-371/25)*(x-359/20)*(x-2161/100)*(x-2261/100), -x^2+5574321/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.017625
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14865
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [5674321/10000*(1/1801439850948198400000*
1234460393028752871370212230424950407126495^(1/2)+
25873964065056390906371957684610227683737/
1457393596117267898578671397420092058645798177959078236394618880000*x*
1234460393028752871370212230424950407126495^(1/2)-56872044816605132730340334507\
56858445973590730311326816996969268290898078627113/5914964023385332846305960604\
534273760538399812904549677908623360000000000000000000000000000000000000000*x^2
*1234460393028752871370212230424950407126495^(1/2)+
126825175434164865982817067048067102126270758348595697888163051119287/271460711\
2328089584742991993986241628687452856375050240000000000000000000000000000000000\
00000000*x^3*1234460393028752871370212230424950407126495^(1/2))^2+5674321/10000
*(1/946394243741653255408953696725483801686143970064727948465379737600000000000\
00000000000*x*24551502546986439704644470975409563226261987677231976944750815235\
3455030020179320332227642928192164131977588031542149885634447381974729531329527\
87297935929719059634928838^(1/2)+5733136750330453287600412810338831998810027995\
38548803121378580858011716760454736389538347654336817065524738115051484817151/
7548254735154784482341076829339565604627233849653772912456779750875840687953913\
6124497256873731715820436174730134463755267797691858980772382969578514801368292\
960431358951223873550174650368000000000000000000000000*x^2*24551502546986439704\
6444709754095632262619876772319769447508152353455030020179320332227642928192164\
13197758803154214988563444738197472953132952787297935929719059634928838^(1/2)-\
1602693373725522276883798195638260529266521003568382510266308630509188355664601\
589000989181615624400156023971495519/831405063173503984258763827132308606244169\
3298693549537090847247269585964507816896120396704043060374584484946539689920087\
7732432500492980110494253976380354906076462010775412460748800000000000000000000\
000*x^3*24551502546986439704644470975409563226261987677231976944750815235345503\
0020179320332227642928192164131977588031542149885634447381974729531329527872979\
35929719059634928838^(1/2))^2+5674321/10000*(1/79413551103977768455695993867838\
7659381241210238496704792534972966198820780302319934574923600092502948365894628\
624024609910399882901878838449993154560000000000000000000000000000000000000000*
x^2*444589487658220802313915054567441390250751636653949187140062573278409014347\
6263314610273944868758926575620010821772410549239608208612687238887851955110881\
4760712695889408085217660037735778198485001382585515857871181653916228467954601\
9448699638577264823901837174912339918485129998026303533562845393489549217142222\
21183631803780345592849963408149239052438519565492824926270^(1/2)-2051983183628\
2756683281133520449397042579246865120758706207535573003679306395514042910956228\
8953728540798856006100671429851170493138320995414536613092762472603368840241315\
38103857090499583037563354921730742979811003621742903719/1722959667834048220748\
1651072712994085674052942189198558599777701960772970047706727430949035755749489\
8441255743377426780910061162225550057134771369863498007050546742742373397115900\
6032709502067660137214239768261563066397478050605296212099178364208127567242441\
8140065607634203579113020524057484403416370610424912909475302970692694619550177\
3741162005089533794332814940058314342400000000000000000000000000000000000000000\
0*x^3*4445894876582208023139150545674413902507516366539491871400625732784090143\
4762633146102739448687589265756200108217724105492396082086126872388878519551108\
8147607126958894080852176600377357781984850013825855158578711816539162284679546\
0194486996385772648239018371749123399184851299980263035335628453934895492171422\
2221183631803780345592849963408149239052438519565492824926270^(1/2))^2+68865637\
7029277686299957046856776646373436140753635245773273745366213822585429848718389\
2274648312751910201590092006031832268277707469528021832414194950483919338063297\
4359203816161634790282094044214939633327267287255543230716193714177293871922767\
943224323698543311171318430213601909249360440783162036050297999927/585228178809\
3640151066078019265113784296497472465128015292804461423356504939106691747130466\
2997583981894266338735532602989951742052265582402549533075933575017194589750786\
7084776700860804396602375242319208353565834254590681787823348163269137582216592\
1042985805414400000000000000000000000000000000000000000000000000000000*x^6, 
167942455908117608135017063054828274041/202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 54 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 55 Test 1 - Weifeng
>> input polynomial
-x^2+6505961/10000
>> basis
[(x-539/100)*(x-693/50)*(x-2331/100), (-x+539/100)*(x-693/50)*(x-2331/100)]
>> Time taken
0.308000
">> Sums of squares multipliers", [-x^2+6505961/10000-3819/403832*x^2*(x-539/
100)*(x-693/50)*(x-2331/100)-3819/403832*(x+1)^2*(-x+539/100)*(x-693/50)*(x-\
2331/100), 3819/403832*x^2, 3819/403832*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 55 Test 1 - Weifeng

>> Test
Batch: 55 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+6505961/10000
>> basis
[(x-539/100)*(x-693/50)*(x-2331/100), (-x+539/100)*(x-693/50)*(x-2331/100)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -79.949519
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 55 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 55 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+6505961/10000
>> basis
[(x-539/100)*(x-693/50)*(x-2331/100), (-x+539/100)*(x-693/50)*(x-2331/100), -x^2+6405961/10000]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 0.015373
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 6807
time= 0.117000secs
>> Time taken
0.007000
">> Sums of squares multipliers", [6505961/10000*(1/9007199254740992000*
56293888207452581797990947537411956847^(1/2)-\
1821870771899727993906508310045363659/
2835630622520371683489542191654351184159459716490611684016128*x*
56293888207452581797990947537411956847^(1/2)-1676974783697224909171956121729131\
956146433756416329736394696746174339858615510151297/989654780415948265222226075\
2965188536644420878233360549281792000000000000000000000000000000000000000000000
*x^2*56293888207452581797990947537411956847^(1/2))^2+6505961/10000*(1/329884926\
8053160884074086917655062845548140292744453516427264000000000000000000000000*x*
9330110535780260812373277653315845857236410877663824659825144426737985318126502\
7025034689988469004621439957987930723816392318942803431676614123306688666920969\
2702^(1/2)-20730171154469816226152297615802549420953799095335351837539273665297\
901191883132279535031821891214439706883021876305399/183107329976675953655129696\
5434736217825645051518304535404938378438602750899254942602282908008745982491538\
2669197995824880103299320480238504181955035960183090883508991547999024547102720\
00000000000000000000*x^2*933011053578026081237327765331584585723641087766382465\
9825144426737985318126502702503468998846900462143995798793072381639231894280343\
16766141233066886669209692702^(1/2))^2+8650463391473589008186376065904747568505\
3985416931770409553779477577450209990163371319680625046924946248214129080812216\
7802506929997387745023979509559287672438251415943574471824307492039530499809145\
2341342850666467946981973455439309377152996921729/36305201137218256936327905335\
5971002673931136891701240321207424420021608867954113492925352496007756683347271\
6641446837263840166164436479137505710530588626124800000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000*x^4, 
111810812166377799368128114746454049/198070406285660843983859875840000]
>> Degree size
4
>> Succeeds RealCertify Batch: 55 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 56 Test 1 - Weifeng
>> input polynomial
-x^2+1834489/10000
>> basis
[(x-153/100)*(x-663/100)*(x-491/50)*(x-1117/100)*(x-1217/100), (-x+153/100)*(x-663/100)*(x-491/50)*(x-1117/100)*(x-1217/100)]
>> Time taken
1.432000
">> Sums of squares multipliers", [-x^2+1834489/10000-6880/1148319*x^2*(x-153/
100)*(x-663/100)*(x-491/50)*(x-1117/100)*(x-1217/100)-6880/1148319*(x+1)^2*(-x+
153/100)*(x-663/100)*(x-491/50)*(x-1117/100)*(x-1217/100), 6880/1148319*x^2, 
6880/1148319*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 56 Test 1 - Weifeng

>> Test
Batch: 56 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1834489/10000
>> basis
[(x-153/100)*(x-663/100)*(x-491/50)*(x-1117/100)*(x-1217/100), (-x+153/100)*(x-663/100)*(x-491/50)*(x-1117/100)*(x-1217/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -7.622335
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 56 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 56 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1834489/10000
>> basis
[(x-153/100)*(x-663/100)*(x-491/50)*(x-1117/100)*(x-1217/100), (-x+153/100)*(x-663/100)*(x-491/50)*(x-1117/100)*(x-1217/100), -x^2+1734489/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.054514
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14400
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1834489/10000*(1/225179981368524800000*
16172042890303300019912394941745910397431^(1/2)-\
372880772499592525264814569325343742167/
74580384086619771995373942657537056226286352565087842074624000*x*
16172042890303300019912394941745910397431^(1/2)-\
1101881990593715466046269869823868350069205079388003706894719876096215787639/52\
1915032282558513290487475173501955945983217738248559263744000000000000000000000\
00000000000000000*x^2*16172042890303300019912394941745910397431^(1/2)+
71524227110546875171893718573222366213333237877801762538829006625193/3556269840\
5561338422476741150635269272940803797286912000000000000000000000000000000000000\
00000*x^3*16172042890303300019912394941745910397431^(1/2))^2+1834489/10000*(1/
4175320258260468106323899801388015647567865741905988474109952000000000000000000\
0000*x*155422491174699996989477899849024415942906606503541704123996724374282957\
1544977135286812497542702228435251091584357985789381012091356653578978801832667\
0636636393685^(1/2)+13646514488038229559424725863507631572193825488513750046953\
95647200270983208968950423486893589153149131148491658293531/2799842693357492438\
2759017710776932797473247854174772758196487874094672985089088900561380602669900\
2225705864581480170090526636916741552897522256867956145379781893194329571238871\
040000000000000000000000000*x^2*15542249117469999698947789984902441594290660650\
3541704123996724374282957154497713528681249754270222843525109158435798578938101\
20913566535789788018326670636636393685^(1/2)-4223776387607372134208265729978041\
4015910204646419247077061675011914762151867728657081534120330004217608778709663
/305244969401014935306333455373969893495935356975972848659179617583912173745267\
3621979895284481934775577350036783869187447039877772410223201362961216514739306\
49781159036190720000000000000000000000000*x^3*155422491174699996989477899849024\
4159429066065035417041239967243742829571544977135286812497542702228435251091584\
3579857893810120913566535789788018326670636636393685^(1/2))^2+1834489/10000*(1/
1170410012834101938000869215297969070577860191146181155958185377546714936295765\
2508441111060281308766147090044896059095703330045817867835801600000000000000000\
000000000000000000000*x^2*21060013188689091249638686948590695117921206366942542\
9035430139134358812241732205580616417028103481505635778357271097270693384665695\
1814259982929734938754290319414306401481402013271278117511434677442440655875195\
8153868088973733859834634338827091477327611606601707094679992337120401457797832\
0265579354057138015512510472810178987462302170208747136908129^(1/2)-24555554111\
2272794743976238774437051429472243508902639444849128999830720453063051231132803\
2244590009208528767733362510152799270970997072923321755397007902277104395868486\
27726058711321215474477401068467036250070731038969/1337978758390175422613724939\
1100593198089089002297755469990637382252276151616845286789716457980464177530656\
4573650302167057298861106189302481162564980553084067535486840576363407124637942\
8337911508674677973066545869400915169346344641342052296277171516143578193450640\
8211923915526801580540200306153491705605549888657482960261594635922188461132925\
67621624502681600000000000000000000000000000000000000000*x^3*210600131886890912\
4963868694859069511792120636694254290354301391343588122417322055806164170281034\
8150563577835727109727069338466569518142599829297349387542903194143064014814020\
1327127811751143467744244065587519581538680889737338598346343388270914773276116\
0660170709467999233712040145779783202655793540571380155125104728101789874623021\
70208747136908129^(1/2))^2+9089763954547349718150186506528612067254364760267222\
0354955190566749818679262780431851856566996716862418221029686894751666209128764\
6001098924783168408810521847147533476684230757999161507394831806795791213668836\
6303337986708922969332263277404643313818503361062984265208496822944470686829598\
1529940914407079841/17013977044611407862993314728764810888075401663185993936722\
8424541931332345503753231346781838954741726450019695977783259161969691606734781\
6540409248508352830652441601359482906079247996842718654772855424265800168326713\
9987208931230233673359685708963272196096000000000000000000000000000000000000000\
00000000000000000000*x^6, 52007288692700236946955685835805423081/
811296384146066816957890051440640000]
>> Degree size
6
>> Succeeds RealCertify Batch: 56 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 57 Test 1 - Weifeng
>> input polynomial
-x^2+1104521/2500
>> basis
[(x-173/100)*(x-723/100)*(x-79/10)*(x-971/100)*(x-1403/100)*(x-939/50)*(x-989/50), -(x-173/100)*(x-723/100)*(x-79/10)*(x-971/100)*(x-1403/100)*(x-939/50)*(x-989/50)]
>> Time taken
2.022000
">> Sums of squares multipliers", [-x^2+1104521/2500-284/10482933*x^2*(x-173/
100)*(x-723/100)*(x-79/10)*(x-971/100)*(x-1403/100)*(x-939/50)*(x-989/50)+284/
10482933*(x+1)^2*(x-173/100)*(x-723/100)*(x-79/10)*(x-971/100)*(x-1403/100)*(x-\
939/50)*(x-989/50), 284/10482933*x^2, 284/10482933*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 57 Test 1 - Weifeng

>> Test
Batch: 57 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1104521/2500
>> basis
[(x-173/100)*(x-723/100)*(x-79/10)*(x-971/100)*(x-1403/100)*(x-939/50)*(x-989/50), -(x-173/100)*(x-723/100)*(x-79/10)*(x-971/100)*(x-1403/100)*(x-939/50)*(x-989/50)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.330090
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 57 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 57 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1104521/2500
>> basis
[(x-173/100)*(x-723/100)*(x-79/10)*(x-971/100)*(x-1403/100)*(x-939/50)*(x-989/50), -(x-173/100)*(x-723/100)*(x-79/10)*(x-971/100)*(x-1403/100)*(x-939/50)*(x-989/50), -x^2+1079521/2500]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.022637
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 26819
time= 0.128000secs
>> Time taken
0.011000
">> Sums of squares multipliers", [1104521/2500*(1/11258999068426240000000*
75505218877877240666363150962889631026605830^(1/2)-\
877089753676460884728832260744708326818853/
2901719685145051146156376100530682155628683944967328115982336000000*x*
75505218877877240666363150962889631026605830^(1/2)-\
15514430267466819097627475460860643496230335043389547858334320943298506633/2750\
8824305729745228799896414192434565500589920247386896072704000000000000000000000\
000000000000000*x^2*75505218877877240666363150962889631026605830^(1/2)+
25968384735915306963381635837742917672526705316280649999566282719151/4150943305\
6998984520288125522575599989347705053815767040000000000000000000000000000000000\
000000*x^3*75505218877877240666363150962889631026605830^(1/2)+
45238002905227800248886816369876707041448440640691913078434166882545787/5313207\
4312958700185968800668896767986365062468884181811200000000000000000000000000000\
000000000000*x^4*75505218877877240666363150962889631026605830^(1/2))^2+1104521/
2500*(1/29342745926111728244053222841805263536533962581597212689144217600000000\
0000000000000*x*255710388668937095722661714778455946194333445737408423385018645\
2810912865259506502250464414119310708048027712568511143727373164541169961480139\
00084004165071102018943^(1/2)-1257982835477060390802689285672404154622041016698\
2010296969393423783126019933771889457515149969725162604704556247112711/41129186\
1115782073908331825835820664855461067849226099934055328395151391483315954095230\
4398950817607798482730177918597939901527937085540226929885049967801450659600474\
37409954037760000000000000000000000000*x^2*255710388668937095722661714778455946\
1943334457374084233850186452810912865259506502250464414119310708048027712568511\
14372737316454116996148013900084004165071102018943^(1/2)-2797639632633073703671\
1326833516342025397009187618495384701196718722059717265434134161104139921166224\
6293295087791/34754649636182858359515998710158758460161795323578669843167458095\
9053410529174991230480673434073512464852838002421323337800557231712193570347196\
60196319925294454583565326745600000000000000000000000000*x^3*255710388668937095\
7226617147784559461943334457374084233850186452810912865259506502250464414119310\
70804802771256851114372737316454116996148013900084004165071102018943^(1/2)+3508\
8748181544102775434764976096991697369838507111455441520130485894194186884083279\
79226266530296060029646114383663/4448595153431405870018047834900321082900709801\
4180697399254346362758836547734398877501526199561409595501163264309929387238471\
325659160777004441165051289504376901866963618234368000000000000000000000000000*
x^4*255710388668937095722661714778455946194333445737408423385018645281091286525\
9506502250464414119310708048027712568511143727373164541169961480139000840041650\
71102018943^(1/2))^2+1104521/2500*(1/480725311734685508914857651570062274463491\
0481581120905715084878182011943091469818398182991610629019438514811832048007497\
039744330285187072000000000000000000000000000000000000*x^2*31676825961115546462\
4774332755419087449447114795021513099236762009627425096965798732195268447002234\
6311249222407729326898086656284347790417300364325440352107853121298342199552641\
9244822543742584794989414165375305439180058906727784812234237276476708086188820\
2572850422689120012549746440188278726528086054738888490929296924295911436295523\
296635870^(1/2)+235893744657457456564390700296915588530779875264459346021241966\
3173889667882666261525745663001674170078955343067266754367060419286265848235875\
77743113119154590662417199345877260281499360557749610801945844327448779/1734323\
8527294424999142684151366638920367394473688183388706432503432142252923304219788\
4702227867822542738167216218179590967527477622384945485794280058099299583719817\
1247476053618399074177516938899675758533311113052423840671604497198346113311651\
9466125223058960263596591762057354452662388955182525843197011670092087053384198\
93377349208876254921448488960000000000000000000000000000000000000000*x^3*316768\
2596111554646247743327554190874494471147950215130992367620096274250969657987321\
9526844700223463112492224077293268980866562843477904173003643254403521078531212\
9834219955264192448225437425847949894141653753054391800589067277848122342372764\
7670808618882025728504226891200125497464401882787265280860547388884909292969242\
95911436295523296635870^(1/2)-1057859375876809595487213870587301278155054737795\
7608180507555387088001662676715004990753942658810199432886957444483033952333309\
4481562770287498975199279659136210171344315123049164975248892396687244211317721\
8607298877/22199345314936863998902635713749297818070264926320874737544233604393\
1420837418294013292418851670812854704854036759269876438435171356652730221816678\
4743671034671613659196769348631550814947221681791584970922638224707102516059653\
7564138830250389144916640285515469137403637455433413699407857862633633079292174\
9377178714283317746352300698736160629945406586880000000000000000000000000000000\
0000000000*x^4*3167682596111554646247743327554190874494471147950215130992367620\
0962742509696579873219526844700223463112492224077293268980866562843477904173003\
6432544035210785312129834219955264192448225437425847949894141653753054391800589\
0672778481223423727647670808618882025728504226891200125497464401882787265280860\
54738888490929296924295911436295523296635870^(1/2))^2+1104521/2500*(1/282649041\
7784852772825791533347101669126425913015445421335028275546404492323719545607901\
3335413655803454996767371463033459778650646877660070658391329834085648078515160\
9091240304961486816471968608672543677816219402972358938478440454553600000000000\
000000000000000000*x^3*44086301153791315386655847900417783617192222740782953365\
9509744511338986843625653180003285875119951890537005258521001323421310176023678\
7447757828615983270055931253983825617611552172986422719578735534759927065785648\
7502418495433981516286800372621421051960667368005908900155300522996237450341741\
8751063720537254458300384887902585408907805090083448075330270509899931097375512\
5897020994145073886963811222004991883631082520302918436240930976715354350433286\
091549464512431034941178514529466560897915963685873008252382174833^(1/2)-644954\
5220512691765575206985794289147130624119628766988937619406516523008775364386447\
1112317890855657718515811982371203798924788106985004735136667633534353204937914\
6902971877595904892873644896918673112556212804151712344105126442719927219844989\
378449470045756833696389328147667426217553598691618383/330911749080596726405762\
8409453078474437779871362104603723738735478075467869972413764516820210905135530\
1147390126810307201461929648564094551935212905861109555066003669736035640704088\
6255041164031610389824937811764435195125491380127337930728331699145421124591985\
4828374561868481688511635438841895361019196070675870349785104828299765535316274\
5787071759780522471866556671699067496156947945444385774056127907733069611553528\
2670415765137168297025591682221774261743116566814270471886228281442651465606034\
6579583002759581750803695589654528000000000000000000000000000000*x^4*4408630115\
3791315386655847900417783617192222740782953365950974451133898684362565318000328\
5875119951890537005258521001323421310176023678744775782861598327005593125398382\
5617611552172986422719578735534759927065785648750241849543398151628680037262142\
1051960667368005908900155300522996237450341741875106372053725445830038488790258\
5408907805090083448075330270509899931097375512589702099414507388696381122200499\
1883631082520302918436240930976715354350433286091549464512431034941178514529466\
560897915963685873008252382174833^(1/2))^2+467125735345627436581636988418155347\
1366748166597494418504298599938607419983222203061621772351538348375898242332553\
5904148956620913299444032037245582125960675846948139418405382402387701609728395\
9477945308105152513699552118094837702627685782299184737997828841168346923472146\
1179446753253946401562043334450392595506978377806587361776877628829146177914787\
197991780923503626891981/182366657717171123955139479942277911911028535849390415\
0002830529014415623015965055350526852788674114878435207854974561096326456017929\
7953806295437094664464708971890785013582824625847226480910422438957999918031402\
0744680216520220961271297240563717148599035596191626366561451595398941232228650\
0135936306504461940976187810976725624422400000000000000000000000000000000000000\
0000000000000000*x^8, 1534879772008478568652450274817292961/
792281625142643375935439503360000]
>> Degree size
8
>> Succeeds RealCertify Batch: 57 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 58 Test 1 - Weifeng
>> input polynomial
-x^2+7900849/10000
>> basis
[(x-223/50)*(x-773/100)*(x-231/20)*(x-1633/100)*(x-2593/100), -(x-223/50)*(x-773/100)*(x-231/20)*(x-1633/100)*(x-2593/100)]
>> Time taken
1.673000
">> Sums of squares multipliers", [-x^2+7900849/10000-206/5576967*x^2*(x-223/50
)*(x-773/100)*(x-231/20)*(x-1633/100)*(x-2593/100)+206/5576967*(x+1)^2*(x-223/
50)*(x-773/100)*(x-231/20)*(x-1633/100)*(x-2593/100), 206/5576967*x^2, 206/
5576967*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 58 Test 1 - Weifeng

>> Test
Batch: 58 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+7900849/10000
>> basis
[(x-223/50)*(x-773/100)*(x-231/20)*(x-1633/100)*(x-2593/100), -(x-223/50)*(x-773/100)*(x-231/20)*(x-1633/100)*(x-2593/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.286621
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 58 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 58 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+7900849/10000
>> basis
[(x-223/50)*(x-773/100)*(x-231/20)*(x-1633/100)*(x-2593/100), -(x-223/50)*(x-773/100)*(x-231/20)*(x-1633/100)*(x-2593/100), -x^2+7800849/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.012658
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14761
time= 0.125000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [7900849/10000*(1/1801439850948198400000*
532412286497075339236468146884008796789710^(1/2)-\
40540786222809694671711855853164739196321/
39285092762840305776628151680859467481658072704836737370685440000*x*
532412286497075339236468146884008796789710^(1/2)-\
145766542252189078775561401926249194363356151253839442998008726649344818015481/
2220050710703330519592524210783721276233129754580998170030899200000000000000000\
00000000000000000000000*x^2*532412286497075339236468146884008796789710^(1/2)+
67134531718789723461288982044361489317361175490199796193870572025287/5090378258\
9073162722364912448835719515004977849303040000000000000000000000000000000000000\
000000*x^3*532412286497075339236468146884008796789710^(1/2))^2+7900849/10000*(1
/710416227425065766269607747450790808394601521465919414409887744000000000000000\
0000000*x*113508919944204672175482243784067035225206612315269919726030945842354\
4159904798814825909952051078388970573316778102941329463841073204624210106960264\
22090391102204201349^(1/2)+1276657881329901422670933269898356649281605378017062\
63831778395109178381144697258513779890694465200566639896778232270199/1635835934\
6046323943193829307947994808840257936121003709402596930076803518954783088089915\
1094098075235544039750977880957183880515778325137586268682476699924778703923716\
797294273919713280000000000000000000000000*x^2*11350891994420467217548224378406\
7035225206612315269919726030945842354415990479881482590995205107838897057331677\
810294132946384107320462421010696026422090391102204201349^(1/2)-108266028127283\
9340203864408104603638399064451595764161474174968996776054077102148687529720766\
34456896120145811109/6001321419554551207988352038045969896909779334876140823105\
7806389281813465409922945301360337240321357261746835083893124002346214845080146\
5367629176056938649852065425773046005760000000000000000000000000*x^3*1135089199\
4420467217548224378406703522520661231526991972603094584235441599047988148259099\
5205107838897057331677810294132946384107320462421010696026422090391102204201349
^(1/2))^2+7900849/10000*(1/2693908297271120813147016980885679431152161947347314\
2702217514306798884140472987358728491102545494565401950411630474706523116386021\
1348060619407360000000000000000000000000000000000000000*x^2*1396317862174707277\
1465354512311079238471132450059325507752866168900712108378760238021739159175068\
8879072281122776901994032478328851839041950646468911843696436379036431211032691\
0091677047620621202778429706550110887474060903126974577119976635707962227623460\
4545310594502647045537926631285715610093879580836236562872138122797437329962083\
11390526801102571683093787410^(1/2)-1485587087901688720170433166003334846686603\
4717659505902307271898688917879105614146469624536870927407075071018467498663079\
5451125637341536437271493578079218067607813720017273193981219027258131401421789\
1750928300893439296453/42749696851203168149419637163251866987175136884468761315\
3416569490880112015556605560170011903200977872879016171230457037790185672765199\
6567987415383274496862943532201331365103815237668395436874682729238952829289799\
9187052931438393830174206150548749547397082009899214932506881724288614299346999\
3173339257849300559529416356899538840110801839720325149129431811693056360448000\
0000000000000000000000000000000000000000*x^3*1396317862174707277146535451231107\
9238471132450059325507752866168900712108378760238021739159175068887907228112277\
6901994032478328851839041950646468911843696436379036431211032691009167704762062\
1202778429706550110887474060903126974577119976635707962227623460454531059450264\
7045537926631285715610093879580836236562872138122797437329962083113905268011025\
71683093787410^(1/2))^2+2112263858691469112821731938309517556980900027303801768\
7156492774726729370535368568805957329879084125208969329053072238370540813514132\
6785685893809087484873478982195428695434834879783435215636170888416422935533169\
7811321751304859392649261597560084957121552653618443545769773957025998026845434\
32993741193587346479707/3906022655338469629631341255505930735314712568982104982\
3898912216435313731300688904304892362355969716317241111341513296501196369602426\
2390005016109240893585187701071533163298182972221821765465484683134824022350845\
6025412666175596849566184695219713507197717401567232000000000000000000000000000\
000000000000000000000000000000000*x^6, 506609354997658967686321539633633289/
8112963841460668169578900514406400]
>> Degree size
6
>> Succeeds RealCertify Batch: 58 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 59 Test 1 - Weifeng
>> input polynomial
-x^2+4024361/10000
>> basis
[(x-87/20)*(x-131/20)*(x-1781/100), (-x+87/20)*(x-131/20)*(x-1781/100)]
>> Time taken
0.650000
">> Sums of squares multipliers", [-x^2+4024361/10000-1149/104671*x^2*(x-87/20)
*(x-131/20)*(x-1781/100)-1149/104671*(x+1)^2*(-x+87/20)*(x-131/20)*(x-1781/100)
, 1149/104671*x^2, 1149/104671*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 59 Test 1 - Weifeng

>> Test
Batch: 59 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+4024361/10000
>> basis
[(x-87/20)*(x-131/20)*(x-1781/100), (-x+87/20)*(x-131/20)*(x-1781/100)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -125.707124
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 59 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 59 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+4024361/10000
>> basis
[(x-87/20)*(x-131/20)*(x-1781/100), (-x+87/20)*(x-131/20)*(x-1781/100), -x^2+3924361/10000]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 0.024849
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 6796
time= 0.122000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [4024361/10000*(1/14411518807585587200*
103029589453317550653063299533078321671^(1/2)-\
8479513518926460810722364108933347051/
38923478398253335539480386039453268321552270839382545824481280*x*
103029589453317550653063299533078321671^(1/2)-294015212960138927699803789369430\
227699430749428477911123301833628029713307204920129/175061220433868309481068133\
3863588359457892383196745606103040000000000000000000000000000000000000000000000
*x^2*103029589453317550653063299533078321671^(1/2))^2+4024361/10000*(1/18673196\
84627928634464726756121160916755085208743195313176576000000000000000000000000*x
*400628912317468639291306846559288562368936872014638350689564500816931768305270\
2140750480407096657693784012201517215861639965397654303106999392112179783329210\
8086^(1/2)-23927116260297599513777114723750024598592887711393487272865796781919\
1519912609317253676604410967620447851499187092689579/14189374106974018960054025\
6068422616295114578989818601802774871727039263249693564784289453130206195730979\
5469222156716461802456170599816961463321066507689396963389184489287298496593920\
0000000000000000000000*x^2*4006289123174686392913068465592885623689368720146383\
5068956450081693176830527021407504804070966576937840122015172158616399653976543\
031069993921121797833292108086^(1/2))^2+128262782358018036761153479319402103597\
6783404841666241813573117459870952855562785415513012250338857769308485302805031\
3230341666625337540019655874435248287705390851492464420248443221291607442421688\
717544550232601844394149707207445987396717058497/207952274685940018744708483100\
7409042229722847923784676049565340080991581575527224969891199079154081421059654\
1226833943391784282233253243367214283541708800000000000000000000000000000000000\
0000000000000000000000000000000000000000000000000000000000000*x^4, 
114174174459522919196387734843310756289/3245185536584267267831560205762560000]
>> Degree size
4
>> Succeeds RealCertify Batch: 59 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 60 Test 1 - Weifeng
>> input polynomial
-x^2+339241/400
>> basis
[(x-56/25)*(x-621/100)*(x-267/20)*(x-53/2)*(x-539/20), -(x-56/25)*(x-621/100)*(x-267/20)*(x-53/2)*(x-539/20)]
>> Time taken
1.048000
">> Sums of squares multipliers", [-x^2+339241/400-4055/6427506*x^2*(x-56/25)*(
x-621/100)*(x-267/20)*(x-53/2)*(x-539/20)+4055/6427506*(x+1)^2*(x-56/25)*(x-621
/100)*(x-267/20)*(x-53/2)*(x-539/20), 4055/6427506*x^2, 4055/6427506*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 60 Test 1 - Weifeng

>> Test
Batch: 60 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+339241/400
>> basis
[(x-56/25)*(x-621/100)*(x-267/20)*(x-53/2)*(x-539/20), -(x-56/25)*(x-621/100)*(x-267/20)*(x-53/2)*(x-539/20)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.212980
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 60 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 60 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+339241/400
>> basis
[(x-56/25)*(x-621/100)*(x-267/20)*(x-53/2)*(x-539/20), -(x-56/25)*(x-621/100)*(x-267/20)*(x-53/2)*(x-539/20), -x^2+335241/400]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.011797
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14158
time= 0.117000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [339241/400*(1/36028797018963968000*
479391177888625899133450165444334525263^(1/2)-\
534483146773576778430478291465234693947/
8843206369705651243921285650200739879871008936643954475008000*x*
479391177888625899133450165444334525263^(1/2)-\
17903108620439953336500613679456709712419597978487361494726679028798137587/5587\
8947899962120384706200384716488376023637925759549440000000000000000000000000000\
0000000000000*x^2*479391177888625899133450165444334525263^(1/2)+
235289517351168182910325057154570825501382083120781141436561066126307/329435108\
9636106507450821120366729751181233278156800000000000000000000000000000000000000\
000000*x^3*479391177888625899133450165444334525263^(1/2))^2+339241/400*(1/81742\
91807080173039134164170564240585292600747996825518080000000000000000000000*x*11\
9946773506290714654980061127884706722766248109252804088052516835883871521624227\
527504864462560997343884439456734052412361930805190444420228848223447300854^(1/
2)+4518685188161918814947275212732433386094015637293919141055813955693564347018\
2395919009849703606721348038145365283/18906728556352845056475141256167659002815\
1933893242435659700090908666725247205648536608405372706996878305433039129979627\
21582343603907937467734885338589444606892942232125440000000000000000000000000*x
^2*1199467735062907146549800611278847067227662481092528040880525168358838715216\
2422752750486446256099734388443945673405241236193080519044442022884822344730085\
4^(1/2)-24990804132830460724985865162564695824730731386280387319805573166886338\
81236298935762395807930837307100033704679/1712100545780608476377903435579633607\
2776661456605798307002947145876358693654828051575753558825610536761602822070660\
604549774632061338453754375670322911079094913385627648000000000000000000000000*
x^3*119946773506290714654980061127884706722766248109252804088052516835883871521\
6242275275048644625609973438844394567340524123619308051904444202288482234473008\
54^(1/2))^2+339241/400*(1/61245757485745992010203544917282372371021720556537483\
7304007066272945549138282476510082979233372312831843704814626933257916401938595\
8400000000000000000000000000000000000000000*x^2*6540739746780867165015063297750\
2315431986119948311478661718320970770510701473941210652228707612726282404837153\
5842797009533739295688900484263336907389250896690968810030891764991905699064305\
1831246327469950471357071367237923705282179629746795274970186069558888718215442\
37371604908020693394996422485722584111766282396512704321550366285943655138^(1/2
)-11543824052125969595147479119713239454256691196189637788898215593253984475985\
9030468697806604421463906662651707779871922793634841876224775767765086002392418\
2153138175972072031313028851730631450699130065500956627232989/29678804060178747\
9626871743229640411973802956321343453298439639096933828852181832337950024129540\
0839311643091288350035565264992607947996412719213566147588947716628059986016224\
2169237836802731650776828406442797548282205888910592713231182997865850244082269\
8152953670004053656788000833371171006635256163855550128229895904825452180687514\
6098837170631475200000000000000000000000000000000000000000000*x^3*6540739746780\
8671650150632977502315431986119948311478661718320970770510701473941210652228707\
6127262824048371535842797009533739295688900484263336907389250896690968810030891\
7649919056990643051831246327469950471357071367237923705282179629746795274970186\
0695588887182154423737160490802069339499642248572258411176628239651270432155036\
6285943655138^(1/2))^2+11005313857134312780661499194365845812210469553749354376\
3514532802838698769712515891337819669120477787435928239841205750295921146902929\
0375822808514468075914320979641946829279361853896313188792203872504517375695131\
2109414924113033856244330602727260599870325509476767203650033722127304972386441\
880055496961/960264243616245630604089468320260884561069272338977882805621758718\
4213413071815042900834530982042048280234239341473204368389208267005068437091254\
8546694983213876388834699797838253150036613651128549037616241891639420344390341\
2509931158110628177311992643584000000000000000000000000000000000000000000000000\
0000000000*x^6, 26803015694570957786907552017064436009/
32451855365842672678315602057625600]
>> Degree size
6
>> Succeeds RealCertify Batch: 60 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 61 Test 1 - Weifeng
>> input polynomial
-x^2+625619/625
>> basis
[(x-98/25)*(x-453/50)*(x-1529/100)*(x-1631/100)*(x-737/25), -(x-98/25)*(x-453/50)*(x-1529/100)*(x-1631/100)*(x-737/25)]
>> Time taken
1.286000
">> Sums of squares multipliers", [-x^2+625619/625-339/18270526*x^2*(x-98/25)*(
x-453/50)*(x-1529/100)*(x-1631/100)*(x-737/25)+339/18270526*(x+1)^2*(x-98/25)*(
x-453/50)*(x-1529/100)*(x-1631/100)*(x-737/25), 339/18270526*x^2, 339/18270526*
(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 61 Test 1 - Weifeng

>> Test
Batch: 61 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+625619/625
>> basis
[(x-98/25)*(x-453/50)*(x-1529/100)*(x-1631/100)*(x-737/25), -(x-98/25)*(x-453/50)*(x-1529/100)*(x-1631/100)*(x-737/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.275737
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 61 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 61 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+625619/625
>> basis
[(x-98/25)*(x-453/50)*(x-1529/100)*(x-1631/100)*(x-737/25), -(x-98/25)*(x-453/50)*(x-1529/100)*(x-1631/100)*(x-737/25), -x^2+619369/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.009992
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14423
time= 0.125000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [625619/625*(1/900719925474099200000*
238485987595729556855858169033578655832167^(1/2)-\
3666296621825302991714420759517876750307/
17597159913377175363734496226859349001423641534020051678527488000*x*
238485987595729556855858169033578655832167^(1/2)-\
1065103512510707960730934406137527728927068407854462479333137712578478956139/98\
4291814671198881317753654267029678486733781654127601778688000000000000000000000\
000000000000000000*x^2*238485987595729556855858169033578655832167^(1/2)+
33802324347149922061973610276624503838647670867673615383062596162349/1638863227\
6446721855303734752218564042284750876966912000000000000000000000000000000000000\
0000000*x^3*238485987595729556855858169033578655832167^(1/2))^2+625619/625*(13/
2099822537965224280144541129102996647438365400862138883794534400000000000000000\
00000*x*42370397007494226776095324877214200298888428196837328459861825719613946\
8240845733984077759482650285979496533818451419411981257296617834581030035087023\
206696099414^(1/2)-628460792586726352677796516653093351227301148789034998314821\
6106476691672629235397086025893429606724735003602754650601/29767811451220592649\
6137241936278974531381483109494553714572007178833457393104364817052695606103008\
6598141154742655183721031709774460805091105970114050770950538398244098737323376\
6400000000000000000000000000*x^2*4237039700749422677609532487721420029888842819\
6837328459861825719613946824084573398407775948265028597949653381845141941198125\
7296617834581030035087023206696099414^(1/2)-33022472438847196067424604679809495\
54397017679055109137313628824963511715981584459690628084517941910277029033517/
5286819303267926583221084361360135136052479990208711580309918961661853786997879\
3414922340133194840924626315070756681404444268792178640587093315582274884216015\
363241918070784000000000000000000000000*x^3*42370397007494226776095324877214200\
2988884281968373284598618257196139468240845733984077759482650285979496533818451\
419411981257296617834581030035087023206696099414^(1/2))^2+625619/625*(1/6974955\
2155268052745777290313397995252990252855497795632030158917911032801408025082804\
5118894749810733919789501287968023505445042525516595200000000000000000000000000\
0000000000000*x^2*4812797329682410637075512178348688032696862531713953438667708\
4267016043430082371435249614834628334027242426214702404415802122519583042219051\
9535571080633308003450265571766011329702158590139444741489602717516011199164594\
4950814645666504377252630305541667532099475337619922532659460101916617940371328\
97247866057146146224687586515190262141756181920638^(1/2)-1100763284685529938034\
4960169279668214303353274161774930621248092271463497587248782002121612981024677\
8844855815008055490776086253849333885916370124046531366292225331572037573160151\
7183104772604431167970811599098872149/35221245524923925392865069604816219543117\
4837567008987479230806148910216202077832453867462487348693689706077400343235782\
1180056067796993946130562271407044325179956916614751540091837103263425779169783\
2405721124487762188592184540010753134215640817275003518579689311005946606569989\
6912714769136439717633432191763234879699286606916558964290118963570542850867200\
00000000000000000000000000000000000000000*x^3*481279732968241063707551217834868\
8032696862531713953438667708426701604343008237143524961483462833402724242621470\
2404415802122519583042219051953557108063330800345026557176601132970215859013944\
4741489602717516011199164594495081464566650437725263030554166753209947533761992\
253265946010191661794037132897247866057146146224687586515190262141756181920638^
(1/2))^2+1001191445776719675047621638921284412925623948142889928041037742744090\
4391542001632573266968141534009389704276246300556362836415755639951335650583620\
8551887678570518130797009485308095105596821789755924949390217558692513674541942\
5870019614739552283867104088591960626268533932224601114575857374425586373392704\
1/14417012774097837375754714404795374722018654947538340629050530490858074691087\
5188735780832008649022903792792038221941821593882373191068603298541332793752370\
7062601922510360882985324964777526871749008791310584622861248946961828496829108\
5025077604095361024000000000000000000000000000000000000000000000000000000000000\
0000*x^6, 40921828751801597909661499257972795299/
202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 61 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 62 Test 1 - Weifeng
>> input polynomial
-x^2+8714/25
>> basis
[(x-79/50)*(x-531/100)*(x-237/25)*(x-117/10)*(x-82/5), (-x+79/50)*(x-531/100)*(x-237/25)*(x-117/10)*(x-82/5)]
>> Time taken
1.688000
">> Sums of squares multipliers", [-x^2+8714/25-641/1119173*x^2*(x-79/50)*(x-\
531/100)*(x-237/25)*(x-117/10)*(x-82/5)-641/1119173*(x+1)^2*(-x+79/50)*(x-531/
100)*(x-237/25)*(x-117/10)*(x-82/5), 641/1119173*x^2, 641/1119173*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 62 Test 1 - Weifeng

>> Test
Batch: 62 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+8714/25
>> basis
[(x-79/50)*(x-531/100)*(x-237/25)*(x-117/10)*(x-82/5), (-x+79/50)*(x-531/100)*(x-237/25)*(x-117/10)*(x-82/5)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -10.136007
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 62 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 62 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+8714/25
>> basis
[(x-79/50)*(x-531/100)*(x-237/25)*(x-117/10)*(x-82/5), (-x+79/50)*(x-531/100)*(x-237/25)*(x-117/10)*(x-82/5), -x^2+8464/25]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.028693
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13465
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [8714/25*(1/22517998136852480000*
172442745545987031452162418700949732886^(1/2)-\
9487392743027527727475562495400012821/
99406474826707514067021049396469172358421287136938426368000*x*
172442745545987031452162418700949732886^(1/2)-\
5813462792454273626590822097841759727189131147310283887720768997499253/48404262\
6790662823755306056388187614044891537788108800000000000000000000000000000000000\
00000*x^2*172442745545987031452162418700949732886^(1/2)+
278416769363507872714298802546263473330613547840727454467088120803/987514603403\
285285502881302401117209180407595008000000000000000000000000000000000000000000*
x^3*172442745545987031452162418700949732886^(1/2))^2+8714/25*(1/
8260994163893978858757223362358401946366148911583723520000000000000000000000*x*
3166848099337920990478896540862232930921530120507416146763026627417701948729387\
78995574510983744054652970135439679859238171794789257915232002630996911^(1/2)+
4600824562213151777844033336913555652472868904718153138107580407385274660992491\
11985636225708784707504468659/1337082742510989794352049817633176100520807531465\
1094655771805902506760733918680821230773076686014077687660815759267359665337140\
3418267618239271998359662299315175424000000000000000000000000*x^2*3166848099337\
9209904788965408622329309215301205074161467630266274177019487293877899557451098\
3744054652970135439679859238171794789257915232002630996911^(1/2)-72008564514253\
2372259987152688830873366619295476914801790926537815600133482355911327760649458\
21828119502829/2014401711850740555158070145384045018822211990460785315629774845\
6899482400164676295940384218920449873695975052431821731456755753650227756259749\
1990961044406140928000000000000000000000000*x^3*3166848099337920990478896540862\
2329309215301205074161467630266274177019487293877899557451098374405465297013543\
9679859238171794789257915232002630996911^(1/2))^2+8714/25*(1/618589052773808511\
3050878017553289293183550858435262618737225940407252489947841973705171656549453\
752110931049158339726367784960000000000000000000000000000000000000000*x^2*88039\
4896187009747226189745146951220668427334838707503752549675012872560443844321985\
9525983948983478021848440922065963894666071022761133656862890121402591384849127\
2653527729119051353807079671151732332850650597327949571915087886615258269112390\
5161853341147005623207609294609474603439804149670170338181191297798674184023115\
6514^(1/2)-37651515553079275440889716523218460049928377540836780710855482101152\
2820710182248911353907517633144925771486314901572961116453313546180249856370316\
037517521055562160654803805001754661478781821578609689129/106813574243068362899\
5169342376506122950703458734044995964618740713113405800630527694061949898429899\
7700795911718751123654542134180843513547037940439601165134112279514509157270400\
5213226018546526544382574977353605030532119843240614619205291229806082962856580\
0824139342324801701244968564235088637782309627795092629695814344359962214400000\
0000000000000000000000000000000000000*x^3*8803948961870097472261897451469512206\
6842733483870750375254967501287256044384432198595259839489834780218484409220659\
6389466607102276113365686289012140259138484912726535277291190513538070796711517\
3233285065059732794957191508788661525826911239051618533411470056232076092946094\
746034398041496701703381811912977986741840231156514^(1/2))^2+264131012615136130\
1602182534296721064625704478470437961098115257025384751320254372478518841590322\
4548432276601526113669893369639913309324287563610473970772118388995938167873172\
6578856102206512446273579220046626275091745776379500980229239166695517945129965\
8140358592809354527839745681811/27895696839058729511270208004372064573520008274\
8532465125161262157944100414373990726423825289496927981308686572467137487610662\
4819158638623396692147410983258095091333134575873380761423288865839256305551579\
4647381048431389388921434201433047040000000000000000000000000000000000000000000\
00000000000*x^6, 175298336483115971620163801987272333/
1014120480182583521197362564300800]
>> Degree size
6
>> Succeeds RealCertify Batch: 62 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 63 Test 1 - Weifeng
>> input polynomial
-x^2+98249/400
>> basis
[(x-129/50)*(x-279/50)*(x-597/100)*(x-539/50)*(x-267/20), -(x-129/50)*(x-279/50)*(x-597/100)*(x-539/50)*(x-267/20)]
>> Time taken
1.431000
">> Sums of squares multipliers", [-x^2+98249/400-1559/598770*x^2*(x-129/50)*(x
-279/50)*(x-597/100)*(x-539/50)*(x-267/20)+1559/598770*(x+1)^2*(x-129/50)*(x-\
279/50)*(x-597/100)*(x-539/50)*(x-267/20), 1559/598770*x^2, 1559/598770*(x+1)^2
]
>> Degree size
7
>> Succeeds Weifeng Batch: 63 Test 1 - Weifeng

>> Test
Batch: 63 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+98249/400
>> basis
[(x-129/50)*(x-279/50)*(x-597/100)*(x-539/50)*(x-267/20), -(x-129/50)*(x-279/50)*(x-597/100)*(x-539/50)*(x-267/20)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -8.392161
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 63 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 63 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+98249/400
>> basis
[(x-129/50)*(x-279/50)*(x-597/100)*(x-539/50)*(x-267/20), -(x-129/50)*(x-279/50)*(x-597/100)*(x-539/50)*(x-267/20), -x^2+94249/400]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.040716
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13994
time= 0.118000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [98249/400*(1/1801439850948198400000*
1120162765045685473349530855242295135960695^(1/2)+
28445514611066251117196810950841683510361/
20663355847696603379853852202714313329378712237480585849733120000*x*
1120162765045685473349530855242295135960695^(1/2)-\
9427862502645701529001850500077491275234521486806065327104319439072039749/45377\
4790915923621982468916117655911363243110169521736908800000000000000000000000000\
0000000000000*x^2*1120162765045685473349530855242295135960695^(1/2)-\
282227602308978438757314053610344929875000344432510055210796357621/481106244206\
8151053938514600208567764931058566430720000000000000000000000000000000000000000\
0*x^3*1120162765045685473349530855242295135960695^(1/2))^2+98249/400*(1/7744423\
098298429815167469501741327553932682413559837643243520000000000000000000000*x*
3686697051363184766175613527901458435340577533021248487793230713813897695389828\
8762211336624853350232828708472383434922834605048650186768876779420839641873761\
6070^(1/2)-24686496410534084559039107880337035920086971739887355450198437949481\
1444318941883491202216779425266415473710333069/26215906526442860945088047058761\
3090712461168528510802416433921719852434972405054533070685861218797493309581282\
5998144636434855552060439229976293775417764807206710438659516006400000000000000\
0000000000*x^2*3686697051363184766175613527901458435340577533021248487793230713\
8138976953898288762211336624853350232828708472383434922834605048650186768876779\
4208396418737616070^(1/2)-49389110734634210988850493413181798722281825326060325\
174473774559867826494514055556454832588510111126475669959/901296771359689239393\
6456583514492041941981341361380430741835337067059798359399369408734553341285287\
3782275092322504381664749326012520741055073595063676135961897262550876160000000\
000000000000000*x^3*36866970513631847661756135279014584353405775330212484877932\
3071381389769538982887622113366248533502328287084723834349228346050486501867688\
767794208396418737616070^(1/2))^2+98249/400*(1/10525753868564111246814102257823\
5953346956791016191748387920343911956650051150114465184162415925930027575087899\
7304986052122725427707904000000000000000000000000000000000000000*x^2*7176403097\
7389327909834625445569019681526615167992160814808466548703079652464484234742158\
0893391460516258014168101377533018011891960979175275865522051106609105668511662\
1211463345339115922954225560898989797273749445114981738960593693835745976296217\
5135259962378010676107526863486704327726687374520921677088138452365073976394347\
8548414113946270^(1/2)-19837084720305847012995886299160342919062171072760533002\
6298448172715463089813761157247050561941740866391614592758443606532967553504648\
02733368869301562651440690637339993610340347062065175785198104907898132286619/
1907401530548168347056490446302090072437437385419323932293019230821672981299202\
5099344817233721816502451384704853374978406414364756752602535351114726302655435\
1161605309970523333783232686404277730351999489700117880958063003850538519885629\
0281273616425703134650144242852342225229112212684016481454161824147722465518796\
65260094774727235191464029218406400000000000000000000000000000000000000000*x^3*
7176403097738932790983462544556901968152661516799216081480846654870307965246448\
4234742158089339146051625801416810137753301801189196097917527586552205110660910\
5668511662121146334533911592295422556089898979727374944511498173896059369383574\
5976296217513525996237801067610752686348670432772668737452092167708813845236507\
39763943478548414113946270^(1/2))^2+8172688199971192949830192318869554663196580\
6979139557225807014650416475453407413468658104395838361246185043599407585161829\
0423885587640113050909514604981807253446724808861073301786562767751991231313466\
1688408828135292891940787785476747859683415831986802754134475637677358729423915\
053526964246481/649993643111939907630077979851417885828691672413258235306658180\
7363107426868439602844997433233165317493948719848068274080197904077392606181007\
8532975694404676469273240442383866011957723484729731232792645278431207990747427\
4010198101112098986548705361920000000000000000000000000000000000000000000000000\
0000*x^6, 2041129614055614334960433708252702009/
32451855365842672678315602057625600]
>> Degree size
6
>> Succeeds RealCertify Batch: 63 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 64 Test 1 - Weifeng
>> input polynomial
-x^2+15134/25
>> basis
[(x-507/100)*(x-151/20)*(x-337/25)*(x-112/5)*(x-117/5), (-x+507/100)*(x-151/20)*(x-337/25)*(x-112/5)*(x-117/5)]
>> Time taken
1.492000
">> Sums of squares multipliers", [-x^2+15134/25-842/1346533*x^2*(x-507/100)*(x
-151/20)*(x-337/25)*(x-112/5)*(x-117/5)-842/1346533*(x+1)^2*(-x+507/100)*(x-151
/20)*(x-337/25)*(x-112/5)*(x-117/5), 842/1346533*x^2, 842/1346533*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 64 Test 1 - Weifeng

>> Test
Batch: 64 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+15134/25
>> basis
[(x-507/100)*(x-151/20)*(x-337/25)*(x-112/5)*(x-117/5), (-x+507/100)*(x-151/20)*(x-337/25)*(x-112/5)*(x-117/5)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.507577
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 64 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 64 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+15134/25
>> basis
[(x-507/100)*(x-151/20)*(x-337/25)*(x-112/5)*(x-117/5), (-x+507/100)*(x-151/20)*(x-337/25)*(x-112/5)*(x-117/5), -x^2+14884/25]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.016522
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13847
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [15134/25*(1/4503599627370496000*
7250669499946718420902044850461133623^(1/2)-40005053248348488112533833317833157
/1646169164659307398244231644655656640963513134601742581760*x*
7250669499946718420902044850461133623^(1/2)-\
25763570698212288889373910999469185781326655353667826726158295072440038751/7239\
0723331287828716345121465513825160960145546752819200000000000000000000000000000\
000000000000*x^2*7250669499946718420902044850461133623^(1/2)+
11949256689994146236055904437907799193678276171743566418075994489287/2491311070\
1100663488236036361804623543896794726400000000000000000000000000000000000000000\
0000*x^3*7250669499946718420902044850461133623^(1/2))^2+15134/25*(1/
282845317045324849685353343943399561068464549144821760000000000000000000000*x*
1844176711168550367587767560372213008814572665855674375454117199592802293723100\
47794250774458080950417828464055831107414667702481314542176579877078^(1/2)+4071\
3639129174956540176639498288103842794922188497714040903201211326191336916795849\
749099757628582043639701581581/167437540352356450129902536010759087717023935316\
6796172975556796396309397683889221883903701627889712428256392150500556807391580\
01214374137671023856748062869648362700800000000000000000000000000*x^2*184417671\
1168550367587767560372213008814572665855674375454117199592802293723100477942507\
74458080950417828464055831107414667702481314542176579877078^(1/2)-7311997584753\
4186749927087994118001084872303558268462812091074439126088652098620196675207833\
688693600807839/122929636251234490499612745408248599707078935815367617650878580\
7083615551212053229581592368638598675850003958820096439809840667820906378116022\
9641627245706477568000000000000000000000000*x^3*1844176711168550367587767560372\
2130088145726658556743754541171995928022937231004779425077445808095041782846405\
5831107414667702481314542176579877078^(1/2))^2+15134/25*(1/25010984693917738877\
8687518258316572628620988956923747564071372950212394532528220230797923292131345\
5868747288325758870044331212800000000000000000000000000000000000000000*x^2*3100\
4910875816511348599201524235052543195410822144311089912063376403521648860921571\
1168607986271932809289375838929797268600252964216203276955857435593141126719487\
6784464302458000281661857114028021891904649482420738159336578002810272531965496\
2652901775531599280663421663407200840053310697496840344762220625174695504616162\
7683956862^(1/2)-17952761572362246821416563864956375699926696192908807051873675\
3815201393919461468621068470419535994771781938428278563669011223020210035900440\
28187829897922737396230016710280259582703040815570407495262830370750121517/1065\
3206258162130683123714076664232167189273345471543097889794217402597086486852304\
0294284259430589470288581938276483432683857134290852107825075049720877400093823\
3075841905594925089863717186830023748264201334187231784522387166289849329411113\
6847865162032684154002121698223347803114615707382070267526968198516959318326770\
889861783569318281216000000000000000000000000000000000000000000000*x^3*31004910\
8758165113485992015242350525431954108221443110899120633764035216488609215711168\
6079862719328092893758389297972686002529642162032769558574355931411267194876784\
4643024580002816618571140280218919046494824207381593365780028102725319654962652\
9017755315992806634216634072008400533106974968403447622206251746955046161627683\
956862^(1/2))^2+311806686664842913231222871523010663295768543103346597624162058\
8969049623265932362655737290042044064137936326958320993816216720188278428634511\
2895819557175504495275814320685933203542009181001832341651738029022618905765015\
95788608644297929387169890183960252266335561392900850219368041817375562434971/
6733124893585268322119422632704177618184312121369352771328263093155456533152247\
4627595155471402837051144193576237538308891341562700657892680465619133023938631\
1582975204506084524693540289534333496870708246492701676127350253131453037184713\
700147200000000000000000000000000000000000000000000000000000000000000*x^6, 
67184047196014792239283673797190847/63382530011411470074835160268800]
>> Degree size
6
>> Succeeds RealCertify Batch: 64 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 65 Test 1 - Weifeng
>> input polynomial
-x^2+669809/2500
>> basis
[(x-583/100)*(x-663/100)*(x-181/20)*(x-683/50)*(x-703/50), -(x-583/100)*(x-663/100)*(x-181/20)*(x-683/50)*(x-703/50)]
>> Time taken
1.479000
">> Sums of squares multipliers", [-x^2+669809/2500-1045/850251*x^2*(x-583/100)
*(x-663/100)*(x-181/20)*(x-683/50)*(x-703/50)+1045/850251*(x+1)^2*(x-583/100)*(
x-663/100)*(x-181/20)*(x-683/50)*(x-703/50), 1045/850251*x^2, 1045/850251*(x+1)
^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 65 Test 1 - Weifeng

>> Test
Batch: 65 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+669809/2500
>> basis
[(x-583/100)*(x-663/100)*(x-181/20)*(x-683/50)*(x-703/50), -(x-583/100)*(x-663/100)*(x-181/20)*(x-683/50)*(x-703/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -9.744849
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 65 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 65 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+669809/2500
>> basis
[(x-583/100)*(x-663/100)*(x-181/20)*(x-683/50)*(x-703/50), -(x-583/100)*(x-663/100)*(x-181/20)*(x-683/50)*(x-703/50), -x^2+644809/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.037330
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14189
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [669809/2500*(3/450359962737049600000*
7016379585603972974293597312825738329295^(1/2)-\
3153885688420814048529723743671186602169/
194144037809455152093355960428220895759310335514719111086080000*x*
7016379585603972974293597312825738329295^(1/2)-\
13172737908781752871332344089072587977544540632081831847397464872959539149/5813\
2152477404480860456226392894779131255103582491797094400000000000000000000000000\
0000000000000*x^2*7016379585603972974293597312825738329295^(1/2)+
67789553091015023523079029300699563841262359105411477945656838489239/1157188640\
8892580991587398077739530549008270234746880000000000000000000000000000000000000\
00000*x^3*7016379585603972974293597312825738329295^(1/2))^2+669809/2500*(1/4960\
61034473851570009226465219368781920043550570596668538880000000000000000000000*x
*148193906824977142964033931318641935962238978154142289825929121282299415013772\
5088350955063937686580746659040170250957772101683681116039596411027957744386018\
630^(1/2)+719790069898542835794934688274277161305678370388268730827064587681459\
610378630419562994467066307971814518327832141/429046729428564684668170040825302\
8148053828712325070369097568918657671132780398480326997770599629782354281818574\
6506970708374808819792081717924527356760571172647802743082188800000000000000000\
00000000*x^2*148193906824977142964033931318641935962238978154142289825929121282\
2994150137725088350955063937686580746659040170250957772101683681116039596411027\
957744386018630^(1/2)-149575425643391903555041856085642055168491023276304309569\
42010817404136806727047218349837532816936031654002053773/1913111894923249052902\
5456340512560151009369965882129834581807406376411459442104830745232359559557450\
9023543002203465195574180244928199457951248671943083634143924766900224000000000\
0000000000000000*x^3*1481939068249771429640339313186419359622389781541422898259\
2912128229941501377250883509550639376865807466590401702509577721016836811160395\
96411027957744386018630^(1/2))^2+669809/2500*(43/121354347227640901907687986809\
6895092865597786475494285412125033228259807635799099405725922572937732096624691\
17427804157681447200620544000000000000000000000000000000000000000*x^2*404294645\
1875027942809624515100911635365779007576653613888553968104498888278041307569177\
2677178854222367658267636285841266333452302665523117924957450720900551811740188\
4103589459137998807444454466127724700225390375721238891214065826747277987734618\
5822418451764762230277041951922371437919218541119892751708617590048047827107788\
200060960670^(1/2)-919283271640807033498529019690740831301291136426934438825498\
0576885330146065636447123501684454943949146667102530455544112047897144332536802\
658542465692358270971460400044296885893732267365363290681306495335850726271/137\
1700504308787740876469896487636856400504710217700314606137279544975005314194311\
0282110039196576857276277059599578808223203569669219470858441060905005239302667\
0050409763160377662820450543962349627022092204699577050987118346952284086594454\
5810144407814196357619897846638863035647642197028614763160176422278400159732464\
6622067667629070425130008576000000000000000000000000000000000000000000*x^3*4042\
9464518750279428096245151009116353657790075766536138885539681044988882780413075\
6917726771788542223676582676362858412663334523026655231179249574507209005518117\
4018841035894591379988074444544661277247002253903757212388912140658267472779877\
3461858224184517647622302770419519223714379192185411198927517086175900480478271\
07788200060960670^(1/2))^2+1529899604663762155584067129311981318893716534445665\
8832517136963046009607733395740017733530138951210097612214895861657118018832225\
6952280304801150028485396694457492983025884375643581564719675928149406660707950\
2863795413986318969491887342737282750351235217091401709510217792615098842827644\
226020545235301/891408378229721575618114204541667244540314430580155036602116058\
8101221240326650277609839880427182315697224247330243962966754724120944818719541\
3758820030445548206824273297294890136260536503564936552733233396195878808965758\
3115393437038285185510610567168000000000000000000000000000000000000000000000000\
00000000000*x^6, 31638880443762196427149457752364729/
324518553658426726783156020576256]
>> Degree size
6
>> Succeeds RealCertify Batch: 65 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 66 Test 1 - Weifeng
>> input polynomial
-x^2+6771889/10000
>> basis
[(x-469/100)*(x-439/50)*(x-897/100)*(x-2383/100)*(x-2483/100), -(x-469/100)*(x-439/50)*(x-897/100)*(x-2383/100)*(x-2483/100)]
>> Time taken
1.939000
">> Sums of squares multipliers", [-x^2+6771889/10000-785/1116538*x^2*(x-469/
100)*(x-439/50)*(x-897/100)*(x-2383/100)*(x-2483/100)+785/1116538*(x+1)^2*(x-\
469/100)*(x-439/50)*(x-897/100)*(x-2383/100)*(x-2483/100), 785/1116538*x^2, 785
/1116538*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 66 Test 1 - Weifeng

>> Test
Batch: 66 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+6771889/10000
>> basis
[(x-469/100)*(x-439/50)*(x-897/100)*(x-2383/100)*(x-2483/100), -(x-469/100)*(x-439/50)*(x-897/100)*(x-2383/100)*(x-2483/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.833987
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 66 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 66 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+6771889/10000
>> basis
[(x-469/100)*(x-439/50)*(x-897/100)*(x-2383/100)*(x-2483/100), -(x-469/100)*(x-439/50)*(x-897/100)*(x-2383/100)*(x-2483/100), -x^2+6671889/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.014769
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14712
time= 0.118000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [6771889/10000*(1/1801439850948198400000*
667434584543638084670730823385711376216151^(1/2)+
175831830834413927203909307802939443252517/
98495959736153220290352823986928344045906389795414215258800128000*x*
667434584543638084670730823385711376216151^(1/2)-\
45712836693065876038262109204729108747742040366186723789609949840437953909577/
5963477846518447054613981499159480901056727553176383150410956800000000000000000\
0000000000000000000000*x^2*667434584543638084670730823385711376216151^(1/2)-\
24160582252944625622894415844546534773750543050711976031820490233601/8339228255\
5178840975152518250495486677629695185387520000000000000000000000000000000000000\
00000*x^3*667434584543638084670730823385711376216151^(1/2))^2+6771889/10000*(1/
3816625821771806114952948159462067776676305634032885216263012352000000000000000\
0000000*x*395829675034645688103892298610854720594153933740689645421164844138214\
8519904948484213899786926339627641129906574052061359450657824174117649774722155\
663744884940036332118^(1/2)+465864375059219008015796053383028014276045175354109\
328992053358229026909071937191534177956331640974489906774183507136443/950751134\
3937145836285246838036040634054123226327489374275790937793799647808452569061673\
7398528830074543854206869193478843003136145526500009625435877583001925460801960\
4470219780820828160000000000000000000000000*x^2*3958296750346456881038922986108\
5472059415393374068964542116484413821485199049484842138997869263396276411299065\
74052061359450657824174117649774722155663744884940036332118^(1/2)-2508933303282\
7060557175799910456951183593693253388858749299569503459289267287416305979026816\
2851561895697136273313/63816699674580835275499312727257427621035640037591024348\
6364328247513671981363798669743656449940133358948053200445074408760063686174677\
4054385002194538937626458491054338888171520000000000000000000000000*x^3*3958296\
7503464568810389229861085472059415393374068964542116484413821485199049484842138\
9978692633962764112990657405206135945065782417411764977472215566374488494003633\
2118^(1/2))^2+6771889/10000*(1/176631961473344101834233858755541143287273209131\
7587955679508975141814794183081003211647111809232302997519968736011256026594380\
79158617377874116608000000000000000000000000000000000000000*x^2*991154850096613\
1745255802090508825905619528972835885590730803452130094616185525879969287794904\
7408798257105461600326809306142643263275942942707339328748872156691234181492160\
3597901827991814004844344146123048230512257822532637937531987644356988555479123\
3744100058247027944567265392344818613202020630504123654298019640864032780552527\
49058668151616972021113272573006^(1/2)-3351088050982722619365902043460580351509\
4875336545672725414815621546060853497703573467689034151370350106349113851767834\
5869441824242169484033331558996477021087595296843147907744104160391679234562856\
301130515870002183819601/402319900181398581100202422176584068772477134764656429\
4235673768824282421772950470797589275408649375246942692719943991699870200279790\
9051871345442229536934088305236037213123343344717296515247727385903018009065104\
3412358344123061372922362916636800852854286663246919707562706850092620465382808\
2982690272213129385907342079747471361806468566581167776768319011515717491097600\
0000000000000000000000000000000000000000*x^3*9911548500966131745255802090508825\
9056195289728358855907308034521300946161855258799692877949047408798257105461600\
3268093061426432632759429427073393287488721566912341814921603597901827991814004\
8443441461230482305122578225326379375319876443569885554791233744100058247027944\
5672653923448186132020206305041236542980196408640327805525274905866815161697202\
1113272573006^(1/2))^2+21163078250440658534977731197884528836328111538883556227\
5663714651305428791932570346570872713367908964159951958481905165350571282811115\
3000162103249196318226008181233428499051623729716881792056160607700219707042463\
2283948611461178281539033321793456286162462362671348626038921634327451209822101\
12835641318929810347/1501664245581832813805101431083704930400349366904013499997\
8605998537615043502660131704292490927194538460000663665551916784547796140218471\
6949077365176199158304649195702358490924058777730479200256452795400484168098634\
2092195254351744369679222318962732718771666944000000000000000000000000000000000\
000000000000000000000000000*x^6, 284089668579223834366412245515922014769/
3245185536584267267831560205762560000]
>> Degree size
6
>> Succeeds RealCertify Batch: 66 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 67 Test 1 - Weifeng
>> input polynomial
-x^2+1535441/2500
>> basis
[(x-427/100)*(x-431/100)*(x-339/25)*(x-1761/100)*(x-1129/50), -(x-427/100)*(x-431/100)*(x-339/25)*(x-1761/100)*(x-1129/50)]
>> Time taken
1.425000
">> Sums of squares multipliers", [-x^2+1535441/2500-244/1404817*x^2*(x-427/100
)*(x-431/100)*(x-339/25)*(x-1761/100)*(x-1129/50)+244/1404817*(x+1)^2*(x-427/
100)*(x-431/100)*(x-339/25)*(x-1761/100)*(x-1129/50), 244/1404817*x^2, 244/
1404817*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 67 Test 1 - Weifeng

>> Test
Batch: 67 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1535441/2500
>> basis
[(x-427/100)*(x-431/100)*(x-339/25)*(x-1761/100)*(x-1129/50), -(x-427/100)*(x-431/100)*(x-339/25)*(x-1761/100)*(x-1129/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -3.119080
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 67 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 67 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1535441/2500
>> basis
[(x-427/100)*(x-431/100)*(x-339/25)*(x-1761/100)*(x-1129/50), -(x-427/100)*(x-431/100)*(x-339/25)*(x-1761/100)*(x-1129/50), -x^2+1510441/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.016283
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14488
time= 0.125000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [1535441/2500*(3/900719925474099200000*
29670177090447310471188955533463432163631^(1/2)+
10070894684885765682871791164668597766521/
2189272653636487325818915080230651861067275343110695009910784000*x*
29670177090447310471188955533463432163631^(1/2)-\
4724024547661352902501014836375434906821735337774077948694826453257509436889/90\
1624290142963994276061269859668341811924722221823272419328000000000000000000000\
000000000000000000*x^2*29670177090447310471188955533463432163631^(1/2)-\
49820882010180747464619117313783089565005244837110372604134519728653/6524540941\
8239811832276436097343321474411348793229312000000000000000000000000000000000000\
00000*x^3*29670177090447310471188955533463432163631^(1/2))^2+1535441/2500*(1/21\
3718350256109983828399708411180643985048823045172923832729600000000000000000000\
00*x*11572669009647164889111023988597337178170963300729329916084395346314736619\
1203112238295627794196137209016434938606812444892928525854560305997354695053907\
7346364214^(1/2)-16466700896174382988921885990713084532367425528024923915818664\
26201214609224009963740432867220944922935842399135908863/2251526450667655339019\
7852479736954298192803700177457007069203615470017129903134121014543109569324154\
8709675134397141770372898476545621098099999973673302170878268239009282901462220\
8000000000000000000000000*x^2*1157266900964716488911102398859733717817096330072\
9329916084395346314736619120311223829562779419613720901643493860681244489292852\
58545603059973546950539077346364214^(1/2)-5047105011297929994343166456082165101\
93131824648876719305465605115733969178554537852840043482877009863226430203271/
6517205301401733628665887442033325148408048010000588902708792129273903756467833\
1997168654505468024871814872769277401742596831493448062904866491841373492384526\
88279104158433280000000000000000000000000*x^3*115726690096471648891110239885973\
3717817096330072932991608439534631473661912031122382956277941961372090164349386\
068124448929285258545603059973546950539077346364214^(1/2))^2+1535441/2500*(1/10\
6674684680167418247943446698356298226980849808116032738172560642015923031443773\
1469015086898654032069207163703714099499821522173585255091404800000000000000000\
0000000000000000000000*x^2*4839538991503051567591987733357167506800837357121607\
8724565244975161750574437495305067533340897214367417754847298835625414991658863\
5488409223942110380968801767242302263168883494663859371701666707190104470696075\
1259643907891937810407881469293130156209920665494774847442968286222324787193088\
384284010456649479830300676894156630380818901073297672182207308494^(1/2)-510639\
3587482134876038785313840249981998570227986945577881452041874866838691627226036\
9372559123401864681826133090120236623443013369136482455950392241808632240305072\
885978737106935238777320335324226710648922926509507077/415864580474243555717556\
1878042045691315485960920888967659753344652615194956508795983160117667227670598\
1025466916819656536067337801079755735057021613717883635227105377750050531922257\
5998221789460311259941336361178468068698260866132546755919803321506871552265022\
0559905309391928015521740757534092746112795014319360426743385481095829040402309\
723678800077757664460800000000000000000000000000000000000000000*x^3*48395389915\
0305156759198773335716750680083735712160787245652449751617505744374953050675333\
4089721436741775484729883562541499165886354884092239421103809688017672423022631\
6888349466385937170166670719010447069607512596439078919378104078814692931301562\
0992066549477484744296828622232478719308838428401045664947983030067689415663038\
0818901073297672182207308494^(1/2))^2+60224181864784735742201759944932573045251\
2247998230021794607700265015524825694326568532083845743344066240802866290809354\
6393980932889549046260611398085566383207574071187972494276185784987746285882240\
8977261044137605622231970764796717748073867635871955733187433647710602941717669\
15641280765208201653112963681/4195821276903657990190956420661006530109792483131\
1856103720583028338782998678952480127813469033344093791589816105024333280374179\
2844207865998931894646640429949792942779866244310914506171099041344784938037628\
5377796552676573375603970303864773357705235364640194560000000000000000000000000\
0000000000000000000000000000000*x^6, 9516711504083063138089781181610674681/
50706024009129176059868128215040000]
>> Degree size
6
>> Succeeds RealCertify Batch: 67 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 68 Test 1 - Weifeng
>> input polynomial
-x^2+8182649/10000
>> basis
[(x-391/50)*(x-171/20)*(x-873/100)*(x-209/20)*(x-2643/100), (-x+391/50)*(x-171/20)*(x-873/100)*(x-209/20)*(x-2643/100)]
>> Time taken
1.616000
">> Sums of squares multipliers", [-x^2+8182649/10000-129/6731932*x^2*(x-391/50
)*(x-171/20)*(x-873/100)*(x-209/20)*(x-2643/100)-129/6731932*(x+1)^2*(-x+391/50
)*(x-171/20)*(x-873/100)*(x-209/20)*(x-2643/100), 129/6731932*x^2, 129/6731932*
(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 68 Test 1 - Weifeng

>> Test
Batch: 68 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+8182649/10000
>> basis
[(x-391/50)*(x-171/20)*(x-873/100)*(x-209/20)*(x-2643/100), (-x+391/50)*(x-171/20)*(x-873/100)*(x-209/20)*(x-2643/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -3.836134
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 68 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 68 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+8182649/10000
>> basis
[(x-391/50)*(x-171/20)*(x-873/100)*(x-209/20)*(x-2643/100), (-x+391/50)*(x-171/20)*(x-873/100)*(x-209/20)*(x-2643/100), -x^2+8082649/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.012223
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14523
time= 0.124000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [8182649/10000*(1/144115188075855872000*
6798506494275579458987816384463849386583^(1/2)-\
33714046405996387123871995549142792299/
4013129900267326242659960979961024441427911763148466443780096*x*
6798506494275579458987816384463849386583^(1/2)-\
18951515914412698867954965922346150511233197407995849675721450005446970916313/
2293710133430492375896448762113025646048527729754455094067200000000000000000000\
000000000000000000000*x^2*6798506494275579458987816384463849386583^(1/2)+
386182716689677104747501331922453718149555983202036457415591859436367/373751847\
0983324798438661713116825038034386712264704000000000000000000000000000000000000\
0000000*x^3*6798506494275579458987816384463849386583^(1/2))^2+8182649/10000*(1/
7829197255442747309726545108012460871845641317561873387749376000000000000000000\
0000*x*125678726805828130048316553921434067697790415341133210767074768807928677\
1655330958309924103387882886341835765020156460627668135065382375420849471604396\
0535416995862^(1/2)+25143599266890894290817291648955171925814995702960894457816\
41679007178621750033979652712655706417082882818072422481/6792080006533511201740\
2962770665233346064475952031579618816656328902835040347273297888082893751669326\
2908640443776928059357714439634026391227466828555384494665512673123185274650624\
000000000000000000000000*x^2*12567872680582813004831655392143406769779041534113\
3210767074768807928677165533095830992410338788288634183576502015646062766813506\
53823754208494716043960535416995862^(1/2)-2331322223699379599374531209390654704\
2831741094154628335209447932401622278125246954877063152530434034490234575677/14\
7566013164001289975959755321649197186365064151461800301951455962548906248053570\
8025073442733692705165464990765545600608980108877556294525653471721672712849761\
353806894858240000000000000000000000000*x^3*12567872680582813004831655392143406\
7697790415341133210767074768807928677165533095830992410338788288634183576502015\
64606276681350653823754208494716043960535416995862^(1/2))^2+8182649/10000*(1/18\
7108935034368514163340971383821744059657224925902595366595252176694817546885858\
0641021703709077647474063818460957954548666630874425304337612800000000000000000\
000000000000000000000000*x^2*63307175768119885699110925899652418803737421508203\
6257876053367078668278048301871507039002981333774628646431962986441260104415068\
6176294040695525701962433686404321993371041213290037103898365459827448322677759\
5714281526318937761889226821257113805590706636111463267713522240437479693141862\
651744237944424122663132404684051421601042913982152660488445422791582798^(1/2)-\
7147586895462995308165959867921120928456949589810592090212417238592705780715594\
8326834084905383044601333763770041021401364612640008038562148081660892798010754\
07981891516726221070078138517635663401013706310306490999198133/8506655470460340\
9790820207358171355305003310046624267431482291136685956863507570603765559100717\
4345967313724842893367431640797521462930207807807209103648525085320462287094387\
8888744586882229265853408158350607879543326667593959353512301363346686263179547\
6854745059279613367541234810102882804710218986421672654248523158178415756376134\
931055972150558707887029899755520000000000000000000000000000000000000000000*x^3
*633071757681198856991109258996524188037374215082036257876053367078668278048301\
8715070390029813337746286464319629864412601044150686176294040695525701962433686\
4043219933710412132900371038983654598274483226777595714281526318937761889226821\
2571138055907066361114632677135222404374796931418626517442379444241226631324046\
84051421601042913982152660488445422791582798^(1/2))^2+7441187689319704727061056\
1721510468931243006502629850294745467311589279803374958534015255268051981752797\
6036004020039890099496987217299898781037280794280211530419179748186645216813558\
7092954658903871070315290508178897606409789867348316629099072979897538148560893\
84409039746252885851348198321850032260023299841/8692211141831881540017536137916\
4819067937427957312611372210319206139662511233101554525068794123449792073709598\
7699415500303782657866928303893131440516119603645756727456944216633566705709154\
9799453635499298268109449056101624374060792535368477456378535683955045171200000\
000000000000000000000000000000000000000000000000000*x^6, 
340680372183105326054268552901242730169/811296384146066816957890051440640000]
>> Degree size
6
>> Succeeds RealCertify Batch: 68 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 69 Test 1 - Weifeng
>> input polynomial
-x^2+1047121/2500
>> basis
[(x-137/100)*(x-148/25)*(x-41/5)*(x-56/5)*(x-911/50), -(x-137/100)*(x-148/25)*(x-41/5)*(x-56/5)*(x-911/50)]
>> Time taken
1.588000
">> Sums of squares multipliers", [-x^2+1047121/2500-298/1737553*x^2*(x-137/100
)*(x-148/25)*(x-41/5)*(x-56/5)*(x-911/50)+298/1737553*(x+1)^2*(x-137/100)*(x-\
148/25)*(x-41/5)*(x-56/5)*(x-911/50), 298/1737553*x^2, 298/1737553*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 69 Test 1 - Weifeng

>> Test
Batch: 69 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1047121/2500
>> basis
[(x-137/100)*(x-148/25)*(x-41/5)*(x-56/5)*(x-911/50), -(x-137/100)*(x-148/25)*(x-41/5)*(x-56/5)*(x-911/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -8.660576
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 69 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 69 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1047121/2500
>> basis
[(x-137/100)*(x-148/25)*(x-41/5)*(x-56/5)*(x-911/50), -(x-137/100)*(x-148/25)*(x-41/5)*(x-56/5)*(x-911/50), -x^2+1022121/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.023880
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14612
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1047121/2500*(1/180143985094819840000*
11705583075909791157729655655165911440263^(1/2)+
5301198912801116881813023002154505812549/
3454878323757660232148022025271236748056974400348007985840128000*x*
11705583075909791157729655655165911440263^(1/2)-\
16405317984752950417290393273582781169895524849837757862926703871212454386661/
1293781630486766674499655594035640726636231097364475656798208000000000000000000\
000000000000000000000*x^2*11705583075909791157729655655165911440263^(1/2)-\
236648297548169051993204287884458195616664836782117840896753518931613/643521235\
0930385723985772626979717515515115857772544000000000000000000000000000000000000\
0000000*x^3*11705583075909791157729655655165911440263^(1/2))^2+1047121/2500*(1/
2070050608778826679199448950457025162617969755783161050877132800000000000000000\
00000*x*15918487075565381458255868188723725959000502655385833548210381711574316\
3307693785297611436040952126594864501478389145004878690088400757890992219256725\
436876634483670^(1/2)-251349061492918805903115196662104510486514638050526083194\
68162109209991423659975917093208809394005818047111979760245393/3058794345037581\
1642480006661996929696193820426459306555995388322155292242194952393787232598297\
1818950364649842562227347011347852841721782349650133364031157232150669907268587\
434803200000000000000000000000000*x^2*15918487075565381458255868188723725959000\
5026553858335482103817115743163307693785297611436040952126594864501478389145004\
878690088400757890992219256725436876634483670^(1/2)-138022820884187332116000878\
0396085599031854437729190294143358838008823201603962915457641630461286036017918\
613148613/116845879130972682784434680087580822832103722211508723656560753999414\
7466900003051940978458011908151781368723738946033350534839251019592892701608060\
05812568836705851532828999680000000000000000000000000*x^3*159184870755653814582\
5586818872372595900050265538583354821038171157431633076937852976114360409521265\
94864501478389145004878690088400757890992219256725436876634483670^(1/2))^2+
1047121/2500*(1/822018708740129183719345887919733599394428679060651715640940847\
8918243735934597636458779476456324613009858552138061707122332964214494619238400\
0000000000000000000000000000000000000*x^2*9062385866262957367764487798681570111\
0155579952910603695855116971590034248416996240503897299116331276684607337221345\
7726626836303170618375759070817565384959250818455606348194729902650069440878069\
1355428929960116064041077658680041622643767968112073439232408908766209281861209\
08812912414082398554402233066655087216289994579485939204651424636128732162558^(
1/2)-15409965528691448488344072467353652928998382190475499464791508806986321331\
4776721846152850319798262083192562017021730130434411847247419046464778977265248\
720213350470474886009024229513762528719395481054503469403846998270043/463990623\
2991385377174586379387783068430353992951527417864516939962367501905311305593523\
2829719826481216648591344183861845720009379474590928398285178979071006190213251\
8741930927364045373628432726421401923844243497477610782632108009316716258868496\
1084409257527008697854865796505425070045425172432787839672955842853244519318988\
5989858461592193121806711863619092480000000000000000000000000000000000000000000
*x^3*90623858662629573677644877986815701110155579952910603695855116971590034248\
4169962405038972991163312766846073372213457726626836303170618375759070817565384\
9592508184556063481947299026500694408780691355428929960116064041077658680041622\
6437679681120734392324089087662092818612090881291241408239855440223306665508721\
6289994579485939204651424636128732162558^(1/2))^2+68368807389189934529037914695\
1174230236793226616112495457253156043858167451960966307155334284611213737016537\
3579679990498597800950190291707494175617358053723539495365988600424804435426771\
0043182242100339877779844347505181426086460718945004338436447818385989508437270\
3607946061138400677466387122270850684396137989627/92067243517703731486490266931\
8870882094622874108457464473565805045620637878667141693903089888024179620885340\
8304984054671566763969591387969352374127963844569886806276756135262167677127946\
0898668373740274861805393515702396856275296582763029922274981639939004825600000\
0000000000000000000000000000000000000000000000000000000000*x^6, 
13594437926899756497865606920921/30948500982134506872478105600]
>> Degree size
6
>> Succeeds RealCertify Batch: 69 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 70 Test 1 - Weifeng
>> input polynomial
-x^2+4463921/10000
>> basis
[(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100), -(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100)]
>> Time taken
1.406000
">> Sums of squares multipliers", [-x^2+4463921/10000-304/1800545*x^2*(x-199/
100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100)+304/1800545*(x+1)^2*(x-199/
100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100), 304/1800545*x^2, 304/1800545
*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 70 Test 1 - Weifeng

>> Test
Batch: 70 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+4463921/10000
>> basis
[(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100), -(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -7.102149
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 70 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 70 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+4463921/10000
>> basis
[(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100), -(x-199/100)*(x-63/20)*(x-523/50)*(x-611/50)*(x-1889/100), -x^2+4363921/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.022403
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14562
time= 0.119000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [4463921/10000*(1/900719925474099200000*
195497608461541910190071522895683873302395^(1/2)+
13859955588081130303676903954153160770139/
4808392467083118032330430006198843204465135192908918171893760000*x*
195497608461541910190071522895683873302395^(1/2)-\
13283733464506556776380161661473479502109732360231146035879135529132667553409/
5757169633820273100435327559510180866869476342176989860331520000000000000000000\
000000000000000000000*x^2*195497608461541910190071522895683873302395^(1/2)-\
189605504739336612857712350936267035014872406264721412266440089148519/286602524\
9411534090239065889238621714392385001724313600000000000000000000000000000000000\
0000000*x^3*195497608461541910190071522895683873302395^(1/2))^2+4463921/10000*(
1/24563923770966498561857397587243438365309765726621823404081152000000000000000\
0000000*x*222653330892189426596464518781643755658670333811772438522672074291380\
9947184736176849849809370117782130100734595673138059664813265662944216524321278\
16125473209363066^(1/2)-9325082473462144228055561102261540521608949373499841071\
75962912278817326618939845725584051071261690728801667365713499/5347954442873941\
5856822085338668214975028839443582856871227350730926701331502199873848243472338\
3760187710938218963911581023171825430285980636575932010697866324399584142588032\
2670592000000000000000000000000*x^2*2226533308921894265964645187816437556586703\
3381177243852267207429138099471847361768498498093701177821301007345956731380596\
6481326566294421652432127816125473209363066^(1/2)-67047930553831542991016185261\
7916110207346840578321913628269544515511350856272255413141206488680481927062909\
50177/7188238021515983260925372828775627746328240053116915403013720547150368655\
4715730686786226914416777562288078783513047598426115313254462072331016960023803\
89791724355123792576512000000000000000000000000*x^3*222653330892189426596464518\
7816437556586703338117724385226720742913809947184736176849849809370117782130100\
73459567313805966481326566294421652432127816125473209363066^(1/2))^2+4463921/
10000*(1/3266824942533493165472549018184615520050894703480860502918566342438904\
1976466267447897563443159017460355704186518385071820794927062831102689280000000\
000000000000000000000000000000000*x^2*11393261350557217579459655901233313200931\
3616613542126791605637571621081473199134810797843378902372668782708130035040651\
5044143409313070170925653386917351547740324431230302140132149113069990816340685\
7549302989734898618829153003266879151478280988719996084991832446179413755303065\
0174377109428189538907972450357848550512906298094494880792831430598131064402730
^(1/2)-156858569227731612777395372735010488048661768820134284914747157529930142\
5940277957049090551855255643184500866758196304082492249586667840513968675181572\
24279342857066889464145631630980905522220883173051108911517269320339/1440558344\
1979949821948250487279577830500026356549577740647921722069630008644794051715477\
0387142579832268870815145368387184781599764188619026854536206609369078110740049\
8359439087156351014829063060526399277259461892237087745005648068967920625395341\
2608846750173283613382241428110752160372798171833612815123633038530979562642783\
6453007946256778947585784100457283584000000000000000000000000000000000000000000
*x^3*11393261350557217579459655901233313200931361661354212679160563757162108147\
3199134810797843378902372668782708130035040651504414340931307017092565338691735\
1547740324431230302140132149113069990816340685754930298973489861882915300326687\
9151478280988719996084991832446179413755303065017437710942818953890797245035784\
8550512906298094494880792831430598131064402730^(1/2))^2+10246893343443569241921\
0031301191424589014562734292679141826968907420139015357057503096135245271359709\
0795313046757934884581119191670559519662272897585740157478326582659480512064898\
0599614903403714666339669351857520709297645622472999168499336501144758811327637\
46818292111802248417563103921288029842501155521121/1103836522753720415341823384\
7852690188674687298385321866690457542425947888447039480464404539809512495976432\
6307589691905445221854578110523883496628952489344976864893254135276949633745485\
6133143865287589805593985522929639367612307366982085687986877453941581115555840\
0000000000000000000000000000000000000000000000000000000*x^6, 
1464902202496536389239464512768008481/32451855365842672678315602057625600]
>> Degree size
6
>> Succeeds RealCertify Batch: 70 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 71 Test 1 - Weifeng
>> input polynomial
-x^2+10859/25
>> basis
[(x-619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5), (-x+619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5)]
>> Time taken
1.296000
">> Sums of squares multipliers", [-x^2+10859/25-1739/2461579*x^2*(x-619/100)*(
x-193/25)*(x-197/20)*(x-93/5)*(x-98/5)-1739/2461579*(x+1)^2*(-x+619/100)*(x-193
/25)*(x-197/20)*(x-93/5)*(x-98/5), 1739/2461579*x^2, 1739/2461579*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 71 Test 1 - Weifeng

>> Test
Batch: 71 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+10859/25
>> basis
[(x-619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5), (-x+619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -5.379603
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 71 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 71 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+10859/25
>> basis
[(x-619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5), (-x+619/100)*(x-193/25)*(x-197/20)*(x-93/5)*(x-98/5), -x^2+10609/25]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.023026
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13977
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [10859/25*(1/90071992547409920000*
2917277671268246280707966958276018212055^(1/2)-\
235022118612462618692157261903587728073/
43051419675066178846178467719536243864467985357139244744704000*x*
2917277671268246280707966958276018212055^(1/2)-\
10226239277174333722156446008786756160480944907542645168593760888914401767/4179\
7342859346595653055785384754306565903829305753862144000000000000000000000000000\
0000000000000*x^2*2917277671268246280707966958276018212055^(1/2)+
23754776388650838061921113320057378090271876637449601447772026928957/2004737950\
6317050590262966099910551619002588725248000000000000000000000000000000000000000\
00000*x^3*2917277671268246280707966958276018212055^(1/2))^2+10859/25*(1/2972255\
492220202357550633627360306244686494528409163530240000000000000000000000*x*2973\
6442650861827849287778194593356203963174996235779271456508937313766156288777764\
759639196354229583206885020566905195033509470871906964671508699142403190^(1/2)+
3151756848317807214066980283898350776389851201968055159161246226516945829515810\
167974142183003651357286787335650389/192846286140113451149228669563697899805036\
2813462944802767233808102230319052795646661567914439665405680733032600082202779\
67213522228704681942592188785801219245706476886425600000000000000000000000000*x
^2*2973644265086182784928777819459335620396317499623577927145650893731376615628\
8777764759639196354229583206885020566905195033509470871906964671508699142403190
^(1/2)-195715254718748170898802283251829467718782412507089759330544627070401473\
16812293516503453111422177094015086999/2466544470793727823684765703355356793200\
6768751252734582261946159640113155661914421493281487445966552075761946057062277\
829861241856307707117315921865349942603384094720000000000000000000000000*x^3*29\
7364426508618278492877781945933562039631749962357792714565089373137661562887777\
64759639196354229583206885020566905195033509470871906964671508699142403190^(1/2
))^2+10859/25*(1/65719562632691056122428774704909023887161632103171502532523983\
8071806820495403460701076268431990757058129606423993800224309854915788800000000\
00000000000000000000000000000000*x^2*554654446883688634121434090140685140915339\
6985646354726188078089935569531133693071042648992708727161148280934731485488679\
0740527304926673217870491574951970455804013095033340625568436519950457598783348\
4791192109578652639907998577018380573857662447665201748060206344081962532440253\
052458576149681873036293990857820025631038685773383348678670^(1/2)-895897821665\
9714850469045414265317093200595388704375930957793356475824696125320363163175299\
8589952667435282890553692023752038400524962201012474552788900319498959539291841\
5790216306860453143205669933658777895369559/17550217957059853020708861661469812\
8318595488355510267763829672281922224023230614559940930434782765344276919946897\
8043309711855311881057785422840733606131289278470943024027538568520978086669247\
0909599123837432540702174624911452893330743203612655100685905259494374707385595\
1400919122149277609916879675469705260201491550912085304908514584831197184000000\
00000000000000000000000000000000000000*x^3*554654446883688634121434090140685140\
9153396985646354726188078089935569531133693071042648992708727161148280934731485\
4886790740527304926673217870491574951970455804013095033340625568436519950457598\
7833484791192109578652639907998577018380573857662447665201748060206344081962532\
440253052458576149681873036293990857820025631038685773383348678670^(1/2))^2+136\
0596615541128699072664181029299371775443636435847325682911781786181994538902669\
4178154042928560333393883379692962794257365587930748964399919460042999756076712\
3670312744874690657816880176365032652116397846549314329386239148548377892447450\
35022755539847998985208770577784881644743990829735018548785121/1588038386789787\
3439464625049777043171839490273750830621900249687021849279085966194619821867477\
2178128502942921458390228043645918178889498066185137636887517363589650603447113\
4347647477033087811552415999274761825111273644240536904078696389447348387840000\
000000000000000000000000000000000000000000000000000000000*x^6, 
9592274634394905112640575937202779/20282409603651670423947251286016]
>> Degree size
6
>> Succeeds RealCertify Batch: 71 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 72 Test 1 - Weifeng
>> input polynomial
-x^2+5357849/10000
>> basis
[(x-207/50)*(x-463/100)*(x-238/25)*(x-1099/100)*(x-358/25)*(x-2093/100)*(x-2193/100), -(x-207/50)*(x-463/100)*(x-238/25)*(x-1099/100)*(x-358/25)*(x-2093/100)*(x-2193/100)]
>> Time taken
0.940000
">> Sums of squares multipliers", [-x^2+5357849/10000-89/7011378*x^2*(x-207/50)
*(x-463/100)*(x-238/25)*(x-1099/100)*(x-358/25)*(x-2093/100)*(x-2193/100)+89/
7011378*(x+1)^2*(x-207/50)*(x-463/100)*(x-238/25)*(x-1099/100)*(x-358/25)*(x-\
2093/100)*(x-2193/100), 89/7011378*x^2, 89/7011378*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 72 Test 1 - Weifeng

>> Test
Batch: 72 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+5357849/10000
>> basis
[(x-207/50)*(x-463/100)*(x-238/25)*(x-1099/100)*(x-358/25)*(x-2093/100)*(x-2193/100), -(x-207/50)*(x-463/100)*(x-238/25)*(x-1099/100)*(x-358/25)*(x-2093/100)*(x-2193/100)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.523892
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 72 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 72 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+5357849/10000
>> basis
[(x-207/50)*(x-463/100)*(x-238/25)*(x-1099/100)*(x-358/25)*(x-2093/100)*(x-2193/100), -(x-207/50)*(x-463/100)*(x-238/25)*(x-1099/100)*(x-358/25)*(x-2093/100)*(x-2193/100), -x^2+5257849/10000]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.087891
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 72 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 73 Test 1 - Weifeng
>> input polynomial
-x^2+2480489/2500
>> basis
[(x-401/100)*(x-491/50)*(x-999/100)*(x-264/25)*(x-1467/50), -(x-401/100)*(x-491/50)*(x-999/100)*(x-264/25)*(x-1467/50)]
>> Time taken
1.900000
">> Sums of squares multipliers", [-x^2+2480489/2500-31/3362016*x^2*(x-401/100)
*(x-491/50)*(x-999/100)*(x-264/25)*(x-1467/50)+31/3362016*(x+1)^2*(x-401/100)*(
x-491/50)*(x-999/100)*(x-264/25)*(x-1467/50), 31/3362016*x^2, 31/3362016*(x+1)^
2]
>> Degree size
7
>> Succeeds Weifeng Batch: 73 Test 1 - Weifeng

>> Test
Batch: 73 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+2480489/2500
>> basis
[(x-401/100)*(x-491/50)*(x-999/100)*(x-264/25)*(x-1467/50), -(x-401/100)*(x-491/50)*(x-999/100)*(x-264/25)*(x-1467/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.223469
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 73 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 73 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+2480489/2500
>> basis
[(x-401/100)*(x-491/50)*(x-999/100)*(x-264/25)*(x-1467/50), -(x-401/100)*(x-491/50)*(x-999/100)*(x-264/25)*(x-1467/50), -x^2+2455489/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.010080
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14367
time= 0.126000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [2480489/2500*(1/360287970189639680000*
29538227596961499331267259422202728617951^(1/2)-\
2419046122609766404036776651085585810847/
217953649948853387089379043946302076795412105209959831463526400*x*
29538227596961499331267259422202728617951^(1/2)-\
90639253501445395843316689119528680616515628068565857271922603743932883169/3356\
6829513012207379437159457512131095440125554809225871360000000000000000000000000\
000000000000000*x^2*29538227596961499331267259422202728617951^(1/2)+
229098506333248184643506752666474549678946399965933119630120752404741/202985154\
4172068937582699991262537211137005176487936000000000000000000000000000000000000\
0000000*x^3*29538227596961499331267259422202728617951^(1/2))^2+2480489/2500*(1/
4687150011998795503165043356976239396599639350198815539855360000000000000000000\
000*x*3917864145895971561219619011706930319394041112383391574005203998689380956\
0433403925915495510889476710011565055070233709608160300645233695068929107344118\
114129126^(1/2)+285853911983496492570806480128682616494340779794294033856519475\
91402367522585470877626361767660527384820443876986101/6469646886099952169453357\
8327753901278697672676344647442080714453583134285052410940198421733675936697219\
7856739794273933470607300262580053023097024113127945964952783577417777152000000\
0000000000000000000*x^2*3917864145895971561219619011706930319394041112383391574\
0052039986893809560433403925915495510889476710011565055070233709608160300645233\
695068929107344118114129126^(1/2)-181281563396123942707216285855853850007682747\
57520431323967555992914260583868017494426550739186087166600666347707/8346285766\
8467172973759388027446396291953946405044679421943933737043796490195165150353397\
8775003628039081464004614282339936175230303482970363468847135387186594195300784\
53760000000000000000000000000*x^3*391786414589597156121961901170693031939404111\
2383391574005203998689380956043340392591549551088947671001156505507023370960816\
0300645233695068929107344118114129126^(1/2))^2+2480489/2500*(1/1492196527252737\
3916207641897989909572335639308816464688083266528556372215274184018223872103782\
3645841880647040172318081116188886214262128640000000000000000000000000000000000\
000000*x^2*22271249341363546686138599522874095158041232469516020258624769796714\
9564069076084597026755055551819100564067655076182000309125147735443890691284179\
7996635921705613485860349923980528532890036770913199820355200516395863966333668\
9169556210991514539303130016982682588620331733082310868268471030344083947591436\
8071464251688058427106780494947478162073875614^(1/2)-79401118291290633975309663\
2746306911924200200792904523211899119298261986485227916324834258080131414224979\
1110066942102138881571994234158450128608854847723787277943078377731937639622730\
85088872545411730216496998746931/1809874812151997799270715327439757553479249389\
7447278948369255992546413610440153310337634051662684234015752196034025589207869\
2090558490571624034166025366833707065454400759419829857987879232094421650587104\
1185177679496114851504126135171272807643938757689514099534588998496511472983070\
2517889327168953142329203547248640373192857408862431498488360484948515225600000\
00000000000000000000000000000000000000*x^3*222712493413635466861385995228740951\
5804123246951602025862476979671495640690760845970267550555518191005640676550761\
8200030912514773544389069128417979966359217056134858603499239805285328900367709\
1319982035520051639586396633366891695562109915145393031300169826825886203317330\
823108682684710303440839475914368071464251688058427106780494947478162073875614^
(1/2))^2+1226572264010170142425690707456187868321540924770490569188815845121014\
1351889269398317157579645683655760402928519370079705264301941602358071375429519\
7370294394681703574576878329585177707274243448655087541168233009552772820704106\
776118583106033000251572544142240551524722326427049984749081582042536576275209/
5491890570560483739643277406254874846535545200232680470479623422037076870369298\
0374773410105746429188156919548937111640628574507388734359961113403561771597182\
2648648013893655734976920622143911575983399726699785625332283959102556970821249\
8202960710403620864000000000000000000000000000000000000000000000000000000000000
*x^6, 4893316405050992702181139292892580481/32451855365842672678315602057625600
]
>> Degree size
6
>> Succeeds RealCertify Batch: 73 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 74 Test 1 - Weifeng
>> input polynomial
-x^2+2845649/10000
>> basis
[(x-42/25)*(x-37/10)*(x-873/100)*(x-883/100)*(x-1457/100), (-x+42/25)*(x-37/10)*(x-873/100)*(x-883/100)*(x-1457/100)]
>> Time taken
1.605000
">> Sums of squares multipliers", [-x^2+2845649/10000-1634/2469413*x^2*(x-42/25
)*(x-37/10)*(x-873/100)*(x-883/100)*(x-1457/100)-1634/2469413*(x+1)^2*(-x+42/25
)*(x-37/10)*(x-873/100)*(x-883/100)*(x-1457/100), 1634/2469413*x^2, 1634/
2469413*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 74 Test 1 - Weifeng

>> Test
Batch: 74 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+2845649/10000
>> basis
[(x-42/25)*(x-37/10)*(x-873/100)*(x-883/100)*(x-1457/100), (-x+42/25)*(x-37/10)*(x-873/100)*(x-883/100)*(x-1457/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -7.269061
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 74 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 74 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+2845649/10000
>> basis
[(x-42/25)*(x-37/10)*(x-873/100)*(x-883/100)*(x-1457/100), (-x+42/25)*(x-37/10)*(x-873/100)*(x-883/100)*(x-1457/100), -x^2+2745649/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.035144
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14364
time= 0.116000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [2845649/10000*(1/360287970189639680000*
47155054610684290028661212973652668318207^(1/2)+
4762049166535054568683186498000106903633/
1739714448370181389523997038804734628882990542930013558145024000*x*
47155054610684290028661212973652668318207^(1/2)-\
336799906297996355248700033414553444108070058233947794768069459816235012599/368\
8496858097730801193097717670838752348909642918594294579200000000000000000000000\
0000000000000000*x^2*47155054610684290028661212973652668318207^(1/2)-\
3225002319398352369706021609462436251664146808145594464028398706479/32404706783\
0372860566526099816846592143735018173235200000000000000000000000000000000000000\
000*x^3*47155054610684290028661212973652668318207^(1/2))^2+2845649/10000*(1/944\
2551956730190851054330157237347206013208685871601394122752000000000000000000000\
0*x*469222998644261948590754010754014471634206473436835846557524970311218644336\
1151918858677418663995803124566917623938874131679627995574191069713892724672719\
1568505990^(1/2)-12977153006638161507333092918837406234903217943211200798341977\
06367879010100785967023045786368137528226034379951319/4448826361785189182040668\
2387065548656268077892499079751561107876694044883115774813856436273132545023550\
9490396255797568889077444940157052762915237181448212437651703323433526886400000\
0000000000000000000*x^2*4692229986442619485907540107540144716342064734368358465\
5752497031121864433611519188586774186639958031245669176239388741316796279955741\
910697138927246727191568505990^(1/2)-733210489048967916339670874657817598110111\
748313174389094238500998841210302536017990138870293736952617210577798173/190106\
8211831743846609842808535828106910654923262808623899093218385681388599535015514\
8940191896180712602978804548524777432814734812593927647426120663955429018975441\
849690357760000000000000000000000000*x^3*46922299864426194859075401075401447163\
4206473436835846557524970311218644336115191885867741866399580312456691762393887\
41316796279955741910697138927246727191568505990^(1/2))^2+2845649/10000*(1/24579\
3194268081811067998574588912170038615258341748104716317683409101528228193791077\
0676129935037351772948887869183989692199835095406529740800000000000000000000000\
0000000000000000*x^2*2546302738386214825132995035869886093618243983194782912953\
3155897673735807133057943246852385823004285208980965365136823524806386632084989\
8984578621020548689310449031858643211287837724813750780672675831298265215905810\
3068273657671609329926790094644507234713552793830462382676950478488268323336703\
22928599750692934679823757943004738867846853515305960718^(1/2)-3774227782010642\
8590871221706246767827200387117211974463931660869634455609295423541048550197209\
1444645045209501127602355441572449977912289244444551587653558960968380097690965\
7039854659082974082529970606623881235899597/14954507714810014444671946198264956\
3236348898918653878227013290402086512070100864551881863876583000057724125613438\
2301889402777311019333444900811020129413035786073971726863438064257321277456742\
8161903894149310876234121519174469870576089680130908511021491195528776239160983\
3779262738894871552511332920668640689466662440905906062214909464774492735648209\
4524006400000000000000000000000000000000000000000*x^3*2546302738386214825132995\
0358698860936182439831947829129533155897673735807133057943246852385823004285208\
9809653651368235248063866320849898984578621020548689310449031858643211287837724\
8137507806726758312982652159058103068273657671609329926790094644507234713552793\
8304623826769504784882683233367032292859975069293467982375794300473886784685351\
5305960718^(1/2))^2+11819392287581356879647020522641517432769408337769203615663\
6223096762958573527250249453311310786701473562271467760767091812345427600540964\
0068636205147536154378566003965726340882651560550934548470749888538209875137474\
1296584420412888812386241523552712718354235105599904029520598139643601888528915\
6760635949/26968970429245482974233867558684516955710286968169002082993524623361\
5942179900870358287554074344992801634308268419014727971194124762073858946430102\
2897075859490948151198649538851974248516982884629138380677336968926695178049654\
6240651805928289247451533327466496000000000000000000000000000000000000000000000\
0000000000*x^6, 63711642455162459817491160033486139721/
811296384146066816957890051440640000]
>> Degree size
6
>> Succeeds RealCertify Batch: 74 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 75 Test 1 - Weifeng
>> input polynomial
-x^2+679481/2500
>> basis
[(x-407/100)*(x-119/25)*(x-883/100)*(x-709/50)*(x-759/50), -(x-407/100)*(x-119/25)*(x-883/100)*(x-709/50)*(x-759/50)]
>> Time taken
1.524000
">> Sums of squares multipliers", [-x^2+679481/2500-575/220993*x^2*(x-407/100)*
(x-119/25)*(x-883/100)*(x-709/50)*(x-759/50)+575/220993*(x+1)^2*(x-407/100)*(x-\
119/25)*(x-883/100)*(x-709/50)*(x-759/50), 575/220993*x^2, 575/220993*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 75 Test 1 - Weifeng

>> Test
Batch: 75 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+679481/2500
>> basis
[(x-407/100)*(x-119/25)*(x-883/100)*(x-709/50)*(x-759/50), -(x-407/100)*(x-119/25)*(x-883/100)*(x-709/50)*(x-759/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -10.350754
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 75 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 75 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+679481/2500
>> basis
[(x-407/100)*(x-119/25)*(x-883/100)*(x-709/50)*(x-759/50), -(x-407/100)*(x-119/25)*(x-883/100)*(x-709/50)*(x-759/50), -x^2+654481/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.036798
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14215
time= 0.117000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [679481/2500*(7/450359962737049600000*
1164592452004127391538616126831548858731^(1/2)-\
307233544509646060701204258365028012787/
5012685746201936223797331297437241994960694167566991910502400*x*
1164592452004127391538616126831548858731^(1/2)-\
58625679713269579096137497306925027533396434358529105390723009933310164313/1141\
9587772948794232881929802084562052712212094311894876160000000000000000000000000\
00000000000000*x^2*1164592452004127391538616126831548858731^(1/2)+
16239631082022257734790072963089003330758887672787905703273874400549/7469483831\
8257573601563741228539377375851484649881600000000000000000000000000000000000000\
000*x^3*1164592452004127391538616126831548858731^(1/2))^2+679481/2500*(1/974471\
489958297107872591343111215961831442098714615029432320000000000000000000000*x*
5729375900452610215687958509164182898589794429568751140681083039991447187994150\
2510750500668180520762522673887111281064426950817494409237155183115821435656181\
78^(1/2)+9590250478119731458410031845758765265338451003605341500050124303513664\
720369839373186806027087986439233598621302569/903098530962035637325696941765718\
5620881024544172950459751628944617750163358863808200321382472642154961237797111\
4012132803595950881382929790546053190706750212450146974074667008000000000000000\
000000000*x^2*57293759004526102156879585091641828985897944295687511406810830399\
9144718799415025107505006681805207625226738871112810644269508174944092371551831\
1582143565618178^(1/2)-55581412589707622369970313012313808590086688637119569145\
20105495554072530752090977010595588039138381920808430233/1417707190771836170764\
7602673463517982508845496956962481268896222644832611335398726499111539499733323\
8535298513406967388821520662005474460325722804223744103062896764990259200000000\
0000000000000000*x^3*5729375900452610215687958509164182898589794429568751140681\
0830399914471879941502510750500668180520762522673887111281064426950817494409237\
15518311582143565618178^(1/2))^2+679481/2500*(1/1879491350393172591305725460055\
8188253987929841123270962442859994930422387061674217704591094737904857292895283\
4554632685392488419192471552000000000000000000000000000000000000000*x^2*1710245\
0533184167068979766484205623322866863318386540845529916233682653203963728699133\
5872191147944465926472796379962257285852106158413143482691395080183805519557485\
8458817988507852160570101581903529115380132138785177647691389186264217214722570\
9877348688621652544688835924299272829589653004063140559059864752391443223668584\
601384502785081152776674^(1/2)-690787653803706744395909024438388926133091748383\
6170357577779981299763898282486157070192498025706490145972389614467841626634760\
3873711350253678448544033035983488764770659396755854420783908719886318773398909\
123769201/507367082306687675403362902836209372629498602098354958233866743601402\
5250064663859860564947996896284604082473228481404480468465919213298298224276264\
6463338796544998102025108038971323933722699283817699844334137511282614241701606\
8135558090954777845853253089031318882375078125681387194510067632181013150038004\
8386330944831104753962820406686250769708377702400000000000000000000000000000000\
000000000*x^3*17102450533184167068979766484205623322866863318386540845529916233\
6826532039637286991335872191147944465926472796379962257285852106158413143482691\
3950801838055195574858458817988507852160570101581903529115380132138785177647691\
3891862642172147225709877348688621652544688835924299272829589653004063140559059\
864752391443223668584601384502785081152776674^(1/2))^2+376993354626276040502660\
8604236339143174949612688838339878348898044057830047862495478472669439857917069\
8862252854173642080323605393364771406087642927017478887278521621499451631956380\
6176703325228290559565308172393448309142965396622131393120031576807348572697339\
29511200555649418052236048549857656197467/1674138314141558966860895821290261776\
7994266435482469981085734708033434370619982053160613510276949611552953663630593\
7649882876710454554515621008140814023966935889134771952524534431119100953549587\
4025745020510305234290190175614394182221639881848487568998400000000000000000000\
000000000000000000000000000000000000*x^6, 5156932286728092875371160574406183481
/50706024009129176059868128215040000]
>> Degree size
6
>> Succeeds RealCertify Batch: 75 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 76 Test 1 - Weifeng
>> input polynomial
-x^2+3495769/2500
>> basis
[(x-37/20)*(x-39/4)*(x-347/25)*(x-1941/100)*(x-1763/50), -(x-37/20)*(x-39/4)*(x-347/25)*(x-1941/100)*(x-1763/50)]
>> Time taken
1.666000
">> Sums of squares multipliers", [-x^2+3495769/2500-75/13818997*x^2*(x-37/20)*
(x-39/4)*(x-347/25)*(x-1941/100)*(x-1763/50)+75/13818997*(x+1)^2*(x-37/20)*(x-\
39/4)*(x-347/25)*(x-1941/100)*(x-1763/50), 75/13818997*x^2, 75/13818997*(x+1)^2
]
>> Degree size
7
>> Succeeds Weifeng Batch: 76 Test 1 - Weifeng

>> Test
Batch: 76 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+3495769/2500
>> basis
[(x-37/20)*(x-39/4)*(x-347/25)*(x-1941/100)*(x-1763/50), -(x-37/20)*(x-39/4)*(x-347/25)*(x-1941/100)*(x-1763/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.459779
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 76 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 76 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+3495769/2500
>> basis
[(x-37/20)*(x-39/4)*(x-347/25)*(x-1941/100)*(x-1763/50), -(x-37/20)*(x-39/4)*(x-347/25)*(x-1941/100)*(x-1763/50), -x^2+3470769/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.007153
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14444
time= 0.131000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [3495769/2500*(1/72057594037927936000*
1766018025135603107848422393180053042743^(1/2)-\
2475636191528561695193168952151056821511/
130309130156937730378413445472412357920706179710732050890752000*x*
1766018025135603107848422393180053042743^(1/2)-\
1660508352379893044440863335410599661017455669430912575983345150509352385251/16\
9698379047061522598272558996695829941372991033347722444800000000000000000000000\
000000000000000000*x^2*1766018025135603107848422393180053042743^(1/2)+
663083189816147742157827871415264433725617673210842215603096719295601/485439338\
3746509640604758466497524005200944085073920000000000000000000000000000000000000\
0000000*x^3*1766018025135603107848422393180053042743^(1/2))^2+3495769/2500*(1/
8688557007209549957031555020630826492998297140907403389173760000000000000000000\
000*x*8485098457496857785030925414450027110357998725062975732997922292668993585\
0840600880630949718949308426554321593506282322248294652879589977980390052248292\
102427862^(1/2)+110221241010522991461087909129132847778245648099398935376044024\
51625376348639597458244274682891932781900517199152799/1528539450055392764497843\
1080761912098680099255575716063312170674484745024797862889418338237711444184352\
3937039423043448696726870143328030583479768440696566671579331355434863820800000\
00000000000000000000*x^2*848509845749685778503092541445002711035799872506297573\
2997922292668993585084060088063094971894930842655432159350628232224829465287958\
9977980390052248292102427862^(1/2)-12428256373823467829091250536402151713704482\
34683277189275809429629007725211223967151910081766555580573912101351/1499157034\
0901254527952519007907881554952465686124209233647552479568214383695944168345878\
2686431454883422727341298787304175886617035780467106032400170308638002024894850\
66240000000000000000000000000*x^3*848509845749685778503092541445002711035799872\
5062975732997922292668993585084060088063094971894930842655432159350628232224829\
4652879589977980390052248292102427862^(1/2))^2+3495769/2500*(1/1385050380183482\
3579138404918620723175036103972369052041633438811405420756212125043936900643331\
4952873463463368908164612086309474699755651072000000000000000000000000000000000\
00000000*x^2*701991185498086144199086619582805872486356996538850723006029755717\
2408708873391833581688382886829260475668778235319160172006935650875236783456065\
0728312841250151152351663541899462423396544767593525416426762638588603212141564\
8970321569817016140995426856707813875723092955996323132269816916246007210701442\
387544249177912588644201848809898442145403023572222^(1/2)-115496014466743615734\
9032894606974874511824106487823281758360033268696575815883550869138691137213859\
7506120517839520809080828182847067939339835879076320997210297598060949998821348\
352148799238662303827234733069870371467/788552707829914903396699173966660189665\
6932930071815349974643516733628079470743827380702923748973179309237700120730569\
0470850149405666409418961776519890444719558713413087722549491264693405742924837\
6955663281182036831105013295734723162632631299282430222067586292902257910185628\
0580414999544706227600718144933406449347711682383846093553992233228824413204381\
69600000000000000000000000000000000000000000000*x^3*701991185498086144199086619\
5828058724863569965388507230060297557172408708873391833581688382886829260475668\
7782353191601720069356508752367834560650728312841250151152351663541899462423396\
5447675935254164267626385886032121415648970321569817016140995426856707813875723\
0929559963231322698169162460072107014423875442491779125886442018488098984421454\
03023572222^(1/2))^2+7151104185364076329713534819493622499383585682093304949645\
4899967342356609310304730062217369939623729823658705146479461999076181853874202\
2772277244220534408061870015280102494069508247581461892820067343778315529238156\
4261093454688663492912758137582917709695915838525719724514063908973109586737756\
303833147707/254312660843428357125896436726219852010559919739789805087918566041\
6935511413560829665835645641003348159745777864258145608569370962786827536952187\
6371840871790960680983356547856586430348512276095278897388247098626193381482234\
1547373754528034696768411072987136000000000000000000000000000000000000000000000\
000000000000000*x^6, 65882917123737277185077571747685648921/
50706024009129176059868128215040000]
>> Degree size
6
>> Succeeds RealCertify Batch: 76 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 77 Test 1 - Weifeng
>> input polynomial
-x^2+7427849/10000
>> basis
[(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100), -(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100)]
>> Time taken
1.486000
">> Sums of squares multipliers", [-x^2+7427849/10000-301/4173174*x^2*(x-459/
100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100)+301/4173174*(x+1)^2*(x-\
459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100), 301/4173174*x^2, 
301/4173174*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 77 Test 1 - Weifeng

>> Test
Batch: 77 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+7427849/10000
>> basis
[(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100), -(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.990446
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 77 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 77 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+7427849/10000
>> basis
[(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100), -(x-459/100)*(x-487/50)*(x-1347/100)*(x-1679/100)*(x-2507/100), -x^2+7327849/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.013465
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14711
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [7427849/10000*(1/1801439850948198400000*
857524845572590633895372092438931544294762^(1/2)-\
33648829805865487887960512920438445342279/
31637082726249769414001900355828788444566966294026699914870784000*x*
857524845572590633895372092438931544294762^(1/2)-\
20130189023850128084139327800450447284785785207095917641015037128040411935291/
2801364341868062299394900817348271732559064579249858009051955200000000000000000\
0000000000000000000000*x^2*857524845572590633895372092438931544294762^(1/2)+
2713124944117485701835893990880874501157650853344849826856097198313759/18857170\
7762776430928718449806146552828353442514101862400000000000000000000000000000000\
0000000000*x^3*857524845572590633895372092438931544294762^(1/2))^2+7427849/
10000*(1/8964365893977799358063682615514469544189006653599545628966256640000000\
000000000000000*x*1865114088473834734871769446449922586805475074492347897973036\
8709530481066633532053407417049918001458916538233181313766068514157626756576382\
4949273385639764915604233373^(1/2)+71849523429549490491706489510871509575948726\
48022778484920564339493205792062167635121306842188074908624959666500599709/6108\
8924464394359422191611969403046755984895896455392733561598799191366227074576156\
1321051612388262823915616578977057814377233758584729774255156135380055766125504\
6561748621512136458240000000000000000000000000*x^2*1865114088473834734871769446\
4499225868054750744923478979730368709530481066633532053407417049918001458916538\
2331813137660685141576267565763824949273385639764915604233373^(1/2)-91800808280\
4727245299072516305127873008866571305722342474883966210741872287248998679002350\
163673834458521070898651/603115984280543805386196130861423017005177725845000636\
6304050129820939444674766882646224649725890488675857377973755826178076202450563\
213761980278533916178988363523291802228490240000000000000000000000000*x^3*18651\
1408847383473487176944644992258680547507449234789797303687095304810666335320534\
0741704991800145891653823318131376606851415762675657638249492733856397649156042\
33373^(1/2))^2+7427849/10000*(1/46948645013718098505071087490208389106846960815\
7293991818262306782074575351017468551881071477505777249485893864954298161878459\
3444318035836928000000000000000000000000000000000000000*x^2*5284111940198538938\
0854624287287615092447149908976183483367525588309919849197981492762459439989515\
6664023532968315713371905182657983148991232062835776616575223358015067926688741\
6654441771644923106965051383319426063655865075759454401810628223318072822668896\
5600308996124714453031805230591029209130969159811557096000476523742562043577195\
5190312986822292438^(1/2)-17969914224820549859833288054771921056357591186007216\
2871498703987823274551222475550926466162122646409729755425930844811231764518262\
4241234223312034715656135225995032528434701428524595437372997890482282178185122\
39327499101/2841047687392808369893039254774205845192249903162361551853959603015\
1575555090349671980818651231320175422936365357614231913061958465019972055153924\
7103697926524037516833326361245859298621244103603248190660616969324470041095498\
1763945602177114678543319829821735650533659543338100547367598383058986540529255\
5921869946526866450786456775665178994188949041134286028144640000000000000000000\
00000000000000000000000*x^3*528411194019853893808546242872876150924471499089761\
8348336752558830991984919798149276245943998951566640235329683157133719051826579\
8314899123206283577661657522335801506792668874166544417716449231069650513833194\
2606365586507575945440181062822331807282266889656003089961247144530318052305910\
292091309691598115570960004765237425620435771955190312986822292438^(1/2))^2+599\
5167142939502940565173993424612479265172299986659094777735898646176105232995791\
4320558617840884413881117224966131290145134458898674120646080653521554183963755\
9156048163711785551747386540264316483021668722278507517612649478835089599404556\
935143079238553242558063838241245364975873626441052586583109698965985763/291734\
6770970040521608618688872521801052562590843982852806636082455433044496608830802\
6058961124032287594616802063554044564386366792682246070615174012602484940666203\
4663371026875865487240872716900549010624980201600647748395381060833141802255357\
4375923168883769344000000000000000000000000000000000000000000000000000000000000
*x^6, 26881689705109028626988800059522640529/
202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 77 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 78 Test 1 - Weifeng
>> input polynomial
-x^2+7756289/10000
>> basis
[(x-76/25)*(x-211/25)*(x-163/10)*(x-449/20)*(x-2567/100), -(x-76/25)*(x-211/25)*(x-163/10)*(x-449/20)*(x-2567/100)]
>> Time taken
1.782000
">> Sums of squares multipliers", [-x^2+7756289/10000-362/1423537*x^2*(x-76/25)
*(x-211/25)*(x-163/10)*(x-449/20)*(x-2567/100)+362/1423537*(x+1)^2*(x-76/25)*(x
-211/25)*(x-163/10)*(x-449/20)*(x-2567/100), 362/1423537*x^2, 362/1423537*(x+1)
^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 78 Test 1 - Weifeng

>> Test
Batch: 78 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+7756289/10000
>> basis
[(x-76/25)*(x-211/25)*(x-163/10)*(x-449/20)*(x-2567/100), -(x-76/25)*(x-211/25)*(x-163/10)*(x-449/20)*(x-2567/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.663177
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 78 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 78 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+7756289/10000
>> basis
[(x-76/25)*(x-211/25)*(x-163/10)*(x-449/20)*(x-2567/100), -(x-76/25)*(x-211/25)*(x-163/10)*(x-449/20)*(x-2567/100), -x^2+7656289/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.012895
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14630
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [7756289/10000*(1/360287970189639680000*
33324479906441735876093624358830441300295^(1/2)+
416024375815788575178661040150663802631/
196713008711554279795883772811222808063774818526768786728550400*x*
33324479906441735876093624358830441300295^(1/2)-\
58668314024724763221878710806727240608878271345618817724907419638367584207729/
1705172969728334955815675354377388815657237086537673636577280000000000000000000\
0000000000000000000000*x^2*33324479906441735876093624358830441300295^(1/2)-\
43551976401014385860918801465056391582090982869875616368494231127031/1526693881\
1133482167177815984563809514028238949580800000000000000000000000000000000000000\
000000*x^3*33324479906441735876093624358830441300295^(1/2))^2+7756289/10000*(1/
4850269780560597207653476563562350408980585490596049455153152000000000000000000\
0000*x*482730262779353711843886938699824804392324778454039325848534850012737018\
8533861882987924416133213401610376515875348170906510384802028633160373344314672\
995186886486^(1/2)-157673520677375430888529006465362519448483427706537558527612\
3757714977076446326024073716324204155630870914372610094141/31305943174659249476\
1584755034210244854469905947671538414017709884015669765243026857895650630097664\
5128836082848309454840624140018367837344766506015507295822921515791861004122456\
0640000000000000000000000000*x^2*4827302627793537118438869386998248043923247784\
5403932584853485001273701885338618829879244161332134016103765158753481709065103\
84802028633160373344314672995186886486^(1/2)-7246633418290215921444895361924215\
4485380462411140719436154998870409171317150320133301556965310858240227562880401
/269080081764696574836741947972121070488279387172286075135517092331152754249051\
3413118873820801826444862000442779022678534906009835689754335496013635307035639\
441762069344419840000000000000000000000000*x^3*48273026277935371184388693869982\
4804392324778454039325848534850012737018853386188298792441613321340161037651587\
5348170906510384802028633160373344314672995186886486^(1/2))^2+7756289/10000*(1/
1667741452387246059731445865977893159915344667419634659533360190065586021691260\
3426617439035618261705581351794962870442633576994217696387347251200000000000000\
000000000000000000000000000*x^2*58753606523769690092720102345771621858764033071\
0161401712480060306152560353955049013057517600832941874804119486590793977748436\
9642478432943126734624867889450659520900503662262573521720082899759314421726360\
4603277459179552729705288041484701555424295761399811684457932585124786401002676\
20949475323975107097873885732464106200770428419086222177888875732113668675230^(
1/2)-32117000089044619241477796843060631611138644984228200979582509484824316391\
4774128951389619045537753498107599711099415987556186795821320551399066525936446\
748406832878873192767964607841455252233804706465503518450944861052229/124931407\
6873501453908777898124154578446158686971223980038472235319932856826055344237200\
4191489105127481879619580675345347957802694043648245193555355761125956333502262\
6124588045356922414673574128543401041581801227711822779067335974851983579820851\
4274963616574630951849593269904844651118549744195732717340229441060756728789302\
8538808354837835410058066671220403522764800000000000000000000000000000000000000\
000000*x^3*58753606523769690092720102345771621858764033071016140171248006030615\
2560353955049013057517600832941874804119486590793977748436964247843294312673462\
4867889450659520900503662262573521720082899759314421726360460327745917955272970\
5288041484701555424295761399811684457932585124786401002676209494753239751070978\
73885732464106200770428419086222177888875732113668675230^(1/2))^2+1808447253178\
0391349025392938956208298289634387847265490940896215598341309705441026136515580\
5804072209342168103302104000348003568852928660068017838515351933835785733195853\
5444752276375186992771844036673490942132556424287187294044282217695746995173564\
4079281052891265587256924685549362823931926558260288298575173601/67879545393190\
5260018448612406434867931762009997753044101128498466098612072521498406416950145\
5500654821726282228301222352794134734757130511285826840928305930522420186749681\
3716819559610345685370758538089227351937023811082183325726434302566558783191363\
056509648896000000000000000000000000000000000000000000000000000000000000*x^6, 
363744642191983208984113756266826024289/3245185536584267267831560205762560000]
>> Degree size
6
>> Succeeds RealCertify Batch: 78 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 79 Test 1 - Weifeng
>> input polynomial
-x^2+5922569/10000
>> basis
[(x-121/50)*(x-301/50)*(x-311/50)*(x-571/50)*(x-452/25)*(x-2213/100)*(x-2313/100), -(x-121/50)*(x-301/50)*(x-311/50)*(x-571/50)*(x-452/25)*(x-2213/100)*(x-2313/100)]
>> Time taken
1.796000
">> Sums of squares multipliers", [-x^2+5922569/10000-139/15492711*x^2*(x-121/
50)*(x-301/50)*(x-311/50)*(x-571/50)*(x-452/25)*(x-2213/100)*(x-2313/100)+139/
15492711*(x+1)^2*(x-121/50)*(x-301/50)*(x-311/50)*(x-571/50)*(x-452/25)*(x-2213
/100)*(x-2313/100), 139/15492711*x^2, 139/15492711*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 79 Test 1 - Weifeng

>> Test
Batch: 79 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+5922569/10000
>> basis
[(x-121/50)*(x-301/50)*(x-311/50)*(x-571/50)*(x-452/25)*(x-2213/100)*(x-2313/100), -(x-121/50)*(x-301/50)*(x-311/50)*(x-571/50)*(x-452/25)*(x-2213/100)*(x-2313/100)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.461399
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 79 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 79 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+5922569/10000
>> basis
[(x-121/50)*(x-301/50)*(x-311/50)*(x-571/50)*(x-452/25)*(x-2213/100)*(x-2313/100), -(x-121/50)*(x-301/50)*(x-311/50)*(x-571/50)*(x-452/25)*(x-2213/100)*(x-2313/100), -x^2+5822569/10000]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.016887
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 27118
time= 0.130000secs
>> Time taken
0.010000
">> Sums of squares multipliers", [5922569/10000*(1/90071992547409920000000*
4603660156132763876249534540512062296290617831^(1/2)-\
32735305711234346537020805541736863373572961/
707687839187623759488445180609491206679782296911108702921870540800000*x*
4603660156132763876249534540512062296290617831^(1/2)-\
132603094790280654161596833211100171673308004172812981396837454086286342389/249\
8227392464641130930019190834268168481750225087719058725404672000000000000000000\
000000000000000000*x^2*4603660156132763876249534540512062296290617831^(1/2)+
1465367175012546854016868152892298699976000875047347683175897534649/19772569812\
4884746825819419867216946560828656957794549760000000000000000000000000000000000\
00000*x^3*4603660156132763876249534540512062296290617831^(1/2)+
12068818908110971966810288724582687356870982415975763391634105309492893/2024711\
1487988198074963908594403015327828854472478161895424000000000000000000000000000\
0000000000000*x^4*4603660156132763876249534540512062296290617831^(1/2))^2+
5922569/10000*(1/31977310623547406475904245642678632556566402881122803951685179\
80160000000000000000000000*x*22446068903666251788833425411088741826053684858042\
5179022723484759763219836934949501558807882322206393295997004446730764667054343\
86860969274674575985517522218289607636307670^(1/2)-8053430877251214722213744957\
5220456423666018387226737240949970242260065228047464199987267086767993020826458\
35437409911709/3610289555374421758328965323902400290457907446437193485713567562\
9121885059839016903399611933854302881851204128203928847117266667272195904123170\
47236683917934592271051451392883573590589440000000000000000000000000*x^2*224460\
6890366625178883342541108874182605368485804251790227234847597632198369349495015\
5880788232220639329599700444673076466705434386860969274674575985517522218289607\
636307670^(1/2)-233560553538252760113337129965415966599011614888823886346543034\
06794897262634684437405456242054862726928542091069559/4267071753426756582878605\
0896691624923585275452359194802112010751390687963090530194548562209571576147607\
3016451859829627684990535197430927123336691506463251709619547871198295621632000\
00000000000000000000000*x^3*224460689036662517888334254110887418260536848580425\
1790227234847597632198369349495015588078823222063932959970044467307646670543438\
6860969274674575985517522218289607636307670^(1/2)+11705738480632737237106165373\
6337288762218390737404119969752850848670050526109778872140025428915135359383533\
146185109/273092592219312421304230725738826399510945762895098846733516868808900\
4029637793932451107981412580873446867305291902909617183939425263557933589354825\
6413648109415651063756690919784448000000000000000000000000000*x^4*2244606890366\
6251788833425411088741826053684858042517902272348475976321983693494950155880788\
2322206393295997004446730764667054343868609692746745759855175222182896076363076\
70^(1/2))^2+5922569/10000*(1/29580967485574943311325828002284298081911568652523\
7320291757545841092445307810057753778734234936712728327547991993792598961432010\
93629553672192000000000000000000000000000000000000*x^2*670965262709750465219204\
7650988820737617453766332916837253940953514045918864123225260187071342006692864\
4923666752963824893701305461764228564038288520927636013547700460329850794084844\
0426445532507229373042162911327719365213119666105710275754422206146107053084366\
0504237002819551281998766179850632340879771525773205588952326841771016281822440\
783195931454^(1/2)+331074458874907920742822528417145114955480769313303906046580\
5172734403240612851992262210278727834485891943489261781773505082150952145886177\
7217900277111548487261591474743483392677938235693460706907089362074179292637/17\
9059590612330052135300633373719806788572161941053292050459564929078937321358919\
9051291491734445817057889734846555618468069220371651024121009625462315834196950\
1197976761178209692565005451200836612264964907896114650020306442901471802443082\
7843410152033956308845372082654083520782565357758191923636269859644795737147094\
2686504685971450498729875316289252098048000000000000000000000000000000000000000
*x^3*67096526270975046521920476509888207376174537663329168372539409535140459188\
6412322526018707134200669286449236667529638248937013054617642285640382885209276\
3601354770046032985079408484404264455325072293730421629113277193652131196661057\
1027575442220614610705308436605042370028195512819987661798506323408797715257732\
05588952326841771016281822440783195931454^(1/2)-1986086994135973614534295831090\
6510794544866193248507749671698009300581455242774155199244183934600071911009919\
6498357578035223832613465539746341568531801067035243556426848230174063753514142\
022488618495616415075162879553/343794413975673700099777216077542029034058550926\
8223207368823646638315596570091262178479664130135968751148290905386787458692903\
1135699663123384808876464016581442300115381462162609724810466305606295548732623\
1605401280389883703708258606907189459347491905196112983114398695840359902525486\
8957284933816381305180078153224209958088997065184957561360607275364028252160000\
000000000000000000000000000000000000*x^4*67096526270975046521920476509888207376\
1745376633291683725394095351404591886412322526018707134200669286449236667529638\
2489370130546176422856403828852092763601354770046032985079408484404264455325072\
2937304216291132771936521311966610571027575442220614610705308436605042370028195\
51281998766179850632340879771525773205588952326841771016281822440783195931454^(
1/2))^2+5922569/10000*(1/113019441484948004181740072689375360808591513989448605\
7534129497070013534081263485612449967233819288590549876609199752964516774077739\
5657271665753819381687784115833740935195976014106218967648189411534604109237267\
6538643452324725401761873920000000000000000000000000000*x^3*2950794530283601762\
7179402096841478401298605667485009567143449772500564742284580674710435082003327\
5107168892839155730378682782385225831735147308564202534047531237294163028539207\
0560231883299287367399070612490113758858557216620148702650115539882804321996242\
8646764021916201334298266460171947469774867019685597390473181406525726603475968\
2024176079660230574476283608901086592382758541234516006300321829097620543534410\
4900975883649043473219914419019357885389090874764631210252400597852095998082717\
71199444019713829527234100205^(1/2)-8042366539905848160342727212839186277744062\
6074046491638183650025739548071444246929308582724049535362224518695684822372223\
6809330534814380686941282579074658758398580395978323540760666174291403670551611\
7205897579024323664160948716633236268083679980428044221496244598849279294154648\
103560255292048217/199337957205481900096275170298326639648232505772209654980088\
7969332727366963318368338521876549631263192479888665795546674526283475708523383\
6562170915123626840788939049728568483522167051916851692683528678714543535896842\
1551205960798687027393059902375629810300962605645734103456199660099493745266754\
3261003885507944989423400700242735657543553298480737048764132775052471468943969\
6640784994093709893234226613684942636905486485666540829318832640615682380936510\
2216488463201660331000698224249250529955426851633189933877568146251416112308682\
75200000000000000000000000000000*x^4*295079453028360176271794020968414784012986\
0566748500956714344977250056474228458067471043508200332751071688928391557303786\
8278238522583173514730856420253404753123729416302853920705602318832992873673990\
7061249011375885855721662014870265011553988280432199624286467640219162013342982\
6646017194746977486701968559739047318140652572660347596820241760796602305744762\
8360890108659238275854123451600630032182909762054353441049009758836490434732199\
1441901935788538909087476463121025240059785209599808271771199444019713829527234\
100205^(1/2))^2+365114256522067208886798707803425318835032091985817305243782108\
9912937424835805451889650312461029087628585223482658106637697397761234534428464\
6342817842910447041471624261524779240994038273527600522145710918641902656248735\
2809729294407209902400023842825614502732359809076597087634570805027713396557662\
9766946427370091922302069084042600226952359566439932495350692878024718400881/45\
7895489212189389977882734075076670061541300398887520310104154087213293119441710\
9031951310090736491672673523857378162860198750280705294337808762167653305881313\
0197300471287849439674635281029940011256757583770233298612129657485994453595528\
6009144958076603281200661064381961599785319602041430492617966275736848450808633\
90250081189888000000000000000000000000000000000000000000000000000000*x^8, 
44029019773093640854112127935186949281/3169126500570573503741758013440000]
>> Degree size
8
>> Succeeds RealCertify Batch: 79 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 80 Test 1 - Weifeng
>> input polynomial
-x^2+1712401/2500
>> basis
[(x-181/100)*(x-381/50)*(x-272/25)*(x-1447/100)*(x-1199/50), -(x-181/100)*(x-381/50)*(x-272/25)*(x-1447/100)*(x-1199/50)]
>> Time taken
1.574000
">> Sums of squares multipliers", [-x^2+1712401/2500-106/2328823*x^2*(x-181/100
)*(x-381/50)*(x-272/25)*(x-1447/100)*(x-1199/50)+106/2328823*(x+1)^2*(x-181/100
)*(x-381/50)*(x-272/25)*(x-1447/100)*(x-1199/50), 106/2328823*x^2, 106/2328823*
(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 80 Test 1 - Weifeng

>> Test
Batch: 80 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1712401/2500
>> basis
[(x-181/100)*(x-381/50)*(x-272/25)*(x-1447/100)*(x-1199/50), -(x-181/100)*(x-381/50)*(x-272/25)*(x-1447/100)*(x-1199/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.863811
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 80 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 80 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1712401/2500
>> basis
[(x-181/100)*(x-381/50)*(x-272/25)*(x-1447/100)*(x-1199/50), -(x-181/100)*(x-381/50)*(x-272/25)*(x-1447/100)*(x-1199/50), -x^2+1687401/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.014601
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14302
time= 0.122000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1712401/2500*(1/900719925474099200000*
254718513205718098071636892268312097959887^(1/2)+
4493891604994386722759741176929520152121/
2349363611970844243991017594392901079714969831849769562013696000*x*
254718513205718098071636892268312097959887^(1/2)-\
14102219436400301557380901759905153436876700695163098936855920065061808517/8992\
2232892419822236622777275502641539387272038222340816896000000000000000000000000\
00000000000000*x^2*254718513205718098071636892268312097959887^(1/2)-\
198723573756954182882204623218452139722808145817411536916278540737337/700164917\
6987541449043207151868644594296723103075532800000000000000000000000000000000000\
0000000*x^3*254718513205718098071636892268312097959887^(1/2))^2+1712401/2500*(1
/230200916204594744925754309825286762340831416417849192491253760000000000000000\
000000*x*1206827253911079838360827633352771130740818032439593751959651117429089\
5403023563017864456107096541459805677844022879573116834772199378946019908212132\
2357962731163190^(1/2)-51267561816652421989913102414956818011012330476111835372\
529223655646182591601036799696095642730296303151005168413647/679383346376812265\
1842603820965207523334230771780973048879693772787279691322876582837997108043070\
7126532158069394711304317496372274059758359616075896957399667249347440021895905\
2800000000000000000000000000*x^2*1206827253911079838360827633352771130740818032\
4395937519596511174290895403023563017864456107096541459805677844022879573116834\
7721993789460199082121322357962731163190^(1/2)-37351848289482342770069943785738\
9208057020977984861164796596903350876610578528908300946865060305079714967321476\
397/580378533407483543823374007162071809773382712369000051644512706622720663135\
2807816815694987527624670820922524493819277779404997945544396648769506484794856\
3165539690243266969600000000000000000000000000*x^3*1206827253911079838360827633\
3527711307408180324395937519596511174290895403023563017864456107096541459805677\
8440228795731168347721993789460199082121322357962731163190^(1/2))^2+1712401/
2500*(1/11150642973545419314833041719688196330220077702105694188333402838164798\
5032356425717315745188388094380707006319753047187540842784083295600640000000000\
0000000000000000000000000000*x^2*3804552547914656709403117693953147358987744504\
1721098788421094882370087523405634477743016423930654957039020335896695052491894\
0664153319995771360898725661890547782860349243324064815856723291700325176123136\
9333157515967566190929875184803378421238201055022638095762445103153194962942979\
9247751089629049239584211480236655818049011454665400444198451467^(1/2)-72844867\
1364535908448549102073434152964708368990675607971266768415592792405644024131277\
5921044224023165469040638527380404199259726514697873115994100250221881957880574\
57759475894522153031937813111889807491400928993/1395917950432328620251935896205\
7977391173513958861853890351343591350349823005014651108770377596735114517077516\
5296784912759663887170878917591708436944254058429138729301436092227865771278547\
3065637597027012042707776318182953712471076413150366545395267127234584890376555\
8844184690720455769619282554666510082456947230211312222088656325850269159255781\
146624000000000000000000000000000000000000000000*x^3*38045525479146567094031176\
9395314735898774450417210987884210948823700875234056344777430164239306549570390\
2033589669505249189406641533199957713608987256618905477828603492433240648158567\
2329170032517612313693331575159675661909298751848033784212382010550226380957624\
4510315319496294297992477510896290492395842114802366558180490114546654004441984\
51467^(1/2))^2+6756622632410870253958748810842037846683187960705974056246488086\
8784910848575034153493846502643843051407038793201931448394273834321084278543825\
3666280594475921190761346486774125994904108147658369599253276047523653466004913\
1504450191485480341757394691232283487135292136636962084020310186142394534944411\
3169/13696057070445252288215072830214956610847478828453976817981232640737374310\
1883707174216757013374979807720641013641027594895059854397051378626104762587266\
9591762628898620015134742814543998823002404101929983796064256257522324365437448\
3030297139567279472640000000000000000000000000000000000000000000000000000000000\
00000*x^6, 29723643423498059848219461606596385801/
202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 80 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 81 Test 1 - Weifeng
>> input polynomial
-x^2+27569/100
>> basis
[(x-104/25)*(x-272/25)*(x-251/20)*(x-143/10)*(x-153/10), (-x+104/25)*(x-272/25)*(x-251/20)*(x-143/10)*(x-153/10)]
>> Time taken
1.647000
">> Sums of squares multipliers", [-x^2+27569/100-515/771906*x^2*(x-104/25)*(x-\
272/25)*(x-251/20)*(x-143/10)*(x-153/10)-515/771906*(x+1)^2*(-x+104/25)*(x-272/
25)*(x-251/20)*(x-143/10)*(x-153/10), 515/771906*x^2, 515/771906*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 81 Test 1 - Weifeng

>> Test
Batch: 81 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+27569/100
>> basis
[(x-104/25)*(x-272/25)*(x-251/20)*(x-143/10)*(x-153/10), (-x+104/25)*(x-272/25)*(x-251/20)*(x-143/10)*(x-153/10)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -6.978012
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 81 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 81 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+27569/100
>> basis
[(x-104/25)*(x-272/25)*(x-251/20)*(x-143/10)*(x-153/10), (-x+104/25)*(x-272/25)*(x-251/20)*(x-143/10)*(x-153/10), -x^2+26569/100]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.036274
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13807
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [27569/100*(1/180143985094819840000*
3224016701025493745029784828346337183815^(1/2)-\
278289573433282250385211726676413397159/
2973630548659132301162519221737344681494214446747591114752000*x*
3224016701025493745029784828346337183815^(1/2)-\
146262958212711159471479600213125438149618922831470292043798813891032969/114524\
7657727221284211838977747739137021554607186247680000000000000000000000000000000\
0000000000*x^2*3224016701025493745029784828346337183815^(1/2)+
8916025604372468789547990386947972247985987510302153694654425028257/27694092585\
3246105943109767673289839317483310284800000000000000000000000000000000000000000\
00*x^3*3224016701025493745029784828346337183815^(1/2))^2+27569/100*(1/
521214934005633153347965828094971056137809741226096721920000000000000000000000*
x*18706610933743407055317749976871061792607297027418521686343399065271235795803\
07172272140672379635084536325436271349488292300148667783458856794340708835334^(
1/2)+35207631526971440128452274430210948224883506615748409121831061549315385233\
1026741233003840811172361317500697407/24941571522208713430030179622504769687677\
5972513377258365395381814059385353635014401229627126537286832272585023696349657\
466129765590669450478392948821241502495821266944000000000000000000000000*x^2*18\
7066109337434070553177499768710617926072970274185216863433990652712357958030717\
2272140672379635084536325436271349488292300148667783458856794340708835334^(1/2)
-710748134230722243167372925344992471489698462115418957987378358776065466739133\
50633771523155203290713971576339/9778761482020722318841758148956613890872907414\
5684322140349517948386863696348209949789087287531274108372435509711716842501461\
39825593288815754436771305279828306952192000000000000000000000000*x^3*187066109\
3374340705531774997687106179260729702741852168634339906527123579580307172272140\
672379635084536325436271349488292300148667783458856794340708835334^(1/2))^2+
27569/100*(1/244078135663975463024296724331065604432231044801135225410760598482\
5425531969638645152836798504908018368723377111264881301289697280000000000000000\
0000000000000000000000000*x^2*1915865119870311247116028391684517919578224937361\
9778758043543005246060674053062551391158354050922442807337779095991640162410512\
2615620237446287737429944399046735806031415495269767046480149253613914202119214\
8669257119333730580902984781907750421839980220197248548441377832088247608192490\
31693608165695309476835767853258673349117174435^(1/2)-5224211799922785902294637\
6083602465297289102785962669142321866049440113855640290286109231565413788514361\
1713153059519432708231471608054847900167881898908065817822309522460561497087336\
7884221945803143420853037773/72588420969947184056936766453524314280265167479102\
1341680408119324064613340445988052310136979900436205562585273979823364295659522\
5583758719449188819781745312234686036837527560215396054986655999740394728287464\
0641140162898235409761228721307616160841740623870422580745435143748832975984276\
4132842620118453637917898270693649345548221900704972800000000000000000000000000\
00000000000000000*x^3*191586511987031124711602839168451791957822493736197787580\
4354300524606067405306255139115835405092244280733777909599164016241051226156202\
3744628773742994439904673580603141549526976704648014925361391420211921486692571\
1933373058090298478190775042183998022019724854844137783208824760819249031693608\
165695309476835767853258673349117174435^(1/2))^2+205171710379567157270408454362\
1509207933457171398870266346619073907916522148384409580907774758230369406362902\
9960593535639813158559782845286227445491976727767685426224996746175572558731462\
9829190803562587630690331410518003239543370008405595993848291579399953269250023\
80241677858919344683613034129/8979926749773920451975077493113827794248784124953\
3231970334592407879557290435788451491852729630028734860076219364852033977550300\
2486917432828674413657047416068536898396765839971941679054371124566935119692239\
3743709385570050810489522684710443192156160000000000000000000000000000000000000\
00000000000000000*x^6, 82956780240382550839074759761243409/
5192296858534827628530496329220096]
>> Degree size
6
>> Succeeds RealCertify Batch: 81 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 82 Test 1 - Weifeng
>> input polynomial
-x^2+884329/2500
>> basis
[(x-277/100)*(x-147/50)*(x-523/50)*(x-827/50)*(x-877/50), -(x-277/100)*(x-147/50)*(x-523/50)*(x-827/50)*(x-877/50)]
>> Time taken
1.687000
">> Sums of squares multipliers", [-x^2+884329/2500-559/350903*x^2*(x-277/100)*
(x-147/50)*(x-523/50)*(x-827/50)*(x-877/50)+559/350903*(x+1)^2*(x-277/100)*(x-\
147/50)*(x-523/50)*(x-827/50)*(x-877/50), 559/350903*x^2, 559/350903*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 82 Test 1 - Weifeng

>> Test
Batch: 82 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+884329/2500
>> basis
[(x-277/100)*(x-147/50)*(x-523/50)*(x-827/50)*(x-877/50), -(x-277/100)*(x-147/50)*(x-523/50)*(x-827/50)*(x-877/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -7.202806
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 82 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 82 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+884329/2500
>> basis
[(x-277/100)*(x-147/50)*(x-523/50)*(x-827/50)*(x-877/50), -(x-277/100)*(x-147/50)*(x-523/50)*(x-827/50)*(x-877/50), -x^2+859329/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.028275
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 15012
time= 0.116000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [884329/2500*(1/900719925474099200000*
246499578712952958741168506874098416710295^(1/2)-\
254587564403311897653948731262355601203/
20467012721855594380796888243057369922729430767464611034693632000*x*
246499578712952958741168506874098416710295^(1/2)-366559242635149760592660833471\
209854453654361519311454913573235254675144607998603/125660792029634938736647915\
333680416920636209494451163716481187840000000000000000000000000000000000000000*
x^2*246499578712952958741168506874098416710295^(1/2)-\
41963924678722891388437764588197871955265325138302812086377639083631/6671486843\
9822066885222782241833205082968815868837888000000000000000000000000000000000000\
000000*x^3*246499578712952958741168506874098416710295^(1/2))^2+884329/2500*(3/
3452219561253707108149668003672538926391104656440966036167065600000000000000000\
00000*x*56981411962901806783163064939702342058734387259495173397383914287933559\
0015086196400702244353281414406188893366684273744313313872767750416619997780213\
03276335963286^(1/2)+1958835979006923597313207639443492321037436729646058379444\
930400088019985213135786807570911619764300649423283393475987616223/322904532000\
2339183918724628750176445672414972192171174610053958322562134479719444973655838\
9546301369284975060147166675081636803997279412547786138970773436890293317373431\
23004921764380672000000000000000000000000*x^2*569814119629018067831630649397023\
4205873438725949517339738391428793355900150861964007022443532814144061888933666\
8427374431331387276775041661999778021303276335963286^(1/2)-67697504097477590082\
6113005262888897233094200638396932944118590258151844843900113785109856012568785\
63514210948886899/2674370542791300827488097914009246715781373006778091493130778\
3799986009882517007418749858199514527340171778651249959678016675022590794695455\
13949107626737430004308442968462721024000000000000000000000000*x^3*569814119629\
0180678316306493970234205873438725949517339738391428793355900150861964007022443\
5328141440618889336668427374431331387276775041661999778021303276335963286^(1/2)
)^2+884329/2500*(1/178509292146589761175730366324136443047309034600386522670519\
9116371946254529185348428115098897899489495655851908863740482142267197338132507\
663448145920000000000000000000000000000000000000000*x^2*71716651929889267247260\
4739649815870067324372175605764138160739667365162613234888143655264846279216967\
4522896403081825240469181741168942719807328480343266505349041484298914892121301\
2664659970244161858390736806794421566283665744172866605512115620319220404862153\
6891665263170854319925418092444228281057570502479172607340805523771456348664990\
078446406003932942933368040158430^(1/2)-977402008863922375400878396283945197048\
6455473800427638718644097873807349530340262213186843002628088165889563821276771\
8185236868757799961890212053382897342265674200098898308483681638779759273184057\
713499391401189623737595618214299/809914096734211838815628090346894794982555598\
4051958132182671815374467013063740873752313354108095216863449247798002109048256\
5669465232771084826549477371406251377277241608901131103131104219081832043014636\
5457630438873861238989246843229316637357572961557303741427338013616965854910974\
4622100426385222912591994395164973450794425402332941069644894516823146668879776\
6692125992363753472000000000000000000000000000000000000000000*x^3*7171665192988\
9267247260473964981587006732437217560576413816073966736516261323488814365526484\
6279216967452289640308182524046918174116894271980732848034326650534904148429891\
4892121301266465997024416185839073680679442156628366574417286660551211562031922\
0404862153689166526317085431992541809244422828105757050247917260734080552377145\
6348664990078446406003932942933368040158430^(1/2))^2+23969299685915049530429786\
0384822614591101655795081564651547729156612737339051563303436100458166094939201\
6428298968283866497268482304842060667454511930332726514568874929018297276195594\
3853148526588609296677586822149380537694889618081948387991420436491436269525846\
9794481151217512049055306304780991600231952629271379323627/24374593041272929172\
8139001562192202075855138115492731911798673640902494125731233461527018811403555\
6753064724215367080043413712724440423235090826166167078612142697218779674052319\
6814954474289851834571880328757408560980799873014939510383474033739396966117095\
931282367237324800000000000000000000000000000000000000000000000000000000*x^6, 
422264241702105338345948527641470209/3169126500570573503741758013440000]
>> Degree size
6
>> Succeeds RealCertify Batch: 82 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 83 Test 1 - Weifeng
>> input polynomial
-x^2+862129/10000
>> basis
[(x-47/25)*(x-351/100)*(x-529/100)*(x-673/100)*(x-773/100), (-x+47/25)*(x-351/100)*(x-529/100)*(x-673/100)*(x-773/100)]
>> Time taken
1.266000
">> Sums of squares multipliers", [-x^2+862129/10000-3877/175426*x^2*(x-47/25)*
(x-351/100)*(x-529/100)*(x-673/100)*(x-773/100)-3877/175426*(x+1)^2*(-x+47/25)*
(x-351/100)*(x-529/100)*(x-673/100)*(x-773/100), 3877/175426*x^2, 3877/175426*(
x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 83 Test 1 - Weifeng

>> Test
Batch: 83 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+862129/10000
>> basis
[(x-47/25)*(x-351/100)*(x-529/100)*(x-673/100)*(x-773/100), (-x+47/25)*(x-351/100)*(x-529/100)*(x-673/100)*(x-773/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -13.490631
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 83 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 83 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+862129/10000
>> basis
[(x-47/25)*(x-351/100)*(x-529/100)*(x-673/100)*(x-773/100), (-x+47/25)*(x-351/100)*(x-529/100)*(x-673/100)*(x-773/100), -x^2+762129/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.115995
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14209
time= 0.117000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [862129/10000*(1/900719925474099200000*
269734919819000849618190910575821735209333^(1/2)+
11920539551631201390087126199647799850059/
2487865516821837501862764986499486477336462367389507664216064000*x*
269734919819000849618190910575821735209333^(1/2)-\
60570670963741724961030824457656175424383009025023265997637745647199700391/6392\
1839301350532282693496794873946226227491031144525201408000000000000000000000000\
00000000000000*x^2*269734919819000849618190910575821735209333^(1/2)-\
5926031399516327762126610545312293187109976583250252755325460207399/92680212736\
9432710805075238086091904840045559178854400000000000000000000000000000000000000\
00*x^3*269734919819000849618190910575821735209333^(1/2))^2+862129/10000*(1/8181\
9954305728681321847675897438651169571188519864992257802240000000000000000000000
*x*1221406377268940819185395733382810931954714056264905102020353411122441586695\
3390419016515968710761473044570732934673839603412612599328728902394877380476456\
1358889585^(1/2)-23498067425210297917077455365089821717272022789779561265413640\
2491954783150735031807240468530376772620639879560028259/55007253055363493291210\
5616645513113899817052373177736963918284941733843857763718985109183602092721412\
3296158993683499767395178890713832325281058592084619742582837990654079506841600\
0000000000000000000000*x^2*1221406377268940819185395733382810931954714056264905\
1020203534111224415866953390419016515968710761473044570732934673839603412612599\
3287289023948773804764561358889585^(1/2)-10232631238585568291109997002595531601\
685242631535284149031492132724821970350002057016208202916868184336857062993/638\
0397023573443567170407405916204116783185026523614644257626004249176676086336487\
7542593231650103570617577636220142226597123851427267060095195250270952719866549\
414190383104000000000000000000000000*x^3*12214063772689408191853957333828109319\
5471405626490510202035341112244158669533904190165159687107614730445707329346738\
396034126125993287289023948773804764561358889585^(1/2))^2+862129/10000*(1/21461\
7481581862567217000873183834256836059322053837659960912478718967437377628275844\
3766594573215828425442050883776258491692391133339870822400000000000000000000000\
000000000000000*x^2*59995452465443045083316479875925923827703970068324970057060\
5100090252496615997627836662102711581881469181488083313122073141810113609024804\
2804659500622109346711463956835166297411601724491268192535177953228932786455880\
1484121029515945651246305597302380071138327237948473041222487806924302806222373\
502520004256609994153653817921621915234680047856898143^(1/2)-373522166777792360\
2947850508575525730787753271232873244542386918398678406649531368379698379346487\
9705570988727058378010467495787499621695113471511224285975656037261652361215424\
67658051984809756470959560570791511163/2391090022470423324430546948634777213698\
4204471750156358990744483189324301565640241514139632921171670005606336930492607\
3179284715692691563776409522673174444183287307053954059405070367498758994299030\
6150347197128857528929830743056566590685303978232821011505250550478034742783859\
4455400399977295845006658668655657862497764891043350108135542126115149116866560\
000000000000000000000000000000000000000*x^3*59995452465443045083316479875925923\
8277039700683249700570605100090252496615997627836662102711581881469181488083313\
1220731418101136090248042804659500622109346711463956835166297411601724491268192\
5351779532289327864558801484121029515945651246305597302380071138327237948473041\
222487806924302806222373502520004256609994153653817921621915234680047856898143^
(1/2))^2+2802409226934618314697150341741078786837277984015753417464105116244073\
4838565286868705491576272881109854080163569473166974907252432919056650895351270\
5922529752529881054737357160852491082248178292183197031169388674088274798846432\
780079139401282629916108483211842499524828694170466125339119553807707681/487037\
7726225900811827360058964860731244248043106482379255775834487357532939260842281\
9540421620173989889103529240624935259616429115105800045135349124461465924339821\
2644709076521593514012124969961373863742214469757309412214746722611740254129058\
0648919040000000000000000000000000000000000000000000000000000000*x^6, 
2096562369065693993509574241959876641/129807421463370690713262408230502400]
>> Degree size
6
>> Succeeds RealCertify Batch: 83 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 84 Test 1 - Weifeng
>> input polynomial
-x^2+3168529/2500
>> basis
[(x-839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50), (-x+839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50)]
>> Time taken
1.770000
">> Sums of squares multipliers", [-x^2+3168529/2500-252/2224235*x^2*(x-839/100
)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50)-252/2224235*(x+1)^2*(-x+839/100)*
(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50), 252/2224235*x^2, 252/2224235*(x+1)
^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 84 Test 1 - Weifeng

>> Test
Batch: 84 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+3168529/2500
>> basis
[(x-839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50), (-x+839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -0.254329
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 84 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 84 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+3168529/2500
>> basis
[(x-839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50), (-x+839/100)*(x-338/25)*(x-84/5)*(x-1673/50)*(x-1723/50), -x^2+3143529/2500]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.958261
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 84 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 85 Test 1 - Weifeng
>> input polynomial
-x^2+5893649/10000
>> basis
[(x-213/100)*(x-47/10)*(x-201/20)*(x-667/50)*(x-2207/100), -(x-213/100)*(x-47/10)*(x-201/20)*(x-667/50)*(x-2207/100)]
>> Time taken
1.569000
">> Sums of squares multipliers", [-x^2+5893649/10000-275/4657443*x^2*(x-213/
100)*(x-47/10)*(x-201/20)*(x-667/50)*(x-2207/100)+275/4657443*(x+1)^2*(x-213/
100)*(x-47/10)*(x-201/20)*(x-667/50)*(x-2207/100), 275/4657443*x^2, 275/4657443
*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 85 Test 1 - Weifeng

>> Test
Batch: 85 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+5893649/10000
>> basis
[(x-213/100)*(x-47/10)*(x-201/20)*(x-667/50)*(x-2207/100), -(x-213/100)*(x-47/10)*(x-201/20)*(x-667/50)*(x-2207/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -3.884888
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 85 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 85 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+5893649/10000
>> basis
[(x-213/100)*(x-47/10)*(x-201/20)*(x-667/50)*(x-2207/100), -(x-213/100)*(x-47/10)*(x-201/20)*(x-667/50)*(x-2207/100), -x^2+5793649/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.016969
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14452
time= 0.120000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [5893649/10000*(1/36028797018963968000*
391103991052879294918870273116878829115^(1/2)-\
83454457852268577544560528940526718657/
2308670473330833482241506966923936245894639620950315551948800*x*
391103991052879294918870273116878829115^(1/2)-\
13746500735582121402707243405367442097418345413889128873373511053670699918213/
3041288277464164813260549745135968163240111673036412813312000000000000000000000\
00000000000000000000*x^2*391103991052879294918870273116878829115^(1/2)+
166758126334569026627849106814690783732498708302532625153918186308917/268764616\
1451509085299338874085732090629916196864000000000000000000000000000000000000000\
000000*x^3*391103991052879294918870273116878829115^(1/2))^2+5893649/10000*(1/38\
9284899515413096097350367377403924894734294148660840103936000000000000000000000\
0*x*431726538577581672448277247562635691293029949376045294262790485950342797473\
1233346553718294662664267135745600308898983027633373156796472983497881020467273\
8376690^(1/2)+50040734043266664727771223761692146084387072074951193119279152406\
780405448151987562619547892152444116562866245495869/207394504348154761198606644\
0779807664594285974177161487041104799838186012911736530742966450908865845077131\
8084517091996454373149501340226628796906851798213064098144039705614745600000000\
000000000000000000*x^2*43172653857758167244827724756263569129302994937604529426\
2790485950342797473123334655371829466266426713574560030889898302763337315679647\
29834978810204672738376690^(1/2)-1170060613326415218935209390633518984602053370\
070425193619704645583960682255615130060799896537694522449141977189/263921177289\
5129501247104859120140592773194468542105434648090851488847587774233582721374887\
0719131455026399711601113329519250064138541623316213232479315717305312223428608\
00000000000000000000000000*x^3*431726538577581672448277247562635691293029949376\
0452942627904859503427974731233346553718294662664267135745600308898983027633373\
1567964729834978810204672738376690^(1/2))^2+5893649/10000*(1/143064073928650966\
7782345452897903271036726666949903660393652449970368330474644938724193081017966\
6350372418250324889995021999934855617320058880000000000000000000000000000000000\
0000000*x^2*9782865209297228943039373537646177317629708588813746246183820984948\
0982728799839636237596531279993286860171141881800881213078879201612975198053361\
5261529916874487004121097625900305278811784648614731554218229481764472164438856\
7965839238296522859237889746878382103853326016550391524138826119607024438669985\
20382719807941199963219595444469920878681752257356690^(1/2)-7537045953132569433\
7644803295397606905033631602678168293079629124304012637993657231190958207396313\
5741930698892697059861891899226484087554938480232434834149352342795885266650050\
780974184383562765280056954902251628011629/114067427185046937009730321393807215\
5939699907530030419187902800039041085464400471945811536689723089206470169036114\
1240203321360838129649564808445446756445739884462666784890723869178443202917052\
4274485411304174271699894471957162917717763449072534704792760875631990820521064\
3793312623044982761416686632280794115610475924536376842140494039979436751855303\
855702016000000000000000000000000000000000000000000000*x^3*97828652092972289430\
3937353764617731762970858881374624618382098494809827287998396362375965312799932\
8686017114188180088121307887920161297519805336152615299168744870041210976259003\
0527881178464861473155421822948176447216443885679658392382965228592378897468783\
8210385332601655039152413882611960702443866998520382719807941199963219595444469\
920878681752257356690^(1/2))^2+200804144972906649557792434426383894629309822310\
8538200884480387837431673650450007792719754607546456518493516314448067920500680\
2913605346330629689980967246521413132904693967924891824828561994487304431028781\
5521632295840071249468488834105389688819410490095498563252833777664086522714173\
574986402029197191602561/167535722619700360797427654723959417837954751402986361\
7209151060589537285549268841025139608049104187572889564677948791682498526374854\
1660328070244133329601149765950574655542722852101522383908368721202201635976919\
5744927347225917499497162328944228131510681600000000000000000000000000000000000\
0000000000000000000000000000*x^6, 6394037932217792728338634257499526921/
32451855365842672678315602057625600]
>> Degree size
6
>> Succeeds RealCertify Batch: 85 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 86 Test 1 - Weifeng
>> input polynomial
-x^2+4539449/10000
>> basis
[(x-473/100)*(x-477/100)*(x-129/10)*(x-1907/100)*(x-2007/100), (-x+473/100)*(x-477/100)*(x-129/10)*(x-1907/100)*(x-2007/100)]
>> Time taken
1.811000
">> Sums of squares multipliers", [-x^2+4539449/10000-856/742363*x^2*(x-473/100
)*(x-477/100)*(x-129/10)*(x-1907/100)*(x-2007/100)-856/742363*(x+1)^2*(-x+473/
100)*(x-477/100)*(x-129/10)*(x-1907/100)*(x-2007/100), 856/742363*x^2, 856/
742363*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 86 Test 1 - Weifeng

>> Test
Batch: 86 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+4539449/10000
>> basis
[(x-473/100)*(x-477/100)*(x-129/10)*(x-1907/100)*(x-2007/100), (-x+473/100)*(x-477/100)*(x-129/10)*(x-1907/100)*(x-2007/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -4.325133
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 86 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 86 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+4539449/10000
>> basis
[(x-473/100)*(x-477/100)*(x-129/10)*(x-1907/100)*(x-2007/100), (-x+473/100)*(x-477/100)*(x-129/10)*(x-1907/100)*(x-2007/100), -x^2+4439449/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.022033
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14345
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [4539449/10000*(1/90071992547409920000*
2993331998395802209310290474595727400479^(1/2)-\
120147732753258023432798543743270649543/
4247479177080994882258550545799198334429884302667104124928000*x*
2993331998395802209310290474595727400479^(1/2)-\
439043528662903449148939523319522354189942593628923670423569388873127200467/186\
7531212702206423763618135567822501364218073205295808512000000000000000000000000\
0000000000000000*x^2*2993331998395802209310290474595727400479^(1/2)+
133643243303702687479480037187114119097053355829200906558565166841263/210637013\
6339299525045820506873686918166675412547010560000000000000000000000000000000000\
000000*x^3*2993331998395802209310290474595727400479^(1/2))^2+4539449/10000*(1/
3677599926552037265257586482348942771917229436465813284454400000000000000000000\
00*x*42554513580637052130029394106875470116346341325173535251695917213784796332\
8408720809740547822449779277312318242568971768440728168782839731212971202367193\
239174^(1/2)+542203548998339834635528889625932936094187997445285002334742261835\
47876364376770271650936757551038401665696909953/1533187932037517915670013120517\
8218860035837085687365851633646239842913485351322500508934292520688977484499515\
3829281715017762201348720486489030748287849117405854705155120824320000000000000\
000000000*x^2*42554513580637052130029394106875470116346341325173535251695917213\
7847963328408720809740547822449779277312318242568971768440728168782839731212971\
202367193239174^(1/2)-707426826195846502614809977606671043774062766508814518609\
3283653938637356991692516019353993927095871753660498683/11528450864164485936847\
5001805303507927039141943907455376727100209732821531128221659509400924658370894\
3833455246229108982009259230808921069236725178516581316540070671417344000000000\
000000000000000*x^3*42554513580637052130029394106875470116346341325173535251695\
9172137847963328408720809740547822449779277312318242568971768440728168782839731\
212971202367193239174^(1/2))^2+4539449/10000*(1/4496883976547823583588349218742\
7768417590392402925862024394262826081678546190500366309442645097690422901239826\
8755017546604024235630012661760000000000000000000000000000000000000000*x^2*2301\
3429385679415868724994500065678698402420077741557169967455503945795809019823768\
8367428070313768419682879771776098459282600788858932825222866551710933848567000\
4030430037229960492911603868283285078713873621949843557085731979187127834486144\
8574838243489721016987256723620110830315837589563895115440990508257962117702127\
693716199433537144208480825832251^(1/2)-231878770549488819135430290111268371444\
4965523599653176791054344173003736375349060418398292236616454323640617121281446\
4273871820604504815596197661453381984348885796432742795162449075134207494028438\
5406383676295205939339/28539606901042130879112323725239554851239467128350128755\
2155405245641170955191211325971218524264672832040619561668032390237326428566925\
7681826685271081107691073056572537770038749305305276798999762250224077545551681\
9821738235706071254556318492153447197616061448288613255198616586556932086565251\
0079280083547010671979162488418987672057629050831078935007979162828800000000000\
00000000000000000000000000000*x^3*230134293856794158687249945000656786984024200\
7774155716996745550394579580901982376883674280703137684196828797717760984592826\
0078885893282522286655171093384856700040304300372299604929116038682832850787138\
7362194984355708573197918712783448614485748382434897210169872567236201108303158\
37589563895115440990508257962117702127693716199433537144208480825832251^(1/2))^
2+31848339298846986351511629835438245314274107598321515334984188111672204276821\
2075621389649804035605737165424538594184299244801794740047865854927676149310773\
0429946240032657214731337772219565125272586931827175169547683517788826464497002\
0420135957832437183540837657213306430924014249624718523421321076872056987/38294\
7223687057176822907640429373596662831241971596957191324941691105402170812657144\
6921761536010729813933266360988208807946114458121953318276715504398244598794876\
0880290733489133725942344087421559478856519595283280863574836569084171778107199\
02934132832271985541120000000000000000000000000000000000000000000000000000*x^6,
113134171023392548276688030841456092961/202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 86 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 87 Test 1 - Weifeng
>> input polynomial
-x^2+384689/400
>> basis
[(x-303/50)*(x-401/50)*(x-469/50)*(x-1249/100)*(x-2007/100)*(x-577/20)*(x-597/20), -(x-303/50)*(x-401/50)*(x-469/50)*(x-1249/100)*(x-2007/100)*(x-577/20)*(x-597/20)]
>> Time taken
2.398000
">> Sums of squares multipliers", [-x^2+384689/400-53/25853498*x^2*(x-303/50)*(
x-401/50)*(x-469/50)*(x-1249/100)*(x-2007/100)*(x-577/20)*(x-597/20)+53/
25853498*(x+1)^2*(x-303/50)*(x-401/50)*(x-469/50)*(x-1249/100)*(x-2007/100)*(x-\
577/20)*(x-597/20), 53/25853498*x^2, 53/25853498*(x+1)^2]
>> Degree size
9
>> Succeeds Weifeng Batch: 87 Test 1 - Weifeng

>> Test
Batch: 87 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+384689/400
>> basis
[(x-303/50)*(x-401/50)*(x-469/50)*(x-1249/100)*(x-2007/100)*(x-577/20)*(x-597/20), -(x-303/50)*(x-401/50)*(x-469/50)*(x-1249/100)*(x-2007/100)*(x-577/20)*(x-597/20)]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.717955
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 87 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 87 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+384689/400
>> basis
[(x-303/50)*(x-401/50)*(x-469/50)*(x-1249/100)*(x-2007/100)*(x-577/20)*(x-597/20), -(x-303/50)*(x-401/50)*(x-469/50)*(x-1249/100)*(x-2007/100)*(x-577/20)*(x-597/20), -x^2+380689/400]
[x]
Polynomial system with 1 variables and degree at most 8
Size of monomial basis = 5
Number of moment variables = 9
SDPA starts...
Numerical SDP ended
Lower bound: 0.983692
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 87 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 88 Test 1 - Weifeng
>> input polynomial
-x^2+3976961/10000
>> basis
[(x-239/25)*(x-1237/100)*(x-1241/100)*(x-371/25)*(x-1769/100), (-x+239/25)*(x-1237/100)*(x-1241/100)*(x-371/25)*(x-1769/100)]
>> Time taken
1.521000
">> Sums of squares multipliers", [-x^2+3976961/10000-408/1716613*x^2*(x-239/25
)*(x-1237/100)*(x-1241/100)*(x-371/25)*(x-1769/100)-408/1716613*(x+1)^2*(-x+239
/25)*(x-1237/100)*(x-1241/100)*(x-371/25)*(x-1769/100), 408/1716613*x^2, 408/
1716613*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 88 Test 1 - Weifeng

>> Test
Batch: 88 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+3976961/10000
>> basis
[(x-239/25)*(x-1237/100)*(x-1241/100)*(x-371/25)*(x-1769/100), (-x+239/25)*(x-1237/100)*(x-1241/100)*(x-371/25)*(x-1769/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.506517
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 88 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 88 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+3976961/10000
>> basis
[(x-239/25)*(x-1237/100)*(x-1241/100)*(x-371/25)*(x-1769/100), (-x+239/25)*(x-1237/100)*(x-1241/100)*(x-371/25)*(x-1769/100), -x^2+3876961/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.025146
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14121
time= 0.126000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [3976961/10000*(1/450359962737049600000*
81724755909246613256552535549451600972355^(1/2)-\
7175991468481820562746460233964185757/
588888928415724461565720780210422653447328697064701820928000*x*
81724755909246613256552535549451600972355^(1/2)-\
702698635602181490164183321415736997891112127374442975997443603262012823/130868\
7944882248325492928072690827410450135422352962355200000000000000000000000000000\
00000000000*x^2*81724755909246613256552535549451600972355^(1/2)+
35282405320119479446633199480888223227618088526890642952624743538709/1123216492\
4921502333940902332504704541155408803266560000000000000000000000000000000000000\
00000*x^3*81724755909246613256552535549451600972355^(1/2))^2+3976961/10000*(1/
2144154328895075656487613354296651629281501875983093522759680000000000000000000\
000*x*1890805085410048333043416233805998227366664314117740228251451347153779413\
9561444090179427521901639969367049596487555182618053838249498871439463371481140\
536418326^(1/2)+194650939255696203118368190757144125504288620827987327416041257\
415126695943910845793371620529880250382590314920371/354809544920122188986265933\
0239038311704732381892210578233123930356940916103440505235182539181036553161841\
9162884361849117015580977341635503239386148109324428512305727185879040000000000\
00000000000000*x^2*189080508541004833304341623380599822736666431411774022825145\
1347153779413956144409017942752190163996936704959648755518261805383824949887143\
9463371481140536418326^(1/2)-65979725085862548413640543712503453663982978207500\
67017504672015729116330959534418381968414710006397889528855359/5481446370706755\
0552585702814256039692403007608939946337578652212362768929691637569905667972927\
7923083137016774269396156952365712222943620849947456095203571995751545936281600\
0000000000000000000000*x^3*1890805085410048333043416233805998227366664314117740\
2282514513471537794139561444090179427521901639969367049596487555182618053838249\
498871439463371481140536418326^(1/2))^2+3976961/10000*(1/7456387218211746564026\
6412249915907986173577977288408650149712361350019349924329531796284425450906099\
78056543207637886992635182438154240000000000000000000000000000000000000000*x^2*
8837983137600995438039388318898532934378780749234341678506159744972071946000830\
8952577775078484516176378566607285025094202973843889907092656372328337422091687\
4564235187039215542646968746719644031147850956499332700044362255132583134777789\
5240044403603245713177118528364618952681432523050097029885994050738480808882139\
880916134299967885889736270^(1/2)-963241873716096751386104500895940920562517170\
1461650786371308693243102051156119509507758723774363068236018990943495533643677\
6096532251563216439927117892451014343761683564920083346084196203230102863542466\
73318866427/1036018521623253625350335221345787931826395939384022696495229582551\
2137059857678266554782634464055496493921802969052140284512388548086246431388844\
9217748146441737202568458118922583993257131059553980319687717240280254654305534\
8844642739099010450036591476078603597436541383244203125625319809568690080065933\
4801731471502090329011684687944858295878864076800000000000000000000000000000000\
0000000000*x^3*8837983137600995438039388318898532934378780749234341678506159744\
9720719460008308952577775078484516176378566607285025094202973843889907092656372\
3283374220916874564235187039215542646968746719644031147850956499332700044362255\
1325831347777895240044403603245713177118528364618952681432523050097029885994050\
738480808882139880916134299967885889736270^(1/2))^2+179034913523139464512009827\
1893509590299281005832574083396664111151255155267327550901563597574088536528595\
7067432708380758954031577620774408871911499484751778689460797524545517750896646\
3940987416016160387562346915175346007217407132264553450732717529655343938796036\
984896987907936760250555859026341457201/806942229611080731844493027013190828160\
0637092585824977819155545883136475515548396038706129435506574934968119053756923\
2269486265957780814598466304304238783975526300309421818018001318826009438835072\
7329219758148004465933700443466231765717899631110760955904000000000000000000000\
00000000000000000000000000000000000*x^6, 182716526074082676935705849114689721/
792281625142643375935439503360000]
>> Degree size
6
>> Succeeds RealCertify Batch: 88 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 89 Test 1 - Weifeng
>> input polynomial
-x^2+4813241/10000
>> basis
[(x-221/100)*(x-611/100)*(x-879/100)*(x-299/25)*(x-1971/100), -(x-221/100)*(x-611/100)*(x-879/100)*(x-299/25)*(x-1971/100)]
>> Time taken
1.811000
">> Sums of squares multipliers", [-x^2+4813241/10000-1094/9367895*x^2*(x-221/
100)*(x-611/100)*(x-879/100)*(x-299/25)*(x-1971/100)+1094/9367895*(x+1)^2*(x-\
221/100)*(x-611/100)*(x-879/100)*(x-299/25)*(x-1971/100), 1094/9367895*x^2, 
1094/9367895*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 89 Test 1 - Weifeng

>> Test
Batch: 89 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+4813241/10000
>> basis
[(x-221/100)*(x-611/100)*(x-879/100)*(x-299/25)*(x-1971/100), -(x-221/100)*(x-611/100)*(x-879/100)*(x-299/25)*(x-1971/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -5.277271
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 89 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 89 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+4813241/10000
>> basis
[(x-221/100)*(x-611/100)*(x-879/100)*(x-299/25)*(x-1971/100), -(x-221/100)*(x-611/100)*(x-879/100)*(x-299/25)*(x-1971/100), -x^2+4713241/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.020777
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14823
time= 0.122000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [4813241/10000*(1/1801439850948198400000*
930165240049621346568357812174683983865399^(1/2)-\
42931341081483563640586155541017736706649/
274536322071295600798853921723556373761789570049138220590956544000*x*
930165240049621346568357812174683983865399^(1/2)-\
51621876507560726330022233543921302217942560078081534085208736970004400140469/
4725728564439171226804291423740192189222227782963099830205808640000000000000000\
0000000000000000000000*x^2*930165240049621346568357812174683983865399^(1/2)+
675329697918570665379298871371443953108199528438588165521051978878477/204545499\
4375225907555624259438785715116482749947445248000000000000000000000000000000000\
000000000*x^3*930165240049621346568357812174683983865399^(1/2))^2+4813241/10000
*(1/756116570310267396288686627798430750275556445274095972832929382400000000000\
00000000000*x*19840186031805685800891200169456383600997333046434453767976003886\
3059163880418298967860314213423013595111101633300479685229701199687276210700719\
49027167448378330175404870^(1/2)+5182892116526436117936309864075151301455624299\
31673790889823720736052288196300342550583082811279161300635092491843504697/1906\
1814276224300004994706073009726309590062556704445349072481073181421437640356092\
0889526223801825577594593959301421610677942240787612380765241768955502315114579\
12275326916832062445977600000000000000000000000000*x^2*198401860318056858008912\
0016945638360099733304643445376797600388630591638804182989678603142134230135951\
1110163330047968522970119968727621070071949027167448378330175404870^(1/2)-26669\
2573541926164646934610168903356346566056470275607179737482413107665550867878709\
289085326601076247401880595225371/950468806006977834934658259896467746847002885\
0849286133350471039292528973790602760388163878291662133398826809260608639077641\
4764581758884260434963778710759813395982999364877837926400000000000000000000000\
00*x^3*198401860318056858008912001694563836009973330464344537679760038863059163\
8804182989678603142134230135951111016333004796852297011996872762107007194902716\
7448378330175404870^(1/2))^2+4813241/10000*(1/722442092642452614255928183087010\
5906230466440270286602946418365336525642222529196464524823384792423272886648563\
0580724404193186339344024046089011200000000000000000000000000000000000000*x^2*
4531176493396484940094622953241588014220136042320297992701344144386567527369746\
2718867520978439798854694151635766978276697744317232459054716605197469495954455\
5252326245128009989340423250876612421854735344862955252817412292082665390018728\
7066837950441367477830419283068951949387531573159535542799497560703400218001762\
44406897888134900868563298030172652253292653454^(1/2)-4702743487635006266889984\
3430145531214718110600570227465120954333719611768063147496137815870253840899110\
9523626475578717328609424419979232762727357857212515596133490861840914385622556\
158654371539586052271482479527593835449/828062628402727704087970451640984654339\
0373704682989727579300961855250273165466936259057488840001394411256309612508220\
0938233816570106973882628908124778980299787703661660208454614473229521337783482\
2169354983801807833221065612833564963367183836485627708992455887731167539256765\
6451370281662532168413389587493242466954940199582155405417857454933898321687882\
85481080061952000000000000000000000000000000000000000000*x^3*453117649339648494\
0094622953241588014220136042320297992701344144386567527369746271886752097843979\
8854694151635766978276697744317232459054716605197469495954455525232624512800998\
9340423250876612421854735344862955252817412292082665390018728706683795044136747\
7830419283068951949387531573159535542799497560703400218001762444068978881349008\
68563298030172652253292653454^(1/2))^2+4236955657282268207715986485739142792518\
6888564122772127287814980064804978587775940010288149267917711874255219485490303\
3797298151334153495906901261552222265399927967583067818036906848446365427618676\
4416652037573968636821948878302318909945658187121128783288088497387197673690428\
4230980998549515429719334224904116647361/51562001806269450642232283230727397117\
4691039776822559850953597569315752225931536193537874218352730915258118208103971\
8459218525111223675861834050372909159651699905841903817444513581888315864049603\
1116248125182594997269994900487407345446048512996264059157789592780800000000000\
0000000000000000000000000000000000000000000000000000*x^6, 
204990607090744501290353945192702426801/3245185536584267267831560205762560000]
>> Degree size
6
>> Succeeds RealCertify Batch: 89 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 90 Test 1 - Weifeng
>> input polynomial
-x^2+6969641/10000
>> basis
[(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100)*(x-2521/100), (-x+35/4)*(x-873/50)*(x-452/25)*(x-2421/100)*(x-2521/100)]
>> Time taken
2.128000
">> Sums of squares multipliers", [-x^2+6969641/10000-3903459593/48577192044532
*x^2*(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100)*(x-2521/100)-3903459593/
48577192044532*(x+1)^2*(-x+35/4)*(x-873/50)*(x-452/25)*(x-2421/100)*(x-2521/100
), 3903459593/48577192044532*x^2, 3903459593/48577192044532*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 90 Test 1 - Weifeng

>> Test
Batch: 90 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+6969641/10000
>> basis
[(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100)*(x-2521/100), (-x+35/4)*(x-873/50)*(x-452/25)*(x-2421/100)*(x-2521/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.119057
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 90 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 90 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+6969641/10000
>> basis
[(x-35/4)*(x-873/50)*(x-452/25)*(x-2421/100)*(x-2521/100), (-x+35/4)*(x-873/50)*(x-452/25)*(x-2421/100)*(x-2521/100), -x^2+6869641/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.881691
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 90 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 91 Test 1 - Weifeng
>> input polynomial
-x^2+226211/625
>> basis
[(x-152/25)*(x-449/50)*(x-709/50)*(x-1567/100)*(x-419/25), (-x+152/25)*(x-449/50)*(x-709/50)*(x-1567/100)*(x-419/25)]
>> Time taken
1.897000
">> Sums of squares multipliers", [-x^2+226211/625-359/753829*x^2*(x-152/25)*(x
-449/50)*(x-709/50)*(x-1567/100)*(x-419/25)-359/753829*(x+1)^2*(-x+152/25)*(x-\
449/50)*(x-709/50)*(x-1567/100)*(x-419/25), 359/753829*x^2, 359/753829*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 91 Test 1 - Weifeng

>> Test
Batch: 91 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+226211/625
>> basis
[(x-152/25)*(x-449/50)*(x-709/50)*(x-1567/100)*(x-419/25), (-x+152/25)*(x-449/50)*(x-709/50)*(x-1567/100)*(x-419/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -2.965469
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 91 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 91 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+226211/625
>> basis
[(x-152/25)*(x-449/50)*(x-709/50)*(x-1567/100)*(x-419/25), (-x+152/25)*(x-449/50)*(x-709/50)*(x-1567/100)*(x-419/25), -x^2+219961/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.027634
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14376
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [226211/625*(1/225179981368524800000*
16313535927165780508122030769790156080863^(1/2)+
472403897226948253609631175381849794659/
481490595497109147290261659716463163514097253124908109319372800*x*
16313535927165780508122030769790156080863^(1/2)-\
128376270762142378970965836254333141539001147366336736447165212494189131529/111\
2922284582647841157341483383051143527243345737170372526080000000000000000000000\
0000000000000000*x^2*16313535927165780508122030769790156080863^(1/2)-\
10229605994549765171645888801521038006857396592343734163031746319633/3736858842\
0958968134772471751122360080022462110105600000000000000000000000000000000000000\
00000*x^3*16313535927165780508122030769790156080863^(1/2))^2+226211/625*(1/3462\
424885368237728045062392747270224306979297848974492303360000000000000000000000*
x*50123151246282292417613428106900612670921189512770308694574640986160001236368\
9745560281528069823806715457654625085717096085186027451126650209629480117861803\
41510^(1/2)+3618228306965262471232475357512966098503738897442309361121379363583\
0401823186233480488132117257841255827109713531654939/18574733234089394274882763\
9348650530751683431319232788025559865164005300960471103649530125953939705765750\
0678068126129013430191831055647581747512206698757390616854959174585417728000000\
000000000000000000000*x^2*50123151246282292417613428106900612670921189512770308\
6945746409861600012363689745560281528069823806715457654625085717096085186027451\
12665020962948011786180341510^(1/2)-1968041470470568442435439584495989633654671\
1673762337928660456147876680359558720948950363322024310809267048556811/23949456\
5985270683720397010505043542544678791636022252855910163547167081972748474791734\
0598080217769324971071712708286933808727032392606363128632384309947669491091781\
9760640000000000000000000000000*x^3*5012315124628229241761342810690061267092118\
9512770308694574640986160001236368974556028152806982380671545765462508571709608\
518602745112665020962948011786180341510^(1/2))^2+226211/625*(1/5619267226367730\
7932743918736199008200812230276849426622080572630365568858695894010977462528368\
1763219149009457534157969506994248583059865600000000000000000000000000000000000\
000*x^2*69354840151794763114490816017144221276657915415381267980672429733953022\
6585964550295631023224364916717434600033462525119456317079834163123426051976789\
4094878901635612244630447164507912200601072485490899973201731893959287084229908\
6622340646451163846363036271040691903815338250419053036776399410566744643964009\
195111943838663045754675326084587340158^(1/2)-201970420315066308477185374877849\
1236521498688525712244212720472769746596622366310340397486107971475678890658322\
7727290363284423848770571697700632382154013191568574484536029232156811913983504\
0431774925382647455300851157/29707219973032987320753475186634937613825866433934\
4410236941662127923088088778306367097348989652735940608712752551378452987496379\
8207140712547621572946601118278356652948227708839634398321361745060565187605951\
4197277488745961929097078109205516318023479756591968242371453864657425574843622\
9332956261304039235653399425637411390632251068853154145877216775372800000000000\
00000000000000000000000000000000*x^3*693548401517947631144908160171442212766579\
1541538126798067242973395302265859645502956310232243649167174346000334625251194\
5631707983416312342605197678940948789016356122446304471645079122006010724854908\
9997320173189395928708422990866223406464511638463630362710406919038153382504190\
53036776399410566744643964009195111943838663045754675326084587340158^(1/2))^2+
6398244343685967399355878336806673555302826397976607216223538770617037920877000\
2408663183790651678091922122492208933312470135948590624027532671369798374479658\
0705631598433795875251321575707744340054251847424458973517365751274039542903368\
3644759381738778559128516980990852855114772244306244611171851181350339441/42637\
1476607280288418717851318781545761927602517648826302420708088474447505757919688\
5161223120557419101341518409421261998245447648761020225754445353740352718282337\
2023396159663414076312520204040397975929403203210910418832416830235935659346642\
9837148160000000000000000000000000000000000000000000000000000000000000000000*x^
6, 6210447388273594869060194460997188419/12676506002282294014967032053760000]
>> Degree size
6
>> Succeeds RealCertify Batch: 91 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 92 Test 1 - Weifeng
>> input polynomial
-x^2+2593241/10000
>> basis
[(x-29/10)*(x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100), -(x-29/10)*(x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100)]
>> Time taken
1.865000
">> Sums of squares multipliers", [-x^2+2593241/10000-607/1494603*x^2*(x-29/10)
*(x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100)+607/1494603*(x+1)^2*(x-29/10)*(
x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100), 607/1494603*x^2, 607/1494603*(x+
1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 92 Test 1 - Weifeng

>> Test
Batch: 92 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+2593241/10000
>> basis
[(x-29/10)*(x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100), -(x-29/10)*(x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -8.079883
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 92 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 92 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+2593241/10000
>> basis
[(x-29/10)*(x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100), -(x-29/10)*(x-437/100)*(x-128/25)*(x-119/20)*(x-1379/100), -x^2+2493241/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.038565
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14366
time= 0.114000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [2593241/10000*(1917/180143985094819840000*
3330589106077252388899327291502815^(1/2)+
659511246965511963522277495928162572501/
31407373905616386398827465386289957831388829494959669248000*x*
3330589106077252388899327291502815^(1/2)-\
4185481771984640103414573444522626753909686881126525943460065801850980504861/10\
9228790913428499002983512951772154693254440470792110080000000000000000000000000\
000000000000000*x^2*3330589106077252388899327291502815^(1/2)-\
36892834881610655207016781942149771449543857943317983439819093932223/4387559449\
1534474862964076995323353211472969728000000000000000000000000000000000000000000\
0*x^3*3330589106077252388899327291502815^(1/2))^2+2593241/10000*(1/155347613743\
5427541375765517536315088970729820029043343360000000000000000000000*x*137773420\
9471307986667327623116056663172936844109545479450281468904832745348041778040308\
9819126972712485954350325642892156451909700250696642611674127931830^(1/2)-33761\
7170589075506829092165179427890307638892884129595705289847297684518340070588769\
37060661755246954807175361530969/8156249961032720882948242472358547236230048079\
5182075534977902282322107762850636175892801301266691852672869880366625461124297\
5998859364931874487857685231931075845867532451840000000000000000000000000*x^2*
1377734209471307986667327623116056663172936844109545479450281468904832745348041\
7780403089819126972712485954350325642892156451909700250696642611674127931830^(1
/2)-473603477471615651492390037889140850134272609482505514530246035313166582595\
500807256663186148090679783623235631/183469738341676966457024553787165142812958\
5608530903120666524103673918577627874582524498652165593951637834949787307267327\
73802871645158655492021213473687415269506416640000000000000000000000000*x^3*137\
7734209471307986667327623116056663172936844109545479450281468904832745348041778\
0403089819126972712485954350325642892156451909700250696642611674127931830^(1/2)
)^2+2593241/10000*(1/4549386295394422797652518061775668464773380091914953236352\
5812277374900297634072132315323592131336863812218790700538972162904378492722348\
0320000000000000000000000000000000000000000*x^2*1153316024030799882494081288780\
9507665716970742219114997479082700131580490009779665737724886942925808104508102\
8091180413861325167288826258088855571721571088658998788632823393474318549336443\
0959520167658059466456533914456793641876458602675670462340430132811358503970241\
2490989724198787101449868307267898663220358247101765053456860364907128060280695\
4890910^(1/2)-57941702861079733641268281249656142648524389212312664347834531072\
3980504511375762107220857127275989688406798846980977372887928796782472150179088\
1604042878527032395502961933523405602236193870165424261206202005645099291/64180\
7200848456413778354810996580851556445071988554154733756830445938360609943665752\
4363633986465208912726060316803703692775408148966944797847322632854954931914059\
4546598352066373762815009619605162447343597423816430809318591667790315631497183\
5433003182158246904469316156974632415404728507976043770816568920602252373350766\
2159782587404160665483722201346605056000000000000000000000000000000000000000000\
0*x^3*1153316024030799882494081288780950766571697074221911499747908270013158049\
0009779665737724886942925808104508102809118041386132516728882625808885557172157\
1088658998788632823393474318549336443095952016765805946645653391445679364187645\
8602675670462340430132811358503970241249098972419878710144986830726789866322035\
82471017650534568603649071280602806954890910^(1/2))^2+7809613149707633737623241\
0978011614779175241006406106960505887126667644030994953516432841547654058459337\
2183028869541081063676553529755219457852242103845786550425303114344282293978661\
9212261811263568912442106553592988532277035004687753758466766061228622610484343\
90392787882323581924779576188017058636706507/2226052760558383553754716062642978\
3280738538147507280417326242090288647675166784734748140103190250680561534284026\
3907848080280609690421320375928725861875294155402848656522557290981828134852654\
4006748048356282873855580982313791138567096011669545339368924774400000000000000\
000000000000000000000000000000000000000000000*x^6, 
21119788225407308282921399043628944441/202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 92 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 93 Test 1 - Weifeng
>> input polynomial
-x^2+355531/625
>> basis
[(x-201/50)*(x-471/100)*(x-1027/100)*(x-447/25)*(x-541/25), (-x+201/50)*(x-471/100)*(x-1027/100)*(x-447/25)*(x-541/25)]
>> Time taken
1.689000
">> Sums of squares multipliers", [-x^2+355531/625-3520/15843273*x^2*(x-201/50)
*(x-471/100)*(x-1027/100)*(x-447/25)*(x-541/25)-3520/15843273*(x+1)^2*(-x+201/
50)*(x-471/100)*(x-1027/100)*(x-447/25)*(x-541/25), 3520/15843273*x^2, 3520/
15843273*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 93 Test 1 - Weifeng

>> Test
Batch: 93 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+355531/625
>> basis
[(x-201/50)*(x-471/100)*(x-1027/100)*(x-447/25)*(x-541/25), (-x+201/50)*(x-471/100)*(x-1027/100)*(x-447/25)*(x-541/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -3.623145
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 93 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 93 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+355531/625
>> basis
[(x-201/50)*(x-471/100)*(x-1027/100)*(x-447/25)*(x-541/25), (-x+201/50)*(x-471/100)*(x-1027/100)*(x-447/25)*(x-541/25), -x^2+349281/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.017581
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14197
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [355531/625*(1/450359962737049600000*
54264697883839621236558345293056103116519^(1/2)-\
6033085622095597301548556641094955042141/
1001006994100357779603277770486598010402097643186875692744704000*x*
54264697883839621236558345293056103116519^(1/2)-\
59036885009142698135174709524356989002343462956666604178749958814870382667/1590\
9478856004519838398677811870158191156454854303886082048000000000000000000000000\
000000000000000*x^2*54264697883839621236558345293056103116519^(1/2)+
8001706254793540658959636662671279608464722455155246649683996809989/74580832876\
2917056384144552414564796091688903560396800000000000000000000000000000000000000\
000*x^3*54264697883839621236558345293056103116519^(1/2))^2+355531/625*(1/203641\
32935685785393150307599193802484680262213508974185021440000000000000000000000*x
*124265101463972918838081662524067965783453670073891526227318270106762433484924\
6631114919151698850476682133195858430782809070650356215415037380090824989927122\
078382^(1/2)+440639722267262460791563798784772514054012452069453177645389226565\
1163920617335341126969431087305471024517644456123/37309350976553687616618797285\
1177515242351864244976927269005195576144703614529384978964197704510167276149637\
6427446959198009176312352399978914369670893288130696568452656710811648000000000\
000000000000000*x^2*12426510146397291883808166252406796578345367007389152622731\
8270106762433484924663111491915169885047668213319585843078280907065035621541503\
7380090824989927122078382^(1/2)-55319881516413539521410924127695151591200508070\
352975169661059686094123605429237351452667246634338324157715314949/629638782157\
7362471900137645119736651527183805265536798799629774778762531782534602816027818\
1848024607049675720442610504254354916657378399839918932597606759422327197110632\
4480000000000000000000000000*x^3*1242651014639729188380816625240679657834536700\
7389152622731827010676243348492466311149191516988504766821331958584307828090706\
50356215415037380090824989927122078382^(1/2))^2+355531/625*(1/20344940017991182\
2072163789313124200164975886861161884065125825164721106070197333590083470075211\
8863532120943724615136082466815144068382720000000000000000000000000000000000000\
00*x^2*218523595324787613891112600763015731240007618485958772969546972116348665\
8554919141995529567058474237991137063562847636238949763905976967066850282825389\
4337590287998353472119271299000450706659741532280652007860460069492684526544128\
8939575130689892498938188461237197862490359517103879966328233862725209755040300\
8697768733097821868811335746083467014^(1/2)-16770105550621452355252061551749439\
8450169941323057234424130853894475757896103521906143379036324349640020586930865\
0606030702684619578016802041031500751926410590872726326928588166188991307238895\
389752357139169758991/185846070668467198377912351787265435997026477782353360870\
4667403460123489808002739478640818037498497562417880804362011230284939671538339\
5278890649102981905676655133224732323939094074242410690496810065694238137168712\
3512202919963669441626030174415732324170002957498298805546707835726288684502710\
5536644203114039090754916113040600551376885319984091863449600000000000000000000\
000000000000000000000*x^3*21852359532478761389111260076301573124000761848595877\
2969546972116348665855491914199552956705847423799113706356284763623894976390597\
6967066850282825389433759028799835347211927129900045070665974153228065200786046\
0069492684526544128893957513068989249893818846123719786249035951710387996632823\
38627252097550403008697768733097821868811335746083467014^(1/2))^2+3725646034169\
2080031597869934746887882764557967774120959824689452025779322835732596512734522\
2161382083615910986548879492969535218029105777593903998209223124932589299127333\
2758983279681346348562781687612447137251302483745673242929262297162089193107272\
5255705346753360175052367067294300625875202504321/14820966001701498158912185422\
2133778508009143419223241132930151768212326378049670604622029366427375028564119\
0055965779206841885365804933934573339936640499852530850714296641374955007928492\
0052460787085638538543261878235644724379151647456695599699465338880000000000000\
0000000000000000000000000000000000000000000*x^6, 
4829005523223744442353916843868019171/50706024009129176059868128215040000]
>> Degree size
6
>> Succeeds RealCertify Batch: 93 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 94 Test 1 - Weifeng
>> input polynomial
-x^2+1585961/10000
>> basis
[(x-113/50)*(x-121/50)*(x-49/20)*(x-1019/100)*(x-1119/100), -(x-113/50)*(x-121/50)*(x-49/20)*(x-1019/100)*(x-1119/100)]
>> Time taken
1.624000
">> Sums of squares multipliers", [-x^2+1585961/10000-2857/437588*x^2*(x-113/50
)*(x-121/50)*(x-49/20)*(x-1019/100)*(x-1119/100)+2857/437588*(x+1)^2*(x-113/50)
*(x-121/50)*(x-49/20)*(x-1019/100)*(x-1119/100), 2857/437588*x^2, 2857/437588*(
x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 94 Test 1 - Weifeng

>> Test
Batch: 94 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+1585961/10000
>> basis
[(x-113/50)*(x-121/50)*(x-49/20)*(x-1019/100)*(x-1119/100), -(x-113/50)*(x-121/50)*(x-49/20)*(x-1019/100)*(x-1119/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -8.987870
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 94 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 94 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+1585961/10000
>> basis
[(x-113/50)*(x-121/50)*(x-49/20)*(x-1019/100)*(x-1119/100), -(x-113/50)*(x-121/50)*(x-49/20)*(x-1019/100)*(x-1119/100), -x^2+1485961/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.063055
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14162
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [1585961/10000*(1/900719925474099200000*
226730884303183925042819736761322281516935^(1/2)-\
24984600438978559593983654724093288629671/
2091223298173342034833472219134348812815524495761701580308480000*x*
226730884303183925042819736761322281516935^(1/2)-\
8575643573416862509313701127474043259933776054174143727001648651407827969/14826\
3510757429527055018921232098235675173493243279635906560000000000000000000000000\
0000000000000*x^2*226730884303183925042819736761322281516935^(1/2)+
25014196258065653783432639077273404291736237975284717524999157048891/3116165545\
8410710615418437408422661018602915045048320000000000000000000000000000000000000\
0000*x^3*226730884303183925042819736761322281516935^(1/2))^2+1585961/10000*(1/
7591091750780391785216968767083429666568882854055917358415872000000000000000000\
000*x*6165762647405330710156657190980583665430607674988742204344039993764397322\
5251371083186718469159453469842284666906665670708003201823324161083617620336299\
5162050326^(1/2)+38065111928126517789838751830011505562323556292843943777929714\
416553054366096596448378067700097126962603974980674473/694203159032739257547156\
2960914306305626279961292503760458901331832767887283435082388525581247421802406\
3817461867841464591130012495240191504750634785505527401345724609684989542400000\
0000000000000000000*x^2*6165762647405330710156657190980583665430607674988742204\
3440399937643973225251371083186718469159453469842284666906665670708003201823324\
1610836176203362995162050326^(1/2)-31039076457099044242178218368573255176355474\
884389299284728077346518772926429533749197983016545000556231603114437/350174138\
7248434268167533986479771598734788540849367045196648004248663308761532008612330\
6090111531380185927629679590589978507674524274022629686674406498282064361342862\
622720000000000000000000000000*x^3*61657626474053307101566571909805836654306076\
7498874220434403999376439732252513710831867184691594534698422846669066656707080\
032018233241610836176203362995162050326^(1/2))^2+1585961/10000*(1/1139921959407\
9366167101897000102811472001186520674576114338235577443700312211177794776331570\
8659215068970278345348064498452244026166870016000000000000000000000000000000000\
00000*x^2*287256526380518720664146249240057872420482864457051654790192663269348\
1924708936686772628921708461280924212670378546243984999818812161768383138052319\
1870406026352631655730288513684670817797924815270874813606356177459927661953293\
5929529604820548116713838152350309113567508409153140482966070550900200772282097\
307106353790139722393177875359976093390^(1/2)-585542643716146182330628337045043\
4700152533440558266584923136672945235107170983251273412535293220608118837876925\
7256918321443151995288878934615893562769216003975956920027438798307426856757374\
21504161708197074303/9246184359039379894958672587477591202169153205848388525949\
6768349085187408061452667088343908646639024532543859366539424050181553329328143\
3260891525551446502199615622397428846660970236459436397893664354412457603570433\
1776485568059071751513275586290194589646680441018906167991617408334643680699371\
3198233534171332003839716396207342266031880337925079040000000000000000000000000\
0000000000000000*x^3*2872565263805187206641462492400578724204828644570516547901\
9266326934819247089366867726289217084612809242126703785462439849998188121617683\
8313805231918704060263526316557302885136846708177979248152708748136063561774599\
2766195329359295296048205481167138381523503091135675084091531404829660705509002\
00772282097307106353790139722393177875359976093390^(1/2))^2+7821747890393602968\
9591248611730784398321118870490963868873498852116746244104786098455517783960163\
8550543731479158541834222061095297432546366790110419696638629889419006546312041\
7162669089718010975420937356750804641966335500191416205196261588749985319080649\
3041697402534666964037825037163465211570743/29352966813914191568541429370282162\
2088089559876190718841481421459189823580260168988102647846059937674181730670872\
3851155555512304193508866681771972282555057847909260337992117951969864011390048\
5947280571906055736503748216341869982667921194843499397120000000000000000000000\
000000000000000000000000000000000000*x^6, 
67428645115569245054193124596673001681/3245185536584267267831560205762560000]
>> Degree size
6
>> Succeeds RealCertify Batch: 94 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 95 Test 1 - Weifeng
>> input polynomial
-x^2+6345001/10000
>> basis
[(x-639/100)*(x-179/25)*(x-2299/100), (-x+639/100)*(x-179/25)*(x-2299/100)]
>> Time taken
0.419000
">> Sums of squares multipliers", [-x^2+6345001/10000-2279/419257*x^2*(x-639/
100)*(x-179/25)*(x-2299/100)-2279/419257*(x+1)^2*(-x+639/100)*(x-179/25)*(x-\
2299/100), 2279/419257*x^2, 2279/419257*(x+1)^2]
>> Degree size
5
>> Succeeds Weifeng Batch: 95 Test 1 - Weifeng

>> Test
Batch: 95 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+6345001/10000
>> basis
[(x-639/100)*(x-179/25)*(x-2299/100), (-x+639/100)*(x-179/25)*(x-2299/100)]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: -119.225551
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 95 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 95 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+6345001/10000
>> basis
[(x-639/100)*(x-179/25)*(x-2299/100), (-x+639/100)*(x-179/25)*(x-2299/100), -x^2+6245001/10000]
[x]
Polynomial system with 1 variables and degree at most 4
Size of monomial basis = 3
Number of moment variables = 5
SDPA starts...
Numerical SDP ended
Lower bound: 0.015765
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 6680
time= 0.117000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [6345001/10000*(1/28823037615171174400*
602899757011771401071218468203722605495^(1/2)-\
27896802228481676515348931359127265771/
71177840126066065797216735090418087197785628627710129471488000*x*
602899757011771401071218468203722605495^(1/2)-171408660905243005633691675192883\
0223914933517841060077207726853517622367995156969/31545534737715216834289439583\
577065753380559251768239718400000000000000000000000000000000000000000000000*x^2
*602899757011771401071218468203722605495^(1/2))^2+6345001/10000*(1/646052551428\
407640766247722671658306629233853476213549432832000000000000000000000000*x*3101\
5765184342732787921565217019373069887040135483376415521474700458385683759809100\
166021149733821730866010611277209359909894972429881598256348879227124075161014^
(1/2)-3244440201424434901032371615600901534655346975880058965532293181331798716\
840500397088465572063185178120413415641936033/595979044381084734129418565732771\
8862334375617331107511964977471996559649494350774757938036069992997047656183122\
1339961312799023126855038833850912211937394148691275388856764989440000000000000\
000000000000*x^2*31015765184342732787921565217019373069887040135483376415521474\
7004583856837598091001660211497338217308660106112772093599098949724298815982563\
48879227124075161014^(1/2))^2+7312158094110837576785723418267574005925484450523\
3034294881460070430444927840651603802639042447569223792963090806183270110769403\
8728015664238996660907893996609037404577054660752900587061807588073499612951593\
8547143602513478806854918094457/29152669227744071473197101601427457230980235126\
3081884139640181419193080366756242183625189722737026915171155275252794231472208\
7961506544903153254400000000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000*x^4, 8197223460065741175215578603010689/
12379400392853802748991242240000]
>> Degree size
4
>> Succeeds RealCertify Batch: 95 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 96 Test 1 - Weifeng
>> input polynomial
-x^2+7406209/10000
>> basis
[(x-42/25)*(x-409/50)*(x-227/25)*(x-2503/100)*(x-2603/100), -(x-42/25)*(x-409/50)*(x-227/25)*(x-2503/100)*(x-2603/100)]
>> Time taken
1.787000
">> Sums of squares multipliers", [-x^2+7406209/10000-1003/2078616*x^2*(x-42/25
)*(x-409/50)*(x-227/25)*(x-2503/100)*(x-2603/100)+1003/2078616*(x+1)^2*(x-42/25
)*(x-409/50)*(x-227/25)*(x-2503/100)*(x-2603/100), 1003/2078616*x^2, 1003/
2078616*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 96 Test 1 - Weifeng

>> Test
Batch: 96 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+7406209/10000
>> basis
[(x-42/25)*(x-409/50)*(x-227/25)*(x-2503/100)*(x-2603/100), -(x-42/25)*(x-409/50)*(x-227/25)*(x-2503/100)*(x-2603/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.874394
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 96 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 96 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+7406209/10000
>> basis
[(x-42/25)*(x-409/50)*(x-227/25)*(x-2503/100)*(x-2603/100), -(x-42/25)*(x-409/50)*(x-227/25)*(x-2503/100)*(x-2603/100), -x^2+7306209/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.013507
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14596
time= 0.118000secs
>> Time taken
0.008000
">> Sums of squares multipliers", [7406209/10000*(1/3602879701896396800000*
4770618118174473096741744018045483310083535^(1/2)-\
6137504977531724473079948978774104560517/
14080379439898619995566127749168856495578620198449417016678809600*x*
4770618118174473096741744018045483310083535^(1/2)-\
7100807188960688349719121758718195296079666043595146224674738404244639524107/19\
4240795320257765238623722327955304639903525116551403615027200000000000000000000\
00000000000000000000*x^2*4770618118174473096741744018045483310083535^(1/2)+
191217692042993850156175703132989462975186838457100627026022787095807/327834380\
7882308027606021554481437545171617576491417600000000000000000000000000000000000\
00000000*x^3*4770618118174473096741744018045483310083535^(1/2))^2+7406209/10000
*(1/994512872039719758021753458319131159756306048596743186508939264000000000000\
0000000000*x*206151174653189853725081069282663816962821479909111660030485961327\
6745806570330628852712987242338851419567512947637457109167528982603969400371247\
24761269621037563954374^(1/2)+2059735630473099299417896266629094459063967073349\
7113110073947721295712331435963029428245267962089733714360341914489233/18568447\
0670019173040153578442378711897021780663144154607010723531741318590490727674376\
6972790013552156422049381568361529024653823137011779634040602566652182752711454\
8466494266754990080000000000000000000000000*x^2*2061511746531898537250810692826\
6381696282147990911166003048596132767458065703306288527129872423388514195675129\
4763745710916752898260396940037124724761269621037563954374^(1/2)-13799950997577\
6086160152182586091825099495342204270715073789799461203611934216929058215712131\
655090588420297278171/100285838906257802360237783428676512854023849806638810547\
7502584827089371042544047430347684106680517471987112100978171979226972300207575\
443595524027240739321697625035883621122048000000000000000000000000*x^3*20615117\
4653189853725081069282663816962821479909111660030485961327674580657033062885271\
2987242338851419567512947637457109167528982603969400371247247612696210375639543\
74^(1/2))^2+7406209/10000*(1/43986252565466364217163145749865097204274493665487\
9119444841038848497750590040980158270390154811569530948202116912728945810936813\
7150314022174720000000000000000000000000000000000000000*x^2*5186641591508481003\
6475154336845879605372643759799168801580186127243274333857902320566193395111785\
6200483319922757335868574976675699996664020918632330951290333431203676530925229\
2310870637251022860817659178715591458793624458494781022036149329564044918654218\
3546042457938866864895632656241740630707707881815979080934225233765117314672903\
4544772159247972623982910^(1/2)-74697463706091833559567756510517929954434852630\
6194806304873769412273783828805670606563973083639511744237931616423416623295998\
3413799976050707343934580862576675607697473202100245475999761038752497748748361\
298617478086503/962498617540058822204054376508383690268222852869081753564428603\
2461800973745175205419963010396982337485562952757063177448510152262111030695586\
1294683462874592973023807742516003733357118719300835414221579723100699322163006\
3641608553097076972048718532813528677485311762927084567123796638362806251906825\
4758506036989564167303153721408551609573861809155410545113825280000000000000000\
000000000000000000000000000*x^3*51866415915084810036475154336845879605372643759\
7991688015801861272432743338579023205661933951117856200483319922757335868574976\
6756999966640209186323309512903334312036765309252292310870637251022860817659178\
7155914587936244584947810220361493295640449186542183546042457938866864895632656\
2417406307077078818159790809342252337651173146729034544772159247972623982910^(1
/2))^2+757504205715594401983332966969447219982749433294520874543171046171457579\
0385297212874340545053200892845192935459722081156559289962659978084109394202554\
5625342380235406724710148790473187869192594587695400032344497448051523736675154\
4073405829216410839930982090385551734075716509391793511521864701201057313426961
/328699212316910972815325486217519509099908002190071228855052234175315621589167\
3916688732593496979555229985812350137415680330506624052616642093396552959855124\
1186238003859029533506392405671605326260731269681955037374651157645452332184552\
5206003884701993926656000000000000000000000000000000000000000000000000000000000\
000*x^6, 198182372164721738328054938178545859609/
202824096036516704239472512860160000]
>> Degree size
6
>> Succeeds RealCertify Batch: 96 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 97 Test 1 - Weifeng
>> input polynomial
-x^2+2413441/10000
>> basis
[(x-13/5)*(x-317/100)*(x-981/100)*(x-587/50)*(x-1321/100), -(x-13/5)*(x-317/100)*(x-981/100)*(x-587/50)*(x-1321/100)]
>> Time taken
1.849000
">> Sums of squares multipliers", [-x^2+2413441/10000-3701/806031*x^2*(x-13/5)*
(x-317/100)*(x-981/100)*(x-587/50)*(x-1321/100)+3701/806031*(x+1)^2*(x-13/5)*(x
-317/100)*(x-981/100)*(x-587/50)*(x-1321/100), 3701/806031*x^2, 3701/806031*(x+
1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 97 Test 1 - Weifeng

>> Test
Batch: 97 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+2413441/10000
>> basis
[(x-13/5)*(x-317/100)*(x-981/100)*(x-587/50)*(x-1321/100), -(x-13/5)*(x-317/100)*(x-981/100)*(x-587/50)*(x-1321/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -5.515428
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 97 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 97 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+2413441/10000
>> basis
[(x-13/5)*(x-317/100)*(x-981/100)*(x-587/50)*(x-1321/100), -(x-13/5)*(x-317/100)*(x-981/100)*(x-587/50)*(x-1321/100), -x^2+2313441/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.041439
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14300
time= 0.116000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [2413441/10000*(1/1801439850948198400000*
1056231768660197591211191992964501024263615^(1/2)+
13609553122599934957311251375480593058671/
9742018559498129012503657071603087822315745761601899116625920000*x*
1056231768660197591211191992964501024263615^(1/2)-\
10999553609508284416561146004524992773579790474486185864888314622973959601/5255\
2939238221326430289086609810951077142810299902220828672000000000000000000000000\
00000000000000*x^2*1056231768660197591211191992964501024263615^(1/2)-\
177135265651837161226042336428138318438408438938202870893114732440723/290334777\
8170743290336029848934140152429266500950425600000000000000000000000000000000000\
0000000*x^3*1056231768660197591211191992964501024263615^(1/2))^2+2413441/10000*
(1/5381420977993863826461602468844641390299423774709987412856012800000000000000\
0000000*x*183390222036598644094889932951970437872919646678885804165537703541030\
7215596341743020263005010712935478875896552554538508013956666319528046382075156\
3204315635601334^(1/2)-63569786759811538194261928008860281858621302695414391319\
329004428844483366427784939966899226775297165542297307051691/516197584767136360\
9988273161819558834490505209588544586446569517637109961391544024112605345768863\
2934569935336478480060568650237826849555384669201478518972495278363655518856151\
040000000000000000000000000*x^2*18339022203659864409488993295197043787291964667\
8885804165537703541030721559634174302026300501071293547887589655255453850801395\
66663195280463820751563204315635601334^(1/2)-2932174426322842686680888669538712\
7253085053242458547168203428634583992793968982102362959270576004138735301008796\
9/36502952064538255659505741095412651110442706317236604337412068398470624863455\
2704395322409930283221653230206612011394947589339892258217932500395785616217866\
4899690551322869760000000000000000000000000*x^3*1833902220365986440948899329519\
7043787291964667888580416553770354103072155963417430202630050107129354788758965\
525545385080139566663195280463820751563204315635601334^(1/2))^2+2413441/10000*(
1/71990218127060021795665010100670941328405110232985681532649447328159796652395\
4800953632804081116028819975022619412352103192900623642551910400000000000000000\
000000000000000000000*x^2*35174723021428984860493368677099664759940566292710168\
7907387935416763489983104989691683514024966467823437822162784755394270290479939\
7250803132547339234675955780290442731978748658656004078254730083950462377125236\
8405636826425822423391818105721770098679673495924909634092217828765115283243044\
4440530577193420022167279617264081045317605458270889230115^(1/2)-14941644233377\
3116339778619769430656706045531183213484014645891015960437863741369647619823160\
7096176178385205486655712764980289091881862183208976430973312362812719584286540\
2608269463662021909521221007703643027221543/32049689191375570460225316524092815\
3079243754635087374165707174118936063346011307468971183364676912789966895905495\
8254646971885778976021352261431246794345691652603681553676814496081271211119354\
2827654705632504093085165107311383858037597757278717234487465783425906740165961\
3547623499733723385762574601624019870524794776705770741272687420437431749737185\
28000000000000000000000000000000000000000000*x^3*351747230214289848604933686770\
9966475994056629271016879073879354167634899831049896916835140249664678234378221\
6278475539427029047993972508031325473392346759557802904427319787486586560040782\
5473008395046237712523684056368264258224233918181057217700986796734959249096340\
9221782876511528324304444405305771934200221672796172640810453176054582708892301\
15^(1/2))^2+1282199869309032249925053811979749304792925516318057706127026328798\
6583919562053636517586461622310380169239866445430073943089384252228619464695788\
8448065330730997112001382632235494397943246749513521359771029479402600068378428\
6315982824253318195023817814046055028407094429931901047072016426957083426924451\
23/3268871338097493172079161487301565811944412437171326892226471683817681341460\
8840811261181609384758068872819197996720268637739764050924444701429786551130085\
0960576437810556644818951077699229540543935150155564362708559211285936724602876\
5216811539895418880000000000000000000000000000000000000000000000000000000000000\
0*x^6, 49252154440536255432818709883299706281/
811296384146066816957890051440640000]
>> Degree size
6
>> Succeeds RealCertify Batch: 97 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 98 Test 1 - Weifeng
>> input polynomial
-x^2+16379/25
>> basis
[(x-583/100)*(x-42/5)*(x-356/25)*(x-117/5)*(x-122/5), (-x+583/100)*(x-42/5)*(x-356/25)*(x-117/5)*(x-122/5)]
>> Time taken
1.826000
">> Sums of squares multipliers", [-x^2+16379/25-4163/9758997*x^2*(x-583/100)*(
x-42/5)*(x-356/25)*(x-117/5)*(x-122/5)-4163/9758997*(x+1)^2*(-x+583/100)*(x-42/
5)*(x-356/25)*(x-117/5)*(x-122/5), 4163/9758997*x^2, 4163/9758997*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 98 Test 1 - Weifeng

>> Test
Batch: 98 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+16379/25
>> basis
[(x-583/100)*(x-42/5)*(x-356/25)*(x-117/5)*(x-122/5), (-x+583/100)*(x-42/5)*(x-356/25)*(x-117/5)*(x-122/5)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.208382
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 98 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 98 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+16379/25
>> basis
[(x-583/100)*(x-42/5)*(x-356/25)*(x-117/5)*(x-122/5), (-x+583/100)*(x-42/5)*(x-356/25)*(x-117/5)*(x-122/5), -x^2+16129/25]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.015266
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 13804
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [16379/25*(1/90071992547409920000*
2965709964887280281316509088070089388335^(1/2)-\
74336691679941389573395585195993217293/
5470769271912579994063815963886062006376767483521255079936000*x*
2965709964887280281316509088070089388335^(1/2)-\
165284958756269052912254215135153697481451907662133308422776791564409671/100142\
2068901242476583695877408494907644894807926505472000000000000000000000000000000\
0000000000*x^2*2965709964887280281316509088070089388335^(1/2)+
22070928189461001092571818262799349037367895010975882065051328482569/1019010184\
6889741707712069086518254142956375113728000000000000000000000000000000000000000\
00000*x^3*2965709964887280281316509088070089388335^(1/2))^2+16379/25*(1/
569697888086040164456502543592388214126873490731523112960000000000000000000000*
x*69622951752304325588761530088818631637468067746400106633746186696901666268905\
6061552628855646516501537994379454910171594886348622713588895529170052600630^(1
/2)+139940816756095653877982601059879046364341058388930153428502892220723266115\
92732478032851565343811259419269953961/7054962740282515100500231328548949808711\
1170796707064512660706333848405026424836098128439569152055165243034306388640248\
784657458246937644183791636078869218304899992780800000000000000000000000000*x^2
*696229517523043255887615300888186316374680677464001066337461866969016662689056\
061552628855646516501537994379454910171594886348622713588895529170052600630^(1/
2)-1253159411777778388677585760494242566486288692788316302621048274105844245258\
03956853723285264983790531944708801/4594476823758888072450646203748018679991772\
9317919817335310307969211570931184133242568941250236395491946539223079074586586\
666639475385241546723087582144107001990348800000000000000000000000000*x^3*69622\
9517523043255887615300888186316374680677464001066337461866969016662689056061552\
628855646516501537994379454910171594886348622713588895529170052600630^(1/2))^2+
16379/25*(1/3242888865192223538447672004772537972001527400804524808954126773125\
9026673837828632361269403976533821886489796527910931525743411200000000000000000\
00000000000000000000000*x^2*422686896378847195816653320115916604872784698869416\
7301771738162659122421827987958634177185119625540457120593382577505289086771755\
9407436626819441684048719775143958986763378886257403948835420472270994374745715\
9375017132924450078301768703549787967368754068659413509784660665057088291815437\
333247064016272684184235312053382729458990^(1/2)-177876746062680422864168548437\
6186576031145896748049920639893959822764301266079394554062696348852858377177371\
3485491401570848589025742978680901718043575296489857698643526414335777765217451\
79922411284672668629093/1170456239448686333730880229136986915454859597857366628\
2592136423820159052987954215596352024472669148602062810846227686598938161169954\
8074112375269435036722399405847171598018024617297277491613624056604339405980884\
4652820642169246532643632420787166205365575065651312010118076912486245049385830\
5334114844816700966084754037126205706344595456000000000000000000000000000000000\
00000000000*x^3*422686896378847195816653320115916604872784698869416730177173816\
2659122421827987958634177185119625540457120593382577505289086771755940743662681\
9441684048719775143958986763378886257403948835420472270994374745715937501713292\
4450078301768703549787967368754068659413509784660665057088291815437333247064016\
272684184235312053382729458990^(1/2))^2+749369915837295105610797627262688973083\
7123818234273622327548966371310632550165486473901173498299781361200838087046227\
9114187846884469696441287925290565748795627534644610515001624327941589465411381\
1462011223193812794771630029168697025065952993583523129858498638154300559838194\
35010838827132018641/1686135930395138306792214517021914962576462427862068293909\
6750955349499189987251001725657841001068668803459206679795568518756072480070874\
7083420350252035280874393776549021108151991854932322325968290172772013632306296\
1193958753429964532054228992000000000000000000000000000000000000000000000000000\
0000000000*x^6, 499590518622483987352856780440225011/
507060240091291760598681282150400]
>> Degree size
6
>> Succeeds RealCertify Batch: 98 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 99 Test 1 - Weifeng
>> input polynomial
-x^2+644651/625
>> basis
[(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25), -(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25)]
>> Time taken
1.692000
">> Sums of squares multipliers", [-x^2+644651/625-181/17146717*x^2*(x-73/25)*(
x-37/4)*(x-641/50)*(x-333/25)*(x-749/25)+181/17146717*(x+1)^2*(x-73/25)*(x-37/4
)*(x-641/50)*(x-333/25)*(x-749/25), 181/17146717*x^2, 181/17146717*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 99 Test 1 - Weifeng

>> Test
Batch: 99 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+644651/625
>> basis
[(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25), -(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -1.180989
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 99 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 99 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+644651/625
>> basis
[(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25), -(x-73/25)*(x-37/4)*(x-641/50)*(x-333/25)*(x-749/25), -x^2+638401/625]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.009698
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14234
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [644651/625*(1/180143985094819840000*
10575516999529667498831868123928657527607^(1/2)-\
7357896493178514931600559343139996611203/
1950838555374885128987892445523374228618637283407351114629120000*x*
10575516999529667498831868123928657527607^(1/2)-\
296396881631333002653786009553477387870805698555067246962320920729992527419/562\
1954912964888244660975871529081701576261863347138330624000000000000000000000000\
0000000000000000*x^2*10575516999529667498831868123928657527607^(1/2)+
1213400388900255459797856491471864477394630025504691050398807048449/33033817928\
1977958467178122144425157223682051932160000000000000000000000000000000000000000\
000*x^3*10575516999529667498831868123928657527607^(1/2))^2+644651/625*(1/143922\
04577190113906332098231114449156035230370168674126397440000000000000000000000*x
*332184645195101616771008031835823127184457367740488864792551039191139924336830\
9893655115526189356159233277362211369950128079464959054796032746548141431323141\
05686^(1/2)-4931133583408234192956633385863786385698443628666373157810196744181\
44377740499732109527236779883356034745859033581/2992053288637720131646426170394\
0171051778817737656004023915329098597222695286416869513146585495877624168384468\
0279238642913820033172233582702167994124722304887757651605204448051200000000000\
00000000000000*x^2*332184645195101616771008031835823127184457367740488864792551\
0391911399243368309893655115526189356159233277362211369950128079464959054796032\
74654814143132314105686^(1/2)-3587202400114673805255982675845244804717087260968\
6568669697997818887289578481493111336271729955235604490978183/52742655409983642\
5171848828843756527523821870241981602587984694935660442191455265038989147642675\
8189556051623286356751787785879371026718733049637325339290436498297874022400000\
00000000000000000000*x^3*332184645195101616771008031835823127184457367740488864\
7925510391911399243368309893655115526189356159233277362211369950128079464959054\
79603274654814143132314105686^(1/2))^2+644651/625*(1/86341140574239257900492446\
8097445038554252720720958054200996318749572641785214466123753197224584774540686\
81859926235260264524147589120000000000000000000000000000000000000000*x^2*677089\
0490722915141546152527804747261269410374963002983542014665926255699567828771793\
7738515463482802003192592470749560591713712601343784371223953333974627904665062\
9780271013524675267347832356949282125491687355147244050402167541190621168229861\
1717280792766942820382526922552014147568991533721672242505732308607728241445508\
5339100750379662^(1/2)-32189364574567106924737037088508364061203174489281009090\
2516591641337604733601578806943273819211545214252594957179898163446177765640966\
8609744130167540552848814879972756779882557721155709895881547645892755165994472\
1/11632301288980924772289574392619648064279074002267678009705351692842253510950\
9703634328423795246099566744862188900530079739112321687005855810913121224500477\
0177221805297627067642101584911598651835106023865666044085660184403154094770580\
3277890271772769361193189105377982136880170249095254616414185379197240543200308\
835945620367693071717188314941358080000000000000000000000000000000000000000000*
x^3*677089049072291514154615252780474726126941037496300298354201466592625569956\
7828771793773851546348280200319259247074956059171371260134378437122395333397462\
7904665062978027101352467526734783235694928212549168735514724405040216754119062\
1168229861171728079276694282038252692255201414756899153372167224250573230860772\
82414455085339100750379662^(1/2))^2+7026572320866626293189616916125857650266316\
7375139502279631169319296086936003692279415020410771908614377943765911246324455\
2491412624855664801192396277950144125700931282575734352381364021260708343066584\
5513725323906498278106719750716175914566696979350652681778599235833283715052881\
9576742263999073329921/99086524916727120253770321302013436293785420741818998930\
2122734263420957874841753954435747807053863668906980109409306057076376220345371\
4040076379475497807001577561648120530260156908415295034078575009785390910425696\
4577551432380099436507824422634756505600000000000000000000000000000000000000000\
0000000000000000000*x^6, 456921992167935896919724201103899779/
792281625142643375935439503360000]
>> Degree size
6
>> Succeeds RealCertify Batch: 99 Test 1 - RealCertify with Archimedean polynomial

>> Test
Batch: 100 Test 1 - Weifeng
>> input polynomial
-x^2+6505961/10000
>> basis
[(x-141/100)*(x-269/50)*(x-79/10)*(x-232/25)*(x-2331/100), -(x-141/100)*(x-269/50)*(x-79/10)*(x-232/25)*(x-2331/100)]
>> Time taken
1.816000
">> Sums of squares multipliers", [-x^2+6505961/10000-105/4780366*x^2*(x-141/
100)*(x-269/50)*(x-79/10)*(x-232/25)*(x-2331/100)+105/4780366*(x+1)^2*(x-141/
100)*(x-269/50)*(x-79/10)*(x-232/25)*(x-2331/100), 105/4780366*x^2, 105/4780366
*(x+1)^2]
>> Degree size
7
>> Succeeds Weifeng Batch: 100 Test 1 - Weifeng

>> Test
Batch: 100 Test 1 - RealCertify without Archimedean polynomial
>> input polynomial
-x^2+6505961/10000
>> basis
[(x-141/100)*(x-269/50)*(x-79/10)*(x-232/25)*(x-2331/100), -(x-141/100)*(x-269/50)*(x-79/10)*(x-232/25)*(x-2331/100)]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: -4.736077
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... Warning, Matrix is not positive-definite
>> Timeout RealCertify Batch: 100 Test 1 - RealCertify without Archimedean polynomial

>> Test
Batch: 100 Test 1 - RealCertify with Archimedean polynomial
>> input polynomial
-x^2+6505961/10000
>> basis
[(x-141/100)*(x-269/50)*(x-79/10)*(x-232/25)*(x-2331/100), -(x-141/100)*(x-269/50)*(x-79/10)*(x-232/25)*(x-2331/100), -x^2+6405961/10000]
[x]
Polynomial system with 1 variables and degree at most 6
Size of monomial basis = 4
Number of moment variables = 7
SDPA starts...
Numerical SDP ended
Lower bound: 0.015372
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.
Cholesky decomposition ... done.

 Exact sum of squares decomposition
bitsize= 14388
time= 0.121000secs
>> Time taken
0.009000
">> Sums of squares multipliers", [6505961/10000*(1/90071992547409920000*
2638941585610557942366133606065904832247^(1/2)-\
5779766815574496629466702621195053066671/
389439040441817976609320995426318974203923013586032542089216000*x*
2638941585610557942366133606065904832247^(1/2)-\
1662411971447199450391117054423129979539609988250075722348569868596416013253/10\
0679207205450158314671303142102941661307381526358837428224000000000000000000000\
000000000000000000*x^2*2638941585610557942366133606065904832247^(1/2)+
5378199684854087785354378115233404217523530462510029301928358871141/23212375667\
2035441761804220334481581571056254855413760000000000000000000000000000000000000\
000*x^3*2638941585610557942366133606065904832247^(1/2))^2+6505961/10000*(1/6903\
717065516582284434603644029915999632506161807463137935360000000000000000000000*
x*12294186138233387280395245793786234334911888761856529996405640223725579810523\
1454553456954678111122579349939185002188941689364652402913615427700841794032043\
188590^(1/2)+100275258414032134957366507871932452844704792132603884228518670467\
34116448940106584523538522979649554153116181303117/6614641404190716608458042589\
2376617980315101845055236813871248576632346121816986752902556662544097487416863\
6998050413271353383039655633034047248021508920525018542860578800449617920000000\
0000000000000000*x^2*1229418613823338728039524579378623433491188876185652999640\
5640223725579810523145455345695467811112257934993918500218894168936465240291361\
5427700841794032043188590^(1/2)-17241048940318287036766980101148935845166627635\
701519383076321886781706359535505212009870942966108353388223450891/762528556986\
8982393751717758419157982231422288542988132022838199072244606348353466102381722\
9934321948075999494699985129562725211500918123477136739081542356888383921365975\
040000000000000000000000000*x^3*12294186138233387280395245793786234334911888761\
8565299964056402237255798105231454553456954678111122579349939185002188941689364\
652402913615427700841794032043188590^(1/2))^2+6505961/10000*(1/3571766186798243\
1405435583510824919731057013765234237936043796343408468316857193521167630960213\
6719816926757085836133692583008462307453829120000000000000000000000000000000000\
00000*x^2*455533672219011939851354383879560576436983139820688060067979842175500\
5762082796719280765490672155793316296056129954886832415944831963222697174639375\
9393843884825086883363783729748308765604957806495884103506451295056185018287141\
5796241935667625846334275809524100254543162342732135434218372275862723253874996\
62084214165004055673778427126558822665192438^(1/2)-2146959408109529263739240077\
1075909428849235188442930044275663249493730509187817684027963413705154182608346\
3725896725739204858920785757222474974438300861507571041536486667590392243898383\
175284184119315800723497560761/300346042694433489519731391708357228593853055903\
4028235878403007188907671775078450432745364585125169428540168144862160626373149\
8537674224010417670977497323067762629334633350125515021330127190704862356919145\
8635680950389031308114027930553829202828938357986928706150828014911450737326690\
3117135321025767713393803814662490512309872893897025751321191506493466214400000\
00000000000000000000000000000000000*x^3*455533672219011939851354383879560576436\
9831398206880600679798421755005762082796719280765490672155793316296056129954886\
8324159448319632226971746393759393843884825086883363783729748308765604957806495\
8841035064512950561850182871415796241935667625846334275809524100254543162342732\
13543421837227586272325387499662084214165004055673778427126558822665192438^(1/2
))^2+10691095699465434712693608058878959376620252303105266236039593406260319149\
9743217931054134162918242035700574510026184625103343914164860743057222949338803\
8729255928014126444710640109309745343164803492421639012900368401472970875559328\
909460620926069914342440548648071384868123649229798427621868280314923187/454495\
7695450397059716974993436867089390354652945888486057536525861694179867796736424\
5636919172965815569717965118886912666859887728948020132581034088108712923684348\
1616486475120314277043740087949070428705320571652620706953848614666710357503363\
14230569157473075200000000000000000000000000000000000000000000000000000*x^6, 
395656297129230429058068648122979466649/3245185536584267267831560205762560000]
>> Degree size
6
>> Succeeds RealCertify Batch: 100 Test 1 - RealCertify with Archimedean polynomial
